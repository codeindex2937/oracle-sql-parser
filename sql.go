// Code generated by goyacc -o sql.go -l sql.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

import (
	"strings"

	"github.com/codeindex2937/oracle-sql-parser/ast"
	"github.com/codeindex2937/oracle-sql-parser/ast/element"
)

func nextQuery(yylex interface{}) string {
	lex := yylex.(*yyLexImpl)
	tc := lex.scanner.TC
	query := string(lex.scanner.Text[lex.lastPos:tc])
	lex.lastPos = tc
	return strings.TrimSpace(query)
}

type yySymType struct {
	yys      int
	nothing  struct{}
	i        int
	b        bool
	str      string
	node     ast.Node
	anything interface{}
}

const _action = 57346
const _add = 57347
const _all = 57348
const _alter = 57349
const _as = 57350
const _asc = 57351
const _by = 57352
const _char = 57353
const _cluster = 57354
const _column = 57355
const _compress = 57356
const _create = 57357
const _date = 57358
const _decimal = 57359
const _default = 57360
const _delete = 57361
const _desc = 57362
const _drop = 57363
const _float = 57364
const _for = 57365
const _from = 57366
const _identified = 57367
const _immediate = 57368
const _increment = 57369
const _index = 57370
const _initial = 57371
const _integer = 57372
const _into = 57373
const _is = 57374
const _level = 57375
const _long = 57376
const _maxextents = 57377
const _modify = 57378
const _nocompress = 57379
const _not = 57380
const _null = 57381
const _number = 57382
const _on = 57383
const _online = 57384
const _optimal = 57385
const _order = 57386
const _pctfree = 57387
const _raw = 57388
const _rename = 57389
const _restrict = 57390
const _row = 57391
const _rowid = 57392
const _rows = 57393
const _select = 57394
const _set = 57395
const _smallInt = 57396
const _start = 57397
const _table = 57398
const _to = 57399
const _unique = 57400
const _update = 57401
const _validate = 57402
const _varchar = 57403
const _varchar2 = 57404
const _with = 57405
const _advanced = 57406
const _always = 57407
const _archive = 57408
const _at = 57409
const _attributes = 57410
const _auto = 57411
const _basic = 57412
const _bfile = 57413
const _binaryDouble = 57414
const _binaryFloat = 57415
const _bitmap = 57416
const _blob = 57417
const _blockchain = 57418
const _buffer_pool = 57419
const _byte = 57420
const _cache = 57421
const _capacity = 57422
const _cascade = 57423
const _cell_flash_cache = 57424
const _character = 57425
const _check = 57426
const _checkpoint = 57427
const _clob = 57428
const _collate = 57429
const _columns = 57430
const _commit = 57431
const _constraint = 57432
const _constraints = 57433
const _continue = 57434
const _creation = 57435
const _critical = 57436
const _cycle = 57437
const _data = 57438
const _day = 57439
const _dec = 57440
const _decrypt = 57441
const _deferrable = 57442
const _deferred = 57443
const _definition = 57444
const _delete_all = 57445
const _disable = 57446
const _disable_all = 57447
const _distribute = 57448
const _dml = 57449
const _double = 57450
const _duplicate = 57451
const _duplicated = 57452
const _E = 57453
const _enable = 57454
const _enable_all = 57455
const _encrypt = 57456
const _exceptions = 57457
const _extended = 57458
const _external = 57459
const _filesystem_like_logging = 57460
const _flash_cache = 57461
const _force = 57462
const _foreign = 57463
const _freelist = 57464
const _freelists = 57465
const _full = 57466
const _G = 57467
const _generated = 57468
const _global = 57469
const _groups = 57470
const _heap = 57471
const _high = 57472
const _identity = 57473
const _ilm = 57474
const _immutable = 57475
const _indexing = 57476
const _initially = 57477
const _initrans = 57478
const _inmemory = 57479
const _int = 57480
const _interval = 57481
const _invalidate = 57482
const _invalidation = 57483
const _invisible = 57484
const _K = 57485
const _keep = 57486
const _key = 57487
const _levels = 57488
const _limit = 57489
const _local = 57490
const _locking = 57491
const _logging = 57492
const _low = 57493
const _M = 57494
const _maxsize = 57495
const _maxtrans = 57496
const _maxvalue = 57497
const _medium = 57498
const _memcompress = 57499
const _memoptimize = 57500
const _metadata = 57501
const _minextents = 57502
const _minvalue = 57503
const _month = 57504
const _multivalue = 57505
const _national = 57506
const _nchar = 57507
const _nclob = 57508
const _next = 57509
const _no = 57510
const _nocache = 57511
const _nocycle = 57512
const _nologging = 57513
const _nomaxvalue = 57514
const _nominvalue = 57515
const _none = 57516
const _noorder = 57517
const _noparallel = 57518
const _norely = 57519
const _nosort = 57520
const _novalidate = 57521
const _numeric = 57522
const _nvarchar2 = 57523
const _organization = 57524
const _P = 57525
const _parallel = 57526
const _parent = 57527
const _partial = 57528
const _partition = 57529
const _pctincrease = 57530
const _pctused = 57531
const _peverse = 57532
const _policy = 57533
const _precision = 57534
const _preserve = 57535
const _primary = 57536
const _priority = 57537
const _private = 57538
const _purge = 57539
const _query = 57540
const _range = 57541
const _read = 57542
const _real = 57543
const _recycle = 57544
const _references = 57545
const _reject = 57546
const _rely = 57547
const _salt = 57548
const _scope = 57549
const _second = 57550
const _segment = 57551
const _service = 57552
const _sharded = 57553
const _sharding = 57554
const _sort = 57555
const _spatial = 57556
const _storage = 57557
const _store = 57558
const _subpartition = 57559
const _substitutable = 57560
const _T = 57561
const _tablespace = 57562
const _temporary = 57563
const _time = 57564
const _timestamp = 57565
const _unlimited = 57566
const _unusable = 57567
const _unused = 57568
const _urowid = 57569
const _usable = 57570
const _using = 57571
const _value = 57572
const _varying = 57573
const _visible = 57574
const _write = 57575
const _XMLType = 57576
const _year = 57577
const _zone = 57578
const _singleQuoteStr = 57579
const _doubleQuoteStr = 57580
const _nonquotedIdentifier = 57581
const _not_deferrable = 57582
const _no_inmemory = 57583
const _no_duplicate = 57584
const _row_level_locking = 57585
const _drop_index = 57586
const _intNumber = 57587

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"_action",
	"_add",
	"_all",
	"_alter",
	"_as",
	"_asc",
	"_by",
	"_char",
	"_cluster",
	"_column",
	"_compress",
	"_create",
	"_date",
	"_decimal",
	"_default",
	"_delete",
	"_desc",
	"_drop",
	"_float",
	"_for",
	"_from",
	"_identified",
	"_immediate",
	"_increment",
	"_index",
	"_initial",
	"_integer",
	"_into",
	"_is",
	"_level",
	"_long",
	"_maxextents",
	"_modify",
	"_nocompress",
	"_not",
	"_null",
	"_number",
	"_on",
	"_online",
	"_optimal",
	"_order",
	"_pctfree",
	"_raw",
	"_rename",
	"_restrict",
	"_row",
	"_rowid",
	"_rows",
	"_select",
	"_set",
	"_smallInt",
	"_start",
	"_table",
	"_to",
	"_unique",
	"_update",
	"_validate",
	"_varchar",
	"_varchar2",
	"_with",
	"_advanced",
	"_always",
	"_archive",
	"_at",
	"_attributes",
	"_auto",
	"_basic",
	"_bfile",
	"_binaryDouble",
	"_binaryFloat",
	"_bitmap",
	"_blob",
	"_blockchain",
	"_buffer_pool",
	"_byte",
	"_cache",
	"_capacity",
	"_cascade",
	"_cell_flash_cache",
	"_character",
	"_check",
	"_checkpoint",
	"_clob",
	"_collate",
	"_columns",
	"_commit",
	"_constraint",
	"_constraints",
	"_continue",
	"_creation",
	"_critical",
	"_cycle",
	"_data",
	"_day",
	"_dec",
	"_decrypt",
	"_deferrable",
	"_deferred",
	"_definition",
	"_delete_all",
	"_disable",
	"_disable_all",
	"_distribute",
	"_dml",
	"_double",
	"_duplicate",
	"_duplicated",
	"_E",
	"_enable",
	"_enable_all",
	"_encrypt",
	"_exceptions",
	"_extended",
	"_external",
	"_filesystem_like_logging",
	"_flash_cache",
	"_force",
	"_foreign",
	"_freelist",
	"_freelists",
	"_full",
	"_G",
	"_generated",
	"_global",
	"_groups",
	"_heap",
	"_high",
	"_identity",
	"_ilm",
	"_immutable",
	"_indexing",
	"_initially",
	"_initrans",
	"_inmemory",
	"_int",
	"_interval",
	"_invalidate",
	"_invalidation",
	"_invisible",
	"_K",
	"_keep",
	"_key",
	"_levels",
	"_limit",
	"_local",
	"_locking",
	"_logging",
	"_low",
	"_M",
	"_maxsize",
	"_maxtrans",
	"_maxvalue",
	"_medium",
	"_memcompress",
	"_memoptimize",
	"_metadata",
	"_minextents",
	"_minvalue",
	"_month",
	"_multivalue",
	"_national",
	"_nchar",
	"_nclob",
	"_next",
	"_no",
	"_nocache",
	"_nocycle",
	"_nologging",
	"_nomaxvalue",
	"_nominvalue",
	"_none",
	"_noorder",
	"_noparallel",
	"_norely",
	"_nosort",
	"_novalidate",
	"_numeric",
	"_nvarchar2",
	"_organization",
	"_P",
	"_parallel",
	"_parent",
	"_partial",
	"_partition",
	"_pctincrease",
	"_pctused",
	"_peverse",
	"_policy",
	"_precision",
	"_preserve",
	"_primary",
	"_priority",
	"_private",
	"_purge",
	"_query",
	"_range",
	"_read",
	"_real",
	"_recycle",
	"_references",
	"_reject",
	"_rely",
	"_salt",
	"_scope",
	"_second",
	"_segment",
	"_service",
	"_sharded",
	"_sharding",
	"_sort",
	"_spatial",
	"_storage",
	"_store",
	"_subpartition",
	"_substitutable",
	"_T",
	"_tablespace",
	"_temporary",
	"_time",
	"_timestamp",
	"_unlimited",
	"_unusable",
	"_unused",
	"_urowid",
	"_usable",
	"_using",
	"_value",
	"_varying",
	"_visible",
	"_write",
	"_XMLType",
	"_year",
	"_zone",
	"_singleQuoteStr",
	"_doubleQuoteStr",
	"_nonquotedIdentifier",
	"_not_deferrable",
	"_no_inmemory",
	"_no_duplicate",
	"_row_level_locking",
	"_drop_index",
	"_intNumber",
	"';'",
	"'.'",
	"','",
	"'('",
	"')'",
	"'='",
	"'*'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 11,
	56, 325,
	-2, 461,
	-1, 321,
	250, 694,
	-2, 697,
	-1, 622,
	1, 354,
	158, 354,
	185, 354,
	246, 354,
	-2, 359,
}

const yyPrivate = 57344

const yyLast = 2007

var yyAct = [...]int16{
	29, 849, 345, 926, 344, 897, 859, 542, 940, 541,
	786, 298, 929, 907, 948, 758, 937, 865, 757, 208,
	540, 431, 861, 760, 28, 7, 690, 209, 687, 642,
	804, 778, 715, 938, 229, 609, 624, 523, 765, 428,
	474, 448, 215, 584, 780, 261, 357, 433, 759, 434,
	325, 473, 224, 358, 333, 442, 324, 335, 427, 222,
	274, 288, 585, 308, 452, 276, 1028, 294, 452, 586,
	1011, 561, 716, 667, 650, 452, 283, 989, 719, 452,
	1019, 954, 934, 730, 975, 729, 724, 670, 664, 669,
	663, 279, 924, 894, 562, 294, 662, 275, 661, 543,
	834, 660, 553, 659, 452, 452, 604, 603, 281, 452,
	833, 527, 292, 832, 452, 909, 519, 452, 831, 500,
	725, 462, 452, 461, 453, 727, 830, 426, 278, 425,
	829, 424, 918, 423, 374, 753, 373, 751, 974, 850,
	666, 649, 290, 908, 293, 748, 747, 742, 740, 739,
	738, 737, 736, 735, 680, 679, 909, 728, 672, 671,
	668, 654, 726, 652, 646, 723, 722, 916, 794, 792,
	290, 598, 583, 918, 596, 560, 503, 581, 294, 481,
	479, 974, 933, 914, 908, 946, 935, 477, 875, 839,
	582, 563, 795, 555, 933, 580, 720, 480, 478, 550,
	553, 277, 752, 718, 793, 476, 658, 558, 916, 656,
	717, 556, 282, 639, 578, 576, 574, 568, 209, 499,
	498, 494, 209, 28, 914, 492, 218, 491, 559, 231,
	227, 721, 490, 565, 489, 547, 487, 486, 257, 485,
	482, 564, 321, 910, 419, 418, 554, 548, 291, 912,
	341, 330, 318, 280, 297, 271, 271, 917, 915, 307,
	911, 913, 858, 919, 691, 816, 567, 280, 226, 217,
	546, 997, 566, 560, 315, 635, 317, 544, 14, 810,
	289, 998, 328, 327, 910, 990, 332, 331, 273, 549,
	912, 555, 862, 802, 342, 32, 31, 343, 917, 915,
	805, 911, 913, 295, 919, 558, 777, 693, 289, 556,
	315, 809, 665, 648, 10, 692, 965, 964, 963, 890,
	836, 209, 11, 417, 422, 313, 559, 1016, 13, 372,
	813, 295, 808, 693, 316, 439, 812, 807, 959, 805,
	749, 692, 746, 745, 554, 744, 450, 743, 741, 525,
	678, 438, 676, 657, 655, 653, 273, 354, 346, 1034,
	651, 317, 1023, 599, 353, 647, 597, 638, 633, 996,
	566, 632, 468, 470, 375, 789, 631, 315, 630, 905,
	561, 601, 600, 593, 451, 590, 589, 579, 577, 575,
	573, 522, 444, 244, 446, 447, 863, 1051, 435, 862,
	934, 454, 1015, 562, 872, 359, 459, 629, 543, 1050,
	243, 553, 435, 903, 295, 32, 31, 847, 750, 673,
	497, 350, 351, 501, 502, 302, 303, 506, 472, 508,
	1020, 429, 768, 437, 466, 615, 296, 465, 674, 595,
	213, 212, 521, 520, 221, 1044, 348, 456, 874, 526,
	873, 1040, 571, 889, 351, 529, 634, 259, 303, 27,
	1048, 957, 707, 895, 677, 315, 995, 886, 762, 761,
	209, 805, 1013, 510, 683, 1049, 572, 507, 534, 509,
	518, 505, 515, 514, 560, 884, 1018, 265, 763, 528,
	513, 819, 488, 801, 885, 1024, 1010, 870, 893, 956,
	563, 24, 555, 863, 935, 458, 675, 254, 550, 537,
	538, 273, 539, 594, 762, 761, 558, 25, 512, 23,
	556, 430, 602, 1008, 801, 888, 799, 292, 276, 365,
	587, 588, 774, 637, 763, 591, 592, 559, 436, 1007,
	225, 616, 565, 825, 547, 628, 822, 24, 299, 366,
	564, 12, 436, 21, 279, 554, 548, 255, 496, 293,
	627, 887, 930, 25, 254, 1053, 275, 617, 640, 619,
	18, 643, 978, 931, 253, 1006, 22, 626, 1038, 546,
	949, 566, 1045, 225, 1036, 951, 544, 1033, 704, 32,
	31, 278, 364, 223, 1032, 636, 1004, 620, 549, 1037,
	844, 1005, 320, 319, 340, 1035, 26, 367, 794, 792,
	645, 329, 1046, 950, 1009, 1031, 1030, 817, 1017, 1003,
	713, 311, 336, 310, 764, 681, 347, 32, 31, 32,
	31, 437, 795, 683, 927, 999, 286, 1029, 921, 19,
	553, 712, 851, 682, 793, 272, 770, 689, 267, 868,
	814, 775, 26, 230, 20, 703, 612, 702, 701, 708,
	709, 855, 686, 291, 277, 252, 688, 878, 1001, 823,
	764, 228, 820, 612, 879, 818, 608, 688, 699, 683,
	734, 337, 716, 881, 876, 463, 698, 969, 719, 971,
	263, 797, 339, 794, 792, 209, 724, 970, 800, 824,
	952, 779, 821, 755, 754, 517, 445, 266, 796, 284,
	475, 798, 787, 560, 790, 711, 788, 795, 338, 443,
	484, 449, 233, 214, 976, 553, 986, 941, 1027, 793,
	725, 555, 985, 643, 880, 727, 533, 455, 869, 781,
	783, 961, 694, 837, 696, 558, 495, 803, 806, 556,
	867, 811, 835, 493, 441, 815, 440, 899, 210, 877,
	827, 826, 206, 828, 613, 262, 559, 728, 15, 852,
	977, 881, 726, 840, 882, 723, 722, 784, 216, 531,
	516, 613, 842, 841, 554, 947, 285, 1026, 838, 710,
	871, 790, 483, 788, 860, 625, 848, 898, 560, 695,
	309, 627, 853, 856, 922, 993, 720, 606, 605, 268,
	566, 843, 769, 718, 684, 789, 555, 251, 504, 239,
	717, 923, 700, 618, 211, 270, 992, 251, 846, 1043,
	558, 988, 349, 301, 556, 248, 300, 732, 256, 287,
	269, 721, 899, 772, 900, 536, 857, 892, 733, 3,
	240, 559, 944, 920, 943, 962, 904, 250, 967, 925,
	771, 241, 1041, 901, 207, 621, 532, 250, 994, 554,
	421, 220, 883, 942, 714, 790, 790, 788, 788, 420,
	945, 854, 936, 773, 697, 939, 932, 614, 511, 432,
	264, 232, 731, 641, 469, 566, 552, 551, 545, 370,
	789, 369, 464, 368, 260, 958, 17, 983, 840, 981,
	864, 1042, 1025, 1039, 953, 1022, 1000, 973, 928, 1014,
	960, 987, 557, 966, 791, 785, 866, 706, 623, 782,
	705, 622, 460, 355, 457, 209, 352, 258, 979, 16,
	524, 756, 685, 968, 982, 607, 790, 980, 788, 860,
	984, 972, 955, 991, 902, 845, 767, 766, 906, 611,
	610, 569, 471, 219, 776, 467, 1, 896, 242, 891,
	356, 306, 305, 304, 334, 535, 247, 312, 314, 1002,
	249, 323, 326, 322, 246, 245, 1012, 238, 237, 236,
	33, 235, 234, 378, 377, 384, 383, 408, 382, 381,
	380, 1021, 379, 376, 2, 9, 8, 6, 5, 4,
	30, 530, 644, 570, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1047, 276, 0, 0, 0, 0, 1052,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	363, 55, 56, 57, 58, 59, 360, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 81, 82, 83,
	84, 85, 86, 87, 88, 89, 90, 362, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
	144, 145, 146, 147, 148, 149, 150, 151, 152, 153,
	154, 155, 156, 157, 158, 159, 160, 161, 162, 163,
	361, 165, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 199, 200, 201, 202, 203,
	33, 204, 205, 0, 32, 31, 0, 0, 371, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 81, 82, 83,
	84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
	144, 145, 146, 147, 148, 149, 150, 151, 152, 153,
	154, 155, 156, 157, 158, 159, 160, 161, 162, 163,
	164, 165, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 199, 200, 201, 202, 203,
	33, 204, 205, 0, 32, 31, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 81, 82, 83,
	84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
	144, 145, 146, 147, 148, 149, 150, 151, 152, 153,
	154, 155, 156, 157, 158, 159, 160, 161, 162, 163,
	164, 165, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 199, 200, 201, 202, 203,
	0, 204, 205, 386, 32, 31, 0, 0, 407, 391,
	0, 0, 0, 0, 402, 0, 0, 0, 0, 0,
	0, 0, 393, 0, 0, 0, 405, 0, 0, 0,
	0, 0, 401, 0, 0, 0, 0, 0, 406, 0,
	0, 0, 414, 0, 0, 0, 395, 0, 0, 0,
	0, 0, 0, 388, 399, 0, 0, 0, 0, 0,
	0, 0, 0, 413, 404, 403, 0, 410, 0, 0,
	0, 0, 0, 0, 0, 385, 0, 0, 411, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	392, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	396, 0, 0, 386, 0, 0, 0, 0, 407, 391,
	0, 0, 0, 0, 402, 0, 0, 0, 0, 0,
	0, 0, 393, 0, 0, 0, 405, 0, 0, 0,
	394, 409, 401, 0, 429, 0, 0, 0, 406, 0,
	0, 0, 414, 0, 0, 0, 395, 0, 0, 0,
	0, 0, 0, 388, 399, 0, 389, 387, 412, 0,
	0, 0, 0, 413, 404, 403, 0, 410, 0, 0,
	0, 0, 390, 400, 0, 385, 0, 0, 411, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	392, 0, 0, 397, 0, 0, 0, 0, 0, 0,
	396, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 416, 0, 0, 0, 415,
	0, 0, 0, 0, 430, 0, 398, 0, 0, 0,
	394, 409, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 389, 387, 412, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 390, 400, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 397, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 416, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 398,
}

var yyPact = [...]int16{
	307, -1000, 32, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	712, 443, 1446, 706, 307, 1446, 702, 796, 220, 219,
	-1000, -1000, 647, -1000, -1000, -1000, -1000, 736, 22, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1446, -1000, 425, 21,
	1446, 1446, -1000, -1000, -1000, 533, -1000, 1446, 641, 814,
	406, -1000, -1000, 399, -1000, 815, 1446, 245, -1000, 664,
	-1000, -1000, 290, 616, -1000, -1000, -1000, 804, -1000, 7,
	18, 696, 818, -1000, -1000, -1000, -1000, -1000, 54, -1000,
	210, 1446, -1000, 390, 813, 810, 225, -1000, 10, -188,
	759, -1000, 482, 480, -1000, -1000, -1000, -1000, 6, 4,
	82, 1446, -1000, 470, -1000, 177, 3, 458, 457, -7,
	1446, 177, 466, 2, 1446, 177, -1000, 469, 541, 630,
	600, 459, 1, 177, 1446, 1446, 165, 408, -1000, 809,
	193, 221, -1000, -1000, 382, -1000, -1000, 986, 433, 1216,
	-1000, -1000, -114, -1000, -1000, 1772, -1000, -1000, 1446, -4,
	-5, 1446, -117, -121, -1000, -1000, -1000, 1672, 298, 298,
	1446, 699, 697, 634, 541, -1000, 615, -1000, 634, 634,
	640, 1446, 640, -1000, -126, -1000, 541, 670, 229, 189,
	-1000, -1000, 320, 349, -1000, -1000, -127, -1000, -1000, -1000,
	177, 458, 457, -7, -1000, -1000, 589, -1000, 209, -1000,
	-1000, 177, 177, -1000, 1446, 623, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -44, -51, -52, -9, 709,
	-10, -12, -13, -1000, -1000, -1000, 300, -1000, -1000, -15,
	-17, -22, -24, -1000, -1000, 707, -28, -1000, 683, 323,
	-1000, -1000, -1000, -1000, -1000, -29, -30, -131, 1446, 1446,
	-74, 786, -1000, -1000, 1446, -1000, 1446, 623, -1000, -1000,
	-1000, 640, 313, 496, 312, -1000, -1000, 679, 640, -134,
	1446, 177, -1000, 146, -1000, -1000, -1000, -1000, 205, -1000,
	-139, 205, 1446, -1000, 737, 860, 669, -1000, 1446, -1000,
	827, -1000, 986, -1000, 664, -1000, -1000, 366, 19, -32,
	-1000, -1000, -1000, 239, -1000, 177, 145, -33, 144, -34,
	143, -35, 142, -54, -59, -183, -183, -183, -1000, 141,
	140, -183, -183, -1000, 138, 291, 117, 114, 137, 136,
	298, -143, -144, -1000, 769, -1000, 1772, -1000, 289, 655,
	-1000, 206, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 298,
	-1000, -1000, -1000, -1000, 736, 795, -1000, 640, -1000, -1000,
	-1000, -1000, 451, 859, -1000, 754, 623, -1000, -1000, 366,
	-1000, -1000, -1000, -1000, 389, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 133, 131, 126, 123, -1000, -1000, -1000,
	-1000, 211, -1000, 409, 122, -1000, -36, 177, 1446, -1000,
	289, -1000, -1000, -86, 120, 63, 115, -87, 110, -89,
	109, -40, 108, -43, -147, -1000, -1000, -152, -160, 62,
	-90, -161, -91, -92, 183, 216, 344, 107, 256, 105,
	-95, -96, -1000, 298, 271, -1000, 775, 563, 516, -1000,
	-1000, -1000, 96, 734, 574, 794, 640, -1000, -1000, 205,
	533, 442, 450, 748, -1000, 626, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 490, -1000, -1000, -1000, 653,
	-1000, -165, -1000, 828, 638, -1000, -1000, -97, -1000, -98,
	-99, -100, -1000, -101, -1000, -102, 103, -103, 102, -1000,
	100, -1000, 98, -1000, 97, -1000, -104, -105, -1000, -1000,
	95, -1000, -1000, -1000, 182, -1000, -113, -47, -115, -1000,
	-1000, -1000, 298, 1446, -1000, 476, -1000, -1000, 203, -1000,
	-1000, 773, -1000, -1000, 515, 852, 825, 472, -1000, -1000,
	57, -1000, -1000, -1000, 533, -1000, 595, 177, 598, -1000,
	622, 505, -1000, -1000, 43, -1000, 94, 94, 92, 87,
	55, 91, 85, 522, 226, 473, 528, 525, -1000, 366,
	1446, -1000, -1000, -1000, 552, -1000, -1000, -1000, -1000, -1000,
	-1000, -120, -1000, -124, -132, -137, -140, -1000, -1000, -150,
	-1000, 695, 75, 686, 747, -60, -1000, 476, -1000, 430,
	298, -1000, 772, -1000, 455, -1000, -1000, 803, 180, 70,
	-110, 511, 761, 546, -1000, -1000, -1000, 831, -1000, 15,
	366, -1000, -1000, 155, 621, -1000, -1000, 310, -1000, 351,
	-1000, -1000, -1000, 234, 232, -1000, -61, 658, 474, 572,
	632, 723, -1000, -1000, -1000, 342, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 74, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 476, -1000,
	-1000, -1000, -1000, -1000, -1000, 336, -157, 255, 738, 1446,
	-1000, 298, -1000, -1000, -1000, 176, 846, -1000, -1000, -1000,
	129, -110, 507, 765, -1000, 790, -158, 489, 177, 502,
	-1000, -1000, 405, -55, 263, -1000, -1000, 680, 680, -1000,
	659, -1000, 177, 840, 838, 1446, -1000, -1000, 720, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 476, -1000, -1000, -64, 744, -1000, 532, 532,
	-169, -1000, 293, -1000, 177, -1000, 88, -1000, 678, 845,
	73, -1000, 72, -1000, -1000, -1000, 71, -1000, -1000, -1000,
	-1000, -110, 850, 1446, -1000, -1000, -1000, 584, 263, -111,
	701, 415, -1000, 1446, 405, -67, -1000, 262, 680, -1000,
	-1000, -1000, -1000, 662, 808, -173, 40, 823, -1000, -1000,
	-1000, 787, 864, -1000, -1000, -1000, -1000, 260, -1000, -1000,
	-1000, 124, 36, -1000, -1000, -1000, -1000, 504, -1000, -1000,
	-1000, -1000, -1000, 562, 1446, 445, 416, -1000, -1000, -180,
	-68, -1000, 502, -1000, 268, -1000, -1000, 159, 420, -1000,
	-170, -1000, -1000, -1000, -1000, -1000, -1000, 200, -1000, -110,
	253, 718, -184, -1000, -1000, -1000, -1000, -1000, -1000, 486,
	464, -1000, -1000, 440, -1000, -1000, 116, 454, 448, -1000,
	-1000, -1000, 237, 856, -1000, 806, -1000, 395, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1446, -1000, -1000, 250, 276, -1000, -1000, -1000, 391, -1000,
	-1000, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1013, 39, 1012, 57, 1011, 34, 1010, 1009, 849,
	1008, 1007, 25, 1006, 1005, 1004, 19, 459, 0, 11,
	2, 58, 1003, 1002, 1000, 999, 998, 997, 996, 995,
	994, 993, 992, 991, 989, 988, 410, 987, 985, 984,
	983, 56, 982, 981, 50, 980, 978, 977, 53, 976,
	43, 51, 40, 975, 4, 61, 55, 974, 54, 973,
	972, 971, 970, 46, 405, 60, 48, 969, 18, 15,
	23, 968, 393, 38, 967, 5, 14, 966, 965, 964,
	963, 962, 961, 35, 28, 960, 959, 26, 1, 958,
	13, 957, 956, 955, 954, 952, 945, 942, 941, 21,
	41, 37, 940, 42, 939, 937, 936, 934, 933, 932,
	931, 930, 929, 928, 36, 927, 33, 6, 3, 926,
	925, 16, 10, 9, 7, 924, 924, 922, 921, 919,
	22, 918, 12, 917, 916, 915, 913, 912, 911, 910,
	17, 909, 907, 8, 906, 904, 903, 902, 45, 901,
	899, 44, 20, 898, 897, 896, 894, 893, 31, 29,
	892, 891, 890, 889, 888, 887, 884, 883, 881, 47,
	49, 881, 879, 874, 32, 30, 872, 871, 444, 59,
	52, 870,
}

var yyR1 = [...]uint8{
	0, 77, 15, 15, 9, 9, 9, 9, 9, 9,
	8, 16, 16, 54, 54, 20, 78, 78, 17, 17,
	79, 79, 19, 19, 18, 18, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 10,
	32, 32, 33, 33, 35, 35, 36, 36, 36, 38,
	81, 82, 47, 47, 48, 46, 51, 51, 52, 1,
	1, 3, 3, 2, 2, 83, 83, 83, 85, 85,
	86, 86, 86, 86, 88, 88, 88, 89, 89, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 84, 84, 91, 92, 92, 93, 93, 94,
	94, 95, 95, 95, 67, 67, 68, 68, 39, 39,
	39, 40, 40, 41, 42, 96, 96, 97, 97, 98,
	98, 43, 43, 44, 45, 45, 6, 6, 49, 49,
	49, 49, 55, 55, 58, 58, 57, 57, 4, 4,
	5, 5, 56, 56, 37, 34, 34, 34, 34, 34,
	34, 71, 71, 72, 72, 72, 100, 100, 101, 102,
	102, 102, 103, 103, 11, 104, 104, 104, 104, 104,
	104, 104, 104, 105, 105, 105, 105, 105, 107, 107,
	59, 60, 108, 109, 53, 53, 110, 110, 110, 110,
	113, 113, 114, 114, 111, 111, 111, 111, 111, 115,
	115, 115, 121, 121, 116, 116, 122, 122, 122, 122,
	122, 126, 126, 123, 123, 123, 123, 123, 124, 124,
	124, 125, 125, 125, 125, 125, 125, 125, 128, 128,
	128, 128, 128, 128, 128, 129, 129, 117, 117, 117,
	131, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 133, 133, 133, 133, 133, 133, 134, 134, 137,
	137, 137, 137, 137, 138, 138, 138, 138, 138, 135,
	135, 135, 135, 136, 136, 130, 130, 139, 139, 140,
	140, 118, 118, 118, 118, 119, 119, 119, 141, 142,
	143, 120, 120, 112, 61, 61, 62, 62, 63, 63,
	12, 144, 144, 144, 144, 145, 146, 146, 149, 151,
	151, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 153, 153, 153, 153, 153, 153,
	154, 154, 155, 155, 155, 150, 156, 156, 157, 157,
	159, 160, 160, 160, 158, 158, 147, 147, 147, 148,
	148, 148, 13, 14, 161, 161, 162, 162, 21, 21,
	21, 50, 50, 22, 22, 22, 22, 22, 22, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 24,
	24, 24, 24, 24, 24, 24, 25, 25, 25, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 27,
	27, 28, 28, 28, 28, 29, 29, 29, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 31, 66, 69, 69, 70, 70, 70, 70, 70,
	99, 163, 163, 163, 163, 163, 169, 169, 170, 170,
	164, 164, 164, 165, 165, 165, 165, 166, 166, 166,
	167, 167, 167, 168, 168, 73, 171, 171, 74, 75,
	76, 76, 76, 76, 76, 64, 64, 65, 65, 65,
	65, 65, 65, 65, 127, 173, 173, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	175, 176, 176, 176, 176, 176, 176, 176, 80, 80,
	80, 80, 177, 177, 178, 178, 106, 106, 106, 106,
	179, 180, 87, 87, 172, 172, 172, 181, 181,
}

var yyR2 = [...]int8{
	0, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	0, 1, 3, 1, 3, 1, 1, 3, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 5,
	1, 1, 1, 1, 1, 2, 1, 1, 1, 6,
	0, 0, 1, 3, 1, 8, 0, 1, 2, 0,
	1, 0, 1, 1, 1, 0, 1, 1, 2, 4,
	4, 5, 6, 8, 0, 2, 3, 1, 2, 3,
	4, 3, 2, 1, 2, 1, 1, 1, 2, 1,
	1, 1, 0, 2, 4, 0, 2, 0, 3, 0,
	1, 0, 1, 2, 0, 1, 1, 2, 4, 4,
	1, 1, 3, 1, 6, 2, 1, 1, 1, 0,
	1, 1, 3, 2, 7, 8, 0, 1, 5, 4,
	4, 4, 2, 3, 0, 1, 1, 2, 2, 1,
	0, 1, 0, 2, 5, 2, 5, 5, 7, 5,
	1, 1, 2, 5, 7, 5, 0, 1, 2, 0,
	2, 1, 0, 1, 8, 0, 2, 2, 1, 1,
	1, 1, 2, 0, 3, 3, 4, 3, 0, 2,
	1, 7, 0, 0, 0, 2, 0, 1, 1, 2,
	4, 4, 4, 4, 0, 4, 3, 2, 5, 0,
	3, 3, 0, 1, 1, 2, 1, 2, 3, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 3, 4, 4, 5, 4, 1, 0, 2,
	3, 3, 2, 3, 3, 1, 2, 1, 3, 2,
	5, 0, 3, 3, 4, 4, 3, 4, 4, 2,
	2, 0, 2, 2, 2, 2, 2, 0, 3, 0,
	1, 3, 2, 2, 0, 3, 3, 3, 3, 0,
	1, 2, 1, 0, 2, 0, 1, 1, 2, 5,
	4, 0, 2, 2, 2, 3, 3, 2, 2, 0,
	0, 4, 6, 0, 0, 3, 1, 3, 1, 1,
	9, 0, 1, 1, 1, 0, 1, 1, 3, 1,
	2, 1, 1, 1, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 3, 3, 1,
	2, 2, 1, 2, 1, 6, 0, 1, 1, 3,
	2, 0, 1, 1, 0, 1, 0, 1, 1, 0,
	2, 2, 5, 5, 0, 2, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 5, 5, 4, 5, 5, 1, 4, 4, 1,
	4, 6, 1, 4, 1, 1, 1, 2, 4, 1,
	1, 4, 5, 4, 7, 4, 7, 10, 7, 1,
	4, 1, 1, 1, 1, 1, 1, 4, 4, 5,
	5, 5, 4, 5, 6, 5, 6, 1, 4, 6,
	1, 4, 6, 1, 4, 6, 1, 1, 1, 2,
	1, 1, 2, 3, 2, 1, 2, 1, 2, 1,
	6, 0, 1, 2, 1, 2, 1, 1, 2, 2,
	0, 1, 1, 0, 3, 5, 3, 0, 1, 1,
	0, 1, 1, 0, 3, 5, 0, 3, 2, 2,
	1, 1, 2, 2, 2, 2, 1, 5, 6, 7,
	9, 9, 11, 4, 4, 1, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 3, 1, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	2, 0, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 2, 1, 4, 1, 4, 0, 1, 1, 2,
	3, 3, 1, 1, 0, 3, 4, 0, 1,
}

var yyChk = [...]int16{
	-1000, -77, -15, -9, -8, -10, -11, -12, -13, -14,
	7, 15, 244, 21, 246, 56, -104, -144, 127, 196,
	211, 110, 133, 76, 58, 74, 163, -17, -19, -18,
	-7, 239, 238, 4, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
	140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
	150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
	190, 191, 192, 193, 194, 195, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
	210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
	220, 221, 222, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 233, 235, 236, 56, -9, -16, -19,
	56, 28, 221, 221, 76, -103, 42, 247, -16, -80,
	-177, -178, -179, 168, -180, 158, 247, -16, -17, -6,
	120, -19, -161, 81, -32, -33, -34, -35, -37, 5,
	36, 47, -71, -36, -72, -38, -39, -49, 21, -45,
	53, 13, -178, 168, 158, 158, 23, -19, -105, 212,
	-145, -148, 101, 26, -162, 197, 91, -36, 5, 36,
	21, 249, -64, -66, -65, 90, 58, 194, 121, 84,
	249, 90, 194, 58, 13, 90, -72, 21, -55, 226,
	88, 194, 58, 90, 13, 249, 226, -20, -19, 158,
	23, 23, 200, 233, -59, -60, -61, 249, 251, 41,
	141, 141, -47, -48, -46, -20, -65, -18, 249, 145,
	145, 249, -40, -43, -41, -44, -42, -20, -18, 145,
	249, -20, -18, -58, -57, -4, 81, 140, 88, 92,
	145, 249, -18, -20, -54, -20, -55, 218, 38, 23,
	200, 233, -106, -179, -180, -108, -62, -63, -48, -64,
	90, 194, 121, 84, 159, 96, 116, 174, -146, -149,
	-150, 12, -16, 250, 248, -21, -22, -30, -31, -23,
	-24, -25, -26, -28, -29, 83, 11, 165, 61, 164,
	180, 17, 98, 30, 138, 54, 108, 201, 234, 62,
	181, 40, 22, 73, 72, 34, 46, 16, -27, 139,
	75, 86, 166, 71, 50, 227, 223, -54, 249, 249,
	-172, -181, -20, 250, 248, 250, 248, -21, -2, 142,
	232, -99, -163, -169, -170, 100, 240, 135, -99, -54,
	57, 57, -56, 85, -4, 91, -56, -56, -100, 81,
	-54, -100, 248, 250, -58, 67, 218, -107, 185, -180,
	-109, 250, 248, 96, -147, 228, 225, -78, -18, -156,
	-18, -81, -48, -51, -52, 87, 249, 231, 249, 231,
	249, 231, 249, 83, 11, 249, 249, 249, 192, 249,
	249, 249, 249, 46, 249, 63, 235, 97, 249, 249,
	250, -54, -54, 250, 32, -41, -20, -44, -20, -51,
	-100, -164, 205, 177, -170, -169, 101, 26, -100, 250,
	-20, -18, 245, -101, -102, 144, 244, 250, -101, -20,
	-5, 42, 6, 67, -16, -53, 18, -63, -148, -151,
	-152, -123, -124, 42, 220, -153, 213, 178, 190, 232,
	142, -154, -155, 45, 189, 136, 154, -127, 150, 171,
	118, 14, 37, 134, 184, 176, 215, 247, 249, -82,
	-1, 213, -18, 245, 249, 245, 249, 245, 249, 245,
	249, 231, 249, 231, -50, 245, 252, -50, -50, 245,
	245, -50, -50, 245, 222, 148, 57, 249, 57, 249,
	245, 245, -99, 250, 250, 39, 38, -96, 21, -83,
	-85, -86, 18, 126, -165, 229, -99, -103, 28, -100,
	146, 6, -110, -113, -114, 41, -52, -152, -18, 18,
	245, 245, 245, 245, 245, 64, 186, 124, 245, 249,
	-18, -157, -159, -20, -3, -2, 250, 245, 250, 78,
	11, 245, 250, 245, 250, 245, 249, 245, 249, 250,
	248, 250, 248, 250, 248, 250, 78, 11, 250, 250,
	248, 250, 250, 236, 222, 162, 245, 208, 245, 250,
	250, -99, -73, 203, 39, -97, 99, -84, 114, 131,
	-87, 168, 245, 237, 8, 65, 10, -166, 112, 104,
	28, -100, -101, -6, 146, -111, -115, 12, 209, -114,
	41, 89, 151, 130, -173, -174, 29, 167, 160, 35,
	153, 188, 123, 122, 43, 77, 119, 82, 114, 250,
	248, -160, 9, 20, -83, 250, 250, 250, 250, 250,
	250, 245, 250, 245, 245, 245, 245, 250, 250, 245,
	236, 250, 249, 250, -99, -16, -98, -68, -69, -66,
	-70, 39, 38, 58, 194, -73, -91, -92, 229, 39,
	131, 8, 18, -167, 60, 179, -79, 249, -158, -18,
	-151, -6, -112, -116, 182, -120, -122, 117, -123, 220,
	-124, -125, 14, 49, 13, 37, -18, 93, 89, 21,
	193, 19, 250, -174, -175, 245, -175, 245, 245, 224,
	224, -175, 245, 245, 128, -175, 39, 144, 202, 18,
	144, 174, 18, 144, 174, 18, -158, -159, -84, 250,
	250, 250, 250, 250, 250, 57, 245, 57, 41, 249,
	-69, -70, -99, 39, 145, -93, 25, 237, -87, -88,
	249, 131, 8, 41, -168, 115, -12, 15, 247, -117,
	-122, -130, 137, 241, -139, -140, -119, 129, 28, 117,
	187, -18, 53, 216, 216, 249, 26, 101, 193, 102,
	102, 51, 51, -176, 143, 152, 125, 219, 183, 111,
	245, -67, -68, 162, 250, 208, -74, -75, 59, 19,
	-54, -99, -94, 237, 10, 250, -89, -90, 55, 27,
	155, 172, 161, 173, 95, 170, 79, 169, 44, 175,
	-88, 131, 39, 31, 250, -18, -118, 132, -131, -132,
	157, 168, -130, 249, 137, 241, -140, -121, -116, -121,
	-143, 68, -18, 14, 14, -54, 249, 41, -76, 48,
	81, 53, 168, -76, 250, -95, 206, 168, -18, 250,
	-90, 63, 10, 245, 245, 245, -88, 8, -16, 103,
	113, 105, -130, -133, 249, 195, 23, 69, 157, -54,
	-132, -141, -117, -142, -143, 70, 64, -128, 23, 250,
	245, -75, 39, 18, 4, 206, 245, 147, 245, 131,
	-134, 106, -54, 174, 151, 156, 130, 94, 107, 198,
	80, 250, -118, 204, -129, 243, 168, 198, 66, 250,
	230, -88, -135, 109, 242, -137, 69, 10, 250, 151,
	130, 151, 130, 147, 243, 151, 130, 151, 130, -136,
	214, 6, -138, 23, 50, 187, 217, -20, 210, 199,
	18, 6, -18, 174,
}

var yyDef = [...]int16{
	10, -2, 1, 2, 4, 5, 6, 7, 8, 9,
	0, -2, 0, 0, 10, 0, 0, 0, 0, 0,
	328, 329, 330, 331, 462, 463, 464, 322, 18, 22,
	23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
	33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
	43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
	83, 84, 85, 86, 87, 88, 89, 90, 91, 92,
	93, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
	143, 144, 145, 146, 147, 148, 149, 150, 151, 152,
	153, 154, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 164, 165, 166, 167, 168, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 178, 179, 180, 181, 182,
	183, 184, 185, 186, 187, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 0, 3, 678, 11,
	0, 0, 326, 327, 332, 286, 323, 0, 514, 0,
	679, 680, 682, 0, 684, 0, 0, 333, 465, 509,
	287, 19, 516, 0, 199, 200, 201, 202, 203, 0,
	0, 0, 310, 204, 311, 206, 207, 208, 0, 270,
	0, 0, 681, 0, 0, 0, 0, 12, 454, 0,
	0, 512, 0, 0, 513, 517, 515, 205, 0, 0,
	0, 0, 305, 0, 636, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 0, 294, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 15, 0,
	0, 0, 690, 691, 686, 340, 342, 0, 0, 0,
	510, 511, 0, 212, 214, 0, 635, 592, 0, 0,
	0, -2, 0, 0, 271, 281, 273, 0, 601, 601,
	0, 0, 0, 302, 295, 296, 0, 299, 302, 302,
	316, 0, 316, 292, 0, 13, 294, 0, 0, 0,
	683, 685, 338, 687, 688, 343, 0, 456, 458, 459,
	53, 157, 84, 47, 334, 335, 0, 337, 506, 466,
	467, 0, 496, 210, 0, 216, 518, 519, 520, 523,
	524, 525, 526, 527, 528, 0, 529, 536, 0, 0,
	577, 580, 583, 586, 587, 588, 0, 590, 591, 0,
	0, 539, 542, 544, 545, 546, 0, 549, 550, 0,
	561, 562, 563, 564, 565, 566, 559, 0, 0, 0,
	0, 0, 698, 268, 0, 269, 0, 216, 283, 223,
	224, 316, 610, 602, 604, 606, 607, 0, 316, 0,
	0, 0, 289, 0, 297, 298, 290, 291, 319, 317,
	0, 319, 0, 293, 300, 0, 0, 324, 0, 689,
	344, 455, 0, 336, 509, 507, 508, 0, 16, 0,
	497, 211, 213, 219, 217, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 589, 0,
	0, 0, 0, 547, 0, 0, 0, 0, 0, 0,
	601, 0, 0, 643, 0, 272, 0, 282, 0, 225,
	306, 613, 611, 612, 603, 605, 608, 609, 307, 601,
	304, 309, 303, 313, 322, 0, 321, 316, 315, 14,
	288, 301, 0, 0, 339, 346, 0, 457, 460, 468,
	469, 471, 472, 473, 0, 476, 477, 478, 479, 480,
	481, 482, 483, 0, 0, 0, 0, 377, 378, 379,
	380, 484, 489, 0, 492, 494, 0, 0, 0, 209,
	221, 220, 218, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 521, 522, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 637, 601, 0, 695, 0, 252, 0, 276,
	226, 227, 0, 0, 617, 0, 316, 318, 320, 319,
	286, 0, -2, 347, 348, 0, 345, 470, 474, 475,
	373, 374, 375, 376, 485, 486, 490, 491, 493, 0,
	17, 0, 498, 501, 225, 222, 568, 0, 530, 0,
	0, 0, 537, 0, 572, 0, 0, 0, 0, 578,
	0, 581, 0, 584, 0, 533, 0, 0, 538, 540,
	0, 543, 548, 551, 0, 553, 0, 555, 0, 567,
	560, 638, 601, 0, 696, 279, 277, 278, 255, 275,
	228, 0, 692, 693, 0, 0, 0, 620, 618, 619,
	504, 308, 314, 284, 286, 453, 0, 0, 0, 349,
	0, 0, 487, 488, 0, 645, 0, 0, 0, 0,
	0, 0, 0, 0, 657, 0, 0, 0, 669, 504,
	0, 500, 502, 503, 252, 569, 531, 532, 570, 571,
	573, 0, 575, 0, 0, 0, 0, 534, 535, 0,
	552, 0, 0, 0, 639, 0, 274, 280, 266, 0,
	601, 595, 0, 597, 0, 599, 253, 257, 0, 0,
	234, 0, 0, 623, 621, 622, 614, 0, 616, 20,
	505, 285, 341, 435, 0, 357, 364, 0, 366, 0,
	369, 370, 381, 0, 0, 387, 0, 0, 0, 0,
	0, 0, 644, 646, 647, 671, 648, 649, 650, 651,
	652, 653, 654, 655, 0, 658, 659, 660, 661, 662,
	663, 664, 665, 666, 667, 668, 495, 499, 264, 574,
	576, 579, 582, 585, 541, 0, 0, 0, 0, 0,
	267, 601, 594, 596, 598, 259, 0, 256, 229, 230,
	0, 234, 0, 0, 600, 0, 0, 461, 0, 441,
	365, 397, 401, 435, 436, 437, 356, 362, 362, 450,
	0, 367, 0, 0, 0, 0, 360, 361, 0, 350,
	351, 353, 352, 670, 672, 673, 674, 675, 676, 677,
	656, 215, 265, 554, 558, 556, 640, 641, 0, 0,
	0, 593, 261, 260, 0, 235, 0, 237, 0, 0,
	0, 243, 0, 245, 246, 247, 0, 249, 250, 251,
	231, 234, 0, 0, 615, 21, 355, 0, 435, 411,
	0, 0, 399, 0, 401, 0, 438, 435, 363, 449,
	447, 450, 368, 382, 388, 0, 0, 0, 628, 630,
	631, 0, 0, 629, 625, 254, 262, 0, 258, 236,
	238, 0, 0, 242, 244, 248, 232, 0, 624, 442,
	443, 444, 398, 417, 0, 0, 0, 410, 409, 0,
	0, 445, 441, 446, 451, 383, 384, 386, 0, 358,
	0, 642, 632, 634, 633, 263, 239, 0, 241, 234,
	429, 419, 0, 412, 413, 414, 415, 416, 402, 403,
	406, 440, 448, 0, 385, 395, 0, 389, 392, 557,
	240, 233, 433, 430, 432, 424, 420, 0, 439, 404,
	405, 407, 408, 452, 396, 390, 391, 393, 394, 400,
	0, 431, 418, 0, 0, 422, 423, 434, 0, 421,
	425, 426, 427, 428,
}

var yyTok1 = [...]uint8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	249, 250, 252, 3, 248, 3, 247, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 246,
	3, 251,
}

var yyTok2 = [...]uint8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if yyDollar[1].node != nil {
				stmt := yyDollar[1].node
				stmt.SetText(nextQuery(yylex))
				yylex.(*yyLexImpl).result = append(yylex.(*yyLexImpl).result, stmt)
			}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if yyDollar[3].node != nil {
				stmt := yyDollar[3].node
				stmt.SetText(nextQuery(yylex))
				yylex.(*yyLexImpl).result = append(yylex.(*yyLexImpl).result, stmt)
			}
		}
	case 10:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.node = nil
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.TableName{
				Table: yyDollar[1].anything.(*element.Identifier),
			}
		}
	case 12:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = &ast.TableName{
				Schema: yyDollar[1].anything.(*element.Identifier),
				Table:  yyDollar[3].anything.(*element.Identifier),
			}
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*element.Identifier{yyDollar[1].anything.(*element.Identifier)}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*element.Identifier), yyDollar[3].anything.(*element.Identifier))
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.IndexName{
				Index: yyDollar[1].anything.(*element.Identifier),
			}
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = &ast.IndexName{
				Schema: yyDollar[1].anything.(*element.Identifier),
				Index:  yyDollar[3].anything.(*element.Identifier),
			}
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeNonQuoted,
				Value: yyDollar[1].str,
			}
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeNonQuoted,
				Value: yyDollar[1].str,
			}
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeQuoted,
				Value: yyDollar[1].str,
			}
		}
	case 199:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.AlterTableStmt{
				TableName:         yyDollar[3].anything.(*ast.TableName),
				AlterTableClauses: yyDollar[5].anything.([]ast.AlterTableClause),
			}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{yyDollar[1].anything.(ast.AlterTableClause)}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{yyDollar[1].anything.(ast.AlterTableClause)}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.AlterTableClause), yyDollar[2].anything.(ast.AlterTableClause))
		}
	case 209:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.anything = &ast.AddColumnClause{
				Columns: yyDollar[3].anything.([]*ast.ColumnDef),
			}
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// TODO
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// TODO
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*ast.ColumnDef{yyDollar[1].anything.(*ast.ColumnDef)}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*ast.ColumnDef), yyDollar[3].anything.(*ast.ColumnDef))
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 215:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			var collation *ast.Collation
			if yyDollar[3].anything != nil {
				collation = yyDollar[3].anything.(*ast.Collation)
			}
			props := []ast.ColumnProp{}
			sort := ast.ColumnProp(yyDollar[4].i)
			if sort != ast.ColumnPropEmpty {
				props = append(props, sort)
			}
			invisible := ast.ColumnProp(yyDollar[5].i)
			if invisible != ast.ColumnPropEmpty {
				props = append(props, invisible)
			}

			var constraints []*ast.InlineConstraint
			if yyDollar[8].anything != nil {
				constraints = yyDollar[8].anything.([]*ast.InlineConstraint)
			}

			yyVAL.anything = &ast.ColumnDef{
				ColumnName:  yyDollar[1].anything.(*element.Identifier),
				Datatype:    yyDollar[2].anything.(element.Datatype),
				Collation:   collation,
				Props:       props,
				Constraints: constraints,
			}
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.Collation{Name: yyDollar[2].anything.(*element.Identifier)}
		}
	case 219:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropEmpty)
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropSort)
		}
	case 221:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropEmpty)
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropInvisible)
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropVisible)
		}
	case 225:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*ast.InlineConstraint{yyDollar[1].anything.(*ast.InlineConstraint)}
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*ast.InlineConstraint), yyDollar[2].anything.(*ast.InlineConstraint))
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyDollar[3].anything.([]*ast.ColumnDef),
			}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyDollar[3].anything.([]*ast.ColumnDef),
			}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyDollar[1].anything.([]*ast.ColumnDef),
			}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*ast.ColumnDef{yyDollar[1].anything.(*ast.ColumnDef)}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*ast.ColumnDef), yyDollar[3].anything.(*ast.ColumnDef))
		}
	case 274:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			var collation *ast.Collation
			if yyDollar[3].anything != nil {
				collation = yyDollar[3].anything.(*ast.Collation)
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyDollar[1].anything.(*element.Identifier),
				Datatype:   yyDollar[2].anything.(element.Datatype),
				Collation:  collation,
				Props:      []ast.ColumnProp{},
			}
		}
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*ast.ColumnDef{yyDollar[1].anything.(*ast.ColumnDef)}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*ast.ColumnDef), yyDollar[3].anything.(*ast.ColumnDef))
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyDollar[1].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{ast.ColumnProp(yyDollar[2].i)},
			}
		}
	case 284:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			prop := ast.ColumnPropSubstitutable
			if yyDollar[7].b {
				prop = ast.ColumnPropSubstitutableForce
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyDollar[2].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{prop},
			}
		}
	case 285:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			prop := ast.ColumnPropNotSubstitutable
			if yyDollar[8].b {
				prop = ast.ColumnPropNotSubstitutableForce
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyDollar[2].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{prop},
			}
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.b = false
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.b = true
		}
	case 288:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			props := []ast.DropColumnProp{}
			if yyDollar[4].anything != nil {
				props = append(props, yyDollar[4].anything.([]ast.DropColumnProp)...)
			}
			online := ast.DropColumnProp(yyDollar[5].i)
			if online != ast.DropColumnPropEmpty {
				props = append(props, online)
			}
			yyVAL.anything = &ast.DropColumnClause{
				Type:    ast.DropColumnTypeSetUnused,
				Columns: yyDollar[3].anything.([]*element.Identifier),
				Props:   props,
			}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			props := []ast.DropColumnProp{}
			if yyDollar[3].anything != nil {
				props = append(props, yyDollar[3].anything.([]ast.DropColumnProp)...)
			}
			cc := &ast.DropColumnClause{
				Type:    ast.DropColumnTypeDrop,
				Columns: yyDollar[2].anything.([]*element.Identifier),
				Props:   props,
			}
			var checkout int
			if yyDollar[4].anything != nil {
				checkout = yyDollar[4].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			cc := &ast.DropColumnClause{
				Type: ast.DropColumnTypeDropUnusedColumns,
			}
			var checkout int
			if yyDollar[4].anything != nil {
				checkout = yyDollar[4].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			cc := &ast.DropColumnClause{
				Type: ast.DropColumnTypeDropColumnsContinue,
			}
			var checkout int
			if yyDollar[4].anything != nil {
				checkout = yyDollar[4].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = []*element.Identifier{yyDollar[2].anything.(*element.Identifier)}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].anything
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.DropColumnProp{ast.DropColumnProp(yyDollar[1].i)}
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.DropColumnProp), ast.DropColumnProp(yyDollar[2].i))
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.i = int(ast.DropColumnPropCascade)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.DropColumnPropInvalidate)
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.i = int(ast.DropColumnPropEmpty)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.DropColumnPropOnline)
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].i
		}
	case 304:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.anything = &ast.RenameColumnClause{
				OldName: yyDollar[3].anything.(*element.Identifier),
				NewName: yyDollar[5].anything.(*element.Identifier),
			}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{&ast.AddConstraintClause{
				Constraints: []*ast.OutOfLineConstraint{yyDollar[2].anything.(*ast.OutOfLineConstraint)},
			}}
		}
	case 306:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Name = yyDollar[3].anything.(*element.Identifier)
			yyVAL.anything = []ast.AlterTableClause{&ast.ModifyConstraintClause{
				Constraint: constraint,
			}}
		}
	case 307:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypePK
			yyVAL.anything = []ast.AlterTableClause{&ast.ModifyConstraintClause{
				Constraint: constraint,
			}}
		}
	case 308:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeUnique
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			yyVAL.anything = []ast.AlterTableClause{&ast.ModifyConstraintClause{
				Constraint: constraint,
			}}
		}
	case 309:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{&ast.RenameConstraintClause{
				OldName: yyDollar[3].anything.(*element.Identifier),
				NewName: yyDollar[5].anything.(*element.Identifier),
			}}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{yyDollar[1].anything.(ast.AlterTableClause)}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.AlterTableClause), yyDollar[2].anything.(ast.AlterTableClause))
		}
	case 313:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypePK
			yyVAL.anything = &ast.DropConstraintClause{
				Constraint: constraint,
			}
		}
	case 314:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeUnique
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			yyVAL.anything = &ast.DropConstraintClause{
				Constraint: constraint,
			}
		}
	case 315:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Name = yyDollar[3].anything.(*element.Identifier)
			yyVAL.anything = &ast.DropConstraintClause{
				Constraint: constraint,
			}
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 324:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.node = &ast.CreateTableStmt{
				TableName: yyDollar[4].anything.(*ast.TableName),
				RelTable:  yyDollar[6].anything.(*ast.RelTableDef),
			}
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 341:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			rd := &ast.RelTableDef{}
			if yyDollar[1].anything != nil {
				rd.TableStructs = yyDollar[1].anything.([]ast.TableStructDef)
			}
			yyVAL.anything = rd
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].anything
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].anything
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.TableStructDef{yyDollar[1].anything.(ast.TableStructDef)}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.TableStructDef), yyDollar[3].anything.(ast.TableStructDef))
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 460:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.node = &ast.CreateIndexStmt{}
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 496:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 512:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.DropIndexStmt{
				IndexName: yyDollar[2].anything.(*ast.IndexName),
			}
		}
	case 513:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.DropTableStmt{
				TableName: yyDollar[3].anything.(*ast.TableName),
			}
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.NumberOrAsterisk{Number: yyDollar[1].i}
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.NumberOrAsterisk{IsAsterisk: true}
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Char{}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Char{Size: &size}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 531:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Char{Size: &size, IsByteSize: true}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 532:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Char{Size: &size, IsCharSize: true}
			d.SetDataDef(element.DataDefChar)
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 534:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Varchar2{}
			d.Size = &size
			d.IsByteSize = true
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 535:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Varchar2{}
			d.Size = &size
			d.IsCharSize = true
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.NChar{}
			d.SetDataDef(element.DataDefNChar)
			yyVAL.anything = d
		}
	case 537:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNChar)
			yyVAL.anything = d
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNVarChar2)
			yyVAL.anything = d
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 541:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			scale := yyDollar[5].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Float{}
			d.SetDataDef(element.DataDefFloat)
			yyVAL.anything = d
		}
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefFloat)
			yyVAL.anything = d
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.BinaryFloat{}
			d.SetDataDef(element.DataDefBinaryFloat)
			yyVAL.anything = d
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.BinaryDouble{}
			d.SetDataDef(element.DataDefBinaryDouble)
			yyVAL.anything = d
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Long{}
			d.SetDataDef(element.DataDefLong)
			yyVAL.anything = d
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			d := &element.LongRaw{}
			d.SetDataDef(element.DataDefLongRaw)
			yyVAL.anything = d
		}
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Raw{Size: &size}
			d.SetDataDef(element.DataDefRaw)
			yyVAL.anything = d
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Date{}
			d.SetDataDef(element.DataDefDate)
			yyVAL.anything = d
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			d := yyDollar[1].anything.(*element.Timestamp)
			d.WithTimeZone = true
			yyVAL.anything = d
		}
	case 552:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			d := yyDollar[1].anything.(*element.Timestamp)
			d.WithLocalTimeZone = true
			yyVAL.anything = d
		}
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			d := &element.IntervalYear{}
			d.SetDataDef(element.DataDefIntervalYear)
			yyVAL.anything = d
		}
	case 554:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			precision := yyDollar[4].i
			d := &element.IntervalYear{Precision: &precision}
			d.SetDataDef(element.DataDefIntervalYear)
			yyVAL.anything = d
		}
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			d := &element.IntervalDay{}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 556:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			precision := yyDollar[4].i
			d := &element.IntervalDay{Precision: &precision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 557:
		yyDollar = yyS[yypt-10 : yypt+1]
		{
			precision := yyDollar[4].i
			sPrecision := yyDollar[9].i
			d := &element.IntervalDay{Precision: &precision, FractionalSecondsPrecision: &sPrecision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 558:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			sPrecision := yyDollar[6].i
			d := &element.IntervalDay{FractionalSecondsPrecision: &sPrecision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Timestamp{}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 560:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].i
			d := &element.Timestamp{FractionalSecondsPrecision: &precision}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Blob{}
			d.SetDataDef(element.DataDefBlob)
			yyVAL.anything = d
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Clob{}
			d.SetDataDef(element.DataDefClob)
			yyVAL.anything = d
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.NClob{}
			d.SetDataDef(element.DataDefNClob)
			yyVAL.anything = d
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.BFile{}
			d.SetDataDef(element.DataDefBFile)
			yyVAL.anything = d
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.RowId{}
			d.SetDataDef(element.DataDefRowId)
			yyVAL.anything = d
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.URowId{}
			d.SetDataDef(element.DataDefURowId)
			yyVAL.anything = d
		}
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.URowId{Size: &size}
			d.SetDataDef(element.DataDefURowId)
			yyVAL.anything = d
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Char{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharacter)
			yyVAL.anything = d
		}
	case 569:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharacterVarying)
			yyVAL.anything = d
		}
	case 570:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharVarying)
			yyVAL.anything = d
		}
	case 571:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNCharVarying)
			yyVAL.anything = d
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefVarchar)
			yyVAL.anything = d
		}
	case 573:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNationalCharacter)
			yyVAL.anything = d
		}
	case 574:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			size := yyDollar[5].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNationalCharacterVarying)
			yyVAL.anything = d
		}
	case 575:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNationalChar)
			yyVAL.anything = d
		}
	case 576:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			size := yyDollar[5].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNationalCharVarying)
			yyVAL.anything = d
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 579:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			scale := yyDollar[5].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 582:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			scale := yyDollar[5].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 585:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			scale := yyDollar[5].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefInteger)
			yyVAL.anything = d
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefInt)
			yyVAL.anything = d
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefSmallInt)
			yyVAL.anything = d
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 126}
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefDoublePrecision)
			yyVAL.anything = d
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 63}
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefReal)
			yyVAL.anything = d
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.XMLType{}
			d.SetDataDef(element.DataDefXMLType)
			yyVAL.anything = d
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].anything
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			constraint := yyDollar[2].anything.(*ast.InlineConstraint)
			constraint.Name = yyDollar[1].anything.(*element.Identifier)
			yyVAL.anything = constraint
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypeNull,
			}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypeNotNull,
			}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypeUnique,
			}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypePK,
			}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypeReferences,
			}
		}
	case 601:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 610:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 625:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			clause := &ast.ReferenceClause{}
			clause.Columns = yyDollar[4].anything.([]*element.Identifier)
			clause.Table = yyDollar[2].anything.(*ast.TableName)
			yyVAL.anything = clause
		}
	case 626:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.ReferenceOption{
				Type: yyDollar[2].anything.(ast.ReferenceAction),
			}
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.ReferenceOption{
				Type: yyDollar[2].anything.(ast.ReferenceAction),
			}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = ast.RefOptRestrict
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = ast.RefOptCascade
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = ast.RefOptSetNull
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = ast.RefOptNoAction
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = ast.RefOptSetDefault
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			constraint := yyDollar[2].anything.(*ast.OutOfLineConstraint)
			constraint.Name = yyDollar[1].anything.(*element.Identifier)
			yyVAL.anything = constraint
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 637:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeUnique
			constraint.Columns = yyDollar[3].anything.([]*element.Identifier)
			yyVAL.anything = constraint
		}
	case 638:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypePK
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			yyVAL.anything = constraint
		}
	case 639:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeReferences
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			constraint.Reference = yyDollar[6].anything.(*ast.ReferenceClause)
			yyVAL.anything = constraint
		}
	case 640:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeReferences
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			constraint.Reference = yyDollar[6].anything.(*ast.ReferenceClause)
			constraint.UpdateAction = yyDollar[9].anything.(*ast.ReferenceOption)
			yyVAL.anything = constraint
		}
	case 641:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeReferences
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			constraint.Reference = yyDollar[6].anything.(*ast.ReferenceClause)
			constraint.DeleteAction = yyDollar[9].anything.(*ast.ReferenceOption)
			yyVAL.anything = constraint
		}
	case 642:
		yyDollar = yyS[yypt-11 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeReferences
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			constraint.Reference = yyDollar[6].anything.(*ast.ReferenceClause)
			constraint.UpdateAction = yyDollar[9].anything.(*ast.ReferenceOption)
			constraint.DeleteAction = yyDollar[11].anything.(*ast.ReferenceOption)
			yyVAL.anything = constraint
		}
	case 643:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.anything = &ast.OutOfLineConstraint{}
		}
	case 671:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 678:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 686:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	}
	goto yystack /* stack new state and value */
}

// Code generated by goyacc - DO NOT EDIT.


package parser

import __yyfmt__ "fmt"


import (
	"strings"

	"github.com/sjjian/oracle-sql-parser/ast"
	"github.com/sjjian/oracle-sql-parser/ast/element"
)

func nextQuery(yylex interface{}) string {
	lex := yylex.(*yyLexImpl)
	tc := lex.scanner.TC
	query := string(lex.scanner.Text[lex.lastPos:tc])
	lex.lastPos = tc
	return strings.TrimSpace(query)
}


type yySymType struct {
	yys    int
    nothing     struct{}
    i           int
    b           bool
    str         string
    node        ast.Node
    anything    interface{}
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault                 = 57577
	yyEofCode                 = 57344
	_E                        = 57506
	_G                        = 57507
	_K                        = 57508
	_M                        = 57509
	_P                        = 57510
	_T                        = 57511
	_add                      = 57350
	_advanced                 = 57515
	_all                      = 57444
	_alter                    = 57348
	_always                   = 57423
	_archive                  = 57521
	_as                       = 57424
	_asc                      = 57568
	_at                       = 57445
	_attributes               = 57552
	_auto                     = 57526
	_basic                    = 57516
	_bfile                    = 57377
	_binaryDouble             = 57359
	_binaryFloat              = 57358
	_bitmap                   = 57559
	_blob                     = 57374
	_blockchain               = 57459
	_buffer_pool              = 57490
	_by                       = 57400
	_byte                     = 57352
	_cache                    = 57427
	_capacity                 = 57527
	_cascade                  = 57410
	_cell_flash_cache         = 57491
	_char                     = 57351
	_character                = 57380
	_checkpoint               = 57456
	_clob                     = 57375
	_cluster                  = 57480
	_collate                  = 57393
	_column                   = 57446
	_columns                  = 57450
	_commit                   = 57472
	_compress                 = 57517
	_constraint               = 57403
	_constraints              = 57453
	_continue                 = 57451
	_create                   = 57458
	_creation                 = 57482
	_critical                 = 57532
	_cycle                    = 57428
	_data                     = 57466
	_date                     = 57362
	_day                      = 57372
	_dec                      = 57386
	_decimal                  = 57385
	_decrypt                  = 57443
	_default                  = 57422
	_deferrable               = 57414
	_deferred                 = 57415
	_definition               = 57473
	_delete                   = 57411
	_delete_all               = 57542
	_desc                     = 57569
	_disable                  = 57543
	_disable_all              = 57544
	_distribute               = 57535
	_dml                      = 57528
	_double                   = 57390
	_doubleQuoteStr           = 57575
	_drop                     = 57442
	_duplicate                = 57540
	_duplicated               = 57460
	_enable                   = 57545
	_enable_all               = 57546
	_encrypt                  = 57397
	_exceptions               = 57557
	_extended                 = 57467
	_external                 = 57549
	_filesystem_like_logging  = 57512
	_flash_cache              = 57492
	_float                    = 57357
	_for                      = 57476
	_force                    = 57449
	_foreign                  = 57554
	_freelist                 = 57493
	_freelists                = 57494
	_from                     = 57347
	_full                     = 57563
	_generated                = 57425
	_global                   = 57461
	_groups                   = 57505
	_heap                     = 57550
	_high                     = 57529
	_identified               = 57399
	_identity                 = 57426
	_ilm                      = 57547
	_immediate                = 57416
	_immutable                = 57462
	_increment                = 57429
	_index                    = 57551
	_indexing                 = 57564
	_initial                  = 57495
	_initially                = 57417
	_initrans                 = 57485
	_inmemory                 = 57525
	_int                      = 57388
	_intNumber                = 57573
	_interger                 = 57387
	_interval                 = 57368
	_into                     = 57558
	_invalidate               = 57454
	_invalidation             = 57572
	_invisible                = 57395
	_is                       = 57420
	_keep                     = 57496
	_key                      = 57404
	_level                    = 57523
	_levels                   = 57447
	_limit                    = 57430
	_local                    = 57365
	_locking                  = 57524
	_logging                  = 57513
	_long                     = 57360
	_low                      = 57530
	_maxextents               = 57497
	_maxsize                  = 57498
	_maxtrans                 = 57486
	_maxvalue                 = 57431
	_medium                   = 57533
	_memcompress              = 57531
	_memoptimize              = 57477
	_metadata                 = 57468
	_minextents               = 57499
	_minvalue                 = 57432
	_modify                   = 57441
	_mouth                    = 57371
	_multivalue               = 57560
	_national                 = 57383
	_nchar                    = 57354
	_nclob                    = 57376
	_next                     = 57500
	_no                       = 57401
	_nocache                  = 57433
	_nocompress               = 57518
	_nocycle                  = 57434
	_nologging                = 57514
	_nomaxvalue               = 57435
	_nominvalue               = 57436
	_none                     = 57469
	_nonquotedIdentifier      = 57576
	_noorder                  = 57437
	_noparallel               = 57566
	_norely                   = 57418
	_nosort                   = 57561
	_not                      = 57405
	_novalidate               = 57555
	_null                     = 57406
	_number                   = 57356
	_numeric                  = 57384
	_nvarchar2                = 57355
	_on                       = 57412
	_online                   = 57455
	_optimal                  = 57501
	_order                    = 57438
	_organization             = 57481
	_parallel                 = 57567
	_parent                   = 57471
	_partial                  = 57565
	_partition                = 57536
	_pctfree                  = 57487
	_pctincrease              = 57502
	_pctused                  = 57488
	_peverse                  = 57562
	_policy                   = 57548
	_precision                = 57391
	_preserve                 = 57474
	_primary                  = 57407
	_priority                 = 57534
	_private                  = 57463
	_query                    = 57522
	_range                    = 57537
	_raw                      = 57361
	_read                     = 57478
	_real                     = 57392
	_recycle                  = 57503
	_references               = 57409
	_reject                   = 57553
	_rely                     = 57419
	_rename                   = 57457
	_row                      = 57519
	_rowid                    = 57378
	_rows                     = 57475
	_salt                     = 57402
	_scope                    = 57421
	_second                   = 57373
	_segment                  = 57483
	_select                   = 57346
	_service                  = 57539
	_set                      = 57413
	_sharded                  = 57464
	_sharding                 = 57470
	_singleQuoteStr           = 57574
	_smallInt                 = 57389
	_sort                     = 57394
	_spatial                  = 57541
	_start                    = 57439
	_storage                  = 57489
	_store                    = 57520
	_subpartition             = 57538
	_substitutable            = 57448
	_table                    = 57349
	_tablespace               = 57484
	_temporary                = 57465
	_time                     = 57366
	_timestamp                = 57363
	_to                       = 57370
	_unique                   = 57408
	_unlimited                = 57504
	_unusable                 = 57571
	_unused                   = 57452
	_urowid                   = 57379
	_usable                   = 57570
	_using                    = 57398
	_validate                 = 57556
	_value                    = 57440
	_varchar                  = 57382
	_varchar2                 = 57353
	_varying                  = 57381
	_visible                  = 57396
	_with                     = 57364
	_write                    = 57479
	_year                     = 57369
	_zone                     = 57367
	yyErrCode                 = 57345

	yyMaxDepth = 200
	yyTabOfs   = -507
)

var (

	yyPrec = map[int]int{
		}

	yyXLAT = map[int]int{
		    41:   0, // ')' (348x)
		 57344:   1, // $end (306x)
		    59:   2, // ';' (305x)
		    44:   3, // ',' (213x)
		 57408:   4, // _unique (182x)
		 57407:   5, // _primary (180x)
		 57403:   6, // _constraint (177x)
		 57405:   7, // _not (172x)
		 57406:   8, // _null (169x)
		 57409:   9, // _references (165x)
		 57477:  10, // _memoptimize (155x)
		 57471:  11, // _parent (152x)
		 57442:  12, // _drop (142x)
		 57397:  13, // _encrypt (137x)
		 57395:  14, // _invisible (121x)
		 57396:  15, // _visible (121x)
		 57446:  16, // _column (118x)
		 57394:  17, // _sort (116x)
		 57364:  18, // _with (110x)
		 57421:  19, // _scope (109x)
		 57401:  20, // _no (104x)
		 57422:  21, // _default (101x)
		 57517:  22, // _compress (99x)
		 57518:  23, // _nocompress (97x)
		 57512:  24, // _filesystem_like_logging (96x)
		 57485:  25, // _initrans (96x)
		 57513:  26, // _logging (96x)
		 57486:  27, // _maxtrans (96x)
		 57514:  28, // _nologging (96x)
		 57487:  29, // _pctfree (96x)
		 57488:  30, // _pctused (96x)
		 57489:  31, // _storage (96x)
		 57484:  32, // _tablespace (96x)
		 57443:  33, // _decrypt (93x)
		 57547:  34, // _ilm (93x)
		 57525:  35, // _inmemory (90x)
		 57425:  36, // _generated (83x)
		    40:  37, // '(' (73x)
		 57393:  38, // _collate (72x)
		 57519:  39, // _row (68x)
		 57575:  40, // _doubleQuoteStr (66x)
		 57576:  41, // _nonquotedIdentifier (64x)
		 57455:  42, // _online (62x)
		 57413:  43, // _set (53x)
		 57350:  44, // _add (52x)
		 57415:  45, // _deferred (52x)
		 57416:  46, // _immediate (52x)
		 57573:  47, // _intNumber (52x)
		 57641:  48, // Identifier (52x)
		 57441:  49, // _modify (51x)
		 57571:  50, // _unusable (47x)
		 57570:  51, // _usable (47x)
		 57414:  52, // _deferrable (46x)
		 57543:  53, // _disable (46x)
		 57545:  54, // _enable (46x)
		 57554:  55, // _foreign (46x)
		 57398:  56, // _using (46x)
		 57557:  57, // _exceptions (45x)
		 57417:  58, // _initially (45x)
		 57418:  59, // _norely (45x)
		 57555:  60, // _novalidate (45x)
		 57419:  61, // _rely (45x)
		 57556:  62, // _validate (45x)
		 57564:  63, // _indexing (43x)
		 57566:  64, // _noparallel (43x)
		 57561:  65, // _nosort (43x)
		 57567:  66, // _parallel (43x)
		 57562:  67, // _peverse (43x)
		 57410:  68, // _cascade (40x)
		 57490:  69, // _buffer_pool (35x)
		 57491:  70, // _cell_flash_cache (35x)
		 57492:  71, // _flash_cache (35x)
		 57493:  72, // _freelist (35x)
		 57494:  73, // _freelists (35x)
		 57495:  74, // _initial (35x)
		 57497:  75, // _maxextents (35x)
		 57498:  76, // _maxsize (35x)
		 57499:  77, // _minextents (35x)
		 57500:  78, // _next (35x)
		 57501:  79, // _optimal (35x)
		 57502:  80, // _pctincrease (35x)
		 57541:  81, // _spatial (35x)
		 57540:  82, // _duplicate (32x)
		 57549:  83, // _external (28x)
		 57412:  84, // _on (28x)
		 57481:  85, // _organization (27x)
		 57599:  86, // ColumnName (26x)
		 57480:  87, // _cluster (25x)
		 57483:  88, // _segment (24x)
		 57427:  89, // _cache (17x)
		 57428:  90, // _cycle (17x)
		 57535:  91, // _distribute (17x)
		 57429:  92, // _increment (17x)
		 57431:  93, // _maxvalue (17x)
		 57432:  94, // _minvalue (17x)
		 57433:  95, // _nocache (17x)
		 57434:  96, // _nocycle (17x)
		 57435:  97, // _nomaxvalue (17x)
		 57436:  98, // _nominvalue (17x)
		 57437:  99, // _noorder (17x)
		 57438: 100, // _order (17x)
		 57439: 101, // _start (17x)
		 57456: 102, // _checkpoint (14x)
		 57457: 103, // _rename (14x)
		 57476: 104, // _for (12x)
		 57454: 105, // _invalidate (12x)
		 57496: 106, // _keep (12x)
		 57534: 107, // _priority (11x)
		 57600: 108, // ColumnNameList (11x)
		    46: 109, // '.' (10x)
		 57402: 110, // _salt (10x)
		 57607: 111, // ConstraintState (10x)
		 57635: 112, // ExceptionsClause (10x)
		 57748: 113, // UsingIndexClause (10x)
		 57351: 114, // _char (9x)
		 57551: 115, // _index (9x)
		 57370: 116, // _to (9x)
		 57714: 117, // PhysicalAttrClause (9x)
		 57737: 118, // StorageClause (9x)
		 57378: 119, // _rowid (8x)
		 57574: 120, // _singleQuoteStr (8x)
		 57606: 121, // ConstraintNameOrEmpty (8x)
		 57380: 122, // _character (7x)
		 57361: 123, // _raw (7x)
		 57685: 124, // LoggingClause (7x)
		 57715: 125, // PhysicalAttrsClause (7x)
		 57745: 126, // TableName (7x)
		 57377: 127, // _bfile (6x)
		 57359: 128, // _binaryDouble (6x)
		 57358: 129, // _binaryFloat (6x)
		 57374: 130, // _blob (6x)
		 57375: 131, // _clob (6x)
		 57362: 132, // _date (6x)
		 57386: 133, // _dec (6x)
		 57385: 134, // _decimal (6x)
		 57390: 135, // _double (6x)
		 57357: 136, // _float (6x)
		 57529: 137, // _high (6x)
		 57388: 138, // _int (6x)
		 57387: 139, // _interger (6x)
		 57368: 140, // _interval (6x)
		 57360: 141, // _long (6x)
		 57530: 142, // _low (6x)
		 57383: 143, // _national (6x)
		 57354: 144, // _nchar (6x)
		 57376: 145, // _nclob (6x)
		 57356: 146, // _number (6x)
		 57384: 147, // _numeric (6x)
		 57355: 148, // _nvarchar2 (6x)
		 57392: 149, // _real (6x)
		 57389: 150, // _smallInt (6x)
		 57363: 151, // _timestamp (6x)
		 57379: 152, // _urowid (6x)
		 57382: 153, // _varchar (6x)
		 57353: 154, // _varchar2 (6x)
		 57584: 155, // CascadeOrEmpty (6x)
		 57608: 156, // ConstraintStateList (6x)
		 57609: 157, // ConstraintStateOrEmpty (6x)
		 57741: 158, // TableCompression (6x)
		    42: 159, // '*' (5x)
		 57426: 160, // _identity (5x)
		 57404: 161, // _key (5x)
		 57469: 162, // _none (5x)
		 57470: 163, // _sharding (5x)
		 57448: 164, // _substitutable (5x)
		 57381: 165, // _varying (5x)
		 57668: 166, // InmemoryColumnClause (5x)
		 57701: 167, // NumberOrAsterisk (5x)
		 57727: 168, // SegmentAttrClause (5x)
		 57444: 169, // _all (4x)
		 57424: 170, // _as (4x)
		 57568: 171, // _asc (4x)
		 57400: 172, // _by (4x)
		 57569: 173, // _desc (4x)
		 57548: 174, // _policy (4x)
		 57596: 175, // ColumnDef (4x)
		 57645: 176, // IdentityOptionsOrEmpty (4x)
		 57647: 177, // IlmCompressionPolicy (4x)
		 57648: 178, // IlmInmemoryPolicy (4x)
		 57649: 179, // IlmPolicyClause (4x)
		 57650: 180, // IlmTieringPolicy (4x)
		 57663: 181, // InlineConstraint (4x)
		 57669: 182, // InmemoryColumnClauses (4x)
		 57670: 183, // InmemoryColumnClausesOrEmpty (4x)
		 57708: 184, // OutOfLineConstraint (4x)
		 57717: 185, // RealColumnDef (4x)
		 57731: 186, // SizeClause (4x)
		 57450: 187, // _columns (3x)
		 57458: 188, // _create (3x)
		 57411: 189, // _delete (3x)
		 57399: 190, // _identified (3x)
		 57531: 191, // _memcompress (3x)
		 57452: 192, // _unused (3x)
		 57581: 193, // AnsiSupportDataTypes (3x)
		 57587: 194, // CharacterDataTypes (3x)
		 57590: 195, // CollateClause (3x)
		 57601: 196, // ColumnNameListForDropColumn (3x)
		 57611: 197, // CreateIndexStmt (3x)
		 57614: 198, // Datatype (3x)
		 57615: 199, // DatetimeDataTypes (3x)
		 57621: 200, // DropColumnCheckpoint (3x)
		 57624: 201, // DropColumnProp (3x)
		 57629: 202, // DropConstraintProps (3x)
		 57680: 203, // InvisibleProp (3x)
		 57683: 204, // KeepIndexOrEmpty (3x)
		 57684: 205, // LargeObjectDataTypes (3x)
		 57686: 206, // LongAndRawDataTypes (3x)
		 57700: 207, // NumberDataTypes (3x)
		 57706: 208, // OralceBuiltInDataTypes (3x)
		 57718: 209, // ReferencesClause (3x)
		 57725: 210, // RowIdDataTypes (3x)
		 57728: 211, // SegmentAttrsClause (3x)
		 57515: 212, // _advanced (2x)
		 57348: 213, // _alter (2x)
		 57445: 214, // _at (2x)
		 57526: 215, // _auto (2x)
		 57559: 216, // _bitmap (2x)
		 57459: 217, // _blockchain (2x)
		 57352: 218, // _byte (2x)
		 57472: 219, // _commit (2x)
		 57466: 220, // _data (2x)
		 57473: 221, // _definition (2x)
		 57449: 222, // _force (2x)
		 57572: 223, // _invalidation (2x)
		 57523: 224, // _level (2x)
		 57447: 225, // _levels (2x)
		 57430: 226, // _limit (2x)
		 57524: 227, // _locking (2x)
		 57371: 228, // _mouth (2x)
		 57560: 229, // _multivalue (2x)
		 57536: 230, // _partition (2x)
		 57474: 231, // _preserve (2x)
		 57522: 232, // _query (2x)
		 57478: 233, // _read (2x)
		 57553: 234, // _reject (2x)
		 57475: 235, // _rows (2x)
		 57373: 236, // _second (2x)
		 57520: 237, // _store (2x)
		 57349: 238, // _table (2x)
		 57465: 239, // _temporary (2x)
		 57366: 240, // _time (2x)
		 57504: 241, // _unlimited (2x)
		 57479: 242, // _write (2x)
		 57367: 243, // _zone (2x)
		 57578: 244, // AddColumnClause (2x)
		 57580: 245, // AlterTableStmt (2x)
		 57585: 246, // ChangeColumnClause (2x)
		 57591: 247, // CollateClauseOrEmpty (2x)
		 57613: 248, // CreateTableStmt (2x)
		 57616: 249, // DefaultClause (2x)
		 57618: 250, // DefaultOrIdentityClause (2x)
		 57622: 251, // DropColumnClause (2x)
		 57625: 252, // DropColumnProps (2x)
		 57626: 253, // DropColumnPropsOrEmpty (2x)
		 57627: 254, // DropConstraintClause (2x)
		 57630: 255, // EmptyStmt (2x)
		 57632: 256, // EncryptClause (2x)
		 57636: 257, // Expr (2x)
		 57638: 258, // ExternalTableClause (2x)
		 57642: 259, // IdentityClause (2x)
		 57643: 260, // IdentityOption (2x)
		 57646: 261, // IlmClause (2x)
		 57652: 262, // IndexAttr (2x)
		 57655: 263, // IndexCompression (2x)
		 57656: 264, // IndexExpr (2x)
		 57659: 265, // IndexName (2x)
		 57661: 266, // IndexProps (2x)
		 57662: 267, // IndexType (2x)
		 57664: 268, // InlineConstraintList (2x)
		 57665: 269, // InlineConstraintType (2x)
		 57675: 270, // InmemoryMemCompress (2x)
		 57678: 271, // InmemoryTableClause (2x)
		 57682: 272, // IsForce (2x)
		 57689: 273, // MemoptimizeRead (2x)
		 57691: 274, // MemoptimizeWrite (2x)
		 57693: 275, // ModifyColumnClause (2x)
		 57694: 276, // ModifyColumnProp (2x)
		 57696: 277, // ModifyColumnSubstitutable (2x)
		 57697: 278, // ModifyColumnVisibility (2x)
		 57699: 279, // ModifyRealColumnProp (2x)
		 57711: 280, // ParallelClause (2x)
		 57713: 281, // PartialIndexClause (2x)
		 57721: 282, // RelTableProp (2x)
		 57729: 283, // SegmentAttrsClauseOrEmpty (2x)
		 57735: 284, // Statement (2x)
		 57738: 285, // StorageProp (2x)
		 57742: 286, // TableCompressionOrEmpty (2x)
		    61: 287, // '=' (1x)
		 57423: 288, // _always (1x)
		 57521: 289, // _archive (1x)
		 57552: 290, // _attributes (1x)
		 57516: 291, // _basic (1x)
		 57527: 292, // _capacity (1x)
		 57453: 293, // _constraints (1x)
		 57451: 294, // _continue (1x)
		 57482: 295, // _creation (1x)
		 57532: 296, // _critical (1x)
		 57372: 297, // _day (1x)
		 57542: 298, // _delete_all (1x)
		 57544: 299, // _disable_all (1x)
		 57528: 300, // _dml (1x)
		 57460: 301, // _duplicated (1x)
		 57506: 302, // _E (1x)
		 57546: 303, // _enable_all (1x)
		 57467: 304, // _extended (1x)
		 57563: 305, // _full (1x)
		 57507: 306, // _G (1x)
		 57461: 307, // _global (1x)
		 57505: 308, // _groups (1x)
		 57550: 309, // _heap (1x)
		 57462: 310, // _immutable (1x)
		 57558: 311, // _into (1x)
		 57420: 312, // _is (1x)
		 57508: 313, // _K (1x)
		 57365: 314, // _local (1x)
		 57509: 315, // _M (1x)
		 57533: 316, // _medium (1x)
		 57468: 317, // _metadata (1x)
		 57510: 318, // _P (1x)
		 57565: 319, // _partial (1x)
		 57391: 320, // _precision (1x)
		 57463: 321, // _private (1x)
		 57537: 322, // _range (1x)
		 57503: 323, // _recycle (1x)
		 57539: 324, // _service (1x)
		 57464: 325, // _sharded (1x)
		 57538: 326, // _subpartition (1x)
		 57511: 327, // _T (1x)
		 57440: 328, // _value (1x)
		 57369: 329, // _year (1x)
		 57579: 330, // AlterTableClauses (1x)
		 57582: 331, // BitmapJoinIndexClause (1x)
		 57583: 332, // BlockchainTableClauses (1x)
		 57586: 333, // ChangeColumnClauseList (1x)
		 57588: 334, // ClusterIndexClause (1x)
		 57589: 335, // ClusterName (1x)
		 57592: 336, // ColumnClauses (1x)
		 57593: 337, // ColumnCompressLock (1x)
		 57594: 338, // ColumnCompressProp (1x)
		 57595: 339, // ColumnConstraintForModify (1x)
		 57597: 340, // ColumnDefConstraint (1x)
		 57598: 341, // ColumnDefList (1x)
		 57602: 342, // ColumnNameListOrEmpty (1x)
		 57603: 343, // ColumnProps (1x)
		 57604: 344, // ColumnSortClause (1x)
		 57605: 345, // ConstraintClauses (1x)
		 57610: 346, // CreateIndexInvalidation (1x)
		 57612: 347, // CreateIndexUsable (1x)
		 57617: 348, // DefaultCollateClauseOrEmpty (1x)
		 57619: 349, // DefaultOrIdentityClauseForModify (1x)
		 57620: 350, // DeferredSegmentCreation (1x)
		 57623: 351, // DropColumnOnline (1x)
		 57628: 352, // DropConstraintClauses (1x)
		 57631: 353, // EncryptAlgorithm (1x)
		 57633: 354, // EncryptClauseForModify (1x)
		 57634: 355, // EncryptionSpec (1x)
		 57637: 356, // ExternalPartitionClause (1x)
		 57639: 357, // HeapOrgTableClause (1x)
		 57640: 358, // IdentifiedByClause (1x)
		 57644: 359, // IdentityOptions (1x)
		 57651: 360, // ImmutableTableClauses (1x)
		 57653: 361, // IndexAttrs (1x)
		 57654: 362, // IndexClause (1x)
		 57657: 363, // IndexExprs (1x)
		 57658: 364, // IndexIlmClause (1x)
		 57660: 365, // IndexOrgTableClause (1x)
		 57666: 366, // InlineRefConstraint (1x)
		 57667: 367, // InmemoryAttrs (1x)
		 57671: 368, // InmemoryDistribute (1x)
		 57672: 369, // InmemoryDistributeBy (1x)
		 57673: 370, // InmemoryDistributeFor (1x)
		 57674: 371, // InmemoryDuplicate (1x)
		 57676: 372, // InmemoryProp (1x)
		 57677: 373, // InmemorySpatial (1x)
		 57679: 374, // IntergrityAlgorithm (1x)
		 57681: 375, // InvisiblePropOrEmpty (1x)
		 57687: 376, // Memoptimize (1x)
		 57688: 377, // MemoptimizeForAlterTable (1x)
		 57690: 378, // MemoptimizeReadForAlterTable (1x)
		 57692: 379, // MemoptimizeWriteForAlterTable (1x)
		 57695: 380, // ModifyColumnProps (1x)
		 57698: 381, // ModifyColumnVisibilityList (1x)
		 57702: 382, // OnCommitClause (1x)
		 57703: 383, // OnCommitDef (1x)
		 57704: 384, // OnCommitRows (1x)
		 57705: 385, // OnlineOrEmpty (1x)
		 57707: 386, // OrgClause (1x)
		 57709: 387, // OutOfLineConstraints (1x)
		 57710: 388, // OutOfLinePartStorageList (1x)
		 57712: 389, // ParentTable (1x)
		 57716: 390, // PhysicalProps (1x)
		 57719: 391, // ReferencesOnDelete (1x)
		 57720: 392, // RelTableDef (1x)
		 57722: 393, // RelTableProps (1x)
		 57723: 394, // RelTablePropsOrEmpty (1x)
		 57724: 395, // RenameColumnClause (1x)
		 57726: 396, // SaltProp (1x)
		 57730: 397, // ShardingType (1x)
		 57732: 398, // SizeUnit (1x)
		 57733: 399, // SortProp (1x)
		 57734: 400, // Start (1x)
		 57736: 401, // StatementList (1x)
		 57739: 402, // StorageProps (1x)
		 57740: 403, // TableAlias (1x)
		 57743: 404, // TableDef (1x)
		 57744: 405, // TableIndexClause (1x)
		 57746: 406, // TableProps (1x)
		 57747: 407, // TableType (1x)
		 57577: 408, // $default (0x)
		 57347: 409, // _from (0x)
		 57346: 410, // _select (0x)
		 57345: 411, // error (0x)
	}

	yySymNames = []string{
		"')'",
		"$end",
		"';'",
		"','",
		"_unique",
		"_primary",
		"_constraint",
		"_not",
		"_null",
		"_references",
		"_memoptimize",
		"_parent",
		"_drop",
		"_encrypt",
		"_invisible",
		"_visible",
		"_column",
		"_sort",
		"_with",
		"_scope",
		"_no",
		"_default",
		"_compress",
		"_nocompress",
		"_filesystem_like_logging",
		"_initrans",
		"_logging",
		"_maxtrans",
		"_nologging",
		"_pctfree",
		"_pctused",
		"_storage",
		"_tablespace",
		"_decrypt",
		"_ilm",
		"_inmemory",
		"_generated",
		"'('",
		"_collate",
		"_row",
		"_doubleQuoteStr",
		"_nonquotedIdentifier",
		"_online",
		"_set",
		"_add",
		"_deferred",
		"_immediate",
		"_intNumber",
		"Identifier",
		"_modify",
		"_unusable",
		"_usable",
		"_deferrable",
		"_disable",
		"_enable",
		"_foreign",
		"_using",
		"_exceptions",
		"_initially",
		"_norely",
		"_novalidate",
		"_rely",
		"_validate",
		"_indexing",
		"_noparallel",
		"_nosort",
		"_parallel",
		"_peverse",
		"_cascade",
		"_buffer_pool",
		"_cell_flash_cache",
		"_flash_cache",
		"_freelist",
		"_freelists",
		"_initial",
		"_maxextents",
		"_maxsize",
		"_minextents",
		"_next",
		"_optimal",
		"_pctincrease",
		"_spatial",
		"_duplicate",
		"_external",
		"_on",
		"_organization",
		"ColumnName",
		"_cluster",
		"_segment",
		"_cache",
		"_cycle",
		"_distribute",
		"_increment",
		"_maxvalue",
		"_minvalue",
		"_nocache",
		"_nocycle",
		"_nomaxvalue",
		"_nominvalue",
		"_noorder",
		"_order",
		"_start",
		"_checkpoint",
		"_rename",
		"_for",
		"_invalidate",
		"_keep",
		"_priority",
		"ColumnNameList",
		"'.'",
		"_salt",
		"ConstraintState",
		"ExceptionsClause",
		"UsingIndexClause",
		"_char",
		"_index",
		"_to",
		"PhysicalAttrClause",
		"StorageClause",
		"_rowid",
		"_singleQuoteStr",
		"ConstraintNameOrEmpty",
		"_character",
		"_raw",
		"LoggingClause",
		"PhysicalAttrsClause",
		"TableName",
		"_bfile",
		"_binaryDouble",
		"_binaryFloat",
		"_blob",
		"_clob",
		"_date",
		"_dec",
		"_decimal",
		"_double",
		"_float",
		"_high",
		"_int",
		"_interger",
		"_interval",
		"_long",
		"_low",
		"_national",
		"_nchar",
		"_nclob",
		"_number",
		"_numeric",
		"_nvarchar2",
		"_real",
		"_smallInt",
		"_timestamp",
		"_urowid",
		"_varchar",
		"_varchar2",
		"CascadeOrEmpty",
		"ConstraintStateList",
		"ConstraintStateOrEmpty",
		"TableCompression",
		"'*'",
		"_identity",
		"_key",
		"_none",
		"_sharding",
		"_substitutable",
		"_varying",
		"InmemoryColumnClause",
		"NumberOrAsterisk",
		"SegmentAttrClause",
		"_all",
		"_as",
		"_asc",
		"_by",
		"_desc",
		"_policy",
		"ColumnDef",
		"IdentityOptionsOrEmpty",
		"IlmCompressionPolicy",
		"IlmInmemoryPolicy",
		"IlmPolicyClause",
		"IlmTieringPolicy",
		"InlineConstraint",
		"InmemoryColumnClauses",
		"InmemoryColumnClausesOrEmpty",
		"OutOfLineConstraint",
		"RealColumnDef",
		"SizeClause",
		"_columns",
		"_create",
		"_delete",
		"_identified",
		"_memcompress",
		"_unused",
		"AnsiSupportDataTypes",
		"CharacterDataTypes",
		"CollateClause",
		"ColumnNameListForDropColumn",
		"CreateIndexStmt",
		"Datatype",
		"DatetimeDataTypes",
		"DropColumnCheckpoint",
		"DropColumnProp",
		"DropConstraintProps",
		"InvisibleProp",
		"KeepIndexOrEmpty",
		"LargeObjectDataTypes",
		"LongAndRawDataTypes",
		"NumberDataTypes",
		"OralceBuiltInDataTypes",
		"ReferencesClause",
		"RowIdDataTypes",
		"SegmentAttrsClause",
		"_advanced",
		"_alter",
		"_at",
		"_auto",
		"_bitmap",
		"_blockchain",
		"_byte",
		"_commit",
		"_data",
		"_definition",
		"_force",
		"_invalidation",
		"_level",
		"_levels",
		"_limit",
		"_locking",
		"_mouth",
		"_multivalue",
		"_partition",
		"_preserve",
		"_query",
		"_read",
		"_reject",
		"_rows",
		"_second",
		"_store",
		"_table",
		"_temporary",
		"_time",
		"_unlimited",
		"_write",
		"_zone",
		"AddColumnClause",
		"AlterTableStmt",
		"ChangeColumnClause",
		"CollateClauseOrEmpty",
		"CreateTableStmt",
		"DefaultClause",
		"DefaultOrIdentityClause",
		"DropColumnClause",
		"DropColumnProps",
		"DropColumnPropsOrEmpty",
		"DropConstraintClause",
		"EmptyStmt",
		"EncryptClause",
		"Expr",
		"ExternalTableClause",
		"IdentityClause",
		"IdentityOption",
		"IlmClause",
		"IndexAttr",
		"IndexCompression",
		"IndexExpr",
		"IndexName",
		"IndexProps",
		"IndexType",
		"InlineConstraintList",
		"InlineConstraintType",
		"InmemoryMemCompress",
		"InmemoryTableClause",
		"IsForce",
		"MemoptimizeRead",
		"MemoptimizeWrite",
		"ModifyColumnClause",
		"ModifyColumnProp",
		"ModifyColumnSubstitutable",
		"ModifyColumnVisibility",
		"ModifyRealColumnProp",
		"ParallelClause",
		"PartialIndexClause",
		"RelTableProp",
		"SegmentAttrsClauseOrEmpty",
		"Statement",
		"StorageProp",
		"TableCompressionOrEmpty",
		"'='",
		"_always",
		"_archive",
		"_attributes",
		"_basic",
		"_capacity",
		"_constraints",
		"_continue",
		"_creation",
		"_critical",
		"_day",
		"_delete_all",
		"_disable_all",
		"_dml",
		"_duplicated",
		"_E",
		"_enable_all",
		"_extended",
		"_full",
		"_G",
		"_global",
		"_groups",
		"_heap",
		"_immutable",
		"_into",
		"_is",
		"_K",
		"_local",
		"_M",
		"_medium",
		"_metadata",
		"_P",
		"_partial",
		"_precision",
		"_private",
		"_range",
		"_recycle",
		"_service",
		"_sharded",
		"_subpartition",
		"_T",
		"_value",
		"_year",
		"AlterTableClauses",
		"BitmapJoinIndexClause",
		"BlockchainTableClauses",
		"ChangeColumnClauseList",
		"ClusterIndexClause",
		"ClusterName",
		"ColumnClauses",
		"ColumnCompressLock",
		"ColumnCompressProp",
		"ColumnConstraintForModify",
		"ColumnDefConstraint",
		"ColumnDefList",
		"ColumnNameListOrEmpty",
		"ColumnProps",
		"ColumnSortClause",
		"ConstraintClauses",
		"CreateIndexInvalidation",
		"CreateIndexUsable",
		"DefaultCollateClauseOrEmpty",
		"DefaultOrIdentityClauseForModify",
		"DeferredSegmentCreation",
		"DropColumnOnline",
		"DropConstraintClauses",
		"EncryptAlgorithm",
		"EncryptClauseForModify",
		"EncryptionSpec",
		"ExternalPartitionClause",
		"HeapOrgTableClause",
		"IdentifiedByClause",
		"IdentityOptions",
		"ImmutableTableClauses",
		"IndexAttrs",
		"IndexClause",
		"IndexExprs",
		"IndexIlmClause",
		"IndexOrgTableClause",
		"InlineRefConstraint",
		"InmemoryAttrs",
		"InmemoryDistribute",
		"InmemoryDistributeBy",
		"InmemoryDistributeFor",
		"InmemoryDuplicate",
		"InmemoryProp",
		"InmemorySpatial",
		"IntergrityAlgorithm",
		"InvisiblePropOrEmpty",
		"Memoptimize",
		"MemoptimizeForAlterTable",
		"MemoptimizeReadForAlterTable",
		"MemoptimizeWriteForAlterTable",
		"ModifyColumnProps",
		"ModifyColumnVisibilityList",
		"OnCommitClause",
		"OnCommitDef",
		"OnCommitRows",
		"OnlineOrEmpty",
		"OrgClause",
		"OutOfLineConstraints",
		"OutOfLinePartStorageList",
		"ParentTable",
		"PhysicalProps",
		"ReferencesOnDelete",
		"RelTableDef",
		"RelTableProps",
		"RelTablePropsOrEmpty",
		"RenameColumnClause",
		"SaltProp",
		"ShardingType",
		"SizeUnit",
		"SortProp",
		"Start",
		"StatementList",
		"StorageProps",
		"TableAlias",
		"TableDef",
		"TableIndexClause",
		"TableProps",
		"TableType",
		"$default",
		"_from",
		"_select",
		"error",
	}

	yyTokenLiteralStrings = map[int]string{
		57575: "double quotes string",
		57576: "nonquoted identifier",
		57573: "int number",
		57574: "single quotes string",
	}

	yyReductions = map[int]struct{xsym, components int}{
		0: {0, 1},
		1: {400, 1},
		2: {401, 1},
		3: {401, 3},
		4: {284, 1},
		5: {284, 1},
		6: {284, 1},
		7: {284, 1},
		8: {255, 0},
		9: {126, 1},
		10: {126, 3},
		11: {108, 1},
		12: {108, 3},
		13: {86, 1},
		14: {48, 1},
		15: {48, 1},
		16: {335, 1},
		17: {335, 3},
		18: {245, 5},
		19: {330, 1},
		20: {330, 1},
		21: {336, 1},
		22: {336, 1},
		23: {333, 1},
		24: {333, 2},
		25: {246, 1},
		26: {246, 1},
		27: {246, 1},
		28: {244, 6},
		29: {343, 0},
		30: {388, 0},
		31: {341, 1},
		32: {341, 3},
		33: {175, 1},
		34: {185, 8},
		35: {247, 0},
		36: {247, 1},
		37: {195, 2},
		38: {399, 0},
		39: {399, 1},
		40: {375, 0},
		41: {375, 1},
		42: {203, 1},
		43: {203, 1},
		44: {250, 0},
		45: {250, 1},
		46: {250, 1},
		47: {249, 2},
		48: {249, 4},
		49: {259, 4},
		50: {259, 5},
		51: {259, 5},
		52: {259, 6},
		53: {259, 8},
		54: {176, 0},
		55: {176, 3},
		56: {359, 0},
		57: {359, 1},
		58: {359, 2},
		59: {260, 3},
		60: {260, 4},
		61: {260, 3},
		62: {260, 2},
		63: {260, 1},
		64: {260, 2},
		65: {260, 1},
		66: {260, 1},
		67: {260, 1},
		68: {260, 2},
		69: {260, 1},
		70: {260, 1},
		71: {260, 1},
		72: {256, 0},
		73: {256, 2},
		74: {355, 4},
		75: {353, 0},
		76: {353, 2},
		77: {358, 0},
		78: {358, 3},
		79: {374, 0},
		80: {374, 1},
		81: {396, 0},
		82: {396, 1},
		83: {396, 2},
		84: {340, 0},
		85: {340, 1},
		86: {340, 1},
		87: {268, 1},
		88: {268, 2},
		89: {275, 4},
		90: {275, 4},
		91: {275, 1},
		92: {380, 1},
		93: {380, 3},
		94: {276, 1},
		95: {279, 6},
		96: {349, 2},
		97: {349, 1},
		98: {354, 1},
		99: {354, 1},
		100: {339, 0},
		101: {339, 1},
		102: {381, 1},
		103: {381, 3},
		104: {278, 2},
		105: {277, 7},
		106: {277, 8},
		107: {272, 0},
		108: {272, 1},
		109: {251, 5},
		110: {251, 4},
		111: {251, 4},
		112: {251, 4},
		113: {196, 2},
		114: {196, 3},
		115: {253, 0},
		116: {253, 1},
		117: {252, 1},
		118: {252, 2},
		119: {201, 2},
		120: {201, 1},
		121: {351, 0},
		122: {351, 1},
		123: {200, 0},
		124: {200, 2},
		125: {395, 5},
		126: {345, 2},
		127: {345, 5},
		128: {345, 5},
		129: {345, 7},
		130: {345, 5},
		131: {345, 1},
		132: {387, 1},
		133: {387, 2},
		134: {352, 1},
		135: {352, 2},
		136: {254, 5},
		137: {254, 7},
		138: {254, 5},
		139: {155, 0},
		140: {155, 1},
		141: {202, 2},
		142: {204, 0},
		143: {204, 2},
		144: {385, 0},
		145: {385, 1},
		146: {248, 8},
		147: {407, 0},
		148: {407, 2},
		149: {407, 2},
		150: {407, 1},
		151: {407, 1},
		152: {407, 1},
		153: {407, 1},
		154: {407, 2},
		155: {397, 0},
		156: {397, 3},
		157: {397, 3},
		158: {397, 4},
		159: {397, 3},
		160: {389, 0},
		161: {389, 2},
		162: {404, 1},
		163: {392, 7},
		164: {360, 0},
		165: {332, 0},
		166: {348, 0},
		167: {348, 2},
		168: {382, 2},
		169: {383, 0},
		170: {383, 4},
		171: {383, 4},
		172: {384, 0},
		173: {384, 4},
		174: {384, 4},
		175: {390, 0},
		176: {390, 5},
		177: {390, 3},
		178: {390, 2},
		179: {390, 5},
		180: {350, 0},
		181: {350, 3},
		182: {350, 3},
		183: {283, 0},
		184: {283, 1},
		185: {211, 1},
		186: {211, 2},
		187: {168, 1},
		188: {168, 2},
		189: {168, 3},
		190: {168, 1},
		191: {168, 1},
		192: {125, 1},
		193: {125, 2},
		194: {117, 2},
		195: {117, 2},
		196: {117, 2},
		197: {117, 2},
		198: {117, 1},
		199: {124, 1},
		200: {124, 1},
		201: {124, 1},
		202: {286, 0},
		203: {286, 1},
		204: {158, 1},
		205: {158, 3},
		206: {158, 4},
		207: {158, 4},
		208: {158, 5},
		209: {158, 1},
		210: {338, 0},
		211: {338, 2},
		212: {338, 3},
		213: {338, 3},
		214: {338, 2},
		215: {338, 3},
		216: {338, 3},
		217: {337, 0},
		218: {337, 3},
		219: {337, 4},
		220: {271, 0},
		221: {271, 3},
		222: {271, 3},
		223: {271, 1},
		224: {367, 5},
		225: {270, 0},
		226: {270, 3},
		227: {270, 3},
		228: {270, 4},
		229: {270, 4},
		230: {270, 3},
		231: {270, 4},
		232: {270, 4},
		233: {270, 2},
		234: {270, 2},
		235: {372, 0},
		236: {372, 2},
		237: {372, 2},
		238: {372, 2},
		239: {372, 2},
		240: {372, 2},
		241: {368, 0},
		242: {368, 3},
		243: {369, 0},
		244: {369, 1},
		245: {369, 3},
		246: {369, 2},
		247: {369, 2},
		248: {370, 0},
		249: {370, 3},
		250: {370, 3},
		251: {370, 3},
		252: {370, 3},
		253: {371, 0},
		254: {371, 1},
		255: {371, 2},
		256: {371, 2},
		257: {373, 0},
		258: {373, 2},
		259: {183, 0},
		260: {183, 1},
		261: {182, 1},
		262: {182, 2},
		263: {166, 4},
		264: {166, 5},
		265: {166, 5},
		266: {261, 0},
		267: {261, 4},
		268: {261, 4},
		269: {261, 4},
		270: {261, 4},
		271: {261, 2},
		272: {261, 2},
		273: {261, 2},
		274: {179, 1},
		275: {179, 1},
		276: {179, 1},
		277: {177, 0},
		278: {180, 0},
		279: {178, 0},
		280: {386, 3},
		281: {386, 3},
		282: {386, 2},
		283: {357, 3},
		284: {365, 0},
		285: {258, 0},
		286: {356, 4},
		287: {356, 6},
		288: {406, 0},
		289: {394, 0},
		290: {394, 3},
		291: {393, 1},
		292: {393, 3},
		293: {282, 1},
		294: {282, 1},
		295: {197, 9},
		296: {267, 0},
		297: {267, 1},
		298: {267, 1},
		299: {267, 1},
		300: {265, 1},
		301: {265, 3},
		302: {364, 0},
		303: {362, 1},
		304: {362, 1},
		305: {362, 1},
		306: {334, 3},
		307: {361, 1},
		308: {361, 2},
		309: {262, 1},
		310: {262, 1},
		311: {262, 1},
		312: {262, 2},
		313: {262, 2},
		314: {262, 1},
		315: {262, 1},
		316: {262, 1},
		317: {262, 1},
		318: {262, 1},
		319: {262, 1},
		320: {262, 1},
		321: {262, 1},
		322: {263, 1},
		323: {263, 2},
		324: {263, 2},
		325: {263, 3},
		326: {263, 3},
		327: {263, 1},
		328: {281, 2},
		329: {281, 2},
		330: {280, 1},
		331: {280, 2},
		332: {280, 1},
		333: {405, 6},
		334: {403, 0},
		335: {403, 1},
		336: {363, 1},
		337: {363, 3},
		338: {264, 2},
		339: {344, 0},
		340: {344, 1},
		341: {344, 1},
		342: {266, 0},
		343: {331, 0},
		344: {347, 0},
		345: {347, 1},
		346: {347, 1},
		347: {346, 0},
		348: {346, 2},
		349: {346, 2},
		350: {198, 1},
		351: {198, 1},
		352: {167, 1},
		353: {167, 1},
		354: {208, 1},
		355: {208, 1},
		356: {208, 1},
		357: {208, 1},
		358: {208, 1},
		359: {208, 1},
		360: {194, 1},
		361: {194, 4},
		362: {194, 5},
		363: {194, 5},
		364: {194, 4},
		365: {194, 5},
		366: {194, 5},
		367: {194, 1},
		368: {194, 4},
		369: {194, 4},
		370: {207, 1},
		371: {207, 4},
		372: {207, 6},
		373: {207, 1},
		374: {207, 4},
		375: {207, 1},
		376: {207, 1},
		377: {206, 1},
		378: {206, 2},
		379: {206, 4},
		380: {199, 1},
		381: {199, 1},
		382: {199, 4},
		383: {199, 7},
		384: {199, 8},
		385: {199, 4},
		386: {199, 7},
		387: {199, 4},
		388: {199, 7},
		389: {199, 10},
		390: {199, 7},
		391: {205, 1},
		392: {205, 1},
		393: {205, 1},
		394: {205, 1},
		395: {210, 1},
		396: {210, 1},
		397: {210, 4},
		398: {193, 4},
		399: {193, 5},
		400: {193, 5},
		401: {193, 5},
		402: {193, 4},
		403: {193, 5},
		404: {193, 6},
		405: {193, 5},
		406: {193, 6},
		407: {193, 1},
		408: {193, 4},
		409: {193, 6},
		410: {193, 1},
		411: {193, 4},
		412: {193, 6},
		413: {193, 1},
		414: {193, 4},
		415: {193, 6},
		416: {193, 1},
		417: {193, 1},
		418: {193, 1},
		419: {193, 2},
		420: {193, 1},
		421: {121, 0},
		422: {121, 2},
		423: {181, 3},
		424: {181, 3},
		425: {269, 1},
		426: {269, 2},
		427: {269, 1},
		428: {269, 2},
		429: {209, 4},
		430: {342, 0},
		431: {342, 3},
		432: {391, 0},
		433: {391, 3},
		434: {391, 4},
		435: {157, 0},
		436: {157, 1},
		437: {156, 1},
		438: {156, 2},
		439: {111, 1},
		440: {111, 2},
		441: {111, 2},
		442: {111, 2},
		443: {111, 1},
		444: {111, 1},
		445: {111, 1},
		446: {111, 1},
		447: {111, 1},
		448: {111, 1},
		449: {111, 1},
		450: {111, 1},
		451: {113, 3},
		452: {113, 5},
		453: {113, 3},
		454: {112, 3},
		455: {366, 3},
		456: {366, 2},
		457: {366, 3},
		458: {184, 6},
		459: {184, 7},
		460: {184, 8},
		461: {118, 4},
		462: {402, 1},
		463: {402, 2},
		464: {285, 2},
		465: {285, 2},
		466: {285, 2},
		467: {285, 2},
		468: {285, 2},
		469: {285, 2},
		470: {285, 2},
		471: {285, 2},
		472: {285, 2},
		473: {285, 3},
		474: {285, 1},
		475: {285, 2},
		476: {285, 2},
		477: {285, 2},
		478: {285, 2},
		479: {285, 2},
		480: {285, 2},
		481: {285, 2},
		482: {285, 2},
		483: {285, 2},
		484: {285, 2},
		485: {285, 2},
		486: {285, 1},
		487: {186, 2},
		488: {398, 0},
		489: {398, 1},
		490: {398, 1},
		491: {398, 1},
		492: {398, 1},
		493: {398, 1},
		494: {398, 1},
		495: {377, 2},
		496: {378, 1},
		497: {378, 4},
		498: {379, 1},
		499: {379, 4},
		500: {376, 2},
		501: {273, 0},
		502: {273, 3},
		503: {274, 0},
		504: {274, 3},
		505: {257, 1},
		506: {257, 1},
	}

	yyXErrors = map[yyXError]string{
	}

	yyParseTab = [865][]uint16{
		// 0
		{1: 499, 499, 188: 516, 197: 514, 213: 515, 245: 512, 248: 513, 255: 511, 284: 510, 400: 508, 509},
		{1: 507},
		{1: 506, 1370},
		{1: 505, 505},
		{1: 503, 503},
		// 5
		{1: 502, 502},
		{1: 501, 501},
		{1: 500, 500},
		{238: 1211},
		{4: 519, 115: 211, 216: 520, 229: 521, 238: 517, 267: 518},
		// 10
		{40: 360, 360, 217: 664, 301: 662, 307: 659, 310: 663, 321: 660, 325: 661, 407: 658},
		{115: 522},
		{115: 210},
		{115: 209},
		{115: 208},
		// 15
		{40: 524, 523, 48: 526, 265: 525},
		{493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 39: 493, 493, 493, 493, 493, 493, 493, 493, 49: 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 81: 493, 493, 493, 493, 493, 87: 493, 493, 102: 493, 493, 105: 493, 493, 109: 493, 493, 114: 493, 116: 493, 119: 493, 493, 122: 493, 493, 127: 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 138: 493, 493, 493, 493, 143: 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 163: 493, 493, 171: 493, 173: 493},
		{492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 39: 492, 492, 492, 492, 492, 492, 492, 492, 49: 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 81: 492, 492, 492, 492, 492, 87: 492, 492, 102: 492, 492, 105: 492, 492, 109: 492, 492, 114: 492, 116: 492, 119: 492, 492, 122: 492, 492, 127: 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 138: 492, 492, 492, 492, 143: 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 163: 492, 492, 171: 492, 173: 492},
		{84: 205, 364: 529},
		{207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 52: 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 68: 207, 84: 207, 109: 527},
		// 20
		{40: 524, 523, 48: 528},
		{206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 52: 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 68: 206, 84: 206},
		{84: 530},
		{164, 164, 164, 40: 524, 523, 45: 164, 164, 48: 531, 50: 164, 164, 87: 536, 126: 537, 331: 535, 334: 533, 362: 532, 405: 534},
		{498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 16: 498, 20: 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 37: 498, 39: 498, 498, 498, 43: 498, 498, 49: 498, 52: 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 68: 498, 83: 498, 498, 498, 87: 498, 498, 103: 498, 109: 656, 163: 498},
		// 25
		{163, 163, 163, 45: 163, 163, 50: 650, 649, 347: 648},
		{204, 204, 204, 45: 204, 204, 50: 204, 204},
		{203, 203, 203, 45: 203, 203, 50: 203, 203},
		{202, 202, 202, 45: 202, 202, 50: 202, 202},
		{40: 524, 523, 48: 552, 335: 553},
		// 30
		{37: 173, 40: 524, 523, 48: 539, 403: 538},
		{37: 540},
		{37: 172},
		{40: 524, 523, 48: 541, 86: 544, 264: 543, 363: 542},
		{494, 494, 494, 494, 7: 494, 10: 494, 494, 494, 14: 494, 494, 494, 20: 494, 34: 494, 494, 42: 494, 494, 494, 49: 494, 68: 494, 102: 494, 105: 494, 114: 494, 116: 494, 119: 494, 122: 494, 494, 127: 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 138: 494, 494, 494, 494, 143: 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 164: 494, 171: 494, 173: 494},
		// 35
		{548, 3: 549},
		{171, 3: 171},
		{168, 3: 168, 171: 546, 173: 547, 344: 545},
		{169, 3: 169},
		{167, 3: 167},
		// 40
		{166, 3: 166},
		{165, 165, 165, 45: 165, 165, 50: 165, 165, 266: 551},
		{40: 524, 523, 48: 541, 86: 544, 264: 550},
		{170, 3: 170},
		{174, 174, 174, 45: 174, 174, 50: 174, 174},
		// 45
		{14: 491, 491, 17: 491, 22: 491, 491, 491, 491, 491, 491, 491, 491, 491, 491, 491, 42: 491, 63: 491, 491, 491, 491, 491, 109: 646},
		{14: 574, 573, 17: 570, 22: 577, 578, 563, 558, 561, 559, 562, 556, 557, 582, 568, 42: 567, 63: 579, 581, 571, 580, 572, 117: 554, 560, 124: 566, 555, 262: 565, 569, 280: 576, 575, 361: 564},
		{315, 315, 315, 10: 315, 315, 14: 315, 315, 315, 315, 20: 315, 22: 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 34: 315, 315, 39: 315, 42: 315, 45: 315, 315, 50: 315, 315, 63: 315, 315, 315, 315, 315},
		{198, 198, 198, 14: 198, 198, 17: 198, 22: 198, 198, 198, 558, 198, 559, 198, 556, 557, 582, 198, 42: 198, 45: 198, 198, 50: 198, 198, 63: 198, 198, 198, 198, 198, 117: 645, 560},
		{47: 644},
		// 50
		{47: 643},
		{47: 642},
		{47: 641},
		{309, 309, 309, 10: 309, 309, 14: 309, 309, 309, 309, 20: 309, 22: 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 34: 309, 309, 39: 309, 42: 309, 45: 309, 309, 50: 309, 309, 63: 309, 309, 309, 309, 309},
		{308, 308, 308, 10: 308, 308, 14: 308, 308, 308, 308, 20: 308, 22: 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 34: 308, 308, 39: 308, 42: 308, 45: 308, 308, 50: 308, 308, 63: 308, 308, 308, 308, 308},
		// 55
		{307, 307, 307, 10: 307, 307, 14: 307, 307, 307, 307, 20: 307, 22: 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 34: 307, 307, 39: 307, 42: 307, 45: 307, 307, 50: 307, 307, 63: 307, 307, 307, 307, 307},
		{306, 306, 306, 10: 306, 306, 14: 306, 306, 306, 306, 20: 306, 22: 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 34: 306, 306, 39: 306, 42: 306, 45: 306, 306, 50: 306, 306, 63: 306, 306, 306, 306, 306},
		{201, 201, 201, 14: 574, 573, 17: 570, 22: 577, 578, 563, 558, 561, 559, 562, 556, 557, 582, 568, 42: 567, 45: 201, 201, 50: 201, 201, 63: 579, 581, 571, 580, 572, 117: 554, 560, 124: 566, 555, 262: 640, 569, 280: 576, 575},
		{200, 200, 200, 14: 200, 200, 17: 200, 22: 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 42: 200, 45: 200, 200, 50: 200, 200, 63: 200, 200, 200, 200, 200},
		{197, 197, 197, 14: 197, 197, 17: 197, 22: 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 42: 197, 45: 197, 197, 50: 197, 197, 63: 197, 197, 197, 197, 197},
		// 60
		{196, 196, 196, 14: 196, 196, 17: 196, 22: 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 42: 196, 45: 196, 196, 50: 196, 196, 63: 196, 196, 196, 196, 196},
		{21: 639, 40: 524, 523, 48: 638},
		{193, 193, 193, 14: 193, 193, 17: 193, 22: 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 42: 193, 45: 193, 193, 50: 193, 193, 63: 193, 193, 193, 193, 193},
		{192, 192, 192, 14: 192, 192, 17: 192, 22: 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 42: 192, 45: 192, 192, 50: 192, 192, 63: 192, 192, 192, 192, 192},
		{191, 191, 191, 14: 191, 191, 17: 191, 22: 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 42: 191, 45: 191, 191, 50: 191, 191, 63: 191, 191, 191, 191, 191},
		// 65
		{190, 190, 190, 14: 190, 190, 17: 190, 22: 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 42: 190, 45: 190, 190, 50: 190, 190, 63: 190, 190, 190, 190, 190},
		{189, 189, 189, 14: 189, 189, 17: 189, 22: 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 42: 189, 45: 189, 189, 50: 189, 189, 63: 189, 189, 189, 189, 189},
		{188, 188, 188, 14: 188, 188, 17: 188, 22: 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 42: 188, 45: 188, 188, 50: 188, 188, 63: 188, 188, 188, 188, 188},
		{187, 187, 187, 14: 187, 187, 17: 187, 22: 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 42: 187, 45: 187, 187, 50: 187, 187, 63: 187, 187, 187, 187, 187},
		{186, 186, 186, 14: 186, 186, 17: 186, 22: 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 42: 186, 45: 186, 186, 50: 186, 186, 63: 186, 186, 186, 186, 186},
		// 70
		{185, 185, 185, 14: 185, 185, 17: 185, 22: 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 42: 185, 45: 185, 185, 634, 50: 185, 185, 63: 185, 185, 185, 185, 185, 212: 635},
		{180, 180, 180, 14: 180, 180, 17: 180, 22: 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 42: 180, 45: 180, 180, 50: 180, 180, 63: 180, 180, 180, 180, 180},
		{305: 633, 319: 632},
		{177, 177, 177, 14: 177, 177, 17: 177, 22: 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 42: 177, 45: 177, 177, 631, 50: 177, 177, 63: 177, 177, 177, 177, 177},
		{175, 175, 175, 14: 175, 175, 17: 175, 22: 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 42: 175, 45: 175, 175, 50: 175, 175, 63: 175, 175, 175, 175, 175},
		// 75
		{37: 583},
		{13: 598, 69: 595, 597, 596, 593, 592, 586, 589, 590, 588, 587, 594, 591, 285: 585, 402: 584},
		{629, 13: 598, 69: 595, 597, 596, 593, 592, 586, 589, 590, 588, 587, 594, 591, 285: 630},
		{45, 13: 45, 69: 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45},
		{47: 610, 186: 628},
		// 80
		{47: 610, 186: 627},
		{47: 626},
		{47: 624, 241: 625},
		{47: 610, 186: 623, 241: 622},
		{47: 621},
		// 85
		{47: 620},
		{308: 618},
		{33, 8: 609, 13: 33, 47: 610, 69: 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 186: 608},
		{21: 607, 106: 605, 323: 606},
		{21: 604, 106: 602, 162: 603},
		// 90
		{21: 601, 106: 599, 162: 600},
		{21, 13: 21, 69: 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21},
		{24, 13: 24, 69: 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24},
		{23, 13: 23, 69: 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23},
		{22, 13: 22, 69: 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22},
		// 95
		{27, 13: 27, 69: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27},
		{26, 13: 26, 69: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26},
		{25, 13: 25, 69: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25},
		{30, 13: 30, 69: 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30},
		{29, 13: 29, 69: 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29},
		// 100
		{28, 13: 28, 69: 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
		{32, 13: 32, 69: 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32},
		{31, 13: 31, 69: 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31},
		{19, 13: 19, 69: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 302: 617, 306: 614, 313: 612, 315: 613, 318: 616, 327: 615, 398: 611},
		{20, 13: 20, 69: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
		// 105
		{18, 13: 18, 69: 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18},
		{17, 13: 17, 69: 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17},
		{16, 13: 16, 69: 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
		{15, 13: 15, 69: 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
		{14, 13: 14, 69: 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
		// 110
		{13, 13: 13, 69: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13},
		{47: 619},
		{34, 13: 34, 69: 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34},
		{35, 13: 35, 69: 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35},
		{36, 13: 36, 69: 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36},
		// 115
		{38, 13: 38, 69: 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38},
		{37, 13: 37, 69: 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
		{40, 13: 40, 69: 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{39, 13: 39, 69: 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{41, 13: 41, 69: 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41},
		// 120
		{42, 13: 42, 69: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42},
		{43, 13: 43, 69: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43},
		{46, 46, 46, 10: 46, 46, 14: 46, 46, 46, 46, 20: 46, 22: 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 34: 46, 46, 39: 46, 42: 46, 45: 46, 46, 50: 46, 46, 63: 46, 46, 46, 46, 46},
		{44, 13: 44, 69: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
		{176, 176, 176, 14: 176, 176, 17: 176, 22: 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 42: 176, 45: 176, 176, 50: 176, 176, 63: 176, 176, 176, 176, 176},
		// 125
		{179, 179, 179, 14: 179, 179, 17: 179, 22: 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 42: 179, 45: 179, 179, 50: 179, 179, 63: 179, 179, 179, 179, 179},
		{178, 178, 178, 14: 178, 178, 17: 178, 22: 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 42: 178, 45: 178, 178, 50: 178, 178, 63: 178, 178, 178, 178, 178},
		{184, 184, 184, 14: 184, 184, 17: 184, 22: 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 42: 184, 45: 184, 184, 50: 184, 184, 63: 184, 184, 184, 184, 184},
		{183, 183, 183, 14: 183, 183, 17: 183, 22: 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 42: 183, 45: 183, 183, 50: 183, 183, 63: 183, 183, 183, 183, 183, 137: 637, 142: 636},
		{182, 182, 182, 14: 182, 182, 17: 182, 22: 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 42: 182, 45: 182, 182, 50: 182, 182, 63: 182, 182, 182, 182, 182},
		// 130
		{181, 181, 181, 14: 181, 181, 17: 181, 22: 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 42: 181, 45: 181, 181, 50: 181, 181, 63: 181, 181, 181, 181, 181},
		{195, 195, 195, 14: 195, 195, 17: 195, 22: 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 42: 195, 45: 195, 195, 50: 195, 195, 63: 195, 195, 195, 195, 195},
		{194, 194, 194, 14: 194, 194, 17: 194, 22: 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 42: 194, 45: 194, 194, 50: 194, 194, 63: 194, 194, 194, 194, 194},
		{199, 199, 199, 14: 199, 199, 17: 199, 22: 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 42: 199, 45: 199, 199, 50: 199, 199, 63: 199, 199, 199, 199, 199},
		{310, 310, 310, 10: 310, 310, 14: 310, 310, 310, 310, 20: 310, 22: 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 34: 310, 310, 39: 310, 42: 310, 45: 310, 310, 50: 310, 310, 63: 310, 310, 310, 310, 310},
		// 135
		{311, 311, 311, 10: 311, 311, 14: 311, 311, 311, 311, 20: 311, 22: 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 34: 311, 311, 39: 311, 42: 311, 45: 311, 311, 50: 311, 311, 63: 311, 311, 311, 311, 311},
		{312, 312, 312, 10: 312, 312, 14: 312, 312, 312, 312, 20: 312, 22: 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 34: 312, 312, 39: 312, 42: 312, 45: 312, 312, 50: 312, 312, 63: 312, 312, 312, 312, 312},
		{313, 313, 313, 10: 313, 313, 14: 313, 313, 313, 313, 20: 313, 22: 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 34: 313, 313, 39: 313, 42: 313, 45: 313, 313, 50: 313, 313, 63: 313, 313, 313, 313, 313},
		{314, 314, 314, 10: 314, 314, 14: 314, 314, 314, 314, 20: 314, 22: 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 34: 314, 314, 39: 314, 42: 314, 45: 314, 314, 50: 314, 314, 63: 314, 314, 314, 314, 314},
		{40: 524, 523, 48: 647},
		// 140
		{14: 490, 490, 17: 490, 22: 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 42: 490, 63: 490, 490, 490, 490, 490},
		{160, 160, 160, 45: 652, 653, 346: 651},
		{162, 162, 162, 45: 162, 162},
		{161, 161, 161, 45: 161, 161},
		{212, 212, 212},
		// 145
		{223: 655},
		{223: 654},
		{158, 158, 158},
		{159, 159, 159},
		{40: 524, 523, 48: 657},
		// 150
		{497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 16: 497, 20: 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 37: 497, 39: 497, 497, 497, 43: 497, 497, 49: 497, 52: 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 68: 497, 83: 497, 497, 497, 87: 497, 497, 103: 497, 163: 497},
		{40: 524, 523, 48: 531, 126: 668},
		{239: 667},
		{239: 666},
		{40: 357, 357},
		// 155
		{40: 356, 356},
		{40: 355, 355, 217: 665},
		{40: 354, 354},
		{40: 353, 353},
		{40: 358, 358},
		// 160
		{40: 359, 359},
		{1: 352, 352, 10: 352, 352, 16: 352, 21: 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 37: 352, 39: 352, 83: 352, 352, 352, 87: 352, 352, 163: 670, 397: 669},
		{1: 218, 218, 10: 218, 218, 16: 218, 21: 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 37: 680, 39: 218, 83: 218, 218, 218, 87: 218, 218, 392: 678, 394: 679, 404: 677},
		{287: 671},
		{162: 675, 220: 673, 304: 674, 317: 672},
		// 165
		{1: 351, 351, 10: 351, 351, 16: 351, 21: 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 37: 351, 39: 351, 83: 351, 351, 351, 87: 351, 351},
		{1: 350, 350, 10: 350, 350, 16: 350, 21: 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 37: 350, 39: 350, 83: 350, 350, 350, 87: 350, 350},
		{220: 676},
		{1: 348, 348, 10: 348, 348, 16: 348, 21: 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 37: 348, 39: 348, 83: 348, 348, 348, 87: 348, 348},
		{1: 349, 349, 10: 349, 349, 16: 349, 21: 349, 349, 349, 349, 349, 349, 349, 349, 349, 349, 349, 349, 37: 349, 39: 349, 83: 349, 349, 349, 87: 349, 349},
		// 170
		{1: 6, 6, 10: 1201, 6, 273: 1200, 376: 1199},
		{1: 345, 345, 10: 345, 345},
		{1: 343, 343, 10: 343, 343, 16: 343, 21: 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 39: 343, 83: 343, 343, 343, 87: 343, 343, 360: 1019},
		{4: 86, 86, 687, 40: 524, 523, 48: 541, 55: 86, 86: 682, 121: 688, 175: 685, 184: 686, 681, 282: 684, 393: 683},
		{474, 3: 474},
		// 175
		{114: 763, 119: 780, 122: 782, 772, 127: 779, 770, 769, 776, 777, 773, 787, 786, 791, 768, 138: 789, 788, 775, 771, 143: 784, 765, 778, 767, 785, 766, 792, 790, 774, 781, 783, 764, 193: 756, 757, 198: 754, 760, 205: 761, 759, 758, 755, 210: 762},
		{751, 3: 752},
		{216, 3: 216},
		{214, 3: 214},
		{213, 3: 213},
		// 180
		{40: 524, 523, 48: 750},
		{4: 689, 690, 55: 691},
		{37: 746},
		{161: 741},
		{161: 692},
		// 185
		{37: 693},
		{40: 524, 523, 48: 541, 86: 694, 108: 695},
		{496, 3: 496},
		{697, 3: 696},
		{40: 524, 523, 48: 541, 86: 740},
		// 190
		{9: 698, 209: 699},
		{40: 524, 523, 48: 531, 126: 729},
		{72, 72, 72, 72, 72, 72, 72, 703, 52: 702, 709, 708, 72, 713, 714, 704, 706, 711, 705, 710, 111: 701, 712, 707, 156: 700, 715},
		{71, 71, 71, 71, 71, 71, 71, 703, 71, 71, 52: 702, 709, 708, 71, 713, 714, 704, 706, 711, 705, 710, 111: 728, 712, 707},
		{70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 52: 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70},
		// 195
		{68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 52: 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68: 68},
		{52: 727},
		{45: 725, 726},
		{64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 52: 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 68: 64},
		{63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 52: 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 68: 63},
		// 200
		{62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 52: 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 68: 62},
		{61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 52: 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 68: 61},
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 52: 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 68: 60},
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 52: 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 68: 59},
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 52: 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 68: 58},
		// 205
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 52: 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 68: 57},
		{115: 718},
		{311: 716},
		{47, 47, 47, 47, 47, 47, 47, 55: 47},
		{40: 524, 523, 48: 531, 126: 717},
		// 210
		{53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 52: 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 68: 53},
		{165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 37: 720, 40: 524, 523, 48: 526, 52: 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 68: 165, 265: 719, 721},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 52: 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 68: 56},
		{188: 722, 197: 723},
		{54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 52: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 68: 54},
		// 215
		{4: 519, 115: 211, 216: 520, 229: 521, 267: 518},
		{724},
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 52: 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 68: 55},
		{66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 52: 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 68: 66},
		{65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 52: 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 68: 65},
		// 220
		{67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 52: 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 68: 67},
		{69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 52: 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69},
		{77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 37: 731, 52: 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 84: 77, 342: 730},
		{75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 52: 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 84: 735, 391: 734},
		{40: 524, 523, 48: 541, 86: 694, 108: 732},
		// 225
		{733, 3: 696},
		{76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 52: 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 84: 76},
		{78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 52: 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78},
		{189: 736},
		{43: 738, 68: 737},
		// 230
		{74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 52: 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74},
		{8: 739},
		{73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 52: 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73},
		{495, 3: 495},
		{37: 742},
		// 235
		{40: 524, 523, 48: 541, 86: 694, 108: 743},
		{744, 3: 696},
		{72, 72, 72, 72, 72, 72, 72, 703, 52: 702, 709, 708, 72, 713, 714, 704, 706, 711, 705, 710, 111: 701, 712, 707, 156: 700, 745},
		{48, 48, 48, 48, 48, 48, 48, 55: 48},
		{40: 524, 523, 48: 541, 86: 694, 108: 747},
		// 240
		{748, 3: 696},
		{72, 72, 72, 72, 72, 72, 72, 703, 52: 702, 709, 708, 72, 713, 714, 704, 706, 711, 705, 710, 111: 701, 712, 707, 156: 700, 749},
		{49, 49, 49, 49, 49, 49, 49, 55: 49},
		{4: 85, 85, 7: 85, 85, 85, 55: 85},
		{1: 217, 217, 10: 217, 217, 16: 217, 21: 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 39: 217, 83: 217, 217, 217, 87: 217, 217},
		// 245
		{4: 86, 86, 687, 40: 524, 523, 48: 541, 55: 86, 86: 682, 121: 688, 175: 685, 184: 686, 681, 282: 753},
		{215, 3: 215},
		{472, 3: 472, 472, 472, 472, 472, 472, 472, 13: 472, 472, 472, 17: 472, 472, 472, 21: 472, 36: 472, 38: 917, 195: 916, 247: 915},
		{157, 3: 157, 157, 157, 157, 157, 157, 157, 12: 157, 157, 157, 157, 17: 157, 157, 157, 21: 157, 33: 157, 36: 157, 38: 157},
		{156, 3: 156, 156, 156, 156, 156, 156, 156, 12: 156, 156, 156, 156, 17: 156, 156, 156, 21: 156, 33: 156, 36: 156, 38: 156},
		// 250
		{153, 3: 153, 153, 153, 153, 153, 153, 153, 12: 153, 153, 153, 153, 17: 153, 153, 153, 21: 153, 33: 153, 36: 153, 38: 153},
		{152, 3: 152, 152, 152, 152, 152, 152, 152, 12: 152, 152, 152, 152, 17: 152, 152, 152, 21: 152, 33: 152, 36: 152, 38: 152},
		{151, 3: 151, 151, 151, 151, 151, 151, 151, 12: 151, 151, 151, 151, 17: 151, 151, 151, 21: 151, 33: 151, 36: 151, 38: 151},
		{150, 3: 150, 150, 150, 150, 150, 150, 150, 12: 150, 150, 150, 150, 17: 150, 150, 150, 21: 150, 33: 150, 36: 150, 38: 150},
		{149, 3: 149, 149, 149, 149, 149, 149, 149, 12: 149, 149, 149, 149, 17: 149, 149, 149, 21: 149, 33: 149, 36: 149, 38: 149},
		// 255
		{148, 3: 148, 148, 148, 148, 148, 148, 148, 12: 148, 148, 148, 148, 17: 148, 148, 148, 21: 148, 33: 148, 36: 148, 38: 148},
		{147, 3: 147, 147, 147, 147, 147, 147, 147, 12: 147, 147, 147, 147, 17: 147, 147, 147, 21: 147, 33: 147, 36: 147, 904, 147, 165: 905},
		{37: 897},
		{140, 3: 140, 140, 140, 140, 140, 140, 140, 12: 140, 140, 140, 140, 17: 140, 140, 140, 21: 140, 33: 140, 36: 140, 890, 140, 165: 891},
		{37: 887},
		// 260
		{137, 3: 137, 137, 137, 137, 137, 137, 137, 12: 137, 137, 137, 137, 17: 137, 137, 137, 21: 137, 33: 137, 36: 137, 881, 137},
		{134, 3: 134, 134, 134, 134, 134, 134, 134, 12: 134, 134, 134, 134, 17: 134, 134, 134, 21: 134, 33: 134, 36: 134, 878, 134},
		{132, 3: 132, 132, 132, 132, 132, 132, 132, 12: 132, 132, 132, 132, 17: 132, 132, 132, 21: 132, 33: 132, 36: 132, 38: 132},
		{131, 3: 131, 131, 131, 131, 131, 131, 131, 12: 131, 131, 131, 131, 17: 131, 131, 131, 21: 131, 33: 131, 36: 131, 38: 131},
		{130, 3: 130, 130, 130, 130, 130, 130, 130, 12: 130, 130, 130, 130, 17: 130, 130, 130, 21: 130, 33: 130, 36: 130, 38: 130, 123: 877},
		// 265
		{37: 874},
		{127, 3: 127, 127, 127, 127, 127, 127, 127, 12: 127, 127, 127, 127, 17: 127, 127, 127, 21: 127, 33: 127, 36: 127, 38: 127},
		{126, 3: 126, 126, 126, 126, 126, 126, 126, 12: 126, 126, 126, 126, 17: 126, 126, 126, 21: 126, 33: 126, 36: 126, 865, 126},
		{297: 844, 329: 843},
		{116, 3: 116, 116, 116, 116, 116, 116, 116, 12: 116, 116, 116, 116, 17: 116, 116, 116, 21: 116, 33: 116, 36: 116, 38: 116},
		// 270
		{115, 3: 115, 115, 115, 115, 115, 115, 115, 12: 115, 115, 115, 115, 17: 115, 115, 115, 21: 115, 33: 115, 36: 115, 38: 115},
		{114, 3: 114, 114, 114, 114, 114, 114, 114, 12: 114, 114, 114, 114, 17: 114, 114, 114, 21: 114, 33: 114, 36: 114, 38: 114},
		{113, 3: 113, 113, 113, 113, 113, 113, 113, 12: 113, 113, 113, 113, 17: 113, 113, 113, 21: 113, 33: 113, 36: 113, 38: 113},
		{112, 3: 112, 112, 112, 112, 112, 112, 112, 12: 112, 112, 112, 112, 17: 112, 112, 112, 21: 112, 33: 112, 36: 112, 38: 112},
		{111, 3: 111, 111, 111, 111, 111, 111, 111, 12: 111, 111, 111, 111, 17: 111, 111, 111, 21: 111, 33: 111, 36: 111, 840, 111},
		// 275
		{37: 833, 165: 834},
		{37: 830},
		{114: 815, 122: 814},
		{100, 3: 100, 100, 100, 100, 100, 100, 100, 12: 100, 100, 100, 100, 17: 100, 100, 100, 21: 100, 33: 100, 36: 100, 808, 100},
		{97, 3: 97, 97, 97, 97, 97, 97, 97, 12: 97, 97, 97, 97, 17: 97, 97, 97, 21: 97, 33: 97, 36: 97, 802, 97},
		// 280
		{94, 3: 94, 94, 94, 94, 94, 94, 94, 12: 94, 94, 94, 94, 17: 94, 94, 94, 21: 94, 33: 94, 36: 94, 794, 94},
		{91, 3: 91, 91, 91, 91, 91, 91, 91, 12: 91, 91, 91, 91, 17: 91, 91, 91, 21: 91, 33: 91, 36: 91, 38: 91},
		{90, 3: 90, 90, 90, 90, 90, 90, 90, 12: 90, 90, 90, 90, 17: 90, 90, 90, 21: 90, 33: 90, 36: 90, 38: 90},
		{89, 3: 89, 89, 89, 89, 89, 89, 89, 12: 89, 89, 89, 89, 17: 89, 89, 89, 21: 89, 33: 89, 36: 89, 38: 89},
		{320: 793},
		// 285
		{87, 3: 87, 87, 87, 87, 87, 87, 87, 12: 87, 87, 87, 87, 17: 87, 87, 87, 21: 87, 33: 87, 36: 87, 38: 87},
		{88, 3: 88, 88, 88, 88, 88, 88, 88, 12: 88, 88, 88, 88, 17: 88, 88, 88, 21: 88, 33: 88, 36: 88, 38: 88},
		{47: 795, 159: 796, 167: 797},
		{155, 3: 155, 109: 155},
		{154, 3: 154, 109: 154},
		// 290
		{798, 109: 799},
		{93, 3: 93, 93, 93, 93, 93, 93, 93, 12: 93, 93, 93, 93, 17: 93, 93, 93, 21: 93, 33: 93, 36: 93, 38: 93},
		{47: 800},
		{801},
		{92, 3: 92, 92, 92, 92, 92, 92, 92, 12: 92, 92, 92, 92, 17: 92, 92, 92, 21: 92, 33: 92, 36: 92, 38: 92},
		// 295
		{47: 795, 159: 796, 167: 803},
		{804, 109: 805},
		{96, 3: 96, 96, 96, 96, 96, 96, 96, 12: 96, 96, 96, 96, 17: 96, 96, 96, 21: 96, 33: 96, 36: 96, 38: 96},
		{47: 806},
		{807},
		// 300
		{95, 3: 95, 95, 95, 95, 95, 95, 95, 12: 95, 95, 95, 95, 17: 95, 95, 95, 21: 95, 33: 95, 36: 95, 38: 95},
		{47: 795, 159: 796, 167: 809},
		{810, 109: 811},
		{99, 3: 99, 99, 99, 99, 99, 99, 99, 12: 99, 99, 99, 99, 17: 99, 99, 99, 21: 99, 33: 99, 36: 99, 38: 99},
		{47: 812},
		// 305
		{813},
		{98, 3: 98, 98, 98, 98, 98, 98, 98, 12: 98, 98, 98, 98, 17: 98, 98, 98, 21: 98, 33: 98, 36: 98, 38: 98},
		{37: 823, 165: 824},
		{37: 816, 165: 817},
		{47: 821},
		// 310
		{37: 818},
		{47: 819},
		{820},
		{101, 3: 101, 101, 101, 101, 101, 101, 101, 12: 101, 101, 101, 101, 17: 101, 101, 101, 21: 101, 33: 101, 36: 101, 38: 101},
		{822},
		// 315
		{102, 3: 102, 102, 102, 102, 102, 102, 102, 12: 102, 102, 102, 102, 17: 102, 102, 102, 21: 102, 33: 102, 36: 102, 38: 102},
		{47: 828},
		{37: 825},
		{47: 826},
		{827},
		// 320
		{103, 3: 103, 103, 103, 103, 103, 103, 103, 12: 103, 103, 103, 103, 17: 103, 103, 103, 21: 103, 33: 103, 36: 103, 38: 103},
		{829},
		{104, 3: 104, 104, 104, 104, 104, 104, 104, 12: 104, 104, 104, 104, 17: 104, 104, 104, 21: 104, 33: 104, 36: 104, 38: 104},
		{47: 831},
		{832},
		// 325
		{105, 3: 105, 105, 105, 105, 105, 105, 105, 12: 105, 105, 105, 105, 17: 105, 105, 105, 21: 105, 33: 105, 36: 105, 38: 105},
		{47: 838},
		{37: 835},
		{47: 836},
		{837},
		// 330
		{108, 3: 108, 108, 108, 108, 108, 108, 108, 12: 108, 108, 108, 108, 17: 108, 108, 108, 21: 108, 33: 108, 36: 108, 38: 108},
		{839},
		{109, 3: 109, 109, 109, 109, 109, 109, 109, 12: 109, 109, 109, 109, 17: 109, 109, 109, 21: 109, 33: 109, 36: 109, 38: 109},
		{47: 841},
		{842},
		// 335
		{110, 3: 110, 110, 110, 110, 110, 110, 110, 12: 110, 110, 110, 110, 17: 110, 110, 110, 21: 110, 33: 110, 36: 110, 38: 110},
		{37: 859, 116: 858},
		{37: 846, 116: 845},
		{236: 854},
		{47: 847},
		// 340
		{848},
		{116: 849},
		{236: 850},
		{119, 3: 119, 119, 119, 119, 119, 119, 119, 12: 119, 119, 119, 119, 17: 119, 119, 119, 21: 119, 33: 119, 36: 119, 851, 119},
		{47: 852},
		// 345
		{853},
		{118, 3: 118, 118, 118, 118, 118, 118, 118, 12: 118, 118, 118, 118, 17: 118, 118, 118, 21: 118, 33: 118, 36: 118, 38: 118},
		{120, 3: 120, 120, 120, 120, 120, 120, 120, 12: 120, 120, 120, 120, 17: 120, 120, 120, 21: 120, 33: 120, 36: 120, 855, 120},
		{47: 856},
		{857},
		// 350
		{117, 3: 117, 117, 117, 117, 117, 117, 117, 12: 117, 117, 117, 117, 17: 117, 117, 117, 21: 117, 33: 117, 36: 117, 38: 117},
		{228: 864},
		{47: 860},
		{861},
		{116: 862},
		// 355
		{228: 863},
		{121, 3: 121, 121, 121, 121, 121, 121, 121, 12: 121, 121, 121, 121, 17: 121, 121, 121, 21: 121, 33: 121, 36: 121, 38: 121},
		{122, 3: 122, 122, 122, 122, 122, 122, 122, 12: 122, 122, 122, 122, 17: 122, 122, 122, 21: 122, 33: 122, 36: 122, 38: 122},
		{47: 866},
		{867},
		// 360
		{125, 3: 125, 125, 125, 125, 125, 125, 125, 12: 125, 125, 125, 125, 17: 125, 868, 125, 21: 125, 33: 125, 36: 125, 38: 125},
		{240: 869, 314: 870},
		{243: 873},
		{240: 871},
		{243: 872},
		// 365
		{123, 3: 123, 123, 123, 123, 123, 123, 123, 12: 123, 123, 123, 123, 17: 123, 123, 123, 21: 123, 33: 123, 36: 123, 38: 123},
		{124, 3: 124, 124, 124, 124, 124, 124, 124, 12: 124, 124, 124, 124, 17: 124, 124, 124, 21: 124, 33: 124, 36: 124, 38: 124},
		{47: 875},
		{876},
		{128, 3: 128, 128, 128, 128, 128, 128, 128, 12: 128, 128, 128, 128, 17: 128, 128, 128, 21: 128, 33: 128, 36: 128, 38: 128},
		// 370
		{129, 3: 129, 129, 129, 129, 129, 129, 129, 12: 129, 129, 129, 129, 17: 129, 129, 129, 21: 129, 33: 129, 36: 129, 38: 129},
		{47: 795, 159: 796, 167: 879},
		{880},
		{133, 3: 133, 133, 133, 133, 133, 133, 133, 12: 133, 133, 133, 133, 17: 133, 133, 133, 21: 133, 33: 133, 36: 133, 38: 133},
		{47: 795, 159: 796, 167: 882},
		// 375
		{883, 3: 884},
		{136, 3: 136, 136, 136, 136, 136, 136, 136, 12: 136, 136, 136, 136, 17: 136, 136, 136, 21: 136, 33: 136, 36: 136, 38: 136},
		{47: 885},
		{886},
		{135, 3: 135, 135, 135, 135, 135, 135, 135, 12: 135, 135, 135, 135, 17: 135, 135, 135, 21: 135, 33: 135, 36: 135, 38: 135},
		// 380
		{47: 888},
		{889},
		{138, 3: 138, 138, 138, 138, 138, 138, 138, 12: 138, 138, 138, 138, 17: 138, 138, 138, 21: 138, 33: 138, 36: 138, 38: 138},
		{47: 895},
		{37: 892},
		// 385
		{47: 893},
		{894},
		{106, 3: 106, 106, 106, 106, 106, 106, 106, 12: 106, 106, 106, 106, 17: 106, 106, 106, 21: 106, 33: 106, 36: 106, 38: 106},
		{896},
		{139, 3: 139, 139, 139, 139, 139, 139, 139, 12: 139, 139, 139, 139, 17: 139, 139, 139, 21: 139, 33: 139, 36: 139, 38: 139},
		// 390
		{47: 898},
		{899, 114: 901, 218: 900},
		{143, 3: 143, 143, 143, 143, 143, 143, 143, 12: 143, 143, 143, 143, 17: 143, 143, 143, 21: 143, 33: 143, 36: 143, 38: 143},
		{903},
		{902},
		// 395
		{141, 3: 141, 141, 141, 141, 141, 141, 141, 12: 141, 141, 141, 141, 17: 141, 141, 141, 21: 141, 33: 141, 36: 141, 38: 141},
		{142, 3: 142, 142, 142, 142, 142, 142, 142, 12: 142, 142, 142, 142, 17: 142, 142, 142, 21: 142, 33: 142, 36: 142, 38: 142},
		{47: 909},
		{37: 906},
		{47: 907},
		// 400
		{908},
		{107, 3: 107, 107, 107, 107, 107, 107, 107, 12: 107, 107, 107, 107, 17: 107, 107, 107, 21: 107, 33: 107, 36: 107, 38: 107},
		{910, 114: 912, 218: 911},
		{146, 3: 146, 146, 146, 146, 146, 146, 146, 12: 146, 146, 146, 146, 17: 146, 146, 146, 21: 146, 33: 146, 36: 146, 38: 146},
		{914},
		// 405
		{913},
		{144, 3: 144, 144, 144, 144, 144, 144, 144, 12: 144, 144, 144, 144, 17: 144, 144, 144, 21: 144, 33: 144, 36: 144, 38: 144},
		{145, 3: 145, 145, 145, 145, 145, 145, 145, 12: 145, 145, 145, 145, 17: 145, 145, 145, 21: 145, 33: 145, 36: 145, 38: 145},
		{469, 3: 469, 469, 469, 469, 469, 469, 469, 13: 469, 469, 469, 17: 920, 469, 469, 21: 469, 36: 469, 399: 919},
		{471, 3: 471, 471, 471, 471, 471, 471, 471, 12: 471, 471, 471, 471, 17: 471, 471, 471, 21: 471, 33: 471, 36: 471},
		// 410
		{40: 524, 523, 48: 918},
		{470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 21: 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 36: 470, 39: 470, 83: 470, 470, 470, 87: 470, 470},
		{467, 3: 467, 467, 467, 467, 467, 467, 467, 13: 467, 923, 924, 18: 467, 467, 21: 467, 36: 467, 203: 922, 375: 921},
		{468, 3: 468, 468, 468, 468, 468, 468, 468, 13: 468, 468, 468, 18: 468, 468, 21: 468, 36: 468},
		{463, 3: 463, 463, 463, 463, 463, 463, 463, 13: 463, 18: 463, 463, 21: 928, 36: 929, 249: 926, 925, 259: 927},
		// 415
		{466, 3: 466, 466, 466, 466, 466, 466, 466, 13: 466, 18: 466, 466, 21: 466, 36: 466},
		{465, 3: 465, 465, 465, 465, 465, 465, 465, 13: 465, 18: 465, 465, 21: 465, 36: 465},
		{464, 3: 464, 464, 464, 464, 464, 464, 464, 13: 464, 18: 464, 464, 21: 464, 36: 464},
		{435, 3: 435, 435, 435, 435, 435, 435, 435, 13: 980, 18: 435, 435, 256: 979},
		{462, 3: 462, 462, 462, 462, 462, 462, 462, 13: 462, 18: 462, 462, 33: 462},
		// 420
		{461, 3: 461, 461, 461, 461, 461, 461, 461, 13: 461, 18: 461, 461, 33: 461},
		{20: 974, 40: 976, 47: 975, 257: 973},
		{170: 930, 172: 932, 288: 931},
		{160: 971},
		{170: 968},
		// 425
		{21: 933},
		{84: 935, 170: 934},
		{160: 966},
		{8: 936},
		{170: 937},
		// 430
		{160: 938},
		{453, 3: 453, 453, 453, 453, 453, 453, 453, 13: 453, 18: 453, 453, 33: 453, 37: 940, 176: 939},
		{454, 3: 454, 454, 454, 454, 454, 454, 454, 13: 454, 18: 454, 454, 33: 454},
		{451, 89: 951, 949, 92: 944, 945, 947, 952, 950, 946, 948, 954, 953, 943, 260: 942, 359: 941},
		{964, 89: 951, 949, 92: 944, 945, 947, 952, 950, 946, 948, 954, 953, 943, 260: 965},
		// 435
		{450, 89: 450, 450, 92: 450, 450, 450, 450, 450, 450, 450, 450, 450, 450},
		{18: 960},
		{172: 958},
		{47: 957},
		{444, 89: 444, 444, 92: 444, 444, 444, 444, 444, 444, 444, 444, 444, 444},
		// 440
		{47: 956},
		{442, 89: 442, 442, 92: 442, 442, 442, 442, 442, 442, 442, 442, 442, 442},
		{441, 89: 441, 441, 92: 441, 441, 441, 441, 441, 441, 441, 441, 441, 441},
		{440, 89: 440, 440, 92: 440, 440, 440, 440, 440, 440, 440, 440, 440, 440},
		{47: 955},
		// 445
		{438, 89: 438, 438, 92: 438, 438, 438, 438, 438, 438, 438, 438, 438, 438},
		{437, 89: 437, 437, 92: 437, 437, 437, 437, 437, 437, 437, 437, 437, 437},
		{436, 89: 436, 436, 92: 436, 436, 436, 436, 436, 436, 436, 436, 436, 436},
		{439, 89: 439, 439, 92: 439, 439, 439, 439, 439, 439, 439, 439, 439, 439},
		{443, 89: 443, 443, 92: 443, 443, 443, 443, 443, 443, 443, 443, 443, 443},
		// 450
		{445, 89: 445, 445, 92: 445, 445, 445, 445, 445, 445, 445, 445, 445, 445},
		{47: 959},
		{446, 89: 446, 446, 92: 446, 446, 446, 446, 446, 446, 446, 446, 446, 446},
		{47: 961, 226: 962},
		{448, 89: 448, 448, 92: 448, 448, 448, 448, 448, 448, 448, 448, 448, 448},
		// 455
		{328: 963},
		{447, 89: 447, 447, 92: 447, 447, 447, 447, 447, 447, 447, 447, 447, 447},
		{452, 3: 452, 452, 452, 452, 452, 452, 452, 13: 452, 18: 452, 452, 33: 452},
		{449, 89: 449, 449, 92: 449, 449, 449, 449, 449, 449, 449, 449, 449, 449},
		{453, 3: 453, 453, 453, 453, 453, 453, 453, 13: 453, 18: 453, 453, 33: 453, 37: 940, 176: 967},
		// 460
		{455, 3: 455, 455, 455, 455, 455, 455, 455, 13: 455, 18: 455, 455, 33: 455},
		{160: 969},
		{453, 3: 453, 453, 453, 453, 453, 453, 453, 13: 453, 18: 453, 453, 33: 453, 37: 940, 176: 970},
		{457, 3: 457, 457, 457, 457, 457, 457, 457, 13: 457, 18: 457, 457, 33: 457},
		{453, 3: 453, 453, 453, 453, 453, 453, 453, 13: 453, 18: 453, 453, 33: 453, 37: 940, 176: 972},
		// 465
		{458, 3: 458, 458, 458, 458, 458, 458, 458, 13: 458, 18: 458, 458, 33: 458},
		{460, 3: 460, 460, 460, 460, 460, 460, 460, 13: 460, 18: 460, 460, 33: 460},
		{8: 977},
		{2, 3: 2, 2, 2, 2, 2, 2, 2, 13: 2, 18: 2, 2, 33: 2},
		{1, 3: 1, 1, 1, 1, 1, 1, 1, 13: 1, 18: 1, 1, 33: 1},
		// 470
		{40: 976, 47: 975, 257: 978},
		{459, 3: 459, 459, 459, 459, 459, 459, 459, 13: 459, 18: 459, 459, 33: 459},
		{423, 3: 423, 86, 86, 687, 86, 86, 86, 18: 1001, 1000, 121: 999, 181: 998, 268: 997, 340: 995, 366: 996},
		{432, 3: 432, 432, 432, 432, 432, 432, 432, 18: 432, 432, 432, 56: 983, 110: 432, 120: 432, 190: 432, 353: 982, 355: 981},
		{434, 3: 434, 434, 434, 434, 434, 434, 434, 18: 434, 434},
		// 475
		{430, 3: 430, 430, 430, 430, 430, 430, 430, 18: 430, 430, 430, 110: 430, 120: 430, 190: 986, 358: 985},
		{120: 984},
		{431, 3: 431, 431, 431, 431, 431, 431, 431, 18: 431, 431, 431, 110: 431, 120: 431, 190: 431},
		{428, 3: 428, 428, 428, 428, 428, 428, 428, 18: 428, 428, 428, 110: 428, 120: 990, 374: 989},
		{172: 987},
		// 480
		{40: 524, 523, 48: 988},
		{429, 3: 429, 429, 429, 429, 429, 429, 429, 18: 429, 429, 429, 110: 429, 120: 429},
		{426, 3: 426, 426, 426, 426, 426, 426, 426, 18: 426, 426, 993, 110: 992, 396: 991},
		{427, 3: 427, 427, 427, 427, 427, 427, 427, 18: 427, 427, 427, 110: 427},
		{433, 3: 433, 433, 433, 433, 433, 433, 433, 18: 433, 433},
		// 485
		{425, 3: 425, 425, 425, 425, 425, 425, 425, 18: 425, 425},
		{110: 994},
		{424, 3: 424, 424, 424, 424, 424, 424, 424, 18: 424, 424},
		{473, 3: 473},
		{422, 3: 422},
		// 490
		{421, 3: 421, 86, 86, 687, 86, 86, 86, 121: 1016, 181: 1015},
		{420, 3: 420, 420, 420, 420, 420, 420, 420},
		{4: 1009, 1010, 7: 1008, 1007, 698, 209: 1006, 269: 1005},
		{312: 1003},
		{119: 1002},
		// 495
		{51, 3: 51},
		{40: 524, 523, 48: 531, 126: 1004},
		{52, 3: 52},
		{72, 3: 72, 72, 72, 72, 703, 72, 72, 52: 702, 709, 708, 56: 713, 714, 704, 706, 711, 705, 710, 111: 701, 712, 707, 156: 700, 1014},
		{72, 3: 72, 72, 72, 72, 703, 72, 72, 52: 702, 709, 708, 56: 713, 714, 704, 706, 711, 705, 710, 111: 701, 712, 707, 156: 700, 1013},
		// 500
		{82, 3: 82, 82, 82, 82, 82, 82, 82, 52: 82, 82, 82, 56: 82, 82, 82, 82, 82, 82, 82},
		{8: 1012},
		{80, 3: 80, 80, 80, 80, 80, 80, 80, 52: 80, 80, 80, 56: 80, 80, 80, 80, 80, 80, 80},
		{161: 1011},
		{79, 3: 79, 79, 79, 79, 79, 79, 79, 52: 79, 79, 79, 56: 79, 79, 79, 79, 79, 79, 79},
		// 505
		{81, 3: 81, 81, 81, 81, 81, 81, 81, 52: 81, 81, 81, 56: 81, 81, 81, 81, 81, 81, 81},
		{83, 3: 83, 83, 83, 83, 83, 83, 83},
		{84, 3: 84, 84, 84, 84, 84, 84, 84},
		{419, 3: 419, 419, 419, 419, 419, 419, 419},
		{4: 1009, 1010, 7: 1008, 1007, 698, 209: 1017, 269: 1005},
		// 510
		{72, 3: 72, 72, 72, 72, 703, 72, 72, 52: 702, 709, 708, 56: 713, 714, 704, 706, 711, 705, 710, 111: 701, 712, 707, 156: 700, 1018},
		{83, 3: 83, 83, 83, 83, 83, 83, 83},
		{1: 342, 342, 10: 342, 342, 16: 342, 21: 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 39: 342, 83: 342, 342, 342, 87: 342, 342, 332: 1020},
		{1: 341, 341, 10: 341, 341, 16: 341, 21: 1022, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 39: 341, 83: 341, 341, 341, 87: 341, 341, 348: 1021},
		{1: 338, 338, 10: 338, 338, 16: 338, 22: 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 39: 338, 83: 338, 1026, 338, 87: 338, 338, 382: 1024, 1025},
		// 515
		{38: 917, 195: 1023},
		{1: 340, 340, 10: 340, 340, 16: 340, 22: 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 39: 340, 83: 340, 340, 340, 87: 340, 340},
		{1: 332, 332, 10: 332, 332, 16: 327, 22: 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 39: 327, 83: 327, 85: 327, 87: 1041, 1042, 350: 1040, 390: 1039},
		{1: 335, 335, 10: 335, 335, 16: 335, 22: 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 39: 335, 83: 335, 1033, 335, 87: 335, 335, 384: 1032},
		{219: 1027},
		// 520
		{12: 1028, 231: 1029},
		{221: 1031},
		{221: 1030},
		{1: 336, 336, 10: 336, 336, 16: 336, 22: 336, 336, 336, 336, 336, 336, 336, 336, 336, 336, 336, 39: 336, 83: 336, 336, 336, 87: 336, 336},
		{1: 337, 337, 10: 337, 337, 16: 337, 22: 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 39: 337, 83: 337, 337, 337, 87: 337, 337},
		// 525
		{1: 339, 339, 10: 339, 339, 16: 339, 22: 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 39: 339, 83: 339, 85: 339, 87: 339, 339},
		{219: 1034},
		{189: 1035, 231: 1036},
		{235: 1038},
		{235: 1037},
		// 530
		{1: 333, 333, 10: 333, 333, 16: 333, 22: 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 39: 333, 83: 333, 85: 333, 87: 333, 333},
		{1: 334, 334, 10: 334, 334, 16: 334, 22: 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 39: 334, 83: 334, 85: 334, 87: 334, 334},
		{1: 219, 219, 10: 219, 219, 406: 1198},
		{16: 1060, 22: 1058, 1061, 563, 558, 561, 559, 562, 556, 557, 582, 1055, 39: 1059, 83: 1062, 85: 1051, 117: 554, 560, 124: 1056, 1054, 158: 1057, 168: 1053, 211: 1050, 356: 1052},
		{40: 524, 523, 48: 1046},
		// 535
		{295: 1043},
		{45: 1045, 1044},
		{16: 326, 22: 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 39: 326, 83: 326, 85: 326},
		{16: 325, 22: 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 39: 325, 83: 325, 85: 325},
		{37: 1047},
		// 540
		{40: 524, 523, 48: 541, 86: 694, 108: 1048},
		{1049, 3: 696},
		{1: 328, 328, 10: 328, 328},
		{1: 305, 305, 10: 305, 305, 16: 1060, 20: 305, 22: 1058, 1061, 563, 558, 561, 559, 562, 556, 557, 582, 1055, 34: 305, 305, 39: 1059, 117: 554, 560, 124: 1056, 1054, 158: 1195, 168: 1101, 286: 1194},
		{83: 1096, 115: 1095, 309: 1094, 386: 1093},
		// 545
		{1: 329, 329, 10: 329, 329},
		{1: 322, 322, 10: 322, 322, 16: 322, 20: 322, 22: 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 34: 322, 322, 39: 322},
		{1: 320, 320, 10: 320, 320, 16: 320, 20: 320, 22: 320, 320, 320, 558, 320, 559, 320, 556, 557, 582, 320, 34: 320, 320, 39: 320, 117: 645, 560},
		{40: 524, 523, 43: 1091, 48: 1090},
		{1: 317, 317, 10: 317, 317, 16: 317, 20: 317, 22: 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 34: 317, 317, 39: 317},
		// 550
		{1: 316, 316, 10: 316, 316, 16: 316, 20: 316, 22: 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 34: 316, 316, 39: 316},
		{1: 303, 303, 10: 303, 303, 16: 303, 20: 303, 22: 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 34: 303, 303, 39: 303},
		{237: 1086},
		{237: 1068},
		{1: 298, 298, 10: 298, 298, 16: 298, 20: 298, 22: 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 34: 298, 298, 39: 298},
		// 555
		{230: 1063},
		{290: 1064},
		{1: 222, 222, 10: 222, 222, 234: 222, 258: 1065},
		{1: 221, 221, 10: 221, 221, 234: 1066},
		{226: 1067},
		// 560
		{1: 220, 220, 10: 220, 220},
		{22: 1069},
		{1: 297, 297, 10: 297, 297, 16: 297, 20: 297, 22: 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 34: 297, 297, 39: 297, 104: 1071, 338: 1070},
		{1: 290, 290, 10: 290, 290, 16: 290, 20: 1080, 22: 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 34: 290, 290, 39: 1079, 337: 1078},
		{232: 1072, 289: 1073},
		// 565
		{1: 296, 296, 10: 296, 296, 16: 296, 20: 296, 22: 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 34: 296, 296, 39: 296, 137: 1077, 142: 1076},
		{1: 293, 293, 10: 293, 293, 16: 293, 20: 293, 22: 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 34: 293, 293, 39: 293, 137: 1075, 142: 1074},
		{1: 292, 292, 10: 292, 292, 16: 292, 20: 292, 22: 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 34: 292, 292, 39: 292},
		{1: 291, 291, 10: 291, 291, 16: 291, 20: 291, 22: 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 34: 291, 291, 39: 291},
		{1: 295, 295, 10: 295, 295, 16: 295, 20: 295, 22: 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 34: 295, 295, 39: 295},
		// 570
		{1: 294, 294, 10: 294, 294, 16: 294, 20: 294, 22: 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 34: 294, 294, 39: 294},
		{1: 299, 299, 10: 299, 299, 16: 299, 20: 299, 22: 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 34: 299, 299, 39: 299},
		{224: 1084},
		{39: 1081},
		{224: 1082},
		// 575
		{227: 1083},
		{1: 288, 288, 10: 288, 288, 16: 288, 20: 288, 22: 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 34: 288, 288, 39: 288},
		{227: 1085},
		{1: 289, 289, 10: 289, 289, 16: 289, 20: 289, 22: 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 34: 289, 289, 39: 289},
		{22: 1087},
		// 580
		{1: 302, 302, 10: 302, 302, 16: 302, 20: 302, 22: 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 34: 302, 302, 39: 302, 212: 1089, 291: 1088},
		{1: 301, 301, 10: 301, 301, 16: 301, 20: 301, 22: 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 34: 301, 301, 39: 301},
		{1: 300, 300, 10: 300, 300, 16: 300, 20: 300, 22: 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 34: 300, 300, 39: 300},
		{1: 319, 319, 10: 319, 319, 16: 319, 20: 319, 22: 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 34: 319, 319, 39: 319},
		{40: 524, 523, 48: 1092},
		// 585
		{1: 318, 318, 10: 318, 318, 16: 318, 20: 318, 22: 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 34: 318, 318, 39: 318},
		{1: 330, 330, 10: 330, 330},
		{1: 324, 324, 10: 324, 324, 16: 1060, 20: 324, 22: 1058, 1061, 563, 558, 561, 559, 562, 556, 557, 582, 1055, 34: 324, 324, 39: 1059, 117: 554, 560, 124: 1056, 1054, 158: 1057, 168: 1053, 211: 1098, 283: 1102},
		{1: 324, 324, 10: 324, 324, 16: 1060, 22: 1058, 1061, 563, 558, 561, 559, 562, 556, 557, 582, 1055, 39: 1059, 117: 554, 560, 124: 1056, 1054, 158: 1057, 168: 1053, 211: 1098, 283: 1099},
		{1: 222, 222, 10: 222, 222, 258: 1097},
		// 590
		{1: 225, 225, 10: 225, 225},
		{1: 323, 323, 10: 323, 323, 16: 1060, 20: 323, 22: 1058, 1061, 563, 558, 561, 559, 562, 556, 557, 582, 1055, 34: 323, 323, 39: 1059, 117: 554, 560, 124: 1056, 1054, 158: 1057, 168: 1101},
		{1: 223, 223, 10: 223, 223, 365: 1100},
		{1: 226, 226, 10: 226, 226},
		{1: 321, 321, 10: 321, 321, 16: 321, 20: 321, 22: 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 34: 321, 321, 39: 321},
		// 595
		{1: 305, 305, 10: 305, 305, 16: 1060, 20: 305, 22: 1058, 1061, 34: 305, 305, 39: 1059, 158: 1103, 286: 1105, 357: 1104},
		{1: 304, 304, 10: 304, 304, 20: 304, 34: 304, 304},
		{1: 227, 227, 10: 227, 227},
		{1: 287, 287, 10: 287, 287, 20: 1107, 34: 287, 1106, 166: 1110, 182: 1109, 1108, 271: 1111},
		{1: 282, 282, 10: 282, 282, 20: 1140, 34: 282, 282, 37: 1141, 81: 282, 282, 91: 282, 107: 282, 191: 1139, 270: 1161, 367: 1160},
		// 600
		{35: 1158},
		{1: 284, 284, 10: 284, 284, 34: 284},
		{1: 247, 247, 10: 247, 247, 20: 1134, 34: 247, 1133, 166: 1132},
		{1: 246, 246, 10: 246, 246, 20: 246, 34: 246, 246},
		{1: 241, 241, 10: 241, 241, 34: 1112, 261: 1113},
		// 605
		{44: 1114, 53: 1117, 1116, 189: 1115, 298: 1118, 1120, 303: 1119},
		{1: 224, 224, 10: 224, 224},
		{174: 1130},
		{174: 1128},
		{174: 1126},
		// 610
		{174: 1121},
		{1: 236, 236, 10: 236, 236},
		{1: 235, 235, 10: 235, 235},
		{1: 234, 234, 10: 234, 234},
		{1: 230, 230, 10: 230, 230, 177: 1123, 1125, 1122, 1124},
		// 615
		{1: 237, 237, 10: 237, 237},
		{1: 233, 233, 10: 233, 233},
		{1: 232, 232, 10: 232, 232},
		{1: 231, 231, 10: 231, 231},
		{1: 230, 230, 10: 230, 230, 177: 1123, 1125, 1127, 1124},
		// 620
		{1: 238, 238, 10: 238, 238},
		{1: 230, 230, 10: 230, 230, 177: 1123, 1125, 1129, 1124},
		{1: 239, 239, 10: 239, 239},
		{1: 230, 230, 10: 230, 230, 177: 1123, 1125, 1131, 1124},
		{1: 240, 240, 10: 240, 240},
		// 625
		{1: 245, 245, 10: 245, 245, 20: 245, 34: 245, 245},
		{20: 1140, 37: 1141, 191: 1139, 270: 1142},
		{35: 1135},
		{37: 1136},
		{40: 524, 523, 48: 541, 86: 694, 108: 1137},
		// 630
		{1138, 3: 696},
		{1: 242, 242, 10: 242, 242, 20: 242, 34: 242, 242},
		{104: 1149, 215: 1150},
		{191: 1148},
		{40: 524, 523, 48: 541, 86: 694, 108: 1146},
		// 635
		{37: 1143},
		{40: 524, 523, 48: 541, 86: 694, 108: 1144},
		{1145, 3: 696},
		{1: 243, 243, 10: 243, 243, 20: 243, 34: 243, 243},
		{1147, 3: 696},
		// 640
		{1: 244, 244, 10: 244, 244, 20: 244, 34: 244, 244},
		{1: 274, 274, 10: 274, 274, 20: 274, 34: 274, 274, 37: 274, 81: 274, 274, 91: 274, 107: 274},
		{232: 1152, 292: 1153, 300: 1151},
		{1: 273, 273, 10: 273, 273, 20: 273, 34: 273, 273, 37: 273, 81: 273, 273, 91: 273, 107: 273},
		{1: 281, 281, 10: 281, 281, 20: 281, 34: 281, 281, 37: 281, 81: 281, 281, 91: 281, 107: 281},
		// 645
		{1: 280, 280, 10: 280, 280, 20: 280, 34: 280, 280, 37: 280, 81: 280, 280, 91: 280, 107: 280, 137: 1157, 142: 1156},
		{1: 277, 277, 10: 277, 277, 20: 277, 34: 277, 277, 37: 277, 81: 277, 277, 91: 277, 107: 277, 137: 1155, 142: 1154},
		{1: 276, 276, 10: 276, 276, 20: 276, 34: 276, 276, 37: 276, 81: 276, 276, 91: 276, 107: 276},
		{1: 275, 275, 10: 275, 275, 20: 275, 34: 275, 275, 37: 275, 81: 275, 275, 91: 275, 107: 275},
		{1: 279, 279, 10: 279, 279, 20: 279, 34: 279, 279, 37: 279, 81: 279, 279, 91: 279, 107: 279},
		// 650
		{1: 278, 278, 10: 278, 278, 20: 278, 34: 278, 278, 37: 278, 81: 278, 278, 91: 278, 107: 278},
		{1: 248, 248, 10: 248, 248, 20: 1134, 34: 248, 1133, 37: 1136, 166: 1110, 182: 1109, 1159},
		{1: 285, 285, 10: 285, 285, 34: 285},
		{1: 248, 248, 10: 248, 248, 20: 1134, 34: 248, 1133, 166: 1110, 182: 1109, 1193},
		{1: 272, 272, 10: 272, 272, 20: 272, 34: 272, 272, 37: 1143, 81: 272, 272, 91: 272, 107: 1163, 372: 1162},
		// 655
		{1: 266, 266, 10: 266, 266, 20: 266, 34: 266, 266, 81: 266, 266, 91: 1170, 368: 1169},
		{137: 1167, 142: 1165, 162: 1164, 296: 1168, 316: 1166},
		{1: 271, 271, 10: 271, 271, 20: 271, 34: 271, 271, 81: 271, 271, 91: 271},
		{1: 270, 270, 10: 270, 270, 20: 270, 34: 270, 270, 81: 270, 270, 91: 270},
		{1: 269, 269, 10: 269, 269, 20: 269, 34: 269, 269, 81: 269, 269, 91: 269},
		// 660
		{1: 268, 268, 10: 268, 268, 20: 268, 34: 268, 268, 81: 268, 268, 91: 268},
		{1: 267, 267, 10: 267, 267, 20: 267, 34: 267, 267, 81: 267, 267, 91: 267},
		{1: 254, 254, 10: 254, 254, 20: 1187, 34: 254, 254, 81: 254, 1186, 371: 1185},
		{1: 264, 264, 10: 264, 264, 20: 264, 34: 264, 264, 81: 264, 264, 104: 264, 172: 1173, 215: 1172, 369: 1171},
		{1: 259, 259, 10: 259, 259, 20: 259, 34: 259, 259, 81: 259, 259, 104: 1179, 370: 1178},
		// 665
		{1: 263, 263, 10: 263, 263, 20: 263, 34: 263, 263, 81: 263, 263, 104: 263},
		{119: 1174, 230: 1175, 326: 1176},
		{322: 1177},
		{1: 261, 261, 10: 261, 261, 20: 261, 34: 261, 261, 81: 261, 261, 104: 261},
		{1: 260, 260, 10: 260, 260, 20: 260, 34: 260, 260, 81: 260, 260, 104: 260},
		// 670
		{1: 262, 262, 10: 262, 262, 20: 262, 34: 262, 262, 81: 262, 262, 104: 262},
		{1: 265, 265, 10: 265, 265, 20: 265, 34: 265, 265, 81: 265, 265},
		{324: 1180},
		{21: 1181, 40: 524, 523, 48: 1183, 162: 1184, 169: 1182},
		{1: 258, 258, 10: 258, 258, 20: 258, 34: 258, 258, 81: 258, 258},
		// 675
		{1: 257, 257, 10: 257, 257, 20: 257, 34: 257, 257, 81: 257, 257},
		{1: 256, 256, 10: 256, 256, 20: 256, 34: 256, 256, 81: 256, 256},
		{1: 255, 255, 10: 255, 255, 20: 255, 34: 255, 255, 81: 255, 255},
		{1: 250, 250, 10: 250, 250, 20: 250, 34: 250, 250, 81: 1191, 373: 1190},
		{1: 253, 253, 10: 253, 253, 20: 253, 34: 253, 253, 81: 253, 169: 1189},
		// 680
		{82: 1188},
		{1: 251, 251, 10: 251, 251, 20: 251, 34: 251, 251, 81: 251},
		{1: 252, 252, 10: 252, 252, 20: 252, 34: 252, 252, 81: 252},
		{1: 283, 283, 10: 283, 283, 20: 283, 34: 283, 283},
		{40: 524, 523, 48: 541, 86: 1192},
		// 685
		{1: 249, 249, 10: 249, 249, 20: 249, 34: 249, 249},
		{1: 286, 286, 10: 286, 286, 34: 286},
		{1: 287, 287, 10: 287, 287, 20: 1107, 34: 287, 1106, 166: 1110, 182: 1109, 1108, 271: 1196},
		{1: 316, 316, 10: 316, 316, 16: 316, 20: 316, 22: 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 34: 316, 316, 39: 316},
		{1: 241, 241, 10: 241, 241, 34: 1112, 261: 1197},
		// 690
		{1: 331, 331, 10: 331, 331},
		{1: 344, 344, 10: 344, 344},
		{1: 347, 347, 11: 1209, 389: 1208},
		{1: 4, 4, 10: 1205, 4, 274: 1204},
		{104: 1202},
		// 695
		{233: 1203},
		{1: 5, 5, 10: 5, 5, 5, 16: 5, 20: 5, 43: 5, 5, 49: 5, 103: 5},
		{1: 7, 7, 11: 7},
		{104: 1206},
		{242: 1207},
		// 700
		{1: 3, 3, 11: 3, 3, 16: 3, 43: 3, 3, 49: 3, 103: 3},
		{1: 361, 361},
		{40: 524, 523, 48: 531, 126: 1210},
		{1: 346, 346},
		{40: 524, 523, 48: 531, 126: 1212},
		// 705
		{10: 1201, 12: 6, 16: 6, 20: 1216, 43: 6, 6, 49: 6, 103: 6, 273: 1215, 377: 1213, 1214},
		{12: 1240, 16: 1238, 43: 1239, 1235, 49: 1236, 103: 1241, 244: 1232, 246: 1231, 251: 1234, 254: 1243, 275: 1233, 277: 1237, 330: 1226, 333: 1229, 336: 1227, 345: 1228, 352: 1242, 395: 1230},
		{10: 1205, 12: 4, 16: 4, 20: 1222, 43: 4, 4, 49: 4, 103: 4, 274: 1221, 379: 1220},
		{10: 11, 12: 11, 16: 11, 20: 11, 43: 11, 11, 49: 11, 103: 11},
		{10: 1217},
		// 710
		{104: 1218},
		{233: 1219},
		{10: 10, 12: 10, 16: 10, 20: 10, 43: 10, 10, 49: 10, 103: 10},
		{12: 12, 16: 12, 43: 12, 12, 49: 12, 103: 12},
		{12: 9, 16: 9, 43: 9, 9, 49: 9, 103: 9},
		// 715
		{10: 1223},
		{104: 1224},
		{242: 1225},
		{12: 8, 16: 8, 43: 8, 8, 49: 8, 103: 8},
		{1: 489, 489},
		// 720
		{1: 488, 488},
		{1: 487, 487},
		{1: 486, 486, 12: 1369, 16: 1238, 43: 1239, 1367, 49: 1368, 244: 1232, 246: 1366, 251: 1234, 275: 1233, 277: 1237},
		{1: 485, 485},
		{1: 484, 484, 12: 484, 16: 484, 43: 484, 484, 49: 484},
		// 725
		{1: 482, 482, 12: 482, 16: 482, 43: 482, 482, 49: 482},
		{1: 481, 481, 12: 481, 16: 481, 43: 481, 481, 49: 481},
		{1: 480, 480, 12: 480, 16: 480, 43: 480, 480, 49: 480},
		{4: 86, 86, 687, 37: 1355, 55: 86, 121: 688, 184: 1357, 387: 1356},
		{4: 1317, 1316, 1315, 37: 1314},
		// 730
		{1: 416, 416, 12: 416, 16: 416, 43: 416, 416, 49: 416},
		{40: 524, 523, 48: 541, 86: 1301},
		{192: 1296},
		{4: 1247, 1246, 1248, 16: 1277, 37: 1278, 187: 1276, 192: 1275, 196: 1274},
		{6: 1267, 16: 1266},
		// 735
		{1: 376, 376, 12: 1245, 254: 1244},
		{1: 373, 373, 12: 373},
		{1: 372, 372, 12: 372},
		{4: 1247, 1246, 1248},
		{161: 1263},
		// 740
		{37: 1258},
		{40: 524, 523, 48: 1249},
		{1: 368, 368, 12: 368, 42: 368, 68: 1251, 106: 368, 155: 1250},
		{1: 365, 365, 12: 365, 42: 365, 106: 1254, 202: 1252, 204: 1253},
		{1: 367, 367, 12: 367, 42: 367, 106: 367},
		// 745
		{1: 369, 369, 12: 369},
		{1: 363, 363, 12: 363, 42: 1257, 385: 1256},
		{115: 1255},
		{1: 364, 364, 12: 364, 42: 364},
		{1: 366, 366, 12: 366},
		// 750
		{1: 362, 362, 12: 362},
		{40: 524, 523, 48: 541, 86: 694, 108: 1259},
		{1260, 3: 696},
		{1: 368, 368, 12: 368, 42: 368, 68: 1251, 106: 368, 155: 1261},
		{1: 365, 365, 12: 365, 42: 365, 106: 1254, 202: 1262, 204: 1253},
		// 755
		{1: 370, 370, 12: 370},
		{1: 368, 368, 12: 368, 42: 368, 68: 1251, 106: 368, 155: 1264},
		{1: 365, 365, 12: 365, 42: 365, 106: 1254, 202: 1265, 204: 1253},
		{1: 371, 371, 12: 371},
		{40: 524, 523, 48: 541, 86: 1271},
		// 760
		{40: 524, 523, 48: 1268},
		{116: 1269},
		{40: 524, 523, 48: 1270},
		{1: 377, 377},
		{116: 1272},
		// 765
		{40: 524, 523, 48: 541, 86: 1273},
		{1: 382, 382},
		{1: 392, 392, 12: 392, 16: 392, 43: 392, 392, 49: 392, 68: 1291, 102: 392, 105: 1292, 201: 1290, 252: 1289, 1288},
		{187: 1286},
		{294: 1282},
		// 770
		{40: 524, 523, 48: 541, 86: 1281},
		{40: 524, 523, 48: 541, 86: 694, 108: 1279},
		{1280, 3: 696},
		{1: 393, 393, 12: 393, 16: 393, 42: 393, 393, 393, 49: 393, 68: 393, 102: 393, 105: 393},
		{1: 394, 394, 12: 394, 16: 394, 42: 394, 394, 394, 49: 394, 68: 394, 102: 394, 105: 394},
		// 775
		{1: 384, 384, 12: 384, 16: 384, 43: 384, 384, 49: 384, 102: 1284, 200: 1283},
		{1: 395, 395, 12: 395, 16: 395, 43: 395, 395, 49: 395},
		{47: 1285},
		{1: 383, 383, 12: 383, 16: 383, 43: 383, 383, 49: 383},
		{1: 384, 384, 12: 384, 16: 384, 43: 384, 384, 49: 384, 102: 1284, 200: 1287},
		// 780
		{1: 396, 396, 12: 396, 16: 396, 43: 396, 396, 49: 396},
		{1: 384, 384, 12: 384, 16: 384, 43: 384, 384, 49: 384, 102: 1284, 200: 1295},
		{1: 391, 391, 12: 391, 16: 391, 42: 391, 391, 391, 49: 391, 68: 1291, 102: 391, 105: 1292, 201: 1294},
		{1: 390, 390, 12: 390, 16: 390, 42: 390, 390, 390, 49: 390, 68: 390, 102: 390, 105: 390},
		{293: 1293},
		// 785
		{1: 387, 387, 12: 387, 16: 387, 42: 387, 387, 387, 49: 387, 68: 387, 102: 387, 105: 387},
		{1: 388, 388, 12: 388, 16: 388, 42: 388, 388, 388, 49: 388, 68: 388, 102: 388, 105: 388},
		{1: 389, 389, 12: 389, 16: 389, 42: 389, 389, 389, 49: 389, 68: 389, 102: 389, 105: 389},
		{1: 397, 397, 12: 397, 16: 397, 43: 397, 397, 49: 397},
		{16: 1277, 37: 1278, 196: 1297},
		// 790
		{1: 392, 392, 12: 392, 16: 392, 42: 392, 392, 392, 49: 392, 68: 1291, 105: 1292, 201: 1290, 252: 1289, 1298},
		{1: 386, 386, 12: 386, 16: 386, 42: 1300, 386, 386, 49: 386, 351: 1299},
		{1: 398, 398, 12: 398, 16: 398, 43: 398, 398, 49: 398},
		{1: 385, 385, 12: 385, 16: 385, 43: 385, 385, 49: 385},
		{7: 1303, 164: 1302},
		// 795
		{214: 1310},
		{164: 1304},
		{214: 1305},
		{169: 1306},
		{225: 1307},
		// 800
		{1: 400, 400, 12: 400, 16: 400, 43: 400, 400, 49: 400, 222: 1309, 272: 1308},
		{1: 401, 401, 12: 401, 16: 401, 43: 401, 401, 49: 401},
		{1: 399, 399, 12: 399, 16: 399, 43: 399, 399, 49: 399},
		{169: 1311},
		{225: 1312},
		// 805
		{1: 400, 400, 12: 400, 16: 400, 43: 400, 400, 49: 400, 222: 1309, 272: 1313},
		{1: 402, 402, 12: 402, 16: 402, 43: 402, 402, 49: 402},
		{40: 524, 523, 48: 541, 86: 1333, 276: 1331, 278: 1334, 1332, 380: 1329, 1330},
		{40: 524, 523, 48: 1326},
		{161: 1323},
		// 810
		{37: 1318},
		{40: 524, 523, 48: 541, 86: 694, 108: 1319},
		{1320, 3: 696},
		{7: 703, 52: 702, 709, 708, 56: 713, 714, 704, 706, 711, 705, 710, 111: 1321, 712, 707},
		{1: 368, 368, 68: 1251, 155: 1322},
		// 815
		{1: 378, 378},
		{7: 703, 52: 702, 709, 708, 56: 713, 714, 704, 706, 711, 705, 710, 111: 1324, 712, 707},
		{1: 368, 368, 68: 1251, 155: 1325},
		{1: 379, 379},
		{7: 703, 52: 702, 709, 708, 56: 713, 714, 704, 706, 711, 705, 710, 111: 1327, 712, 707},
		// 820
		{1: 368, 368, 68: 1251, 155: 1328},
		{1: 380, 380},
		{1351, 3: 1352},
		{1347, 3: 1348},
		{415, 3: 415},
		// 825
		{413, 3: 413},
		{14: 923, 924, 114: 763, 119: 780, 122: 782, 772, 127: 779, 770, 769, 776, 777, 773, 787, 786, 791, 768, 138: 789, 788, 775, 771, 143: 784, 765, 778, 767, 785, 766, 792, 790, 774, 781, 783, 764, 193: 756, 757, 198: 1335, 760, 203: 1336, 205: 761, 759, 758, 755, 210: 762},
		{405, 3: 405},
		{472, 3: 472, 472, 472, 472, 472, 472, 472, 12: 472, 472, 21: 472, 33: 472, 36: 472, 38: 917, 195: 916, 247: 1337},
		{403, 3: 403},
		// 830
		{463, 3: 463, 463, 463, 463, 463, 463, 463, 12: 1339, 463, 21: 928, 33: 463, 36: 929, 249: 926, 1340, 259: 927, 349: 1338},
		{435, 3: 435, 435, 435, 435, 435, 435, 435, 13: 980, 33: 1343, 256: 1344, 354: 1342},
		{160: 1341},
		{410, 3: 410, 410, 410, 410, 410, 410, 410, 13: 410, 33: 410},
		{411, 3: 411, 411, 411, 411, 411, 411, 411, 13: 411, 33: 411},
		// 835
		{407, 3: 407, 86, 86, 687, 86, 86, 86, 121: 1016, 181: 998, 268: 1345, 339: 1346},
		{409, 3: 409, 409, 409, 409, 409, 409, 409},
		{408, 3: 408, 408, 408, 408, 408, 408, 408},
		{406, 3: 406, 86, 86, 687, 86, 86, 86, 121: 1016, 181: 1015},
		{412, 3: 412},
		// 840
		{1: 417, 417, 12: 417, 16: 417, 43: 417, 417, 49: 417},
		{40: 524, 523, 48: 541, 86: 1350, 278: 1349},
		{404, 3: 404},
		{14: 923, 924, 203: 1336},
		{1: 418, 418, 12: 418, 16: 418, 43: 418, 418, 49: 418},
		// 845
		{40: 524, 523, 48: 541, 86: 1354, 276: 1353, 279: 1332},
		{414, 3: 414},
		{114: 763, 119: 780, 122: 782, 772, 127: 779, 770, 769, 776, 777, 773, 787, 786, 791, 768, 138: 789, 788, 775, 771, 143: 784, 765, 778, 767, 785, 766, 792, 790, 774, 781, 783, 764, 193: 756, 757, 198: 1335, 760, 205: 761, 759, 758, 755, 210: 762},
		{40: 524, 523, 48: 541, 86: 682, 175: 1360, 185: 681, 341: 1359},
		{1: 381, 381, 4: 86, 86, 687, 55: 86, 121: 688, 184: 1358},
		// 850
		{1: 375, 375, 4: 375, 375, 375, 55: 375},
		{1: 374, 374, 4: 374, 374, 374, 55: 374},
		{1361, 3: 1362},
		{476, 3: 476},
		{1: 478, 478, 12: 478, 16: 478, 43: 478, 478, 49: 478, 343: 1364},
		// 855
		{40: 524, 523, 48: 541, 86: 682, 175: 1363, 185: 681},
		{475, 3: 475},
		{1: 477, 477, 12: 477, 16: 477, 43: 477, 477, 49: 477, 388: 1365},
		{1: 479, 479, 12: 479, 16: 479, 43: 479, 479, 49: 479},
		{1: 483, 483, 12: 483, 16: 483, 43: 483, 483, 49: 483},
		// 860
		{37: 1355},
		{37: 1314},
		{16: 1277, 37: 1278, 187: 1276, 192: 1275, 196: 1274},
		{1: 499, 499, 188: 516, 197: 514, 213: 515, 245: 512, 248: 513, 255: 511, 284: 1371},
		{1: 504, 504},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}
	
func yyParse(yylex yyLexer) int {
	const yyError = 411

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)


	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() { 
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError])+yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x])+yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2: {
        if yyS[yypt-0].node != nil {
            stmt := yyS[yypt-0].node
            stmt.SetText(nextQuery(yylex))
            yylex.(*yyLexImpl).result = append(yylex.(*yyLexImpl).result, stmt)
        }
    }
	case 3: {
        if yyS[yypt-0].node != nil {
            stmt := yyS[yypt-0].node
            stmt.SetText(nextQuery(yylex))
            yylex.(*yyLexImpl).result = append(yylex.(*yyLexImpl).result, stmt)
        }
    }
	case 8: {
        yyVAL.node = nil
    }
	case 9: {
    	yyVAL.anything = &ast.TableName{
	    Table: yyS[yypt-0].anything.(*element.Identifier),
	}
    }
	case 10: {
    	yyVAL.anything = &ast.TableName{
	    Schema:	yyS[yypt-2].anything.(*element.Identifier),
	    Table: 	yyS[yypt-0].anything.(*element.Identifier),
	}
    }
	case 11: {
        yyVAL.anything = []*element.Identifier{yyS[yypt-0].anything.(*element.Identifier)}
    }
	case 12: {
        yyVAL.anything = append(yyS[yypt-2].anything.([]*element.Identifier), yyS[yypt-0].anything.(*element.Identifier))
    }
	case 13: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 14: {
        yyVAL.anything = &element.Identifier{
            Typ: element.IdentifierTypeNonQuoted,
            Value: yyS[yypt-0].str,
        }
    }
	case 15: {
        yyVAL.anything = &element.Identifier{
            Typ: element.IdentifierTypeQuoted,
            Value: yyS[yypt-0].str,
        }
    }
	case 18: {
        yyVAL.node = &ast.AlterTableStmt{
            TableName:      	yyS[yypt-2].anything.(*ast.TableName),
            AlterTableClauses:  yyS[yypt-0].anything.([]ast.AlterTableClause),
        }
    }
	case 19: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 20: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 21: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 22: {
        yyVAL.anything = []ast.AlterTableClause{yyS[yypt-0].anything.(ast.AlterTableClause)}
    }
	case 23: {
        yyVAL.anything = []ast.AlterTableClause{yyS[yypt-0].anything.(ast.AlterTableClause)}
    }
	case 24: {
        yyVAL.anything = append(yyS[yypt-1].anything.([]ast.AlterTableClause), yyS[yypt-0].anything.(ast.AlterTableClause))
    }
	case 28: {
        yyVAL.anything = &ast.AddColumnClause{
	        Columns: yyS[yypt-3].anything.([]*ast.ColumnDef),
        }
    }
	case 29: {
        // TODO
    }
	case 30: {
        // TODO
    }
	case 31: {
        yyVAL.anything = []*ast.ColumnDef{yyS[yypt-0].anything.(*ast.ColumnDef)}
    }
	case 32: {
        yyVAL.anything = append(yyS[yypt-2].anything.([]*ast.ColumnDef), yyS[yypt-0].anything.(*ast.ColumnDef))
    }
	case 33: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 34: {
        var collation *ast.Collation
        if yyS[yypt-5].anything != nil {
            collation = yyS[yypt-5].anything.(*ast.Collation)
	    }
        props := []ast.ColumnProp{}
        sort := ast.ColumnProp(yyS[yypt-4].i)
        if sort != ast.ColumnPropEmpty {
            props = append(props, sort)
        }
        invisible := ast.ColumnProp(yyS[yypt-3].i)
        if invisible != ast.ColumnPropEmpty {
            props = append(props, invisible)
        }

        var constraints []*ast.InlineConstraint
        if yyS[yypt-0].anything != nil {
            constraints = yyS[yypt-0].anything.([]*ast.InlineConstraint)
        }

        yyVAL.anything = &ast.ColumnDef{
            ColumnName:         yyS[yypt-7].anything.(*element.Identifier),
            Datatype:           yyS[yypt-6].anything.(element.Datatype),
            Collation:          collation,
            Props:              props,
            Constraints: 	constraints,
        }
    }
	case 35: {
        yyVAL.anything = nil
    }
	case 36: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 37: {
        yyVAL.anything = &ast.Collation{Name: yyS[yypt-0].anything.(*element.Identifier)}
    }
	case 38: {
        yyVAL.i = int(ast.ColumnPropEmpty)
    }
	case 39: {
        yyVAL.i = int(ast.ColumnPropSort)
    }
	case 40: {
        yyVAL.i = int(ast.ColumnPropEmpty)
    }
	case 42: {
        yyVAL.i = int(ast.ColumnPropInvisible)
    }
	case 43: {
        yyVAL.i = int(ast.ColumnPropVisible)
    }
	case 44: {
        // empty
    }
	case 54: {
        // empty
    }
	case 56: {
        // empty
    }
	case 72: {
        // empty
    }
	case 75: {
        // empty
    }
	case 77: {
        // empty
    }
	case 79: {
        // empty
    }
	case 81: {
        // empty
    }
	case 84: {
        yyVAL.anything = nil
    }
	case 85: {
        yyVAL.anything = nil
    }
	case 86: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 87: {
        yyVAL.anything = []*ast.InlineConstraint{yyS[yypt-0].anything.(*ast.InlineConstraint)}
    }
	case 88: {
        yyVAL.anything = append(yyS[yypt-1].anything.([]*ast.InlineConstraint), yyS[yypt-0].anything.(*ast.InlineConstraint))
    }
	case 89: {
        yyVAL.anything = &ast.ModifyColumnClause{
	        Columns: yyS[yypt-1].anything.([]*ast.ColumnDef),
        }
    }
	case 90: {
        yyVAL.anything = &ast.ModifyColumnClause{
	        Columns: yyS[yypt-1].anything.([]*ast.ColumnDef),
        }
    }
	case 91: {
        yyVAL.anything = &ast.ModifyColumnClause{
	        Columns: yyS[yypt-0].anything.([]*ast.ColumnDef),
        }
    }
	case 92: {
        yyVAL.anything = []*ast.ColumnDef{yyS[yypt-0].anything.(*ast.ColumnDef)}
    }
	case 93: {
        yyVAL.anything = append(yyS[yypt-2].anything.([]*ast.ColumnDef), yyS[yypt-0].anything.(*ast.ColumnDef))
    }
	case 95: {
        var collation *ast.Collation
        if yyS[yypt-3].anything != nil {
            collation = yyS[yypt-3].anything.(*ast.Collation)
	    }
        yyVAL.anything = &ast.ColumnDef{
            ColumnName:         yyS[yypt-5].anything.(*element.Identifier),
            Datatype:           yyS[yypt-4].anything.(element.Datatype),
            Collation:          collation,
            Props:              []ast.ColumnProp{},
        }
    }
	case 100: {
        // empty
    }
	case 102: {
        yyVAL.anything = []*ast.ColumnDef{yyS[yypt-0].anything.(*ast.ColumnDef)}
    }
	case 103: {
        yyVAL.anything = append(yyS[yypt-2].anything.([]*ast.ColumnDef), yyS[yypt-0].anything.(*ast.ColumnDef))
    }
	case 104: {
        yyVAL.anything = &ast.ColumnDef{
            ColumnName: yyS[yypt-1].anything.(*element.Identifier),
            Props:      []ast.ColumnProp{ast.ColumnProp(yyS[yypt-0].i)},
        }
    }
	case 105: {
        prop := ast.ColumnPropSubstitutable
        if yyS[yypt-0].b {
            prop = ast.ColumnPropSubstitutableForce
        }
        yyVAL.anything = &ast.ColumnDef{
            ColumnName: yyS[yypt-5].anything.(*element.Identifier),
            Props:      []ast.ColumnProp{prop},
        }
    }
	case 106: {
        prop := ast.ColumnPropNotSubstitutable
        if yyS[yypt-0].b {
            prop = ast.ColumnPropNotSubstitutableForce
        }
        yyVAL.anything = &ast.ColumnDef{
            ColumnName: yyS[yypt-6].anything.(*element.Identifier),
            Props:      []ast.ColumnProp{prop},
        }
    }
	case 107: {
        yyVAL.b = false
    }
	case 108: {
        yyVAL.b = true
    }
	case 109: {
        props := []ast.DropColumnProp{}
        if yyS[yypt-1].anything != nil {
            props = append(props, yyS[yypt-1].anything.([]ast.DropColumnProp)...)
        }
        online := ast.DropColumnProp(yyS[yypt-0].i)
        if online != ast.DropColumnPropEmpty {
            props = append(props, online)
        }
    	yyVAL.anything = &ast.DropColumnClause{
            Type:    ast.DropColumnTypeSetUnused,
            Columns: yyS[yypt-2].anything.([]*element.Identifier),
            Props:   props,
    	}
    }
	case 110: {
        props := []ast.DropColumnProp{}
        if yyS[yypt-1].anything != nil {
            props = append(props, yyS[yypt-1].anything.([]ast.DropColumnProp)...)
        }
    	cc := &ast.DropColumnClause{
            Type:    ast.DropColumnTypeDrop,
            Columns: yyS[yypt-2].anything.([]*element.Identifier),
            Props:   props,
    	}
    	var checkout int
        if yyS[yypt-0].anything != nil {
            checkout = yyS[yypt-0].anything.(int)
            cc.CheckPoint = &checkout
        }
        yyVAL.anything = cc
    }
	case 111: {
    	cc := &ast.DropColumnClause{
            Type: ast.DropColumnTypeDropUnusedColumns,
    	}
    	var checkout int
        if yyS[yypt-0].anything != nil {
            checkout = yyS[yypt-0].anything.(int)
            cc.CheckPoint = &checkout
        }
        yyVAL.anything = cc
    }
	case 112: {
    	cc := &ast.DropColumnClause{
            Type: ast.DropColumnTypeDropColumnsContinue,
    	}
    	var checkout int
        if yyS[yypt-0].anything != nil {
            checkout = yyS[yypt-0].anything.(int)
            cc.CheckPoint = &checkout
        }
        yyVAL.anything = cc
    }
	case 113: {
        yyVAL.anything = []*element.Identifier{yyS[yypt-0].anything.(*element.Identifier)}
    }
	case 114: {
        yyVAL.anything = yyS[yypt-1].anything
    }
	case 115: {
        yyVAL.anything = nil
    }
	case 117: {
        yyVAL.anything = []ast.DropColumnProp{ast.DropColumnProp(yyS[yypt-0].i)}
    }
	case 118: {
        yyVAL.anything = append(yyS[yypt-1].anything.([]ast.DropColumnProp), ast.DropColumnProp(yyS[yypt-0].i))
    }
	case 119: {
        yyVAL.i = int(ast.DropColumnPropCascade)
    }
	case 120: {
        yyVAL.i = int(ast.DropColumnPropInvalidate)
    }
	case 121: {
        yyVAL.i = int(ast.DropColumnPropEmpty)
    }
	case 122: {
        yyVAL.i = int(ast.DropColumnPropOnline)
    }
	case 123: {
        yyVAL.anything = nil
    }
	case 124: {
        yyVAL.anything = yyS[yypt-0].i
    }
	case 125: {
    	yyVAL.anything = &ast.RenameColumnClause{
    	    OldName: yyS[yypt-2].anything.(*element.Identifier),
    	    NewName: yyS[yypt-0].anything.(*element.Identifier),
    	}
    }
	case 126: {
    	yyVAL.anything = []ast.AlterTableClause{&ast.AddConstraintClause{}}
    }
	case 127: {
    	yyVAL.anything = []ast.AlterTableClause{&ast.ModifyConstraintClause{}}
    }
	case 128: {
    	yyVAL.anything = []ast.AlterTableClause{&ast.ModifyConstraintClause{}}
    }
	case 129: {
    	yyVAL.anything = []ast.AlterTableClause{&ast.ModifyConstraintClause{}}
    }
	case 130: {
    	yyVAL.anything = []ast.AlterTableClause{&ast.RenameConstraintClause{}}
    }
	case 131: {
    	yyVAL.anything = yyS[yypt-0].anything
    }
	case 134: {
        yyVAL.anything = []ast.AlterTableClause{yyS[yypt-0].anything.(ast.AlterTableClause)}
    }
	case 135: {
        yyVAL.anything = append(yyS[yypt-1].anything.([]ast.AlterTableClause), yyS[yypt-0].anything.(ast.AlterTableClause))
    }
	case 136: {
    	yyVAL.anything = &ast.DropConstraintClause{}
    }
	case 137: {
    	yyVAL.anything = &ast.DropConstraintClause{}
    }
	case 138: {
    	yyVAL.anything = &ast.DropConstraintClause{}
    }
	case 139: {
        // empty
    }
	case 142: {
        // empty
    }
	case 144: {
        // empty
    }
	case 146: {
    	yyVAL.node = &ast.CreateTableStmt{
            TableName:  yyS[yypt-4].anything.(*ast.TableName),
            RelTable:   yyS[yypt-2].anything.(*ast.RelTableDef),
    	}
    }
	case 147: {
        // empty
    }
	case 155: {
        // empty
    }
	case 160: {
        // empty
    }
	case 163: {
        rd := &ast.RelTableDef{}
        if yyS[yypt-6].anything != nil {
            rd.TableStructs = yyS[yypt-6].anything.([]ast.TableStructDef)
        }
        yyVAL.anything = rd
    }
	case 166: {
        yyVAL.anything = nil
    }
	case 167: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 169: {
        // empty
    }
	case 172: {
        // empty
    }
	case 175: {
        // empty
    }
	case 180: {
        // empty
    }
	case 183: {
        // empty
    }
	case 202: {
        // empty
    }
	case 210: {
        // empty
    }
	case 217: {
        // empty
    }
	case 220: {
        // empty
    }
	case 225: {
        // empty
    }
	case 235: {
        // empty
    }
	case 241: {
        // empty
    }
	case 243: {
        // empty
    }
	case 248: {
        // empty
    }
	case 253: {
        // empty
    }
	case 257: {
        // empty
    }
	case 259: {
        // empty
    }
	case 266: {
        // empty
    }
	case 289: {
        yyVAL.anything = nil
    }
	case 290: {
        yyVAL.anything = yyS[yypt-1].anything
    }
	case 291: {
        yyVAL.anything = []ast.TableStructDef{yyS[yypt-0].anything.(ast.TableStructDef)}
    }
	case 292: {
        yyVAL.anything = append(yyS[yypt-2].anything.([]ast.TableStructDef), yyS[yypt-0].anything.(ast.TableStructDef))
    }
	case 293: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 294: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 295: {
        yyVAL.node = &ast.CreateIndexStmt{}
    }
	case 296: {
        // empty
    }
	case 334: {
        // empty
    }
	case 339: {
        // empty
    }
	case 344: {
        // empty
    }
	case 347: {
        // empty
    }
	case 350: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 351: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 352: {
        yyVAL.anything = &element.NumberOrAsterisk{Number: yyS[yypt-0].i}
    }
	case 353: {
        yyVAL.anything = &element.NumberOrAsterisk{IsAsterisk: true}
    }
	case 354: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 355: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 356: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 357: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 358: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 359: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 360: {
        d := &element.Char{}
        d.SetDataDef(element.DataDefChar)
        yyVAL.anything = d
    }
	case 361: {
        size := yyS[yypt-1].i
        d := &element.Char{Size: &size}
        d.SetDataDef(element.DataDefChar)
        yyVAL.anything = d
    }
	case 362: {
        size := yyS[yypt-2].i
        d := &element.Char{Size: &size, IsByteSize: true}
        d.SetDataDef(element.DataDefChar)
        yyVAL.anything = d
    }
	case 363: {
        size := yyS[yypt-2].i
        d := &element.Char{Size: &size, IsCharSize: true}
        d.SetDataDef(element.DataDefChar)
        d.SetDataDef(element.DataDefChar)
        yyVAL.anything = d
    }
	case 364: {
        size := yyS[yypt-1].i
        d := &element.Varchar2{}
        d.Size = &size
        d.SetDataDef(element.DataDefVarchar2)
        yyVAL.anything = d
    }
	case 365: {
        size := yyS[yypt-2].i
        d := &element.Varchar2{}
        d.Size = &size
        d.IsByteSize = true
        d.SetDataDef(element.DataDefVarchar2)
        yyVAL.anything = d
    }
	case 366: {
        size := yyS[yypt-2].i
        d := &element.Varchar2{}
        d.Size = &size
        d.IsCharSize = true
        d.SetDataDef(element.DataDefVarchar2)
        yyVAL.anything = d
    }
	case 367: {
        d := &element.NChar{}
        d.SetDataDef(element.DataDefNChar)
        yyVAL.anything = d
    }
	case 368: {
        size := yyS[yypt-1].i
        d := &element.NChar{Size: &size}
        d.SetDataDef(element.DataDefNChar)
        yyVAL.anything = d
    }
	case 369: {
        size := yyS[yypt-1].i
        d := &element.NVarchar2{}
        d.Size = &size
        d.SetDataDef(element.DataDefNVarChar2)
        yyVAL.anything = d
    }
	case 370: {
        d := &element.Number{}
        d.SetDataDef(element.DataDefNumber)
        yyVAL.anything = d
    }
	case 371: {
        precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
        d := &element.Number{Precision: precision}
        d.SetDataDef(element.DataDefNumber)
        yyVAL.anything = d
    }
	case 372: {
        precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
        scale := yyS[yypt-1].i
        d := &element.Number{Precision: precision, Scale: &scale}
        d.SetDataDef(element.DataDefNumber)
        yyVAL.anything = d
    }
	case 373: {
        d := &element.Float{}
        d.SetDataDef(element.DataDefFloat)
        yyVAL.anything = d
    }
	case 374: {
        precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
        d := &element.Float{Precision: precision}
        d.SetDataDef(element.DataDefFloat)
        yyVAL.anything = d
    }
	case 375: {
        d := &element.BinaryFloat{}
        d.SetDataDef(element.DataDefBinaryFloat)
        yyVAL.anything = d
    }
	case 376: {
        d := &element.BinaryDouble{}
        d.SetDataDef(element.DataDefBinaryDouble)
        yyVAL.anything = d
    }
	case 377: {
        d := &element.Long{}
        d.SetDataDef(element.DataDefLong)
        yyVAL.anything = d
    }
	case 378: {
        d := &element.LongRaw{}
        d.SetDataDef(element.DataDefLongRaw)
        yyVAL.anything = d
    }
	case 379: {
        size := yyS[yypt-1].i
        d := &element.Raw{Size: &size}
        d.SetDataDef(element.DataDefRaw)
        yyVAL.anything = d
    }
	case 380: {
        d := &element.Date{}
        d.SetDataDef(element.DataDefDate)
        yyVAL.anything = d
    }
	case 381: {
        d := &element.Timestamp{}
        d.SetDataDef(element.DataDefTimestamp)
        yyVAL.anything = d
    }
	case 382: {
        precision := yyS[yypt-1].i
        d := &element.Timestamp{FractionalSecondsPrecision: &precision}
        d.SetDataDef(element.DataDefTimestamp)
        yyVAL.anything = d
    }
	case 383: {
        precision := yyS[yypt-4].i
        d := &element.Timestamp{FractionalSecondsPrecision: &precision, WithTimeZone: true}
        d.SetDataDef(element.DataDefTimestamp)
        yyVAL.anything = d
    }
	case 384: {
        precision := yyS[yypt-5].i
        d := &element.Timestamp{FractionalSecondsPrecision: &precision, WithLocalTimeZone: true}
        d.SetDataDef(element.DataDefTimestamp)
        yyVAL.anything = d
    }
	case 385: {
        d := &element.IntervalYear{}
        d.SetDataDef(element.DataDefIntervalYear)
        yyVAL.anything = d
    }
	case 386: {
        precision := yyS[yypt-3].i
        d := &element.IntervalYear{Precision: &precision}
        d.SetDataDef(element.DataDefIntervalYear)
        yyVAL.anything = d
    }
	case 387: {
        d := &element.IntervalDay{}
        d.SetDataDef(element.DataDefIntervalDay)
        yyVAL.anything = d
    }
	case 388: {
        precision := yyS[yypt-3].i
        d := &element.IntervalDay{Precision: &precision}
        d.SetDataDef(element.DataDefIntervalDay)
        yyVAL.anything = d
    }
	case 389: {
        precision := yyS[yypt-6].i
        sPrecision := yyS[yypt-1].i
        d := &element.IntervalDay{Precision: &precision, FractionalSecondsPrecision: &sPrecision}
        d.SetDataDef(element.DataDefIntervalDay)
        yyVAL.anything = d
    }
	case 390: {
        sPrecision := yyS[yypt-1].i
        d := &element.IntervalDay{FractionalSecondsPrecision: &sPrecision}
        d.SetDataDef(element.DataDefIntervalDay)
        yyVAL.anything = d
    }
	case 391: {
        d := &element.Blob{}
        d.SetDataDef(element.DataDefBlob)
        yyVAL.anything = d
    }
	case 392: {
        d := &element.Clob{}
        d.SetDataDef(element.DataDefClob)
        yyVAL.anything = d
    }
	case 393: {
        d := &element.NClob{}
        d.SetDataDef(element.DataDefNClob)
        yyVAL.anything = d
    }
	case 394: {
        d := &element.BFile{}
        d.SetDataDef(element.DataDefBFile)
        yyVAL.anything = d
    }
	case 395: {
        d := &element.RowId{}
        d.SetDataDef(element.DataDefRowId)
        yyVAL.anything = d
    }
	case 396: {
        d := &element.URowId{}
        d.SetDataDef(element.DataDefURowId)
        yyVAL.anything = d
    }
	case 397: {
        size := yyS[yypt-1].i
        d := &element.URowId{Size: &size}
        d.SetDataDef(element.DataDefURowId)
        yyVAL.anything = d
    }
	case 398: {
        d := &element.Char{}
        d.SetDataDef(element.DataDefCharacter)
        yyVAL.anything = d
    }
	case 399: {
        size := yyS[yypt-1].i
        d := &element.Varchar2{}
        d.Size = &size
        d.SetDataDef(element.DataDefCharacterVarying)
        yyVAL.anything = d
    }
	case 400: {
        size := yyS[yypt-1].i
        d := &element.Varchar2{}
        d.Size = &size
        d.SetDataDef(element.DataDefCharVarying)
        yyVAL.anything = d
    }
	case 401: {
        size := yyS[yypt-1].i
        d := &element.NVarchar2{}
        d.Size = &size
        d.SetDataDef(element.DataDefNCharVarying)
        yyVAL.anything = d
    }
	case 402: {
        size := yyS[yypt-1].i
        d := &element.Varchar2{}
        d.Size = &size
        d.SetDataDef(element.DataDefVarchar)
        yyVAL.anything = d
    }
	case 403: {
        size := yyS[yypt-1].i
        d := &element.NChar{Size: &size}
        d.SetDataDef(element.DataDefNationalCharacter)
        yyVAL.anything = d
    }
	case 404: {
        size := yyS[yypt-1].i
        d := &element.NVarchar2{}
        d.Size = &size
        d.SetDataDef(element.DataDefNationalCharacterVarying)
        yyVAL.anything = d
    }
	case 405: {
        size := yyS[yypt-1].i
        d := &element.NChar{Size: &size}
        d.SetDataDef(element.DataDefNationalChar)
        yyVAL.anything = d
    }
	case 406: {
        size := yyS[yypt-1].i
        d := &element.NVarchar2{}
        d.Size = &size
        d.SetDataDef(element.DataDefNationalCharVarying)
        yyVAL.anything = d
    }
	case 407: {
        d := &element.Number{}
        d.SetDataDef(element.DataDefNumeric)
        yyVAL.anything = d
    }
	case 408: {
        precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
        d := &element.Number{Precision: precision}
        d.SetDataDef(element.DataDefNumeric)
        yyVAL.anything = d
    }
	case 409: {
        precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
        scale := yyS[yypt-1].i
        d := &element.Number{Precision: precision, Scale: &scale}
        d.SetDataDef(element.DataDefNumeric)
        yyVAL.anything = d
    }
	case 410: {
        d := &element.Number{}
        d.SetDataDef(element.DataDefDecimal)
        yyVAL.anything = d
    }
	case 411: {
        precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
        d := &element.Number{Precision: precision}
        d.SetDataDef(element.DataDefDecimal)
        yyVAL.anything = d
    }
	case 412: {
        precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
        scale := yyS[yypt-1].i
        d := &element.Number{Precision: precision, Scale: &scale}
        d.SetDataDef(element.DataDefDecimal)
        yyVAL.anything = d
    }
	case 413: {
        d := &element.Number{}
        d.SetDataDef(element.DataDefDec)
        yyVAL.anything = d
    }
	case 414: {
        precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
        d := &element.Number{Precision: precision}
        d.SetDataDef(element.DataDefDec)
        yyVAL.anything = d
    }
	case 415: {
        precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
        scale := yyS[yypt-1].i
        d := &element.Number{Precision: precision, Scale: &scale}
        d.SetDataDef(element.DataDefDec)
        yyVAL.anything = d
    }
	case 416: {
        precision := &element.NumberOrAsterisk{Number: 38}
        d := &element.Number{Precision: precision}
        d.SetDataDef(element.DataDefInteger)
        yyVAL.anything = d
    }
	case 417: {
        precision := &element.NumberOrAsterisk{Number: 38}
        d := &element.Number{Precision: precision}
        d.SetDataDef(element.DataDefInt)
        yyVAL.anything = d
    }
	case 418: {
        precision := &element.NumberOrAsterisk{Number: 38}
        d := &element.Number{Precision: precision}
        d.SetDataDef(element.DataDefSmallInt)
        yyVAL.anything = d
    }
	case 419: {
        precision := &element.NumberOrAsterisk{Number: 126}
        d := &element.Float{Precision: precision}
        d.SetDataDef(element.DataDefDoublePrecision)
        yyVAL.anything = d
    }
	case 420: {
        precision := &element.NumberOrAsterisk{Number: 63}
        d := &element.Float{Precision: precision}
        d.SetDataDef(element.DataDefReal)
        yyVAL.anything = d
    }
	case 421: {
        yyVAL.anything = nil
    }
	case 422: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 423: {
        constraint := &ast.InlineConstraint{}
        if yyS[yypt-2].anything != nil {
            constraint.Name = yyS[yypt-2].anything.(*element.Identifier)
        }
	constraint.Type = ast.ConstraintType(yyS[yypt-1].i)
	yyVAL.anything = constraint
    }
	case 424: {
        constraint := &ast.InlineConstraint{}
        if yyS[yypt-2].anything != nil {
            constraint.Name = yyS[yypt-2].anything.(*element.Identifier)
        }
	constraint.Type = ast.ConstraintTypeReferences
	yyVAL.anything = constraint
    }
	case 425: {
        yyVAL.i = int(ast.ConstraintTypeNull)
    }
	case 426: {
        yyVAL.i = int(ast.ConstraintTypeNotNull)
    }
	case 427: {
        yyVAL.i = int(ast.ConstraintTypeUnique)
    }
	case 428: {
        yyVAL.i = int(ast.ConstraintTypePK)
    }
	case 430: {
        // empty
    }
	case 432: {
        // empty
    }
	case 435: {
        // empty
    }
	case 458: {
        constraint := &ast.OutOfLineConstraint{}
        if yyS[yypt-5].anything != nil {
            constraint.Name = yyS[yypt-5].anything.(*element.Identifier)
        }
	constraint.Type = ast.ConstraintTypeUnique
	constraint.Columns = yyS[yypt-2].anything.([]*element.Identifier)
	yyVAL.anything = constraint
    }
	case 459: {
        constraint := &ast.OutOfLineConstraint{}
        if yyS[yypt-6].anything != nil {
            constraint.Name = yyS[yypt-6].anything.(*element.Identifier)
        }
	constraint.Type = ast.ConstraintTypePK
	constraint.Columns = yyS[yypt-2].anything.([]*element.Identifier)
	yyVAL.anything = constraint
    }
	case 460: {
        constraint := &ast.OutOfLineConstraint{}
        if yyS[yypt-7].anything != nil {
            constraint.Name = yyS[yypt-7].anything.(*element.Identifier)
        }
	constraint.Type = ast.ConstraintTypeReferences
	constraint.Columns = yyS[yypt-3].anything.([]*element.Identifier)
	yyVAL.anything = constraint
    }
	case 488: {
        // empty
    }
	case 501: {
        // empty
    }
	case 503: {
        // empty
    }

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}


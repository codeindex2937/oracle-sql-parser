// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"strings"

	"github.com/sjjian/oracle-sql-parser/ast"
	"github.com/sjjian/oracle-sql-parser/ast/element"
)

func nextQuery(yylex interface{}) string {
	lex := yylex.(*yyLexImpl)
	tc := lex.scanner.TC
	query := string(lex.scanner.Text[lex.lastPos:tc])
	lex.lastPos = tc
	return strings.TrimSpace(query)
}

type yySymType struct {
	yys      int
	nothing  struct{}
	i        int
	b        bool
	str      string
	node     ast.Node
	anything interface{}
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault                = 57563
	yyEofCode                = 57344
	_E                       = 57506
	_G                       = 57507
	_K                       = 57508
	_M                       = 57509
	_P                       = 57510
	_T                       = 57511
	_add                     = 57350
	_advanced                = 57515
	_all                     = 57444
	_alter                   = 57348
	_always                  = 57423
	_archive                 = 57521
	_as                      = 57424
	_at                      = 57445
	_attributes              = 57552
	_auto                    = 57526
	_basic                   = 57516
	_bfile                   = 57377
	_binaryDouble            = 57359
	_binaryFloat             = 57358
	_blob                    = 57374
	_blockchain              = 57459
	_buffer_pool             = 57490
	_by                      = 57400
	_byte                    = 57352
	_cache                   = 57427
	_capacity                = 57527
	_cascade                 = 57410
	_cell_flash_cache        = 57491
	_char                    = 57351
	_character               = 57380
	_checkpoint              = 57456
	_clob                    = 57375
	_cluster                 = 57480
	_collate                 = 57393
	_column                  = 57446
	_columns                 = 57450
	_commit                  = 57472
	_compress                = 57517
	_constraint              = 57403
	_constraints             = 57453
	_continue                = 57451
	_create                  = 57458
	_creation                = 57482
	_critical                = 57532
	_cycle                   = 57428
	_data                    = 57466
	_date                    = 57362
	_day                     = 57372
	_dec                     = 57386
	_decimal                 = 57385
	_decrypt                 = 57443
	_default                 = 57422
	_deferrable              = 57414
	_deferred                = 57415
	_definition              = 57473
	_delete                  = 57411
	_delete_all              = 57542
	_disable                 = 57543
	_disable_all             = 57544
	_distribute              = 57535
	_dml                     = 57528
	_double                  = 57390
	_doubleQuoteStr          = 57561
	_drop                    = 57442
	_duplicate               = 57540
	_duplicated              = 57460
	_enable                  = 57545
	_enable_all              = 57546
	_encrypt                 = 57397
	_exceptions              = 57557
	_extended                = 57467
	_external                = 57549
	_filesystem_like_logging = 57512
	_flash_cache             = 57492
	_float                   = 57357
	_for                     = 57476
	_force                   = 57449
	_foreign                 = 57554
	_freelist                = 57493
	_freelists               = 57494
	_from                    = 57347
	_generated               = 57425
	_global                  = 57461
	_groups                  = 57505
	_heap                    = 57550
	_high                    = 57529
	_identified              = 57399
	_identity                = 57426
	_ilm                     = 57547
	_immediate               = 57416
	_immutable               = 57462
	_increment               = 57429
	_index                   = 57551
	_initial                 = 57495
	_initially               = 57417
	_initrans                = 57485
	_inmemory                = 57525
	_int                     = 57388
	_intNumber               = 57559
	_interger                = 57387
	_interval                = 57368
	_into                    = 57558
	_invalidate              = 57454
	_invisible               = 57395
	_is                      = 57420
	_keep                    = 57496
	_key                     = 57404
	_level                   = 57523
	_levels                  = 57447
	_limit                   = 57430
	_local                   = 57365
	_locking                 = 57524
	_logging                 = 57513
	_long                    = 57360
	_low                     = 57530
	_maxextents              = 57497
	_maxsize                 = 57498
	_maxtrans                = 57486
	_maxvalue                = 57431
	_medium                  = 57533
	_memcompress             = 57531
	_memoptimize             = 57477
	_metadata                = 57468
	_minextents              = 57499
	_minvalue                = 57432
	_modify                  = 57441
	_mouth                   = 57371
	_national                = 57383
	_nchar                   = 57354
	_nclob                   = 57376
	_next                    = 57500
	_no                      = 57401
	_nocache                 = 57433
	_nocompress              = 57518
	_nocycle                 = 57434
	_nologging               = 57514
	_nomaxvalue              = 57435
	_nominvalue              = 57436
	_none                    = 57469
	_nonquotedIdentifier     = 57562
	_noorder                 = 57437
	_norely                  = 57418
	_not                     = 57405
	_novalidate              = 57555
	_null                    = 57406
	_number                  = 57356
	_numeric                 = 57384
	_nvarchar2               = 57355
	_on                      = 57412
	_online                  = 57455
	_optimal                 = 57501
	_order                   = 57438
	_organization            = 57481
	_parent                  = 57471
	_partition               = 57536
	_pctfree                 = 57487
	_pctincrease             = 57502
	_pctused                 = 57488
	_policy                  = 57548
	_precision               = 57391
	_preserve                = 57474
	_primary                 = 57407
	_priority                = 57534
	_private                 = 57463
	_query                   = 57522
	_range                   = 57537
	_raw                     = 57361
	_read                    = 57478
	_real                    = 57392
	_recycle                 = 57503
	_references              = 57409
	_reject                  = 57553
	_rely                    = 57419
	_rename                  = 57457
	_row                     = 57519
	_rowid                   = 57378
	_rows                    = 57475
	_salt                    = 57402
	_scope                   = 57421
	_second                  = 57373
	_segment                 = 57483
	_select                  = 57346
	_service                 = 57539
	_set                     = 57413
	_sharded                 = 57464
	_sharding                = 57470
	_singleQuoteStr          = 57560
	_smallInt                = 57389
	_sort                    = 57394
	_spatial                 = 57541
	_start                   = 57439
	_storage                 = 57489
	_store                   = 57520
	_subpartition            = 57538
	_substitutable           = 57448
	_table                   = 57349
	_tablespace              = 57484
	_temporary               = 57465
	_time                    = 57366
	_timestamp               = 57363
	_to                      = 57370
	_unique                  = 57408
	_unlimited               = 57504
	_unused                  = 57452
	_urowid                  = 57379
	_using                   = 57398
	_validate                = 57556
	_value                   = 57440
	_varchar                 = 57382
	_varchar2                = 57353
	_varying                 = 57381
	_visible                 = 57396
	_with                    = 57364
	_write                   = 57479
	_year                    = 57369
	_zone                    = 57367
	yyErrCode                = 57345

	yyMaxDepth = 200
	yyTabOfs   = -423
)

var (
	yyPrec = map[int]int{}

	yyXLAT = map[int]int{
		41:    0,   // ')' (280x)
		57344: 1,   // $end (202x)
		59:    2,   // ';' (201x)
		44:    3,   // ',' (197x)
		57405: 4,   // _not (162x)
		57406: 5,   // _null (162x)
		57407: 6,   // _primary (160x)
		57408: 7,   // _unique (160x)
		57409: 8,   // _references (158x)
		57403: 9,   // _constraint (156x)
		57477: 10,  // _memoptimize (155x)
		57471: 11,  // _parent (152x)
		57397: 12,  // _encrypt (137x)
		57442: 13,  // _drop (125x)
		57446: 14,  // _column (117x)
		57364: 15,  // _with (110x)
		57421: 16,  // _scope (109x)
		57401: 17,  // _no (104x)
		57422: 18,  // _default (100x)
		57443: 19,  // _decrypt (93x)
		57547: 20,  // _ilm (93x)
		57525: 21,  // _inmemory (90x)
		57425: 22,  // _generated (83x)
		57395: 23,  // _invisible (80x)
		57396: 24,  // _visible (80x)
		57394: 25,  // _sort (75x)
		57393: 26,  // _collate (72x)
		57517: 27,  // _compress (69x)
		57519: 28,  // _row (68x)
		57518: 29,  // _nocompress (67x)
		57512: 30,  // _filesystem_like_logging (66x)
		57485: 31,  // _initrans (66x)
		57513: 32,  // _logging (66x)
		57486: 33,  // _maxtrans (66x)
		57514: 34,  // _nologging (66x)
		57487: 35,  // _pctfree (66x)
		57488: 36,  // _pctused (66x)
		57489: 37,  // _storage (66x)
		57484: 38,  // _tablespace (66x)
		40:    39,  // '(' (64x)
		57413: 40,  // _set (53x)
		57350: 41,  // _add (52x)
		57441: 42,  // _modify (51x)
		57559: 43,  // _intNumber (50x)
		57561: 44,  // _doubleQuoteStr (46x)
		57562: 45,  // _nonquotedIdentifier (44x)
		57414: 46,  // _deferrable (36x)
		57543: 47,  // _disable (36x)
		57545: 48,  // _enable (36x)
		57614: 49,  // Identifier (36x)
		57490: 50,  // _buffer_pool (35x)
		57491: 51,  // _cell_flash_cache (35x)
		57557: 52,  // _exceptions (35x)
		57492: 53,  // _flash_cache (35x)
		57493: 54,  // _freelist (35x)
		57494: 55,  // _freelists (35x)
		57495: 56,  // _initial (35x)
		57417: 57,  // _initially (35x)
		57497: 58,  // _maxextents (35x)
		57498: 59,  // _maxsize (35x)
		57499: 60,  // _minextents (35x)
		57500: 61,  // _next (35x)
		57418: 62,  // _norely (35x)
		57555: 63,  // _novalidate (35x)
		57501: 64,  // _optimal (35x)
		57502: 65,  // _pctincrease (35x)
		57419: 66,  // _rely (35x)
		57541: 67,  // _spatial (35x)
		57556: 68,  // _validate (35x)
		57540: 69,  // _duplicate (32x)
		57549: 70,  // _external (28x)
		57481: 71,  // _organization (27x)
		57480: 72,  // _cluster (24x)
		57412: 73,  // _on (24x)
		57483: 74,  // _segment (24x)
		57580: 75,  // ColumnName (22x)
		57427: 76,  // _cache (17x)
		57428: 77,  // _cycle (17x)
		57535: 78,  // _distribute (17x)
		57429: 79,  // _increment (17x)
		57431: 80,  // _maxvalue (17x)
		57432: 81,  // _minvalue (17x)
		57433: 82,  // _nocache (17x)
		57434: 83,  // _nocycle (17x)
		57435: 84,  // _nomaxvalue (17x)
		57436: 85,  // _nominvalue (17x)
		57437: 86,  // _noorder (17x)
		57438: 87,  // _order (17x)
		57439: 88,  // _start (17x)
		57456: 89,  // _checkpoint (14x)
		57457: 90,  // _rename (14x)
		57410: 91,  // _cascade (13x)
		57476: 92,  // _for (12x)
		57454: 93,  // _invalidate (12x)
		57455: 94,  // _online (12x)
		57534: 95,  // _priority (11x)
		57402: 96,  // _salt (10x)
		57351: 97,  // _char (9x)
		57581: 98,  // ColumnNameList (9x)
		46:    99,  // '.' (8x)
		57378: 100, // _rowid (8x)
		57560: 101, // _singleQuoteStr (8x)
		57370: 102, // _to (8x)
		57380: 103, // _character (7x)
		57361: 104, // _raw (7x)
		57586: 105, // ConstraintState (7x)
		57608: 106, // ExceptionsClause (7x)
		57377: 107, // _bfile (6x)
		57359: 108, // _binaryDouble (6x)
		57358: 109, // _binaryFloat (6x)
		57374: 110, // _blob (6x)
		57375: 111, // _clob (6x)
		57362: 112, // _date (6x)
		57386: 113, // _dec (6x)
		57385: 114, // _decimal (6x)
		57390: 115, // _double (6x)
		57357: 116, // _float (6x)
		57554: 117, // _foreign (6x)
		57388: 118, // _int (6x)
		57387: 119, // _interger (6x)
		57368: 120, // _interval (6x)
		57360: 121, // _long (6x)
		57383: 122, // _national (6x)
		57354: 123, // _nchar (6x)
		57376: 124, // _nclob (6x)
		57356: 125, // _number (6x)
		57384: 126, // _numeric (6x)
		57355: 127, // _nvarchar2 (6x)
		57392: 128, // _real (6x)
		57389: 129, // _smallInt (6x)
		57363: 130, // _timestamp (6x)
		57379: 131, // _urowid (6x)
		57382: 132, // _varchar (6x)
		57353: 133, // _varchar2 (6x)
		57585: 134, // ConstraintNameOrEmpty (6x)
		57587: 135, // ConstraintStateList (6x)
		57588: 136, // ConstraintStateOrEmpty (6x)
		57672: 137, // PhysicalAttrClause (6x)
		57695: 138, // StorageClause (6x)
		57698: 139, // TableCompression (6x)
		57701: 140, // TableName (6x)
		42:    141, // '*' (5x)
		57529: 142, // _high (5x)
		57426: 143, // _identity (5x)
		57530: 144, // _low (5x)
		57469: 145, // _none (5x)
		57470: 146, // _sharding (5x)
		57448: 147, // _substitutable (5x)
		57381: 148, // _varying (5x)
		57631: 149, // InmemoryColumnClause (5x)
		57647: 150, // LoggingClause (5x)
		57663: 151, // NumberOrAsterisk (5x)
		57673: 152, // PhysicalAttrsClause (5x)
		57685: 153, // SegmentAttrClause (5x)
		57444: 154, // _all (4x)
		57424: 155, // _as (4x)
		57400: 156, // _by (4x)
		57548: 157, // _policy (4x)
		57577: 158, // ColumnDef (4x)
		57618: 159, // IdentityOptionsOrEmpty (4x)
		57620: 160, // IlmCompressionPolicy (4x)
		57621: 161, // IlmInmemoryPolicy (4x)
		57622: 162, // IlmPolicyClause (4x)
		57623: 163, // IlmTieringPolicy (4x)
		57626: 164, // InlineConstraint (4x)
		57632: 165, // InmemoryColumnClauses (4x)
		57633: 166, // InmemoryColumnClausesOrEmpty (4x)
		57675: 167, // RealColumnDef (4x)
		57689: 168, // SizeClause (4x)
		57411: 169, // _delete (3x)
		57399: 170, // _identified (3x)
		57496: 171, // _keep (3x)
		57404: 172, // _key (3x)
		57531: 173, // _memcompress (3x)
		57566: 174, // AnsiSupportDataTypes (3x)
		57570: 175, // CharacterDataTypes (3x)
		57571: 176, // CollateClause (3x)
		57590: 177, // Datatype (3x)
		57591: 178, // DatetimeDataTypes (3x)
		57597: 179, // DropColumnCheckpoint (3x)
		57600: 180, // DropColumnProp (3x)
		57643: 181, // InvisibleProp (3x)
		57646: 182, // LargeObjectDataTypes (3x)
		57648: 183, // LongAndRawDataTypes (3x)
		57662: 184, // NumberDataTypes (3x)
		57667: 185, // OralceBuiltInDataTypes (3x)
		57676: 186, // ReferencesClause (3x)
		57683: 187, // RowIdDataTypes (3x)
		57686: 188, // SegmentAttrsClause (3x)
		57348: 189, // _alter (2x)
		57445: 190, // _at (2x)
		57526: 191, // _auto (2x)
		57459: 192, // _blockchain (2x)
		57352: 193, // _byte (2x)
		57450: 194, // _columns (2x)
		57472: 195, // _commit (2x)
		57458: 196, // _create (2x)
		57466: 197, // _data (2x)
		57415: 198, // _deferred (2x)
		57473: 199, // _definition (2x)
		57449: 200, // _force (2x)
		57416: 201, // _immediate (2x)
		57523: 202, // _level (2x)
		57447: 203, // _levels (2x)
		57430: 204, // _limit (2x)
		57524: 205, // _locking (2x)
		57371: 206, // _mouth (2x)
		57536: 207, // _partition (2x)
		57474: 208, // _preserve (2x)
		57522: 209, // _query (2x)
		57478: 210, // _read (2x)
		57553: 211, // _reject (2x)
		57475: 212, // _rows (2x)
		57373: 213, // _second (2x)
		57520: 214, // _store (2x)
		57349: 215, // _table (2x)
		57465: 216, // _temporary (2x)
		57366: 217, // _time (2x)
		57504: 218, // _unlimited (2x)
		57452: 219, // _unused (2x)
		57479: 220, // _write (2x)
		57367: 221, // _zone (2x)
		57564: 222, // AddColumnClause (2x)
		57565: 223, // AlterTableStmt (2x)
		57568: 224, // ChangeColumnClause (2x)
		57572: 225, // CollateClauseOrEmpty (2x)
		57582: 226, // ColumnNameListForDropColumn (2x)
		57589: 227, // CreateTableStmt (2x)
		57592: 228, // DefaultClause (2x)
		57594: 229, // DefaultOrIdentityClause (2x)
		57598: 230, // DropColumnClause (2x)
		57601: 231, // DropColumnProps (2x)
		57602: 232, // DropColumnPropsOrEmpty (2x)
		57603: 233, // EmptyStmt (2x)
		57605: 234, // EncryptClause (2x)
		57609: 235, // Expr (2x)
		57611: 236, // ExternalTableClause (2x)
		57615: 237, // IdentityClause (2x)
		57616: 238, // IdentityOption (2x)
		57619: 239, // IlmClause (2x)
		57627: 240, // InlineConstraintList (2x)
		57628: 241, // InlineConstraintType (2x)
		57638: 242, // InmemoryMemCompress (2x)
		57641: 243, // InmemoryTableClause (2x)
		57645: 244, // IsForce (2x)
		57651: 245, // MemoptimizeRead (2x)
		57653: 246, // MemoptimizeWrite (2x)
		57655: 247, // ModifyColumnClause (2x)
		57656: 248, // ModifyColumnProp (2x)
		57658: 249, // ModifyColumnSubstitutable (2x)
		57659: 250, // ModifyColumnVisibility (2x)
		57661: 251, // ModifyRealColumnProp (2x)
		57669: 252, // OutOfLineConstraint (2x)
		57679: 253, // RelTableProp (2x)
		57687: 254, // SegmentAttrsClauseOrEmpty (2x)
		57693: 255, // Statement (2x)
		57696: 256, // StorageProp (2x)
		57699: 257, // TableCompressionOrEmpty (2x)
		61:    258, // '=' (1x)
		57515: 259, // _advanced (1x)
		57423: 260, // _always (1x)
		57521: 261, // _archive (1x)
		57552: 262, // _attributes (1x)
		57516: 263, // _basic (1x)
		57527: 264, // _capacity (1x)
		57453: 265, // _constraints (1x)
		57451: 266, // _continue (1x)
		57482: 267, // _creation (1x)
		57532: 268, // _critical (1x)
		57372: 269, // _day (1x)
		57542: 270, // _delete_all (1x)
		57544: 271, // _disable_all (1x)
		57528: 272, // _dml (1x)
		57460: 273, // _duplicated (1x)
		57506: 274, // _E (1x)
		57546: 275, // _enable_all (1x)
		57467: 276, // _extended (1x)
		57507: 277, // _G (1x)
		57461: 278, // _global (1x)
		57505: 279, // _groups (1x)
		57550: 280, // _heap (1x)
		57462: 281, // _immutable (1x)
		57551: 282, // _index (1x)
		57558: 283, // _into (1x)
		57420: 284, // _is (1x)
		57508: 285, // _K (1x)
		57365: 286, // _local (1x)
		57509: 287, // _M (1x)
		57533: 288, // _medium (1x)
		57468: 289, // _metadata (1x)
		57510: 290, // _P (1x)
		57391: 291, // _precision (1x)
		57463: 292, // _private (1x)
		57537: 293, // _range (1x)
		57503: 294, // _recycle (1x)
		57539: 295, // _service (1x)
		57464: 296, // _sharded (1x)
		57538: 297, // _subpartition (1x)
		57511: 298, // _T (1x)
		57398: 299, // _using (1x)
		57440: 300, // _value (1x)
		57369: 301, // _year (1x)
		57567: 302, // BlockchainTableClauses (1x)
		57569: 303, // ChangeColumnClauseList (1x)
		57573: 304, // ColumnClauses (1x)
		57574: 305, // ColumnCompressLock (1x)
		57575: 306, // ColumnCompressProp (1x)
		57576: 307, // ColumnConstraintForModify (1x)
		57578: 308, // ColumnDefConstraint (1x)
		57579: 309, // ColumnDefList (1x)
		57583: 310, // ColumnNameListOrEmpty (1x)
		57584: 311, // ColumnProps (1x)
		57593: 312, // DefaultCollateClauseOrEmpty (1x)
		57595: 313, // DefaultOrIdentityClauseForModify (1x)
		57596: 314, // DeferredSegmentCreation (1x)
		57599: 315, // DropColumnOnline (1x)
		57604: 316, // EncryptAlgorithm (1x)
		57606: 317, // EncryptClauseForModify (1x)
		57607: 318, // EncryptionSpec (1x)
		57610: 319, // ExternalPartitionClause (1x)
		57612: 320, // HeapOrgTableClause (1x)
		57613: 321, // IdentifiedByClause (1x)
		57617: 322, // IdentityOptions (1x)
		57624: 323, // ImmutableTableClauses (1x)
		57625: 324, // IndexOrgTableClause (1x)
		57629: 325, // InlineRefConstraint (1x)
		57630: 326, // InmemoryAttrs (1x)
		57634: 327, // InmemoryDistribute (1x)
		57635: 328, // InmemoryDistributeBy (1x)
		57636: 329, // InmemoryDistributeFor (1x)
		57637: 330, // InmemoryDuplicate (1x)
		57639: 331, // InmemoryProp (1x)
		57640: 332, // InmemorySpatial (1x)
		57642: 333, // IntergrityAlgorithm (1x)
		57644: 334, // InvisiblePropOrEmpty (1x)
		57649: 335, // Memoptimize (1x)
		57650: 336, // MemoptimizeForAlterTable (1x)
		57652: 337, // MemoptimizeReadForAlterTable (1x)
		57654: 338, // MemoptimizeWriteForAlterTable (1x)
		57657: 339, // ModifyColumnProps (1x)
		57660: 340, // ModifyColumnVisibilityList (1x)
		57664: 341, // OnCommitClause (1x)
		57665: 342, // OnCommitDef (1x)
		57666: 343, // OnCommitRows (1x)
		57668: 344, // OrgClause (1x)
		57670: 345, // OutOfLinePartStorageList (1x)
		57671: 346, // ParentTable (1x)
		57674: 347, // PhysicalProps (1x)
		57677: 348, // ReferencesOnDelete (1x)
		57678: 349, // RelTableDef (1x)
		57680: 350, // RelTableProps (1x)
		57681: 351, // RelTablePropsOrEmpty (1x)
		57682: 352, // RenameColumnClause (1x)
		57684: 353, // SaltProp (1x)
		57688: 354, // ShardingType (1x)
		57690: 355, // SizeUnit (1x)
		57691: 356, // SortProp (1x)
		57692: 357, // Start (1x)
		57694: 358, // StatementList (1x)
		57697: 359, // StorageProps (1x)
		57700: 360, // TableDef (1x)
		57702: 361, // TableProps (1x)
		57703: 362, // TableType (1x)
		57563: 363, // $default (0x)
		57347: 364, // _from (0x)
		57346: 365, // _select (0x)
		57345: 366, // error (0x)
	}

	yySymNames = []string{
		"')'",
		"$end",
		"';'",
		"','",
		"_not",
		"_null",
		"_primary",
		"_unique",
		"_references",
		"_constraint",
		"_memoptimize",
		"_parent",
		"_encrypt",
		"_drop",
		"_column",
		"_with",
		"_scope",
		"_no",
		"_default",
		"_decrypt",
		"_ilm",
		"_inmemory",
		"_generated",
		"_invisible",
		"_visible",
		"_sort",
		"_collate",
		"_compress",
		"_row",
		"_nocompress",
		"_filesystem_like_logging",
		"_initrans",
		"_logging",
		"_maxtrans",
		"_nologging",
		"_pctfree",
		"_pctused",
		"_storage",
		"_tablespace",
		"'('",
		"_set",
		"_add",
		"_modify",
		"_intNumber",
		"_doubleQuoteStr",
		"_nonquotedIdentifier",
		"_deferrable",
		"_disable",
		"_enable",
		"Identifier",
		"_buffer_pool",
		"_cell_flash_cache",
		"_exceptions",
		"_flash_cache",
		"_freelist",
		"_freelists",
		"_initial",
		"_initially",
		"_maxextents",
		"_maxsize",
		"_minextents",
		"_next",
		"_norely",
		"_novalidate",
		"_optimal",
		"_pctincrease",
		"_rely",
		"_spatial",
		"_validate",
		"_duplicate",
		"_external",
		"_organization",
		"_cluster",
		"_on",
		"_segment",
		"ColumnName",
		"_cache",
		"_cycle",
		"_distribute",
		"_increment",
		"_maxvalue",
		"_minvalue",
		"_nocache",
		"_nocycle",
		"_nomaxvalue",
		"_nominvalue",
		"_noorder",
		"_order",
		"_start",
		"_checkpoint",
		"_rename",
		"_cascade",
		"_for",
		"_invalidate",
		"_online",
		"_priority",
		"_salt",
		"_char",
		"ColumnNameList",
		"'.'",
		"_rowid",
		"_singleQuoteStr",
		"_to",
		"_character",
		"_raw",
		"ConstraintState",
		"ExceptionsClause",
		"_bfile",
		"_binaryDouble",
		"_binaryFloat",
		"_blob",
		"_clob",
		"_date",
		"_dec",
		"_decimal",
		"_double",
		"_float",
		"_foreign",
		"_int",
		"_interger",
		"_interval",
		"_long",
		"_national",
		"_nchar",
		"_nclob",
		"_number",
		"_numeric",
		"_nvarchar2",
		"_real",
		"_smallInt",
		"_timestamp",
		"_urowid",
		"_varchar",
		"_varchar2",
		"ConstraintNameOrEmpty",
		"ConstraintStateList",
		"ConstraintStateOrEmpty",
		"PhysicalAttrClause",
		"StorageClause",
		"TableCompression",
		"TableName",
		"'*'",
		"_high",
		"_identity",
		"_low",
		"_none",
		"_sharding",
		"_substitutable",
		"_varying",
		"InmemoryColumnClause",
		"LoggingClause",
		"NumberOrAsterisk",
		"PhysicalAttrsClause",
		"SegmentAttrClause",
		"_all",
		"_as",
		"_by",
		"_policy",
		"ColumnDef",
		"IdentityOptionsOrEmpty",
		"IlmCompressionPolicy",
		"IlmInmemoryPolicy",
		"IlmPolicyClause",
		"IlmTieringPolicy",
		"InlineConstraint",
		"InmemoryColumnClauses",
		"InmemoryColumnClausesOrEmpty",
		"RealColumnDef",
		"SizeClause",
		"_delete",
		"_identified",
		"_keep",
		"_key",
		"_memcompress",
		"AnsiSupportDataTypes",
		"CharacterDataTypes",
		"CollateClause",
		"Datatype",
		"DatetimeDataTypes",
		"DropColumnCheckpoint",
		"DropColumnProp",
		"InvisibleProp",
		"LargeObjectDataTypes",
		"LongAndRawDataTypes",
		"NumberDataTypes",
		"OralceBuiltInDataTypes",
		"ReferencesClause",
		"RowIdDataTypes",
		"SegmentAttrsClause",
		"_alter",
		"_at",
		"_auto",
		"_blockchain",
		"_byte",
		"_columns",
		"_commit",
		"_create",
		"_data",
		"_deferred",
		"_definition",
		"_force",
		"_immediate",
		"_level",
		"_levels",
		"_limit",
		"_locking",
		"_mouth",
		"_partition",
		"_preserve",
		"_query",
		"_read",
		"_reject",
		"_rows",
		"_second",
		"_store",
		"_table",
		"_temporary",
		"_time",
		"_unlimited",
		"_unused",
		"_write",
		"_zone",
		"AddColumnClause",
		"AlterTableStmt",
		"ChangeColumnClause",
		"CollateClauseOrEmpty",
		"ColumnNameListForDropColumn",
		"CreateTableStmt",
		"DefaultClause",
		"DefaultOrIdentityClause",
		"DropColumnClause",
		"DropColumnProps",
		"DropColumnPropsOrEmpty",
		"EmptyStmt",
		"EncryptClause",
		"Expr",
		"ExternalTableClause",
		"IdentityClause",
		"IdentityOption",
		"IlmClause",
		"InlineConstraintList",
		"InlineConstraintType",
		"InmemoryMemCompress",
		"InmemoryTableClause",
		"IsForce",
		"MemoptimizeRead",
		"MemoptimizeWrite",
		"ModifyColumnClause",
		"ModifyColumnProp",
		"ModifyColumnSubstitutable",
		"ModifyColumnVisibility",
		"ModifyRealColumnProp",
		"OutOfLineConstraint",
		"RelTableProp",
		"SegmentAttrsClauseOrEmpty",
		"Statement",
		"StorageProp",
		"TableCompressionOrEmpty",
		"'='",
		"_advanced",
		"_always",
		"_archive",
		"_attributes",
		"_basic",
		"_capacity",
		"_constraints",
		"_continue",
		"_creation",
		"_critical",
		"_day",
		"_delete_all",
		"_disable_all",
		"_dml",
		"_duplicated",
		"_E",
		"_enable_all",
		"_extended",
		"_G",
		"_global",
		"_groups",
		"_heap",
		"_immutable",
		"_index",
		"_into",
		"_is",
		"_K",
		"_local",
		"_M",
		"_medium",
		"_metadata",
		"_P",
		"_precision",
		"_private",
		"_range",
		"_recycle",
		"_service",
		"_sharded",
		"_subpartition",
		"_T",
		"_using",
		"_value",
		"_year",
		"BlockchainTableClauses",
		"ChangeColumnClauseList",
		"ColumnClauses",
		"ColumnCompressLock",
		"ColumnCompressProp",
		"ColumnConstraintForModify",
		"ColumnDefConstraint",
		"ColumnDefList",
		"ColumnNameListOrEmpty",
		"ColumnProps",
		"DefaultCollateClauseOrEmpty",
		"DefaultOrIdentityClauseForModify",
		"DeferredSegmentCreation",
		"DropColumnOnline",
		"EncryptAlgorithm",
		"EncryptClauseForModify",
		"EncryptionSpec",
		"ExternalPartitionClause",
		"HeapOrgTableClause",
		"IdentifiedByClause",
		"IdentityOptions",
		"ImmutableTableClauses",
		"IndexOrgTableClause",
		"InlineRefConstraint",
		"InmemoryAttrs",
		"InmemoryDistribute",
		"InmemoryDistributeBy",
		"InmemoryDistributeFor",
		"InmemoryDuplicate",
		"InmemoryProp",
		"InmemorySpatial",
		"IntergrityAlgorithm",
		"InvisiblePropOrEmpty",
		"Memoptimize",
		"MemoptimizeForAlterTable",
		"MemoptimizeReadForAlterTable",
		"MemoptimizeWriteForAlterTable",
		"ModifyColumnProps",
		"ModifyColumnVisibilityList",
		"OnCommitClause",
		"OnCommitDef",
		"OnCommitRows",
		"OrgClause",
		"OutOfLinePartStorageList",
		"ParentTable",
		"PhysicalProps",
		"ReferencesOnDelete",
		"RelTableDef",
		"RelTableProps",
		"RelTablePropsOrEmpty",
		"RenameColumnClause",
		"SaltProp",
		"ShardingType",
		"SizeUnit",
		"SortProp",
		"Start",
		"StatementList",
		"StorageProps",
		"TableDef",
		"TableProps",
		"TableType",
		"$default",
		"_from",
		"_select",
		"error",
	}

	yyTokenLiteralStrings = map[int]string{
		57559: "int number",
		57561: "double quotes string",
		57562: "nonquoted identifier",
		57560: "single quotes string",
	}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {357, 1},
		2:   {358, 1},
		3:   {358, 3},
		4:   {255, 1},
		5:   {255, 1},
		6:   {255, 1},
		7:   {233, 0},
		8:   {140, 1},
		9:   {140, 3},
		10:  {98, 1},
		11:  {98, 3},
		12:  {75, 1},
		13:  {49, 1},
		14:  {49, 1},
		15:  {223, 5},
		16:  {304, 1},
		17:  {304, 1},
		18:  {303, 1},
		19:  {303, 2},
		20:  {224, 1},
		21:  {224, 1},
		22:  {224, 1},
		23:  {222, 6},
		24:  {311, 0},
		25:  {345, 0},
		26:  {309, 1},
		27:  {309, 3},
		28:  {158, 1},
		29:  {167, 8},
		30:  {225, 0},
		31:  {225, 1},
		32:  {176, 2},
		33:  {356, 0},
		34:  {356, 1},
		35:  {334, 0},
		36:  {334, 1},
		37:  {181, 1},
		38:  {181, 1},
		39:  {229, 0},
		40:  {229, 1},
		41:  {229, 1},
		42:  {228, 2},
		43:  {228, 4},
		44:  {237, 4},
		45:  {237, 5},
		46:  {237, 5},
		47:  {237, 6},
		48:  {237, 8},
		49:  {159, 0},
		50:  {159, 3},
		51:  {322, 0},
		52:  {322, 1},
		53:  {322, 2},
		54:  {238, 3},
		55:  {238, 4},
		56:  {238, 3},
		57:  {238, 2},
		58:  {238, 1},
		59:  {238, 2},
		60:  {238, 1},
		61:  {238, 1},
		62:  {238, 1},
		63:  {238, 2},
		64:  {238, 1},
		65:  {238, 1},
		66:  {238, 1},
		67:  {234, 0},
		68:  {234, 2},
		69:  {318, 4},
		70:  {316, 0},
		71:  {316, 2},
		72:  {321, 0},
		73:  {321, 3},
		74:  {333, 0},
		75:  {333, 1},
		76:  {353, 0},
		77:  {353, 1},
		78:  {353, 2},
		79:  {308, 0},
		80:  {308, 1},
		81:  {308, 1},
		82:  {240, 1},
		83:  {240, 2},
		84:  {247, 4},
		85:  {247, 4},
		86:  {247, 1},
		87:  {339, 1},
		88:  {339, 3},
		89:  {248, 1},
		90:  {251, 6},
		91:  {313, 2},
		92:  {313, 1},
		93:  {317, 1},
		94:  {317, 1},
		95:  {307, 0},
		96:  {307, 1},
		97:  {340, 1},
		98:  {340, 3},
		99:  {250, 2},
		100: {249, 7},
		101: {249, 8},
		102: {244, 0},
		103: {244, 1},
		104: {230, 5},
		105: {230, 4},
		106: {230, 4},
		107: {230, 4},
		108: {226, 2},
		109: {226, 3},
		110: {232, 0},
		111: {232, 1},
		112: {231, 1},
		113: {231, 2},
		114: {180, 2},
		115: {180, 1},
		116: {315, 0},
		117: {315, 1},
		118: {179, 0},
		119: {179, 2},
		120: {352, 5},
		121: {227, 8},
		122: {362, 0},
		123: {362, 2},
		124: {362, 2},
		125: {362, 1},
		126: {362, 1},
		127: {362, 1},
		128: {362, 1},
		129: {362, 2},
		130: {354, 0},
		131: {354, 3},
		132: {354, 3},
		133: {354, 4},
		134: {354, 3},
		135: {346, 0},
		136: {346, 2},
		137: {360, 1},
		138: {349, 7},
		139: {323, 0},
		140: {302, 0},
		141: {312, 0},
		142: {312, 2},
		143: {341, 2},
		144: {342, 0},
		145: {342, 4},
		146: {342, 4},
		147: {343, 0},
		148: {343, 4},
		149: {343, 4},
		150: {347, 0},
		151: {347, 5},
		152: {347, 3},
		153: {347, 2},
		154: {347, 5},
		155: {314, 0},
		156: {314, 3},
		157: {314, 3},
		158: {254, 0},
		159: {254, 1},
		160: {188, 1},
		161: {188, 2},
		162: {153, 1},
		163: {153, 2},
		164: {153, 3},
		165: {153, 1},
		166: {153, 1},
		167: {152, 1},
		168: {152, 2},
		169: {137, 2},
		170: {137, 2},
		171: {137, 2},
		172: {137, 2},
		173: {137, 1},
		174: {138, 4},
		175: {359, 1},
		176: {359, 2},
		177: {256, 2},
		178: {256, 2},
		179: {256, 2},
		180: {256, 2},
		181: {256, 2},
		182: {256, 2},
		183: {256, 2},
		184: {256, 2},
		185: {256, 2},
		186: {256, 3},
		187: {256, 1},
		188: {256, 2},
		189: {256, 2},
		190: {256, 2},
		191: {256, 2},
		192: {256, 2},
		193: {256, 2},
		194: {256, 2},
		195: {256, 2},
		196: {256, 2},
		197: {256, 2},
		198: {256, 2},
		199: {256, 1},
		200: {168, 2},
		201: {355, 0},
		202: {355, 1},
		203: {355, 1},
		204: {355, 1},
		205: {355, 1},
		206: {355, 1},
		207: {355, 1},
		208: {150, 1},
		209: {150, 1},
		210: {150, 1},
		211: {257, 0},
		212: {257, 1},
		213: {139, 1},
		214: {139, 3},
		215: {139, 4},
		216: {139, 4},
		217: {139, 5},
		218: {139, 1},
		219: {306, 0},
		220: {306, 2},
		221: {306, 3},
		222: {306, 3},
		223: {306, 2},
		224: {306, 3},
		225: {306, 3},
		226: {305, 0},
		227: {305, 3},
		228: {305, 4},
		229: {243, 0},
		230: {243, 3},
		231: {243, 3},
		232: {243, 1},
		233: {326, 5},
		234: {242, 0},
		235: {242, 3},
		236: {242, 3},
		237: {242, 4},
		238: {242, 4},
		239: {242, 3},
		240: {242, 4},
		241: {242, 4},
		242: {242, 2},
		243: {242, 2},
		244: {331, 0},
		245: {331, 2},
		246: {331, 2},
		247: {331, 2},
		248: {331, 2},
		249: {331, 2},
		250: {327, 0},
		251: {327, 3},
		252: {328, 0},
		253: {328, 1},
		254: {328, 3},
		255: {328, 2},
		256: {328, 2},
		257: {329, 0},
		258: {329, 3},
		259: {329, 3},
		260: {329, 3},
		261: {329, 3},
		262: {330, 0},
		263: {330, 1},
		264: {330, 2},
		265: {330, 2},
		266: {332, 0},
		267: {332, 2},
		268: {166, 0},
		269: {166, 1},
		270: {165, 1},
		271: {165, 2},
		272: {149, 4},
		273: {149, 5},
		274: {149, 5},
		275: {239, 0},
		276: {239, 4},
		277: {239, 4},
		278: {239, 4},
		279: {239, 4},
		280: {239, 2},
		281: {239, 2},
		282: {239, 2},
		283: {162, 1},
		284: {162, 1},
		285: {162, 1},
		286: {160, 0},
		287: {163, 0},
		288: {161, 0},
		289: {344, 3},
		290: {344, 3},
		291: {344, 2},
		292: {320, 3},
		293: {324, 0},
		294: {236, 0},
		295: {319, 4},
		296: {319, 6},
		297: {361, 0},
		298: {351, 0},
		299: {351, 3},
		300: {350, 1},
		301: {350, 3},
		302: {253, 1},
		303: {253, 1},
		304: {177, 1},
		305: {177, 1},
		306: {151, 1},
		307: {151, 1},
		308: {185, 1},
		309: {185, 1},
		310: {185, 1},
		311: {185, 1},
		312: {185, 1},
		313: {185, 1},
		314: {175, 1},
		315: {175, 4},
		316: {175, 5},
		317: {175, 5},
		318: {175, 4},
		319: {175, 5},
		320: {175, 5},
		321: {175, 1},
		322: {175, 4},
		323: {175, 4},
		324: {184, 1},
		325: {184, 4},
		326: {184, 6},
		327: {184, 1},
		328: {184, 4},
		329: {184, 1},
		330: {184, 1},
		331: {183, 1},
		332: {183, 2},
		333: {183, 4},
		334: {178, 1},
		335: {178, 1},
		336: {178, 4},
		337: {178, 7},
		338: {178, 8},
		339: {178, 4},
		340: {178, 7},
		341: {178, 4},
		342: {178, 7},
		343: {178, 10},
		344: {178, 7},
		345: {182, 1},
		346: {182, 1},
		347: {182, 1},
		348: {182, 1},
		349: {187, 1},
		350: {187, 1},
		351: {187, 4},
		352: {174, 4},
		353: {174, 5},
		354: {174, 5},
		355: {174, 5},
		356: {174, 4},
		357: {174, 5},
		358: {174, 6},
		359: {174, 5},
		360: {174, 6},
		361: {174, 1},
		362: {174, 4},
		363: {174, 6},
		364: {174, 1},
		365: {174, 4},
		366: {174, 6},
		367: {174, 1},
		368: {174, 4},
		369: {174, 6},
		370: {174, 1},
		371: {174, 1},
		372: {174, 1},
		373: {174, 2},
		374: {174, 1},
		375: {134, 0},
		376: {134, 2},
		377: {164, 3},
		378: {164, 3},
		379: {241, 1},
		380: {241, 2},
		381: {241, 1},
		382: {241, 2},
		383: {186, 4},
		384: {310, 0},
		385: {310, 3},
		386: {348, 0},
		387: {348, 3},
		388: {348, 4},
		389: {136, 0},
		390: {136, 1},
		391: {135, 1},
		392: {135, 2},
		393: {105, 1},
		394: {105, 2},
		395: {105, 2},
		396: {105, 2},
		397: {105, 1},
		398: {105, 1},
		399: {105, 1},
		400: {105, 1},
		401: {105, 1},
		402: {105, 1},
		403: {105, 1},
		404: {106, 3},
		405: {325, 3},
		406: {325, 2},
		407: {325, 3},
		408: {252, 6},
		409: {252, 7},
		410: {252, 8},
		411: {336, 2},
		412: {337, 1},
		413: {337, 4},
		414: {338, 1},
		415: {338, 4},
		416: {335, 2},
		417: {245, 0},
		418: {245, 3},
		419: {246, 0},
		420: {246, 3},
		421: {235, 1},
		422: {235, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [734][]uint16{
		// 0
		{1: 416, 416, 189: 430, 196: 431, 223: 428, 227: 429, 233: 427, 255: 426, 357: 424, 425},
		{1: 423},
		{1: 422, 1155},
		{1: 421, 421},
		{1: 419, 419},
		// 5
		{1: 418, 418},
		{1: 417, 417},
		{215: 1046},
		{215: 432},
		{44: 301, 301, 192: 439, 273: 437, 278: 434, 281: 438, 292: 435, 296: 436, 362: 433},
		// 10
		{44: 445, 444, 49: 443, 140: 446},
		{216: 442},
		{216: 441},
		{44: 298, 298},
		{44: 297, 297},
		// 15
		{44: 296, 296, 192: 440},
		{44: 295, 295},
		{44: 294, 294},
		{44: 299, 299},
		{44: 300, 300},
		// 20
		{415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 13: 415, 415, 17: 415, 415, 27: 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 46: 415, 415, 415, 52: 415, 57: 415, 62: 415, 415, 66: 415, 68: 415, 70: 415, 415, 415, 415, 415, 90: 415, 99: 1044, 146: 415},
		{410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 27: 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 46: 410, 410, 410, 52: 410, 57: 410, 62: 410, 410, 66: 410, 410, 410, 410, 410, 410, 410, 410, 410, 89: 410, 410, 410, 93: 410, 410, 96: 410, 410, 99: 410, 410, 410, 410, 410, 410, 107: 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 146: 410, 410},
		{409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 27: 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 46: 409, 409, 409, 52: 409, 57: 409, 62: 409, 409, 66: 409, 409, 409, 409, 409, 409, 409, 409, 409, 89: 409, 409, 409, 93: 409, 409, 96: 409, 409, 99: 409, 409, 409, 409, 409, 409, 107: 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 146: 409, 409},
		{1: 293, 293, 10: 293, 293, 14: 293, 18: 293, 27: 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 70: 293, 293, 293, 293, 293, 146: 448, 354: 447},
		{1: 125, 125, 10: 125, 125, 14: 125, 18: 125, 27: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 458, 70: 125, 125, 125, 125, 125, 349: 456, 351: 457, 360: 455},
		// 25
		{258: 449},
		{145: 453, 197: 451, 276: 452, 289: 450},
		{1: 292, 292, 10: 292, 292, 14: 292, 18: 292, 27: 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 70: 292, 292, 292, 292, 292},
		{1: 291, 291, 10: 291, 291, 14: 291, 18: 291, 27: 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 70: 291, 291, 291, 291, 291},
		{197: 454},
		// 30
		{1: 289, 289, 10: 289, 289, 14: 289, 18: 289, 27: 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 70: 289, 289, 289, 289, 289},
		{1: 290, 290, 10: 290, 290, 14: 290, 18: 290, 27: 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 70: 290, 290, 290, 290, 290},
		{1: 6, 6, 10: 1034, 6, 245: 1033, 335: 1032},
		{1: 286, 286, 10: 286, 286},
		{1: 284, 284, 10: 284, 284, 14: 284, 18: 284, 27: 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 70: 284, 284, 284, 284, 284, 323: 789},
		// 35
		{6: 48, 48, 9: 466, 44: 445, 444, 49: 459, 75: 461, 117: 48, 134: 467, 158: 464, 167: 460, 252: 465, 463, 350: 462},
		{411, 411, 411, 411, 411, 10: 411, 411, 13: 411, 411, 17: 411, 20: 411, 411, 23: 411, 411, 40: 411, 411, 411, 89: 411, 91: 411, 93: 411, 411, 97: 411, 100: 411, 102: 411, 411, 411, 107: 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 118: 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 147: 411},
		{395, 3: 395},
		{97: 533, 100: 550, 103: 552, 542, 107: 549, 540, 539, 546, 547, 543, 557, 556, 561, 538, 118: 559, 558, 545, 541, 554, 535, 548, 537, 555, 536, 562, 560, 544, 551, 553, 534, 174: 526, 527, 177: 524, 530, 182: 531, 529, 528, 525, 187: 532},
		{521, 3: 522},
		// 40
		{123, 3: 123},
		{121, 3: 121},
		{120, 3: 120},
		{44: 445, 444, 49: 520},
		{6: 469, 468, 117: 470},
		// 45
		{39: 516},
		{172: 511},
		{172: 471},
		{39: 472},
		{44: 445, 444, 49: 459, 75: 473, 98: 474},
		// 50
		{413, 3: 413},
		{476, 3: 475},
		{44: 445, 444, 49: 459, 75: 510},
		{8: 477, 186: 478},
		{44: 445, 444, 49: 443, 140: 499},
		// 55
		{34, 3: 34, 482, 46: 481, 487, 486, 52: 491, 57: 483, 62: 485, 489, 66: 484, 68: 488, 105: 480, 490, 135: 479, 492},
		{33, 3: 33, 482, 33, 33, 33, 33, 33, 46: 481, 487, 486, 52: 491, 57: 483, 62: 485, 489, 66: 484, 68: 488, 105: 498, 490},
		{32, 3: 32, 32, 32, 32, 32, 32, 32, 46: 32, 32, 32, 52: 32, 57: 32, 62: 32, 32, 66: 32, 68: 32},
		{30, 3: 30, 30, 30, 30, 30, 30, 30, 46: 30, 30, 30, 52: 30, 57: 30, 62: 30, 30, 66: 30, 68: 30},
		{46: 497},
		// 60
		{198: 495, 201: 496},
		{26, 3: 26, 26, 26, 26, 26, 26, 26, 46: 26, 26, 26, 52: 26, 57: 26, 62: 26, 26, 66: 26, 68: 26},
		{25, 3: 25, 25, 25, 25, 25, 25, 25, 46: 25, 25, 25, 52: 25, 57: 25, 62: 25, 25, 66: 25, 68: 25},
		{24, 3: 24, 24, 24, 24, 24, 24, 24, 46: 24, 24, 24, 52: 24, 57: 24, 62: 24, 24, 66: 24, 68: 24},
		{23, 3: 23, 23, 23, 23, 23, 23, 23, 46: 23, 23, 23, 52: 23, 57: 23, 62: 23, 23, 66: 23, 68: 23},
		// 65
		{22, 3: 22, 22, 22, 22, 22, 22, 22, 46: 22, 22, 22, 52: 22, 57: 22, 62: 22, 22, 66: 22, 68: 22},
		{21, 3: 21, 21, 21, 21, 21, 21, 21, 46: 21, 21, 21, 52: 21, 57: 21, 62: 21, 21, 66: 21, 68: 21},
		{20, 3: 20, 20, 20, 20, 20, 20, 20, 46: 20, 20, 20, 52: 20, 57: 20, 62: 20, 20, 66: 20, 68: 20},
		{283: 493},
		{13, 3: 13},
		// 70
		{44: 445, 444, 49: 443, 140: 494},
		{19, 3: 19, 19, 19, 19, 19, 19, 19, 46: 19, 19, 19, 52: 19, 57: 19, 62: 19, 19, 66: 19, 68: 19},
		{28, 3: 28, 28, 28, 28, 28, 28, 28, 46: 28, 28, 28, 52: 28, 57: 28, 62: 28, 28, 66: 28, 68: 28},
		{27, 3: 27, 27, 27, 27, 27, 27, 27, 46: 27, 27, 27, 52: 27, 57: 27, 62: 27, 27, 66: 27, 68: 27},
		{29, 3: 29, 29, 29, 29, 29, 29, 29, 46: 29, 29, 29, 52: 29, 57: 29, 62: 29, 29, 66: 29, 68: 29},
		// 75
		{31, 3: 31, 31, 31, 31, 31, 31, 31, 46: 31, 31, 31, 52: 31, 57: 31, 62: 31, 31, 66: 31, 68: 31},
		{39, 3: 39, 39, 39, 39, 39, 39, 39, 39: 501, 46: 39, 39, 39, 52: 39, 57: 39, 62: 39, 39, 66: 39, 68: 39, 73: 39, 310: 500},
		{37, 3: 37, 37, 37, 37, 37, 37, 37, 46: 37, 37, 37, 52: 37, 57: 37, 62: 37, 37, 66: 37, 68: 37, 73: 505, 348: 504},
		{44: 445, 444, 49: 459, 75: 473, 98: 502},
		{503, 3: 475},
		// 80
		{38, 3: 38, 38, 38, 38, 38, 38, 38, 46: 38, 38, 38, 52: 38, 57: 38, 62: 38, 38, 66: 38, 68: 38, 73: 38},
		{40, 3: 40, 40, 40, 40, 40, 40, 40, 46: 40, 40, 40, 52: 40, 57: 40, 62: 40, 40, 66: 40, 68: 40},
		{169: 506},
		{40: 508, 91: 507},
		{36, 3: 36, 36, 36, 36, 36, 36, 36, 46: 36, 36, 36, 52: 36, 57: 36, 62: 36, 36, 66: 36, 68: 36},
		// 85
		{5: 509},
		{35, 3: 35, 35, 35, 35, 35, 35, 35, 46: 35, 35, 35, 52: 35, 57: 35, 62: 35, 35, 66: 35, 68: 35},
		{412, 3: 412},
		{39: 512},
		{44: 445, 444, 49: 459, 75: 473, 98: 513},
		// 90
		{514, 3: 475},
		{34, 3: 34, 482, 46: 481, 487, 486, 52: 491, 57: 483, 62: 485, 489, 66: 484, 68: 488, 105: 480, 490, 135: 479, 515},
		{14, 3: 14},
		{44: 445, 444, 49: 459, 75: 473, 98: 517},
		{518, 3: 475},
		// 95
		{34, 3: 34, 482, 46: 481, 487, 486, 52: 491, 57: 483, 62: 485, 489, 66: 484, 68: 488, 105: 480, 490, 135: 479, 519},
		{15, 3: 15},
		{4: 47, 47, 47, 47, 47, 117: 47},
		{1: 124, 124, 10: 124, 124, 14: 124, 18: 124, 27: 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 70: 124, 124, 124, 124, 124},
		{6: 48, 48, 9: 466, 44: 445, 444, 49: 459, 75: 461, 117: 48, 134: 467, 158: 464, 167: 460, 252: 465, 523},
		// 100
		{122, 3: 122},
		{393, 3: 393, 393, 393, 393, 393, 393, 393, 12: 393, 15: 393, 393, 18: 393, 22: 393, 393, 393, 393, 687, 176: 686, 225: 685},
		{119, 3: 119, 119, 119, 119, 119, 119, 119, 12: 119, 119, 15: 119, 119, 18: 119, 119, 22: 119, 119, 119, 119, 119},
		{118, 3: 118, 118, 118, 118, 118, 118, 118, 12: 118, 118, 15: 118, 118, 18: 118, 118, 22: 118, 118, 118, 118, 118},
		{115, 3: 115, 115, 115, 115, 115, 115, 115, 12: 115, 115, 15: 115, 115, 18: 115, 115, 22: 115, 115, 115, 115, 115},
		// 105
		{114, 3: 114, 114, 114, 114, 114, 114, 114, 12: 114, 114, 15: 114, 114, 18: 114, 114, 22: 114, 114, 114, 114, 114},
		{113, 3: 113, 113, 113, 113, 113, 113, 113, 12: 113, 113, 15: 113, 113, 18: 113, 113, 22: 113, 113, 113, 113, 113},
		{112, 3: 112, 112, 112, 112, 112, 112, 112, 12: 112, 112, 15: 112, 112, 18: 112, 112, 22: 112, 112, 112, 112, 112},
		{111, 3: 111, 111, 111, 111, 111, 111, 111, 12: 111, 111, 15: 111, 111, 18: 111, 111, 22: 111, 111, 111, 111, 111},
		{110, 3: 110, 110, 110, 110, 110, 110, 110, 12: 110, 110, 15: 110, 110, 18: 110, 110, 22: 110, 110, 110, 110, 110},
		// 110
		{109, 3: 109, 109, 109, 109, 109, 109, 109, 12: 109, 109, 15: 109, 109, 18: 109, 109, 22: 109, 109, 109, 109, 109, 39: 674, 148: 675},
		{39: 667},
		{102, 3: 102, 102, 102, 102, 102, 102, 102, 12: 102, 102, 15: 102, 102, 18: 102, 102, 22: 102, 102, 102, 102, 102, 39: 660, 148: 661},
		{39: 657},
		{99, 3: 99, 99, 99, 99, 99, 99, 99, 12: 99, 99, 15: 99, 99, 18: 99, 99, 22: 99, 99, 99, 99, 99, 39: 651},
		// 115
		{96, 3: 96, 96, 96, 96, 96, 96, 96, 12: 96, 96, 15: 96, 96, 18: 96, 96, 22: 96, 96, 96, 96, 96, 39: 648},
		{94, 3: 94, 94, 94, 94, 94, 94, 94, 12: 94, 94, 15: 94, 94, 18: 94, 94, 22: 94, 94, 94, 94, 94},
		{93, 3: 93, 93, 93, 93, 93, 93, 93, 12: 93, 93, 15: 93, 93, 18: 93, 93, 22: 93, 93, 93, 93, 93},
		{92, 3: 92, 92, 92, 92, 92, 92, 92, 12: 92, 92, 15: 92, 92, 18: 92, 92, 22: 92, 92, 92, 92, 92, 104: 647},
		{39: 644},
		// 120
		{89, 3: 89, 89, 89, 89, 89, 89, 89, 12: 89, 89, 15: 89, 89, 18: 89, 89, 22: 89, 89, 89, 89, 89},
		{88, 3: 88, 88, 88, 88, 88, 88, 88, 12: 88, 88, 15: 88, 88, 18: 88, 88, 22: 88, 88, 88, 88, 88, 39: 635},
		{269: 614, 301: 613},
		{78, 3: 78, 78, 78, 78, 78, 78, 78, 12: 78, 78, 15: 78, 78, 18: 78, 78, 22: 78, 78, 78, 78, 78},
		{77, 3: 77, 77, 77, 77, 77, 77, 77, 12: 77, 77, 15: 77, 77, 18: 77, 77, 22: 77, 77, 77, 77, 77},
		// 125
		{76, 3: 76, 76, 76, 76, 76, 76, 76, 12: 76, 76, 15: 76, 76, 18: 76, 76, 22: 76, 76, 76, 76, 76},
		{75, 3: 75, 75, 75, 75, 75, 75, 75, 12: 75, 75, 15: 75, 75, 18: 75, 75, 22: 75, 75, 75, 75, 75},
		{74, 3: 74, 74, 74, 74, 74, 74, 74, 12: 74, 74, 15: 74, 74, 18: 74, 74, 22: 74, 74, 74, 74, 74},
		{73, 3: 73, 73, 73, 73, 73, 73, 73, 12: 73, 73, 15: 73, 73, 18: 73, 73, 22: 73, 73, 73, 73, 73, 39: 610},
		{39: 603, 148: 604},
		// 130
		{39: 600},
		{97: 585, 103: 584},
		{62, 3: 62, 62, 62, 62, 62, 62, 62, 12: 62, 62, 15: 62, 62, 18: 62, 62, 22: 62, 62, 62, 62, 62, 39: 578},
		{59, 3: 59, 59, 59, 59, 59, 59, 59, 12: 59, 59, 15: 59, 59, 18: 59, 59, 22: 59, 59, 59, 59, 59, 39: 572},
		{56, 3: 56, 56, 56, 56, 56, 56, 56, 12: 56, 56, 15: 56, 56, 18: 56, 56, 22: 56, 56, 56, 56, 56, 39: 564},
		// 135
		{53, 3: 53, 53, 53, 53, 53, 53, 53, 12: 53, 53, 15: 53, 53, 18: 53, 53, 22: 53, 53, 53, 53, 53},
		{52, 3: 52, 52, 52, 52, 52, 52, 52, 12: 52, 52, 15: 52, 52, 18: 52, 52, 22: 52, 52, 52, 52, 52},
		{51, 3: 51, 51, 51, 51, 51, 51, 51, 12: 51, 51, 15: 51, 51, 18: 51, 51, 22: 51, 51, 51, 51, 51},
		{291: 563},
		{49, 3: 49, 49, 49, 49, 49, 49, 49, 12: 49, 49, 15: 49, 49, 18: 49, 49, 22: 49, 49, 49, 49, 49},
		// 140
		{50, 3: 50, 50, 50, 50, 50, 50, 50, 12: 50, 50, 15: 50, 50, 18: 50, 50, 22: 50, 50, 50, 50, 50},
		{43: 565, 141: 566, 151: 567},
		{117, 3: 117, 99: 117},
		{116, 3: 116, 99: 116},
		{568, 99: 569},
		// 145
		{55, 3: 55, 55, 55, 55, 55, 55, 55, 12: 55, 55, 15: 55, 55, 18: 55, 55, 22: 55, 55, 55, 55, 55},
		{43: 570},
		{571},
		{54, 3: 54, 54, 54, 54, 54, 54, 54, 12: 54, 54, 15: 54, 54, 18: 54, 54, 22: 54, 54, 54, 54, 54},
		{43: 565, 141: 566, 151: 573},
		// 150
		{574, 99: 575},
		{58, 3: 58, 58, 58, 58, 58, 58, 58, 12: 58, 58, 15: 58, 58, 18: 58, 58, 22: 58, 58, 58, 58, 58},
		{43: 576},
		{577},
		{57, 3: 57, 57, 57, 57, 57, 57, 57, 12: 57, 57, 15: 57, 57, 18: 57, 57, 22: 57, 57, 57, 57, 57},
		// 155
		{43: 565, 141: 566, 151: 579},
		{580, 99: 581},
		{61, 3: 61, 61, 61, 61, 61, 61, 61, 12: 61, 61, 15: 61, 61, 18: 61, 61, 22: 61, 61, 61, 61, 61},
		{43: 582},
		{583},
		// 160
		{60, 3: 60, 60, 60, 60, 60, 60, 60, 12: 60, 60, 15: 60, 60, 18: 60, 60, 22: 60, 60, 60, 60, 60},
		{39: 593, 148: 594},
		{39: 586, 148: 587},
		{43: 591},
		{39: 588},
		// 165
		{43: 589},
		{590},
		{63, 3: 63, 63, 63, 63, 63, 63, 63, 12: 63, 63, 15: 63, 63, 18: 63, 63, 22: 63, 63, 63, 63, 63},
		{592},
		{64, 3: 64, 64, 64, 64, 64, 64, 64, 12: 64, 64, 15: 64, 64, 18: 64, 64, 22: 64, 64, 64, 64, 64},
		// 170
		{43: 598},
		{39: 595},
		{43: 596},
		{597},
		{65, 3: 65, 65, 65, 65, 65, 65, 65, 12: 65, 65, 15: 65, 65, 18: 65, 65, 22: 65, 65, 65, 65, 65},
		// 175
		{599},
		{66, 3: 66, 66, 66, 66, 66, 66, 66, 12: 66, 66, 15: 66, 66, 18: 66, 66, 22: 66, 66, 66, 66, 66},
		{43: 601},
		{602},
		{67, 3: 67, 67, 67, 67, 67, 67, 67, 12: 67, 67, 15: 67, 67, 18: 67, 67, 22: 67, 67, 67, 67, 67},
		// 180
		{43: 608},
		{39: 605},
		{43: 606},
		{607},
		{70, 3: 70, 70, 70, 70, 70, 70, 70, 12: 70, 70, 15: 70, 70, 18: 70, 70, 22: 70, 70, 70, 70, 70},
		// 185
		{609},
		{71, 3: 71, 71, 71, 71, 71, 71, 71, 12: 71, 71, 15: 71, 71, 18: 71, 71, 22: 71, 71, 71, 71, 71},
		{43: 611},
		{612},
		{72, 3: 72, 72, 72, 72, 72, 72, 72, 12: 72, 72, 15: 72, 72, 18: 72, 72, 22: 72, 72, 72, 72, 72},
		// 190
		{39: 629, 102: 628},
		{39: 616, 102: 615},
		{213: 624},
		{43: 617},
		{618},
		// 195
		{102: 619},
		{213: 620},
		{81, 3: 81, 81, 81, 81, 81, 81, 81, 12: 81, 81, 15: 81, 81, 18: 81, 81, 22: 81, 81, 81, 81, 81, 39: 621},
		{43: 622},
		{623},
		// 200
		{80, 3: 80, 80, 80, 80, 80, 80, 80, 12: 80, 80, 15: 80, 80, 18: 80, 80, 22: 80, 80, 80, 80, 80},
		{82, 3: 82, 82, 82, 82, 82, 82, 82, 12: 82, 82, 15: 82, 82, 18: 82, 82, 22: 82, 82, 82, 82, 82, 39: 625},
		{43: 626},
		{627},
		{79, 3: 79, 79, 79, 79, 79, 79, 79, 12: 79, 79, 15: 79, 79, 18: 79, 79, 22: 79, 79, 79, 79, 79},
		// 205
		{206: 634},
		{43: 630},
		{631},
		{102: 632},
		{206: 633},
		// 210
		{83, 3: 83, 83, 83, 83, 83, 83, 83, 12: 83, 83, 15: 83, 83, 18: 83, 83, 22: 83, 83, 83, 83, 83},
		{84, 3: 84, 84, 84, 84, 84, 84, 84, 12: 84, 84, 15: 84, 84, 18: 84, 84, 22: 84, 84, 84, 84, 84},
		{43: 636},
		{637},
		{87, 3: 87, 87, 87, 87, 87, 87, 87, 12: 87, 87, 15: 638, 87, 18: 87, 87, 22: 87, 87, 87, 87, 87},
		// 215
		{217: 639, 286: 640},
		{221: 643},
		{217: 641},
		{221: 642},
		{85, 3: 85, 85, 85, 85, 85, 85, 85, 12: 85, 85, 15: 85, 85, 18: 85, 85, 22: 85, 85, 85, 85, 85},
		// 220
		{86, 3: 86, 86, 86, 86, 86, 86, 86, 12: 86, 86, 15: 86, 86, 18: 86, 86, 22: 86, 86, 86, 86, 86},
		{43: 645},
		{646},
		{90, 3: 90, 90, 90, 90, 90, 90, 90, 12: 90, 90, 15: 90, 90, 18: 90, 90, 22: 90, 90, 90, 90, 90},
		{91, 3: 91, 91, 91, 91, 91, 91, 91, 12: 91, 91, 15: 91, 91, 18: 91, 91, 22: 91, 91, 91, 91, 91},
		// 225
		{43: 565, 141: 566, 151: 649},
		{650},
		{95, 3: 95, 95, 95, 95, 95, 95, 95, 12: 95, 95, 15: 95, 95, 18: 95, 95, 22: 95, 95, 95, 95, 95},
		{43: 565, 141: 566, 151: 652},
		{653, 3: 654},
		// 230
		{98, 3: 98, 98, 98, 98, 98, 98, 98, 12: 98, 98, 15: 98, 98, 18: 98, 98, 22: 98, 98, 98, 98, 98},
		{43: 655},
		{656},
		{97, 3: 97, 97, 97, 97, 97, 97, 97, 12: 97, 97, 15: 97, 97, 18: 97, 97, 22: 97, 97, 97, 97, 97},
		{43: 658},
		// 235
		{659},
		{100, 3: 100, 100, 100, 100, 100, 100, 100, 12: 100, 100, 15: 100, 100, 18: 100, 100, 22: 100, 100, 100, 100, 100},
		{43: 665},
		{39: 662},
		{43: 663},
		// 240
		{664},
		{68, 3: 68, 68, 68, 68, 68, 68, 68, 12: 68, 68, 15: 68, 68, 18: 68, 68, 22: 68, 68, 68, 68, 68},
		{666},
		{101, 3: 101, 101, 101, 101, 101, 101, 101, 12: 101, 101, 15: 101, 101, 18: 101, 101, 22: 101, 101, 101, 101, 101},
		{43: 668},
		// 245
		{669, 97: 671, 193: 670},
		{105, 3: 105, 105, 105, 105, 105, 105, 105, 12: 105, 105, 15: 105, 105, 18: 105, 105, 22: 105, 105, 105, 105, 105},
		{673},
		{672},
		{103, 3: 103, 103, 103, 103, 103, 103, 103, 12: 103, 103, 15: 103, 103, 18: 103, 103, 22: 103, 103, 103, 103, 103},
		// 250
		{104, 3: 104, 104, 104, 104, 104, 104, 104, 12: 104, 104, 15: 104, 104, 18: 104, 104, 22: 104, 104, 104, 104, 104},
		{43: 679},
		{39: 676},
		{43: 677},
		{678},
		// 255
		{69, 3: 69, 69, 69, 69, 69, 69, 69, 12: 69, 69, 15: 69, 69, 18: 69, 69, 22: 69, 69, 69, 69, 69},
		{680, 97: 682, 193: 681},
		{108, 3: 108, 108, 108, 108, 108, 108, 108, 12: 108, 108, 15: 108, 108, 18: 108, 108, 22: 108, 108, 108, 108, 108},
		{684},
		{683},
		// 260
		{106, 3: 106, 106, 106, 106, 106, 106, 106, 12: 106, 106, 15: 106, 106, 18: 106, 106, 22: 106, 106, 106, 106, 106},
		{107, 3: 107, 107, 107, 107, 107, 107, 107, 12: 107, 107, 15: 107, 107, 18: 107, 107, 22: 107, 107, 107, 107, 107},
		{390, 3: 390, 390, 390, 390, 390, 390, 390, 12: 390, 15: 390, 390, 18: 390, 22: 390, 390, 390, 690, 356: 689},
		{392, 3: 392, 392, 392, 392, 392, 392, 392, 12: 392, 392, 15: 392, 392, 18: 392, 392, 22: 392, 392, 392, 392},
		{44: 445, 444, 49: 688},
		// 265
		{391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 18: 391, 391, 22: 391, 391, 391, 391, 27: 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 70: 391, 391, 391, 391, 391},
		{388, 3: 388, 388, 388, 388, 388, 388, 388, 12: 388, 15: 388, 388, 18: 388, 22: 388, 693, 694, 181: 692, 334: 691},
		{389, 3: 389, 389, 389, 389, 389, 389, 389, 12: 389, 15: 389, 389, 18: 389, 22: 389, 389, 389},
		{384, 3: 384, 384, 384, 384, 384, 384, 384, 12: 384, 15: 384, 384, 18: 698, 22: 699, 228: 696, 695, 237: 697},
		{387, 3: 387, 387, 387, 387, 387, 387, 387, 12: 387, 15: 387, 387, 18: 387, 22: 387},
		// 270
		{386, 3: 386, 386, 386, 386, 386, 386, 386, 12: 386, 15: 386, 386, 18: 386, 22: 386},
		{385, 3: 385, 385, 385, 385, 385, 385, 385, 12: 385, 15: 385, 385, 18: 385, 22: 385},
		{356, 3: 356, 356, 356, 356, 356, 356, 356, 12: 750, 15: 356, 356, 234: 749},
		{383, 3: 383, 383, 383, 383, 383, 383, 383, 12: 383, 15: 383, 383, 19: 383},
		{382, 3: 382, 382, 382, 382, 382, 382, 382, 12: 382, 15: 382, 382, 19: 382},
		// 275
		{17: 744, 43: 745, 746, 235: 743},
		{155: 700, 702, 260: 701},
		{143: 741},
		{155: 738},
		{18: 703},
		// 280
		{73: 705, 155: 704},
		{143: 736},
		{5: 706},
		{155: 707},
		{143: 708},
		// 285
		{374, 3: 374, 374, 374, 374, 374, 374, 374, 12: 374, 15: 374, 374, 19: 374, 39: 710, 159: 709},
		{375, 3: 375, 375, 375, 375, 375, 375, 375, 12: 375, 15: 375, 375, 19: 375},
		{372, 76: 721, 719, 79: 714, 715, 717, 722, 720, 716, 718, 724, 723, 713, 238: 712, 322: 711},
		{734, 76: 721, 719, 79: 714, 715, 717, 722, 720, 716, 718, 724, 723, 713, 238: 735},
		{371, 76: 371, 371, 79: 371, 371, 371, 371, 371, 371, 371, 371, 371, 371},
		// 290
		{15: 730},
		{156: 728},
		{43: 727},
		{365, 76: 365, 365, 79: 365, 365, 365, 365, 365, 365, 365, 365, 365, 365},
		{43: 726},
		// 295
		{363, 76: 363, 363, 79: 363, 363, 363, 363, 363, 363, 363, 363, 363, 363},
		{362, 76: 362, 362, 79: 362, 362, 362, 362, 362, 362, 362, 362, 362, 362},
		{361, 76: 361, 361, 79: 361, 361, 361, 361, 361, 361, 361, 361, 361, 361},
		{43: 725},
		{359, 76: 359, 359, 79: 359, 359, 359, 359, 359, 359, 359, 359, 359, 359},
		// 300
		{358, 76: 358, 358, 79: 358, 358, 358, 358, 358, 358, 358, 358, 358, 358},
		{357, 76: 357, 357, 79: 357, 357, 357, 357, 357, 357, 357, 357, 357, 357},
		{360, 76: 360, 360, 79: 360, 360, 360, 360, 360, 360, 360, 360, 360, 360},
		{364, 76: 364, 364, 79: 364, 364, 364, 364, 364, 364, 364, 364, 364, 364},
		{366, 76: 366, 366, 79: 366, 366, 366, 366, 366, 366, 366, 366, 366, 366},
		// 305
		{43: 729},
		{367, 76: 367, 367, 79: 367, 367, 367, 367, 367, 367, 367, 367, 367, 367},
		{43: 731, 204: 732},
		{369, 76: 369, 369, 79: 369, 369, 369, 369, 369, 369, 369, 369, 369, 369},
		{300: 733},
		// 310
		{368, 76: 368, 368, 79: 368, 368, 368, 368, 368, 368, 368, 368, 368, 368},
		{373, 3: 373, 373, 373, 373, 373, 373, 373, 12: 373, 15: 373, 373, 19: 373},
		{370, 76: 370, 370, 79: 370, 370, 370, 370, 370, 370, 370, 370, 370, 370},
		{374, 3: 374, 374, 374, 374, 374, 374, 374, 12: 374, 15: 374, 374, 19: 374, 39: 710, 159: 737},
		{376, 3: 376, 376, 376, 376, 376, 376, 376, 12: 376, 15: 376, 376, 19: 376},
		// 315
		{143: 739},
		{374, 3: 374, 374, 374, 374, 374, 374, 374, 12: 374, 15: 374, 374, 19: 374, 39: 710, 159: 740},
		{378, 3: 378, 378, 378, 378, 378, 378, 378, 12: 378, 15: 378, 378, 19: 378},
		{374, 3: 374, 374, 374, 374, 374, 374, 374, 12: 374, 15: 374, 374, 19: 374, 39: 710, 159: 742},
		{379, 3: 379, 379, 379, 379, 379, 379, 379, 12: 379, 15: 379, 379, 19: 379},
		// 320
		{381, 3: 381, 381, 381, 381, 381, 381, 381, 12: 381, 15: 381, 381, 19: 381},
		{5: 747},
		{2, 3: 2, 2, 2, 2, 2, 2, 2, 12: 2, 15: 2, 2, 19: 2},
		{1, 3: 1, 1, 1, 1, 1, 1, 1, 12: 1, 15: 1, 1, 19: 1},
		{43: 745, 746, 235: 748},
		// 325
		{380, 3: 380, 380, 380, 380, 380, 380, 380, 12: 380, 15: 380, 380, 19: 380},
		{344, 3: 344, 48, 48, 48, 48, 48, 466, 15: 771, 770, 134: 769, 164: 768, 240: 767, 308: 765, 325: 766},
		{353, 3: 353, 353, 353, 353, 353, 353, 353, 15: 353, 353, 353, 96: 353, 101: 353, 170: 353, 299: 753, 316: 752, 318: 751},
		{355, 3: 355, 355, 355, 355, 355, 355, 355, 15: 355, 355},
		{351, 3: 351, 351, 351, 351, 351, 351, 351, 15: 351, 351, 351, 96: 351, 101: 351, 170: 756, 321: 755},
		// 330
		{101: 754},
		{352, 3: 352, 352, 352, 352, 352, 352, 352, 15: 352, 352, 352, 96: 352, 101: 352, 170: 352},
		{349, 3: 349, 349, 349, 349, 349, 349, 349, 15: 349, 349, 349, 96: 349, 101: 760, 333: 759},
		{156: 757},
		{44: 445, 444, 49: 758},
		// 335
		{350, 3: 350, 350, 350, 350, 350, 350, 350, 15: 350, 350, 350, 96: 350, 101: 350},
		{347, 3: 347, 347, 347, 347, 347, 347, 347, 15: 347, 347, 763, 96: 762, 353: 761},
		{348, 3: 348, 348, 348, 348, 348, 348, 348, 15: 348, 348, 348, 96: 348},
		{354, 3: 354, 354, 354, 354, 354, 354, 354, 15: 354, 354},
		{346, 3: 346, 346, 346, 346, 346, 346, 346, 15: 346, 346},
		// 340
		{96: 764},
		{345, 3: 345, 345, 345, 345, 345, 345, 345, 15: 345, 345},
		{394, 3: 394},
		{343, 3: 343},
		{342, 3: 342, 48, 48, 48, 48, 48, 466, 134: 786, 164: 785},
		// 345
		{341, 3: 341, 341, 341, 341, 341, 341, 341},
		{4: 778, 777, 780, 779, 477, 186: 776, 241: 775},
		{284: 773},
		{100: 772},
		{17, 3: 17},
		// 350
		{44: 445, 444, 49: 443, 140: 774},
		{18, 3: 18},
		{34, 3: 34, 482, 34, 34, 34, 34, 34, 46: 481, 487, 486, 52: 491, 57: 483, 62: 485, 489, 66: 484, 68: 488, 105: 480, 490, 135: 479, 784},
		{34, 3: 34, 482, 34, 34, 34, 34, 34, 46: 481, 487, 486, 52: 491, 57: 483, 62: 485, 489, 66: 484, 68: 488, 105: 480, 490, 135: 479, 783},
		{44, 3: 44, 44, 44, 44, 44, 44, 44, 46: 44, 44, 44, 52: 44, 57: 44, 62: 44, 44, 66: 44, 68: 44},
		// 355
		{5: 782},
		{42, 3: 42, 42, 42, 42, 42, 42, 42, 46: 42, 42, 42, 52: 42, 57: 42, 62: 42, 42, 66: 42, 68: 42},
		{172: 781},
		{41, 3: 41, 41, 41, 41, 41, 41, 41, 46: 41, 41, 41, 52: 41, 57: 41, 62: 41, 41, 66: 41, 68: 41},
		{43, 3: 43, 43, 43, 43, 43, 43, 43, 46: 43, 43, 43, 52: 43, 57: 43, 62: 43, 43, 66: 43, 68: 43},
		// 360
		{45, 3: 45, 45, 45, 45, 45, 45, 45},
		{46, 3: 46, 46, 46, 46, 46, 46, 46},
		{340, 3: 340, 340, 340, 340, 340, 340, 340},
		{4: 778, 777, 780, 779, 477, 186: 787, 241: 775},
		{34, 3: 34, 482, 34, 34, 34, 34, 34, 46: 481, 487, 486, 52: 491, 57: 483, 62: 485, 489, 66: 484, 68: 488, 105: 480, 490, 135: 479, 788},
		// 365
		{45, 3: 45, 45, 45, 45, 45, 45, 45},
		{1: 283, 283, 10: 283, 283, 14: 283, 18: 283, 27: 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 70: 283, 283, 283, 283, 283, 302: 790},
		{1: 282, 282, 10: 282, 282, 14: 282, 18: 792, 27: 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 70: 282, 282, 282, 282, 282, 312: 791},
		{1: 279, 279, 10: 279, 279, 14: 279, 27: 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 70: 279, 279, 279, 796, 279, 341: 794, 795},
		{26: 687, 176: 793},
		// 370
		{1: 281, 281, 10: 281, 281, 14: 281, 27: 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 70: 281, 281, 281, 281, 281},
		{1: 273, 273, 10: 273, 273, 14: 268, 27: 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 70: 268, 268, 811, 74: 812, 314: 810, 347: 809},
		{1: 276, 276, 10: 276, 276, 14: 276, 27: 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 70: 276, 276, 276, 803, 276, 343: 802},
		{195: 797},
		{13: 798, 208: 799},
		// 375
		{199: 801},
		{199: 800},
		{1: 277, 277, 10: 277, 277, 14: 277, 27: 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 70: 277, 277, 277, 277, 277},
		{1: 278, 278, 10: 278, 278, 14: 278, 27: 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 70: 278, 278, 278, 278, 278},
		{1: 280, 280, 10: 280, 280, 14: 280, 27: 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 70: 280, 280, 280, 74: 280},
		// 380
		{195: 804},
		{169: 805, 208: 806},
		{212: 808},
		{212: 807},
		{1: 274, 274, 10: 274, 274, 14: 274, 27: 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 70: 274, 274, 274, 74: 274},
		// 385
		{1: 275, 275, 10: 275, 275, 14: 275, 27: 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 70: 275, 275, 275, 74: 275},
		{1: 126, 126, 10: 126, 126, 361: 1031},
		{14: 840, 27: 838, 839, 841, 837, 831, 835, 832, 836, 829, 830, 834, 825, 70: 842, 821, 137: 828, 833, 827, 150: 826, 152: 824, 823, 188: 820, 319: 822},
		{44: 445, 444, 49: 816},
		{267: 813},
		// 390
		{198: 815, 201: 814},
		{14: 267, 27: 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 70: 267, 267},
		{14: 266, 27: 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 70: 266, 266},
		{39: 817},
		{44: 445, 444, 49: 459, 75: 473, 98: 818},
		// 395
		{819, 3: 475},
		{1: 269, 269, 10: 269, 269},
		{1: 212, 212, 10: 212, 212, 14: 840, 17: 212, 20: 212, 212, 27: 838, 839, 841, 837, 831, 835, 832, 836, 829, 830, 834, 825, 137: 828, 833, 1028, 150: 826, 152: 824, 934, 257: 1027},
		{70: 929, 280: 927, 282: 928, 344: 926},
		{1: 270, 270, 10: 270, 270},
		// 400
		{1: 263, 263, 10: 263, 263, 14: 263, 17: 263, 20: 263, 263, 27: 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263},
		{1: 261, 261, 10: 261, 261, 14: 261, 17: 261, 20: 261, 261, 27: 261, 261, 261, 261, 831, 261, 832, 261, 829, 830, 834, 261, 137: 925, 833},
		{40: 923, 44: 445, 444, 49: 922},
		{1: 258, 258, 10: 258, 258, 14: 258, 17: 258, 20: 258, 258, 27: 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258},
		{1: 257, 257, 10: 257, 257, 14: 257, 17: 257, 20: 257, 257, 27: 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257},
		// 405
		{1: 256, 256, 10: 256, 256, 14: 256, 17: 256, 20: 256, 256, 27: 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256},
		{43: 921},
		{43: 920},
		{43: 919},
		{43: 918},
		// 410
		{1: 250, 250, 10: 250, 250, 14: 250, 17: 250, 20: 250, 250, 27: 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250},
		{39: 870},
		{1: 215, 215, 10: 215, 215, 14: 215, 17: 215, 20: 215, 215, 27: 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215},
		{1: 214, 214, 10: 214, 214, 14: 214, 17: 214, 20: 214, 214, 27: 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214},
		{1: 213, 213, 10: 213, 213, 14: 213, 17: 213, 20: 213, 213, 27: 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213},
		// 415
		{1: 210, 210, 10: 210, 210, 14: 210, 17: 210, 20: 210, 210, 27: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210},
		{214: 866},
		{214: 848},
		{1: 205, 205, 10: 205, 205, 14: 205, 17: 205, 20: 205, 205, 27: 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205},
		{207: 843},
		// 420
		{262: 844},
		{1: 129, 129, 10: 129, 129, 211: 129, 236: 845},
		{1: 128, 128, 10: 128, 128, 211: 846},
		{204: 847},
		{1: 127, 127, 10: 127, 127},
		// 425
		{27: 849},
		{1: 204, 204, 10: 204, 204, 14: 204, 17: 204, 20: 204, 204, 27: 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 92: 851, 306: 850},
		{1: 197, 197, 10: 197, 197, 14: 197, 17: 860, 20: 197, 197, 27: 197, 859, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 305: 858},
		{209: 852, 261: 853},
		{1: 203, 203, 10: 203, 203, 14: 203, 17: 203, 20: 203, 203, 27: 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 142: 857, 144: 856},
		// 430
		{1: 200, 200, 10: 200, 200, 14: 200, 17: 200, 20: 200, 200, 27: 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 142: 855, 144: 854},
		{1: 199, 199, 10: 199, 199, 14: 199, 17: 199, 20: 199, 199, 27: 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199},
		{1: 198, 198, 10: 198, 198, 14: 198, 17: 198, 20: 198, 198, 27: 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198},
		{1: 202, 202, 10: 202, 202, 14: 202, 17: 202, 20: 202, 202, 27: 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202},
		{1: 201, 201, 10: 201, 201, 14: 201, 17: 201, 20: 201, 201, 27: 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201},
		// 435
		{1: 206, 206, 10: 206, 206, 14: 206, 17: 206, 20: 206, 206, 27: 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206},
		{202: 864},
		{28: 861},
		{202: 862},
		{205: 863},
		// 440
		{1: 195, 195, 10: 195, 195, 14: 195, 17: 195, 20: 195, 195, 27: 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195},
		{205: 865},
		{1: 196, 196, 10: 196, 196, 14: 196, 17: 196, 20: 196, 196, 27: 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196},
		{27: 867},
		{1: 209, 209, 10: 209, 209, 14: 209, 17: 209, 20: 209, 209, 27: 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 259: 869, 263: 868},
		// 445
		{1: 208, 208, 10: 208, 208, 14: 208, 17: 208, 20: 208, 208, 27: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208},
		{1: 207, 207, 10: 207, 207, 14: 207, 17: 207, 20: 207, 207, 27: 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207},
		{12: 885, 50: 882, 884, 53: 883, 880, 879, 873, 58: 876, 877, 875, 874, 64: 881, 878, 256: 872, 359: 871},
		{916, 12: 885, 50: 882, 884, 53: 883, 880, 879, 873, 58: 876, 877, 875, 874, 64: 881, 878, 256: 917},
		{248, 12: 248, 50: 248, 248, 53: 248, 248, 248, 248, 58: 248, 248, 248, 248, 64: 248, 248},
		// 450
		{43: 897, 168: 915},
		{43: 897, 168: 914},
		{43: 913},
		{43: 911, 218: 912},
		{43: 897, 168: 910, 218: 909},
		// 455
		{43: 908},
		{43: 907},
		{279: 905},
		{236, 5: 896, 12: 236, 43: 897, 50: 236, 236, 53: 236, 236, 236, 236, 58: 236, 236, 236, 236, 64: 236, 236, 168: 895},
		{18: 894, 171: 892, 294: 893},
		// 460
		{18: 891, 145: 890, 171: 889},
		{18: 888, 145: 887, 171: 886},
		{224, 12: 224, 50: 224, 224, 53: 224, 224, 224, 224, 58: 224, 224, 224, 224, 64: 224, 224},
		{227, 12: 227, 50: 227, 227, 53: 227, 227, 227, 227, 58: 227, 227, 227, 227, 64: 227, 227},
		{226, 12: 226, 50: 226, 226, 53: 226, 226, 226, 226, 58: 226, 226, 226, 226, 64: 226, 226},
		// 465
		{225, 12: 225, 50: 225, 225, 53: 225, 225, 225, 225, 58: 225, 225, 225, 225, 64: 225, 225},
		{230, 12: 230, 50: 230, 230, 53: 230, 230, 230, 230, 58: 230, 230, 230, 230, 64: 230, 230},
		{229, 12: 229, 50: 229, 229, 53: 229, 229, 229, 229, 58: 229, 229, 229, 229, 64: 229, 229},
		{228, 12: 228, 50: 228, 228, 53: 228, 228, 228, 228, 58: 228, 228, 228, 228, 64: 228, 228},
		{233, 12: 233, 50: 233, 233, 53: 233, 233, 233, 233, 58: 233, 233, 233, 233, 64: 233, 233},
		// 470
		{232, 12: 232, 50: 232, 232, 53: 232, 232, 232, 232, 58: 232, 232, 232, 232, 64: 232, 232},
		{231, 12: 231, 50: 231, 231, 53: 231, 231, 231, 231, 58: 231, 231, 231, 231, 64: 231, 231},
		{235, 12: 235, 50: 235, 235, 53: 235, 235, 235, 235, 58: 235, 235, 235, 235, 64: 235, 235},
		{234, 12: 234, 50: 234, 234, 53: 234, 234, 234, 234, 58: 234, 234, 234, 234, 64: 234, 234},
		{222, 12: 222, 50: 222, 222, 53: 222, 222, 222, 222, 58: 222, 222, 222, 222, 64: 222, 222, 274: 904, 277: 901, 285: 899, 287: 900, 290: 903, 298: 902, 355: 898},
		// 475
		{223, 12: 223, 50: 223, 223, 53: 223, 223, 223, 223, 58: 223, 223, 223, 223, 64: 223, 223},
		{221, 12: 221, 50: 221, 221, 53: 221, 221, 221, 221, 58: 221, 221, 221, 221, 64: 221, 221},
		{220, 12: 220, 50: 220, 220, 53: 220, 220, 220, 220, 58: 220, 220, 220, 220, 64: 220, 220},
		{219, 12: 219, 50: 219, 219, 53: 219, 219, 219, 219, 58: 219, 219, 219, 219, 64: 219, 219},
		{218, 12: 218, 50: 218, 218, 53: 218, 218, 218, 218, 58: 218, 218, 218, 218, 64: 218, 218},
		// 480
		{217, 12: 217, 50: 217, 217, 53: 217, 217, 217, 217, 58: 217, 217, 217, 217, 64: 217, 217},
		{216, 12: 216, 50: 216, 216, 53: 216, 216, 216, 216, 58: 216, 216, 216, 216, 64: 216, 216},
		{43: 906},
		{237, 12: 237, 50: 237, 237, 53: 237, 237, 237, 237, 58: 237, 237, 237, 237, 64: 237, 237},
		{238, 12: 238, 50: 238, 238, 53: 238, 238, 238, 238, 58: 238, 238, 238, 238, 64: 238, 238},
		// 485
		{239, 12: 239, 50: 239, 239, 53: 239, 239, 239, 239, 58: 239, 239, 239, 239, 64: 239, 239},
		{241, 12: 241, 50: 241, 241, 53: 241, 241, 241, 241, 58: 241, 241, 241, 241, 64: 241, 241},
		{240, 12: 240, 50: 240, 240, 53: 240, 240, 240, 240, 58: 240, 240, 240, 240, 64: 240, 240},
		{243, 12: 243, 50: 243, 243, 53: 243, 243, 243, 243, 58: 243, 243, 243, 243, 64: 243, 243},
		{242, 12: 242, 50: 242, 242, 53: 242, 242, 242, 242, 58: 242, 242, 242, 242, 64: 242, 242},
		// 490
		{244, 12: 244, 50: 244, 244, 53: 244, 244, 244, 244, 58: 244, 244, 244, 244, 64: 244, 244},
		{245, 12: 245, 50: 245, 245, 53: 245, 245, 245, 245, 58: 245, 245, 245, 245, 64: 245, 245},
		{246, 12: 246, 50: 246, 246, 53: 246, 246, 246, 246, 58: 246, 246, 246, 246, 64: 246, 246},
		{1: 249, 249, 10: 249, 249, 14: 249, 17: 249, 20: 249, 249, 27: 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249},
		{247, 12: 247, 50: 247, 247, 53: 247, 247, 247, 247, 58: 247, 247, 247, 247, 64: 247, 247},
		// 495
		{1: 251, 251, 10: 251, 251, 14: 251, 17: 251, 20: 251, 251, 27: 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251},
		{1: 252, 252, 10: 252, 252, 14: 252, 17: 252, 20: 252, 252, 27: 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252},
		{1: 253, 253, 10: 253, 253, 14: 253, 17: 253, 20: 253, 253, 27: 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253},
		{1: 254, 254, 10: 254, 254, 14: 254, 17: 254, 20: 254, 254, 27: 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254},
		{1: 260, 260, 10: 260, 260, 14: 260, 17: 260, 20: 260, 260, 27: 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260},
		// 500
		{44: 445, 444, 49: 924},
		{1: 259, 259, 10: 259, 259, 14: 259, 17: 259, 20: 259, 259, 27: 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259},
		{1: 255, 255, 10: 255, 255, 14: 255, 17: 255, 20: 255, 255, 27: 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},
		{1: 271, 271, 10: 271, 271},
		{1: 265, 265, 10: 265, 265, 14: 840, 17: 265, 20: 265, 265, 27: 838, 839, 841, 837, 831, 835, 832, 836, 829, 830, 834, 825, 137: 828, 833, 827, 150: 826, 152: 824, 823, 188: 931, 254: 935},
		// 505
		{1: 265, 265, 10: 265, 265, 14: 840, 27: 838, 839, 841, 837, 831, 835, 832, 836, 829, 830, 834, 825, 137: 828, 833, 827, 150: 826, 152: 824, 823, 188: 931, 254: 932},
		{1: 129, 129, 10: 129, 129, 236: 930},
		{1: 132, 132, 10: 132, 132},
		{1: 264, 264, 10: 264, 264, 14: 840, 17: 264, 20: 264, 264, 27: 838, 839, 841, 837, 831, 835, 832, 836, 829, 830, 834, 825, 137: 828, 833, 827, 150: 826, 152: 824, 934},
		{1: 130, 130, 10: 130, 130, 324: 933},
		// 510
		{1: 133, 133, 10: 133, 133},
		{1: 262, 262, 10: 262, 262, 14: 262, 17: 262, 20: 262, 262, 27: 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262},
		{1: 212, 212, 10: 212, 212, 14: 840, 17: 212, 20: 212, 212, 27: 838, 839, 841, 139: 936, 257: 938, 320: 937},
		{1: 211, 211, 10: 211, 211, 17: 211, 20: 211, 211},
		{1: 134, 134, 10: 134, 134},
		// 515
		{1: 194, 194, 10: 194, 194, 17: 940, 20: 194, 939, 149: 943, 165: 942, 941, 243: 944},
		{1: 189, 189, 10: 189, 189, 17: 973, 20: 189, 189, 39: 974, 67: 189, 69: 189, 78: 189, 95: 189, 173: 972, 242: 994, 326: 993},
		{21: 991},
		{1: 191, 191, 10: 191, 191, 20: 191},
		{1: 154, 154, 10: 154, 154, 17: 967, 20: 154, 966, 149: 965},
		// 520
		{1: 153, 153, 10: 153, 153, 17: 153, 20: 153, 153},
		{1: 148, 148, 10: 148, 148, 20: 945, 239: 946},
		{41: 947, 47: 950, 949, 169: 948, 270: 951, 953, 275: 952},
		{1: 131, 131, 10: 131, 131},
		{157: 963},
		// 525
		{157: 961},
		{157: 959},
		{157: 954},
		{1: 143, 143, 10: 143, 143},
		{1: 142, 142, 10: 142, 142},
		// 530
		{1: 141, 141, 10: 141, 141},
		{1: 137, 137, 10: 137, 137, 160: 956, 958, 955, 957},
		{1: 144, 144, 10: 144, 144},
		{1: 140, 140, 10: 140, 140},
		{1: 139, 139, 10: 139, 139},
		// 535
		{1: 138, 138, 10: 138, 138},
		{1: 137, 137, 10: 137, 137, 160: 956, 958, 960, 957},
		{1: 145, 145, 10: 145, 145},
		{1: 137, 137, 10: 137, 137, 160: 956, 958, 962, 957},
		{1: 146, 146, 10: 146, 146},
		// 540
		{1: 137, 137, 10: 137, 137, 160: 956, 958, 964, 957},
		{1: 147, 147, 10: 147, 147},
		{1: 152, 152, 10: 152, 152, 17: 152, 20: 152, 152},
		{17: 973, 39: 974, 173: 972, 242: 975},
		{21: 968},
		// 545
		{39: 969},
		{44: 445, 444, 49: 459, 75: 473, 98: 970},
		{971, 3: 475},
		{1: 149, 149, 10: 149, 149, 17: 149, 20: 149, 149},
		{92: 982, 191: 983},
		// 550
		{173: 981},
		{44: 445, 444, 49: 459, 75: 473, 98: 979},
		{39: 976},
		{44: 445, 444, 49: 459, 75: 473, 98: 977},
		{978, 3: 475},
		// 555
		{1: 150, 150, 10: 150, 150, 17: 150, 20: 150, 150},
		{980, 3: 475},
		{1: 151, 151, 10: 151, 151, 17: 151, 20: 151, 151},
		{1: 181, 181, 10: 181, 181, 17: 181, 20: 181, 181, 39: 181, 67: 181, 69: 181, 78: 181, 95: 181},
		{209: 985, 264: 986, 272: 984},
		// 560
		{1: 180, 180, 10: 180, 180, 17: 180, 20: 180, 180, 39: 180, 67: 180, 69: 180, 78: 180, 95: 180},
		{1: 188, 188, 10: 188, 188, 17: 188, 20: 188, 188, 39: 188, 67: 188, 69: 188, 78: 188, 95: 188},
		{1: 187, 187, 10: 187, 187, 17: 187, 20: 187, 187, 39: 187, 67: 187, 69: 187, 78: 187, 95: 187, 142: 990, 144: 989},
		{1: 184, 184, 10: 184, 184, 17: 184, 20: 184, 184, 39: 184, 67: 184, 69: 184, 78: 184, 95: 184, 142: 988, 144: 987},
		{1: 183, 183, 10: 183, 183, 17: 183, 20: 183, 183, 39: 183, 67: 183, 69: 183, 78: 183, 95: 183},
		// 565
		{1: 182, 182, 10: 182, 182, 17: 182, 20: 182, 182, 39: 182, 67: 182, 69: 182, 78: 182, 95: 182},
		{1: 186, 186, 10: 186, 186, 17: 186, 20: 186, 186, 39: 186, 67: 186, 69: 186, 78: 186, 95: 186},
		{1: 185, 185, 10: 185, 185, 17: 185, 20: 185, 185, 39: 185, 67: 185, 69: 185, 78: 185, 95: 185},
		{1: 155, 155, 10: 155, 155, 17: 967, 20: 155, 966, 39: 969, 149: 943, 165: 942, 992},
		{1: 192, 192, 10: 192, 192, 20: 192},
		// 570
		{1: 155, 155, 10: 155, 155, 17: 967, 20: 155, 966, 149: 943, 165: 942, 1026},
		{1: 179, 179, 10: 179, 179, 17: 179, 20: 179, 179, 39: 976, 67: 179, 69: 179, 78: 179, 95: 996, 331: 995},
		{1: 173, 173, 10: 173, 173, 17: 173, 20: 173, 173, 67: 173, 69: 173, 78: 1003, 327: 1002},
		{142: 1000, 144: 998, 997, 268: 1001, 288: 999},
		{1: 178, 178, 10: 178, 178, 17: 178, 20: 178, 178, 67: 178, 69: 178, 78: 178},
		// 575
		{1: 177, 177, 10: 177, 177, 17: 177, 20: 177, 177, 67: 177, 69: 177, 78: 177},
		{1: 176, 176, 10: 176, 176, 17: 176, 20: 176, 176, 67: 176, 69: 176, 78: 176},
		{1: 175, 175, 10: 175, 175, 17: 175, 20: 175, 175, 67: 175, 69: 175, 78: 175},
		{1: 174, 174, 10: 174, 174, 17: 174, 20: 174, 174, 67: 174, 69: 174, 78: 174},
		{1: 161, 161, 10: 161, 161, 17: 1020, 20: 161, 161, 67: 161, 69: 1019, 330: 1018},
		// 580
		{1: 171, 171, 10: 171, 171, 17: 171, 20: 171, 171, 67: 171, 69: 171, 92: 171, 156: 1006, 191: 1005, 328: 1004},
		{1: 166, 166, 10: 166, 166, 17: 166, 20: 166, 166, 67: 166, 69: 166, 92: 1012, 329: 1011},
		{1: 170, 170, 10: 170, 170, 17: 170, 20: 170, 170, 67: 170, 69: 170, 92: 170},
		{100: 1007, 207: 1008, 297: 1009},
		{293: 1010},
		// 585
		{1: 168, 168, 10: 168, 168, 17: 168, 20: 168, 168, 67: 168, 69: 168, 92: 168},
		{1: 167, 167, 10: 167, 167, 17: 167, 20: 167, 167, 67: 167, 69: 167, 92: 167},
		{1: 169, 169, 10: 169, 169, 17: 169, 20: 169, 169, 67: 169, 69: 169, 92: 169},
		{1: 172, 172, 10: 172, 172, 17: 172, 20: 172, 172, 67: 172, 69: 172},
		{295: 1013},
		// 590
		{18: 1014, 44: 445, 444, 49: 1016, 145: 1017, 154: 1015},
		{1: 165, 165, 10: 165, 165, 17: 165, 20: 165, 165, 67: 165, 69: 165},
		{1: 164, 164, 10: 164, 164, 17: 164, 20: 164, 164, 67: 164, 69: 164},
		{1: 163, 163, 10: 163, 163, 17: 163, 20: 163, 163, 67: 163, 69: 163},
		{1: 162, 162, 10: 162, 162, 17: 162, 20: 162, 162, 67: 162, 69: 162},
		// 595
		{1: 157, 157, 10: 157, 157, 17: 157, 20: 157, 157, 67: 1024, 332: 1023},
		{1: 160, 160, 10: 160, 160, 17: 160, 20: 160, 160, 67: 160, 154: 1022},
		{69: 1021},
		{1: 158, 158, 10: 158, 158, 17: 158, 20: 158, 158, 67: 158},
		{1: 159, 159, 10: 159, 159, 17: 159, 20: 159, 159, 67: 159},
		// 600
		{1: 190, 190, 10: 190, 190, 17: 190, 20: 190, 190},
		{44: 445, 444, 49: 459, 75: 1025},
		{1: 156, 156, 10: 156, 156, 17: 156, 20: 156, 156},
		{1: 193, 193, 10: 193, 193, 20: 193},
		{1: 194, 194, 10: 194, 194, 17: 940, 20: 194, 939, 149: 943, 165: 942, 941, 243: 1029},
		// 605
		{1: 257, 257, 10: 257, 257, 14: 257, 17: 257, 20: 257, 257, 27: 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257},
		{1: 148, 148, 10: 148, 148, 20: 945, 239: 1030},
		{1: 272, 272, 10: 272, 272},
		{1: 285, 285, 10: 285, 285},
		{1: 288, 288, 11: 1042, 346: 1041},
		// 610
		{1: 4, 4, 10: 1038, 4, 246: 1037},
		{92: 1035},
		{210: 1036},
		{1: 5, 5, 10: 5, 5, 13: 5, 5, 17: 5, 40: 5, 5, 5, 90: 5},
		{1: 7, 7, 11: 7},
		// 615
		{92: 1039},
		{220: 1040},
		{1: 3, 3, 11: 3, 13: 3, 3, 40: 3, 3, 3, 90: 3},
		{1: 302, 302},
		{44: 445, 444, 49: 443, 140: 1043},
		// 620
		{1: 287, 287},
		{44: 445, 444, 49: 1045},
		{414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 13: 414, 414, 17: 414, 414, 27: 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 46: 414, 414, 414, 52: 414, 57: 414, 62: 414, 414, 66: 414, 68: 414, 70: 414, 414, 414, 414, 414, 90: 414, 146: 414},
		{44: 445, 444, 49: 443, 140: 1047},
		{10: 1034, 13: 6, 6, 17: 1051, 40: 6, 6, 6, 90: 6, 245: 1050, 336: 1048, 1049},
		// 625
		{13: 1073, 1071, 40: 1072, 1068, 1069, 90: 1074, 222: 1065, 224: 1064, 230: 1067, 247: 1066, 249: 1070, 303: 1062, 1061, 352: 1063},
		{10: 1038, 13: 4, 4, 17: 1057, 40: 4, 4, 4, 90: 4, 246: 1056, 338: 1055},
		{10: 11, 13: 11, 11, 17: 11, 40: 11, 11, 11, 90: 11},
		{10: 1052},
		{92: 1053},
		// 630
		{210: 1054},
		{10: 10, 13: 10, 10, 17: 10, 40: 10, 10, 10, 90: 10},
		{13: 12, 12, 40: 12, 12, 12, 90: 12},
		{13: 9, 9, 40: 9, 9, 9, 90: 9},
		{10: 1058},
		// 635
		{92: 1059},
		{220: 1060},
		{13: 8, 8, 40: 8, 8, 8, 90: 8},
		{1: 408, 408},
		{1: 407, 407, 13: 1073, 1071, 40: 1072, 1068, 1069, 222: 1065, 224: 1154, 230: 1067, 247: 1066, 249: 1070},
		// 640
		{1: 406, 406},
		{1: 405, 405, 13: 405, 405, 40: 405, 405, 405},
		{1: 403, 403, 13: 403, 403, 40: 403, 403, 403},
		{1: 402, 402, 13: 402, 402, 40: 402, 402, 402},
		{1: 401, 401, 13: 401, 401, 40: 401, 401, 401},
		// 645
		{39: 1146},
		{39: 1119},
		{1: 337, 337, 13: 337, 337, 40: 337, 337, 337},
		{44: 445, 444, 49: 459, 75: 1106},
		{219: 1101},
		// 650
		{14: 1082, 39: 1083, 194: 1081, 219: 1080, 226: 1079},
		{14: 1075},
		{44: 445, 444, 49: 459, 75: 1076},
		{102: 1077},
		{44: 445, 444, 49: 459, 75: 1078},
		// 655
		{1: 303, 303},
		{1: 313, 313, 13: 313, 313, 40: 313, 313, 313, 89: 313, 91: 1096, 93: 1097, 180: 1095, 231: 1094, 1093},
		{194: 1091},
		{266: 1087},
		{44: 445, 444, 49: 459, 75: 1086},
		// 660
		{44: 445, 444, 49: 459, 75: 473, 98: 1084},
		{1085, 3: 475},
		{1: 314, 314, 13: 314, 314, 40: 314, 314, 314, 89: 314, 91: 314, 93: 314, 314},
		{1: 315, 315, 13: 315, 315, 40: 315, 315, 315, 89: 315, 91: 315, 93: 315, 315},
		{1: 305, 305, 13: 305, 305, 40: 305, 305, 305, 89: 1089, 179: 1088},
		// 665
		{1: 316, 316, 13: 316, 316, 40: 316, 316, 316},
		{43: 1090},
		{1: 304, 304, 13: 304, 304, 40: 304, 304, 304},
		{1: 305, 305, 13: 305, 305, 40: 305, 305, 305, 89: 1089, 179: 1092},
		{1: 317, 317, 13: 317, 317, 40: 317, 317, 317},
		// 670
		{1: 305, 305, 13: 305, 305, 40: 305, 305, 305, 89: 1089, 179: 1100},
		{1: 312, 312, 13: 312, 312, 40: 312, 312, 312, 89: 312, 91: 1096, 93: 1097, 312, 180: 1099},
		{1: 311, 311, 13: 311, 311, 40: 311, 311, 311, 89: 311, 91: 311, 93: 311, 311},
		{265: 1098},
		{1: 308, 308, 13: 308, 308, 40: 308, 308, 308, 89: 308, 91: 308, 93: 308, 308},
		// 675
		{1: 309, 309, 13: 309, 309, 40: 309, 309, 309, 89: 309, 91: 309, 93: 309, 309},
		{1: 310, 310, 13: 310, 310, 40: 310, 310, 310, 89: 310, 91: 310, 93: 310, 310},
		{1: 318, 318, 13: 318, 318, 40: 318, 318, 318},
		{14: 1082, 39: 1083, 226: 1102},
		{1: 313, 313, 13: 313, 313, 40: 313, 313, 313, 91: 1096, 93: 1097, 313, 180: 1095, 231: 1094, 1103},
		// 680
		{1: 307, 307, 13: 307, 307, 40: 307, 307, 307, 94: 1105, 315: 1104},
		{1: 319, 319, 13: 319, 319, 40: 319, 319, 319},
		{1: 306, 306, 13: 306, 306, 40: 306, 306, 306},
		{4: 1108, 147: 1107},
		{190: 1115},
		// 685
		{147: 1109},
		{190: 1110},
		{154: 1111},
		{203: 1112},
		{1: 321, 321, 13: 321, 321, 40: 321, 321, 321, 200: 1114, 244: 1113},
		// 690
		{1: 322, 322, 13: 322, 322, 40: 322, 322, 322},
		{1: 320, 320, 13: 320, 320, 40: 320, 320, 320},
		{154: 1116},
		{203: 1117},
		{1: 321, 321, 13: 321, 321, 40: 321, 321, 321, 200: 1114, 244: 1118},
		// 695
		{1: 323, 323, 13: 323, 323, 40: 323, 323, 323},
		{44: 445, 444, 49: 459, 75: 1124, 248: 1122, 250: 1125, 1123, 339: 1120, 1121},
		{1142, 3: 1143},
		{1138, 3: 1139},
		{336, 3: 336},
		// 700
		{334, 3: 334},
		{23: 693, 694, 97: 533, 100: 550, 103: 552, 542, 107: 549, 540, 539, 546, 547, 543, 557, 556, 561, 538, 118: 559, 558, 545, 541, 554, 535, 548, 537, 555, 536, 562, 560, 544, 551, 553, 534, 174: 526, 527, 177: 1126, 530, 181: 1127, 531, 529, 528, 525, 187: 532},
		{326, 3: 326},
		{393, 3: 393, 393, 393, 393, 393, 393, 393, 12: 393, 393, 18: 393, 393, 22: 393, 26: 687, 176: 686, 225: 1128},
		{324, 3: 324},
		// 705
		{384, 3: 384, 384, 384, 384, 384, 384, 384, 12: 384, 1130, 18: 698, 384, 22: 699, 228: 696, 1131, 237: 697, 313: 1129},
		{356, 3: 356, 356, 356, 356, 356, 356, 356, 12: 750, 19: 1134, 234: 1135, 317: 1133},
		{143: 1132},
		{331, 3: 331, 331, 331, 331, 331, 331, 331, 12: 331, 19: 331},
		{332, 3: 332, 332, 332, 332, 332, 332, 332, 12: 332, 19: 332},
		// 710
		{328, 3: 328, 48, 48, 48, 48, 48, 466, 134: 786, 164: 768, 240: 1136, 307: 1137},
		{330, 3: 330, 330, 330, 330, 330, 330, 330},
		{329, 3: 329, 329, 329, 329, 329, 329, 329},
		{327, 3: 327, 48, 48, 48, 48, 48, 466, 134: 786, 164: 785},
		{333, 3: 333},
		// 715
		{1: 338, 338, 13: 338, 338, 40: 338, 338, 338},
		{44: 445, 444, 49: 459, 75: 1141, 250: 1140},
		{325, 3: 325},
		{23: 693, 694, 181: 1127},
		{1: 339, 339, 13: 339, 339, 40: 339, 339, 339},
		// 720
		{44: 445, 444, 49: 459, 75: 1145, 248: 1144, 251: 1123},
		{335, 3: 335},
		{97: 533, 100: 550, 103: 552, 542, 107: 549, 540, 539, 546, 547, 543, 557, 556, 561, 538, 118: 559, 558, 545, 541, 554, 535, 548, 537, 555, 536, 562, 560, 544, 551, 553, 534, 174: 526, 527, 177: 1126, 530, 182: 531, 529, 528, 525, 187: 532},
		{44: 445, 444, 49: 459, 75: 461, 158: 1148, 167: 460, 309: 1147},
		{1149, 3: 1150},
		// 725
		{397, 3: 397},
		{1: 399, 399, 13: 399, 399, 40: 399, 399, 399, 311: 1152},
		{44: 445, 444, 49: 459, 75: 461, 158: 1151, 167: 460},
		{396, 3: 396},
		{1: 398, 398, 13: 398, 398, 40: 398, 398, 398, 345: 1153},
		// 730
		{1: 400, 400, 13: 400, 400, 40: 400, 400, 400},
		{1: 404, 404, 13: 404, 404, 40: 404, 404, 404},
		{1: 416, 416, 189: 430, 196: 431, 223: 428, 227: 429, 233: 427, 255: 1156},
		{1: 420, 420},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 366

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			if yyS[yypt-0].node != nil {
				stmt := yyS[yypt-0].node
				stmt.SetText(nextQuery(yylex))
				yylex.(*yyLexImpl).result = append(yylex.(*yyLexImpl).result, stmt)
			}
		}
	case 3:
		{
			if yyS[yypt-0].node != nil {
				stmt := yyS[yypt-0].node
				stmt.SetText(nextQuery(yylex))
				yylex.(*yyLexImpl).result = append(yylex.(*yyLexImpl).result, stmt)
			}
		}
	case 7:
		{
			yyVAL.node = nil
		}
	case 8:
		{
			yyVAL.anything = &ast.TableName{
				Table: yyS[yypt-0].anything.(*element.Identifier),
			}
		}
	case 9:
		{
			yyVAL.anything = &ast.TableName{
				Schema: yyS[yypt-2].anything.(*element.Identifier),
				Table:  yyS[yypt-0].anything.(*element.Identifier),
			}
		}
	case 10:
		{
			yyVAL.anything = []*element.Identifier{yyS[yypt-0].anything.(*element.Identifier)}
		}
	case 11:
		{
			yyVAL.anything = append(yyS[yypt-2].anything.([]*element.Identifier), yyS[yypt-0].anything.(*element.Identifier))
		}
	case 12:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 13:
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeNonQuoted,
				Value: yyS[yypt-0].str,
			}
		}
	case 14:
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeQuoted,
				Value: yyS[yypt-0].str,
			}
		}
	case 15:
		{
			yyVAL.node = &ast.AlterTableStmt{
				TableName:     yyS[yypt-2].anything.(*ast.TableName),
				ColumnClauses: yyS[yypt-0].anything.([]ast.AlterTableClause),
			}
		}
	case 16:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 17:
		{
			yyVAL.anything = []ast.AlterTableClause{yyS[yypt-0].anything.(ast.AlterTableClause)}
		}
	case 18:
		{
			yyVAL.anything = []ast.AlterTableClause{yyS[yypt-0].anything.(ast.AlterTableClause)}
		}
	case 19:
		{
			yyVAL.anything = append(yyS[yypt-1].anything.([]ast.AlterTableClause), yyS[yypt-0].anything.(ast.AlterTableClause))
		}
	case 23:
		{
			yyVAL.anything = &ast.AddColumnClause{
				Columns: yyS[yypt-3].anything.([]*ast.ColumnDef),
			}
		}
	case 24:
		{
			// TODO
		}
	case 25:
		{
			// TODO
		}
	case 26:
		{
			yyVAL.anything = []*ast.ColumnDef{yyS[yypt-0].anything.(*ast.ColumnDef)}
		}
	case 27:
		{
			yyVAL.anything = append(yyS[yypt-2].anything.([]*ast.ColumnDef), yyS[yypt-0].anything.(*ast.ColumnDef))
		}
	case 28:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 29:
		{
			var collation *ast.Collation
			if yyS[yypt-5].anything != nil {
				collation = yyS[yypt-5].anything.(*ast.Collation)
			}
			props := []ast.ColumnProp{}
			sort := ast.ColumnProp(yyS[yypt-4].i)
			if sort != ast.ColumnPropEmpty {
				props = append(props, sort)
			}
			invisible := ast.ColumnProp(yyS[yypt-3].i)
			if invisible != ast.ColumnPropEmpty {
				props = append(props, invisible)
			}

			var constraints []*ast.InlineConstraint
			if yyS[yypt-0].anything != nil {
				constraints = yyS[yypt-0].anything.([]*ast.InlineConstraint)
			}

			yyVAL.anything = &ast.ColumnDef{
				ColumnName:  yyS[yypt-7].anything.(*element.Identifier),
				Datatype:    yyS[yypt-6].anything.(element.Datatype),
				Collation:   collation,
				Props:       props,
				Constraints: constraints,
			}
		}
	case 30:
		{
			yyVAL.anything = nil
		}
	case 31:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 32:
		{
			yyVAL.anything = &ast.Collation{Name: yyS[yypt-0].anything.(*element.Identifier)}
		}
	case 33:
		{
			yyVAL.i = int(ast.ColumnPropEmpty)
		}
	case 34:
		{
			yyVAL.i = int(ast.ColumnPropSort)
		}
	case 35:
		{
			yyVAL.i = int(ast.ColumnPropEmpty)
		}
	case 37:
		{
			yyVAL.i = int(ast.ColumnPropInvisible)
		}
	case 38:
		{
			yyVAL.i = int(ast.ColumnPropVisible)
		}
	case 39:
		{
			// empty
		}
	case 49:
		{
			// empty
		}
	case 51:
		{
			// empty
		}
	case 67:
		{
			// empty
		}
	case 70:
		{
			// empty
		}
	case 72:
		{
			// empty
		}
	case 74:
		{
			// empty
		}
	case 76:
		{
			// empty
		}
	case 79:
		{
			yyVAL.anything = nil
		}
	case 80:
		{
			yyVAL.anything = nil
		}
	case 81:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 82:
		{
			yyVAL.anything = []*ast.InlineConstraint{yyS[yypt-0].anything.(*ast.InlineConstraint)}
		}
	case 83:
		{
			yyVAL.anything = append(yyS[yypt-1].anything.([]*ast.InlineConstraint), yyS[yypt-0].anything.(*ast.InlineConstraint))
		}
	case 84:
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyS[yypt-1].anything.([]*ast.ColumnDef),
			}
		}
	case 85:
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyS[yypt-1].anything.([]*ast.ColumnDef),
			}
		}
	case 86:
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyS[yypt-0].anything.([]*ast.ColumnDef),
			}
		}
	case 87:
		{
			yyVAL.anything = []*ast.ColumnDef{yyS[yypt-0].anything.(*ast.ColumnDef)}
		}
	case 88:
		{
			yyVAL.anything = append(yyS[yypt-2].anything.([]*ast.ColumnDef), yyS[yypt-0].anything.(*ast.ColumnDef))
		}
	case 90:
		{
			var collation *ast.Collation
			if yyS[yypt-3].anything != nil {
				collation = yyS[yypt-3].anything.(*ast.Collation)
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyS[yypt-5].anything.(*element.Identifier),
				Datatype:   yyS[yypt-4].anything.(element.Datatype),
				Collation:  collation,
				Props:      []ast.ColumnProp{},
			}
		}
	case 95:
		{
			// empty
		}
	case 97:
		{
			yyVAL.anything = []*ast.ColumnDef{yyS[yypt-0].anything.(*ast.ColumnDef)}
		}
	case 98:
		{
			yyVAL.anything = append(yyS[yypt-2].anything.([]*ast.ColumnDef), yyS[yypt-0].anything.(*ast.ColumnDef))
		}
	case 99:
		{
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyS[yypt-1].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{ast.ColumnProp(yyS[yypt-0].i)},
			}
		}
	case 100:
		{
			prop := ast.ColumnPropSubstitutable
			if yyS[yypt-0].b {
				prop = ast.ColumnPropSubstitutableForce
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyS[yypt-5].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{prop},
			}
		}
	case 101:
		{
			prop := ast.ColumnPropNotSubstitutable
			if yyS[yypt-0].b {
				prop = ast.ColumnPropNotSubstitutableForce
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyS[yypt-6].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{prop},
			}
		}
	case 102:
		{
			yyVAL.b = false
		}
	case 103:
		{
			yyVAL.b = true
		}
	case 104:
		{
			props := []ast.DropColumnProp{}
			if yyS[yypt-1].anything != nil {
				props = append(props, yyS[yypt-1].anything.([]ast.DropColumnProp)...)
			}
			online := ast.DropColumnProp(yyS[yypt-0].i)
			if online != ast.DropColumnPropEmpty {
				props = append(props, online)
			}
			yyVAL.anything = &ast.DropColumnClause{
				Type:    ast.DropColumnTypeSetUnused,
				Columns: yyS[yypt-2].anything.([]*element.Identifier),
				Props:   props,
			}
		}
	case 105:
		{
			props := []ast.DropColumnProp{}
			if yyS[yypt-1].anything != nil {
				props = append(props, yyS[yypt-1].anything.([]ast.DropColumnProp)...)
			}
			cc := &ast.DropColumnClause{
				Type:    ast.DropColumnTypeDrop,
				Columns: yyS[yypt-2].anything.([]*element.Identifier),
				Props:   props,
			}
			var checkout int
			if yyS[yypt-0].anything != nil {
				checkout = yyS[yypt-0].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 106:
		{
			cc := &ast.DropColumnClause{
				Type: ast.DropColumnTypeDropUnusedColumns,
			}
			var checkout int
			if yyS[yypt-0].anything != nil {
				checkout = yyS[yypt-0].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 107:
		{
			cc := &ast.DropColumnClause{
				Type: ast.DropColumnTypeDropColumnsContinue,
			}
			var checkout int
			if yyS[yypt-0].anything != nil {
				checkout = yyS[yypt-0].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 108:
		{
			yyVAL.anything = []*element.Identifier{yyS[yypt-0].anything.(*element.Identifier)}
		}
	case 109:
		{
			yyVAL.anything = yyS[yypt-1].anything
		}
	case 110:
		{
			yyVAL.anything = nil
		}
	case 112:
		{
			yyVAL.anything = []ast.DropColumnProp{ast.DropColumnProp(yyS[yypt-0].i)}
		}
	case 113:
		{
			yyVAL.anything = append(yyS[yypt-1].anything.([]ast.DropColumnProp), ast.DropColumnProp(yyS[yypt-0].i))
		}
	case 114:
		{
			yyVAL.i = int(ast.DropColumnPropCascade)
		}
	case 115:
		{
			yyVAL.i = int(ast.DropColumnPropInvalidate)
		}
	case 116:
		{
			yyVAL.i = int(ast.DropColumnPropEmpty)
		}
	case 117:
		{
			yyVAL.i = int(ast.DropColumnPropOnline)
		}
	case 118:
		{
			yyVAL.anything = nil
		}
	case 119:
		{
			yyVAL.anything = yyS[yypt-0].i
		}
	case 120:
		{
			yyVAL.anything = &ast.RenameColumnClause{
				OldName: yyS[yypt-2].anything.(*element.Identifier),
				NewName: yyS[yypt-0].anything.(*element.Identifier),
			}
		}
	case 121:
		{
			yyVAL.node = &ast.CreateTableStmt{
				TableName: yyS[yypt-4].anything.(*ast.TableName),
				RelTable:  yyS[yypt-2].anything.(*ast.RelTableDef),
			}
		}
	case 122:
		{
			// empty
		}
	case 130:
		{
			// empty
		}
	case 135:
		{
			// empty
		}
	case 138:
		{
			rd := &ast.RelTableDef{}
			if yyS[yypt-6].anything != nil {
				rd.TableStructs = yyS[yypt-6].anything.([]ast.TableStructDef)
			}
			yyVAL.anything = rd
		}
	case 141:
		{
			yyVAL.anything = nil
		}
	case 142:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 144:
		{
			// empty
		}
	case 147:
		{
			// empty
		}
	case 150:
		{
			// empty
		}
	case 155:
		{
			// empty
		}
	case 158:
		{
			// empty
		}
	case 201:
		{
			// empty
		}
	case 211:
		{
			// empty
		}
	case 219:
		{
			// empty
		}
	case 226:
		{
			// empty
		}
	case 229:
		{
			// empty
		}
	case 234:
		{
			// empty
		}
	case 244:
		{
			// empty
		}
	case 250:
		{
			// empty
		}
	case 252:
		{
			// empty
		}
	case 257:
		{
			// empty
		}
	case 262:
		{
			// empty
		}
	case 266:
		{
			// empty
		}
	case 268:
		{
			// empty
		}
	case 275:
		{
			// empty
		}
	case 298:
		{
			yyVAL.anything = nil
		}
	case 299:
		{
			yyVAL.anything = yyS[yypt-1].anything
		}
	case 300:
		{
			yyVAL.anything = []ast.TableStructDef{yyS[yypt-0].anything.(ast.TableStructDef)}
		}
	case 301:
		{
			yyVAL.anything = append(yyS[yypt-2].anything.([]ast.TableStructDef), yyS[yypt-0].anything.(ast.TableStructDef))
		}
	case 302:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 303:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 304:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 305:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 306:
		{
			yyVAL.anything = &element.NumberOrAsterisk{Number: yyS[yypt-0].i}
		}
	case 307:
		{
			yyVAL.anything = &element.NumberOrAsterisk{IsAsterisk: true}
		}
	case 308:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 309:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 310:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 311:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 312:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 313:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 314:
		{
			d := &element.Char{}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 315:
		{
			size := yyS[yypt-1].i
			d := &element.Char{Size: &size}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 316:
		{
			size := yyS[yypt-2].i
			d := &element.Char{Size: &size, IsByteSize: true}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 317:
		{
			size := yyS[yypt-2].i
			d := &element.Char{Size: &size, IsCharSize: true}
			d.SetDataDef(element.DataDefChar)
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 318:
		{
			size := yyS[yypt-1].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 319:
		{
			size := yyS[yypt-2].i
			d := &element.Varchar2{}
			d.Size = &size
			d.IsByteSize = true
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 320:
		{
			size := yyS[yypt-2].i
			d := &element.Varchar2{}
			d.Size = &size
			d.IsCharSize = true
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 321:
		{
			d := &element.NChar{}
			d.SetDataDef(element.DataDefNChar)
			yyVAL.anything = d
		}
	case 322:
		{
			size := yyS[yypt-1].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNChar)
			yyVAL.anything = d
		}
	case 323:
		{
			size := yyS[yypt-1].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNVarChar2)
			yyVAL.anything = d
		}
	case 324:
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 325:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 326:
		{
			precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
			scale := yyS[yypt-1].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 327:
		{
			d := &element.Float{}
			d.SetDataDef(element.DataDefFloat)
			yyVAL.anything = d
		}
	case 328:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefFloat)
			yyVAL.anything = d
		}
	case 329:
		{
			d := &element.BinaryFloat{}
			d.SetDataDef(element.DataDefBinaryFloat)
			yyVAL.anything = d
		}
	case 330:
		{
			d := &element.BinaryDouble{}
			d.SetDataDef(element.DataDefBinaryDouble)
			yyVAL.anything = d
		}
	case 331:
		{
			d := &element.Long{}
			d.SetDataDef(element.DataDefLong)
			yyVAL.anything = d
		}
	case 332:
		{
			d := &element.LongRaw{}
			d.SetDataDef(element.DataDefLongRaw)
			yyVAL.anything = d
		}
	case 333:
		{
			size := yyS[yypt-1].i
			d := &element.Raw{Size: &size}
			d.SetDataDef(element.DataDefRaw)
			yyVAL.anything = d
		}
	case 334:
		{
			d := &element.Date{}
			d.SetDataDef(element.DataDefDate)
			yyVAL.anything = d
		}
	case 335:
		{
			d := &element.Timestamp{}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 336:
		{
			precision := yyS[yypt-1].i
			d := &element.Timestamp{FractionalSecondsPrecision: &precision}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 337:
		{
			precision := yyS[yypt-4].i
			d := &element.Timestamp{FractionalSecondsPrecision: &precision, WithTimeZone: true}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 338:
		{
			precision := yyS[yypt-5].i
			d := &element.Timestamp{FractionalSecondsPrecision: &precision, WithLocalTimeZone: true}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 339:
		{
			d := &element.IntervalYear{}
			d.SetDataDef(element.DataDefIntervalYear)
			yyVAL.anything = d
		}
	case 340:
		{
			precision := yyS[yypt-3].i
			d := &element.IntervalYear{Precision: &precision}
			d.SetDataDef(element.DataDefIntervalYear)
			yyVAL.anything = d
		}
	case 341:
		{
			d := &element.IntervalDay{}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 342:
		{
			precision := yyS[yypt-3].i
			d := &element.IntervalDay{Precision: &precision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 343:
		{
			precision := yyS[yypt-6].i
			sPrecision := yyS[yypt-1].i
			d := &element.IntervalDay{Precision: &precision, FractionalSecondsPrecision: &sPrecision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 344:
		{
			sPrecision := yyS[yypt-1].i
			d := &element.IntervalDay{FractionalSecondsPrecision: &sPrecision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 345:
		{
			d := &element.Blob{}
			d.SetDataDef(element.DataDefBlob)
			yyVAL.anything = d
		}
	case 346:
		{
			d := &element.Clob{}
			d.SetDataDef(element.DataDefClob)
			yyVAL.anything = d
		}
	case 347:
		{
			d := &element.NClob{}
			d.SetDataDef(element.DataDefNClob)
			yyVAL.anything = d
		}
	case 348:
		{
			d := &element.BFile{}
			d.SetDataDef(element.DataDefBFile)
			yyVAL.anything = d
		}
	case 349:
		{
			d := &element.RowId{}
			d.SetDataDef(element.DataDefRowId)
			yyVAL.anything = d
		}
	case 350:
		{
			d := &element.URowId{}
			d.SetDataDef(element.DataDefURowId)
			yyVAL.anything = d
		}
	case 351:
		{
			size := yyS[yypt-1].i
			d := &element.URowId{Size: &size}
			d.SetDataDef(element.DataDefURowId)
			yyVAL.anything = d
		}
	case 352:
		{
			d := &element.Char{}
			d.SetDataDef(element.DataDefCharacter)
			yyVAL.anything = d
		}
	case 353:
		{
			size := yyS[yypt-1].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharacterVarying)
			yyVAL.anything = d
		}
	case 354:
		{
			size := yyS[yypt-1].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharVarying)
			yyVAL.anything = d
		}
	case 355:
		{
			size := yyS[yypt-1].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNCharVarying)
			yyVAL.anything = d
		}
	case 356:
		{
			size := yyS[yypt-1].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefVarchar)
			yyVAL.anything = d
		}
	case 357:
		{
			size := yyS[yypt-1].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNationalCharacter)
			yyVAL.anything = d
		}
	case 358:
		{
			size := yyS[yypt-1].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNationalCharacterVarying)
			yyVAL.anything = d
		}
	case 359:
		{
			size := yyS[yypt-1].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNationalChar)
			yyVAL.anything = d
		}
	case 360:
		{
			size := yyS[yypt-1].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNationalCharVarying)
			yyVAL.anything = d
		}
	case 361:
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 362:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 363:
		{
			precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
			scale := yyS[yypt-1].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 364:
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 365:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 366:
		{
			precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
			scale := yyS[yypt-1].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 367:
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 368:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 369:
		{
			precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
			scale := yyS[yypt-1].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 370:
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefInteger)
			yyVAL.anything = d
		}
	case 371:
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefInt)
			yyVAL.anything = d
		}
	case 372:
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefSmallInt)
			yyVAL.anything = d
		}
	case 373:
		{
			precision := &element.NumberOrAsterisk{Number: 126}
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefDoublePrecision)
			yyVAL.anything = d
		}
	case 374:
		{
			precision := &element.NumberOrAsterisk{Number: 63}
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefReal)
			yyVAL.anything = d
		}
	case 375:
		{
			yyVAL.anything = nil
		}
	case 376:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 377:
		{
			constraint := &ast.InlineConstraint{}
			if yyS[yypt-2].anything != nil {
				constraint.Name = yyS[yypt-2].anything.(*element.Identifier)
			}
			constraint.Type = ast.ConstraintType(yyS[yypt-1].i)
			yyVAL.anything = constraint
		}
	case 378:
		{
			constraint := &ast.InlineConstraint{}
			if yyS[yypt-2].anything != nil {
				constraint.Name = yyS[yypt-2].anything.(*element.Identifier)
			}
			constraint.Type = ast.ConstraintTypeReferences
			yyVAL.anything = constraint
		}
	case 379:
		{
			yyVAL.i = int(ast.ConstraintTypeNull)
		}
	case 380:
		{
			yyVAL.i = int(ast.ConstraintTypeNotNull)
		}
	case 381:
		{
			yyVAL.i = int(ast.ConstraintTypeUnique)
		}
	case 382:
		{
			yyVAL.i = int(ast.ConstraintTypePK)
		}
	case 384:
		{
			// empty
		}
	case 386:
		{
			// empty
		}
	case 389:
		{
			// empty
		}
	case 408:
		{
			constraint := &ast.OutOfLineConstraint{}
			if yyS[yypt-5].anything != nil {
				constraint.Name = yyS[yypt-5].anything.(*element.Identifier)
			}
			constraint.Type = ast.ConstraintTypeUnique
			constraint.Columns = yyS[yypt-2].anything.([]*element.Identifier)
			yyVAL.anything = constraint
		}
	case 409:
		{
			constraint := &ast.OutOfLineConstraint{}
			if yyS[yypt-6].anything != nil {
				constraint.Name = yyS[yypt-6].anything.(*element.Identifier)
			}
			constraint.Type = ast.ConstraintTypePK
			constraint.Columns = yyS[yypt-2].anything.([]*element.Identifier)
			yyVAL.anything = constraint
		}
	case 410:
		{
			constraint := &ast.OutOfLineConstraint{}
			if yyS[yypt-7].anything != nil {
				constraint.Name = yyS[yypt-7].anything.(*element.Identifier)
			}
			constraint.Type = ast.ConstraintTypeReferences
			constraint.Columns = yyS[yypt-3].anything.([]*element.Identifier)
			yyVAL.anything = constraint
		}
	case 417:
		{
			// empty
		}
	case 419:
		{
			// empty
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

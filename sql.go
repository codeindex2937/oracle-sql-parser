// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"strings"

	"github.com/sjjian/oracle_sql_parser/ast"
	"github.com/sjjian/oracle_sql_parser/ast/element"
)

func nextQuery(yylex interface{}) string {
	lex := yylex.(*yyLexImpl)
	tc := lex.scanner.TC
	query := string(lex.scanner.Text[lex.lastPos:tc])
	lex.lastPos = tc
	return strings.TrimSpace(query)
}

type yySymType struct {
	yys      int
	nothing  struct{}
	i        int
	b        bool
	str      string
	node     ast.Node
	anything interface{}
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault            = 57484
	yyEofCode            = 57344
	_add                 = 57350
	_all                 = 57444
	_alter               = 57348
	_always              = 57423
	_as                  = 57424
	_at                  = 57445
	_bfile               = 57377
	_binaryDouble        = 57359
	_binaryFloat         = 57358
	_blob                = 57374
	_blockchain          = 57459
	_by                  = 57400
	_byte                = 57352
	_cache               = 57427
	_cascade             = 57410
	_char                = 57351
	_character           = 57380
	_checkpoint          = 57456
	_clob                = 57375
	_collate             = 57393
	_column              = 57446
	_columns             = 57450
	_commit              = 57472
	_constraint          = 57403
	_constraints         = 57453
	_continue            = 57451
	_create              = 57458
	_cycle               = 57428
	_data                = 57466
	_date                = 57362
	_day                 = 57372
	_dec                 = 57386
	_decimal             = 57385
	_decrypt             = 57443
	_default             = 57422
	_deferrable          = 57414
	_deferred            = 57415
	_definition          = 57473
	_delete              = 57411
	_double              = 57390
	_doubleQuoteStr      = 57482
	_drop                = 57442
	_duplicated          = 57460
	_encrypt             = 57397
	_extended            = 57467
	_float               = 57357
	_for                 = 57476
	_force               = 57449
	_from                = 57347
	_generated           = 57425
	_global              = 57461
	_identified          = 57399
	_identity            = 57426
	_immediate           = 57416
	_immutable           = 57462
	_increment           = 57429
	_initially           = 57417
	_int                 = 57388
	_intNumber           = 57480
	_interger            = 57387
	_interval            = 57368
	_invalidate          = 57454
	_invisible           = 57395
	_is                  = 57420
	_key                 = 57404
	_levels              = 57447
	_limit               = 57430
	_local               = 57365
	_long                = 57360
	_maxvalue            = 57431
	_memoptimize         = 57477
	_metadata            = 57468
	_minvalue            = 57432
	_modify              = 57441
	_mouth               = 57371
	_national            = 57383
	_nchar               = 57354
	_nclob               = 57376
	_no                  = 57401
	_nocache             = 57433
	_nocycle             = 57434
	_nomaxvalue          = 57435
	_nominvalue          = 57436
	_none                = 57469
	_nonquotedIdentifier = 57483
	_noorder             = 57437
	_norely              = 57418
	_not                 = 57405
	_null                = 57406
	_number              = 57356
	_numeric             = 57384
	_nvarchar2           = 57355
	_on                  = 57412
	_online              = 57455
	_order               = 57438
	_parent              = 57471
	_precision           = 57391
	_preserve            = 57474
	_primary             = 57407
	_private             = 57463
	_raw                 = 57361
	_read                = 57478
	_real                = 57392
	_references          = 57409
	_rely                = 57419
	_rename              = 57457
	_rowid               = 57378
	_rows                = 57475
	_salt                = 57402
	_scope               = 57421
	_second              = 57373
	_select              = 57346
	_set                 = 57413
	_sharded             = 57464
	_sharding            = 57470
	_singleQuoteStr      = 57481
	_smallInt            = 57389
	_sort                = 57394
	_start               = 57439
	_substitutable       = 57448
	_table               = 57349
	_temporary           = 57465
	_time                = 57366
	_timestamp           = 57363
	_to                  = 57370
	_unique              = 57408
	_unused              = 57452
	_urowid              = 57379
	_using               = 57398
	_value               = 57440
	_varchar             = 57382
	_varchar2            = 57353
	_varying             = 57381
	_visible             = 57396
	_with                = 57364
	_write               = 57479
	_year                = 57369
	_zone                = 57367
	yyErrCode            = 57345

	yyMaxDepth = 200
	yyTabOfs   = -270
)

var (
	yyPrec = map[int]int{}

	yyXLAT = map[int]int{
		41:    0,   // ')' (231x)
		44:    1,   // ',' (182x)
		57406: 2,   // _null (159x)
		57405: 3,   // _not (157x)
		57407: 4,   // _primary (155x)
		57409: 5,   // _references (155x)
		57408: 6,   // _unique (155x)
		57403: 7,   // _constraint (152x)
		57442: 8,   // _drop (125x)
		57364: 9,   // _with (110x)
		57421: 10,  // _scope (109x)
		57397: 11,  // _encrypt (102x)
		57422: 12,  // _default (96x)
		57443: 13,  // _decrypt (93x)
		57344: 14,  // $end (84x)
		59:    15,  // ';' (83x)
		57425: 16,  // _generated (83x)
		57395: 17,  // _invisible (80x)
		57396: 18,  // _visible (80x)
		57394: 19,  // _sort (75x)
		57393: 20,  // _collate (72x)
		57446: 21,  // _column (54x)
		57413: 22,  // _set (52x)
		57350: 23,  // _add (51x)
		57441: 24,  // _modify (51x)
		40:    25,  // '(' (44x)
		57480: 26,  // _intNumber (37x)
		57477: 27,  // _memoptimize (36x)
		57482: 28,  // _doubleQuoteStr (33x)
		57471: 29,  // _parent (33x)
		57483: 30,  // _nonquotedIdentifier (31x)
		57412: 31,  // _on (24x)
		57530: 32,  // Identifier (23x)
		57414: 33,  // _deferrable (21x)
		57417: 34,  // _initially (20x)
		57427: 35,  // _cache (17x)
		57428: 36,  // _cycle (17x)
		57429: 37,  // _increment (17x)
		57431: 38,  // _maxvalue (17x)
		57432: 39,  // _minvalue (17x)
		57401: 40,  // _no (17x)
		57433: 41,  // _nocache (17x)
		57434: 42,  // _nocycle (17x)
		57435: 43,  // _nomaxvalue (17x)
		57436: 44,  // _nominvalue (17x)
		57437: 45,  // _noorder (17x)
		57438: 46,  // _order (17x)
		57439: 47,  // _start (17x)
		57456: 48,  // _checkpoint (14x)
		57457: 49,  // _rename (14x)
		57499: 50,  // ColumnName (14x)
		57410: 51,  // _cascade (13x)
		57454: 52,  // _invalidate (12x)
		57455: 53,  // _online (12x)
		57402: 54,  // _salt (10x)
		57351: 55,  // _char (9x)
		46:    56,  // '.' (8x)
		57418: 57,  // _norely (8x)
		57419: 58,  // _rely (8x)
		57481: 59,  // _singleQuoteStr (8x)
		57370: 60,  // _to (8x)
		57380: 61,  // _character (7x)
		57361: 62,  // _raw (7x)
		57378: 63,  // _rowid (7x)
		57377: 64,  // _bfile (6x)
		57359: 65,  // _binaryDouble (6x)
		57358: 66,  // _binaryFloat (6x)
		57374: 67,  // _blob (6x)
		57375: 68,  // _clob (6x)
		57362: 69,  // _date (6x)
		57386: 70,  // _dec (6x)
		57385: 71,  // _decimal (6x)
		57390: 72,  // _double (6x)
		57357: 73,  // _float (6x)
		57388: 74,  // _int (6x)
		57387: 75,  // _interger (6x)
		57368: 76,  // _interval (6x)
		57360: 77,  // _long (6x)
		57383: 78,  // _national (6x)
		57354: 79,  // _nchar (6x)
		57376: 80,  // _nclob (6x)
		57356: 81,  // _number (6x)
		57384: 82,  // _numeric (6x)
		57355: 83,  // _nvarchar2 (6x)
		57392: 84,  // _real (6x)
		57389: 85,  // _smallInt (6x)
		57363: 86,  // _timestamp (6x)
		57379: 87,  // _urowid (6x)
		57382: 88,  // _varchar (6x)
		57353: 89,  // _varchar2 (6x)
		42:    90,  // '*' (5x)
		57426: 91,  // _identity (5x)
		57470: 92,  // _sharding (5x)
		57448: 93,  // _substitutable (5x)
		57381: 94,  // _varying (5x)
		57560: 95,  // NumberOrAsterisk (5x)
		57584: 96,  // TableName (5x)
		57424: 97,  // _as (4x)
		57476: 98,  // _for (4x)
		57496: 99,  // ColumnDef (4x)
		57504: 100, // ConstraintNameOrEmpty (4x)
		57509: 101, // ConstraintStateRely (4x)
		57534: 102, // IdentityOptionsOrEmpty (4x)
		57536: 103, // InlineConstraint (4x)
		57568: 104, // RealColumnDef (4x)
		57400: 105, // _by (3x)
		57399: 106, // _identified (3x)
		57487: 107, // AnsiSupportDataTypes (3x)
		57491: 108, // CharacterDataTypes (3x)
		57492: 109, // CollateClause (3x)
		57506: 110, // ConstraintStateDeferrable (3x)
		57507: 111, // ConstraintStateDeferredOrImmediate (3x)
		57511: 112, // Datatype (3x)
		57512: 113, // DatetimeDataTypes (3x)
		57517: 114, // DropColumnCheckpoint (3x)
		57520: 115, // DropColumnProp (3x)
		57541: 116, // InvisibleProp (3x)
		57544: 117, // LargeObjectDataTypes (3x)
		57545: 118, // LongAndRawDataTypes (3x)
		57559: 119, // NumberDataTypes (3x)
		57564: 120, // OralceBuiltInDataTypes (3x)
		57576: 121, // RowIdDataTypes (3x)
		57444: 122, // _all (2x)
		57348: 123, // _alter (2x)
		57445: 124, // _at (2x)
		57459: 125, // _blockchain (2x)
		57352: 126, // _byte (2x)
		57450: 127, // _columns (2x)
		57472: 128, // _commit (2x)
		57458: 129, // _create (2x)
		57466: 130, // _data (2x)
		57473: 131, // _definition (2x)
		57411: 132, // _delete (2x)
		57449: 133, // _force (2x)
		57447: 134, // _levels (2x)
		57371: 135, // _mouth (2x)
		57474: 136, // _preserve (2x)
		57478: 137, // _read (2x)
		57475: 138, // _rows (2x)
		57373: 139, // _second (2x)
		57349: 140, // _table (2x)
		57465: 141, // _temporary (2x)
		57366: 142, // _time (2x)
		57452: 143, // _unused (2x)
		57479: 144, // _write (2x)
		57367: 145, // _zone (2x)
		57485: 146, // AddColumnClause (2x)
		57486: 147, // AlterTableStmt (2x)
		57489: 148, // ChangeColumnClause (2x)
		57493: 149, // CollateClauseOrEmpty (2x)
		57500: 150, // ColumnNameList (2x)
		57501: 151, // ColumnNameListForDropColumn (2x)
		57505: 152, // ConstraintState (2x)
		57508: 153, // ConstraintStateOrEmpty (2x)
		57510: 154, // CreateTableStmt (2x)
		57513: 155, // DefaultClause (2x)
		57515: 156, // DefaultOrIdentityClause (2x)
		57518: 157, // DropColumnClause (2x)
		57521: 158, // DropColumnProps (2x)
		57522: 159, // DropColumnPropsOrEmpty (2x)
		57523: 160, // EmptyStmt (2x)
		57525: 161, // EncryptClause (2x)
		57528: 162, // Expr (2x)
		57531: 163, // IdentityClause (2x)
		57532: 164, // IdentityOption (2x)
		57537: 165, // InlineConstraintList (2x)
		57538: 166, // InlineConstraintProp (2x)
		57543: 167, // IsForce (2x)
		57548: 168, // MemoptimizeRead (2x)
		57550: 169, // MemoptimizeWrite (2x)
		57552: 170, // ModifyColumnClause (2x)
		57553: 171, // ModifyColumnProp (2x)
		57555: 172, // ModifyColumnSubstitutable (2x)
		57556: 173, // ModifyColumnVisibility (2x)
		57558: 174, // ModifyRealColumnProp (2x)
		57569: 175, // ReferencesClause (2x)
		57572: 176, // RelTableProp (2x)
		57581: 177, // Statement (2x)
		61:    178, // '=' (1x)
		57423: 179, // _always (1x)
		57453: 180, // _constraints (1x)
		57451: 181, // _continue (1x)
		57372: 182, // _day (1x)
		57415: 183, // _deferred (1x)
		57460: 184, // _duplicated (1x)
		57467: 185, // _extended (1x)
		57461: 186, // _global (1x)
		57416: 187, // _immediate (1x)
		57462: 188, // _immutable (1x)
		57420: 189, // _is (1x)
		57404: 190, // _key (1x)
		57430: 191, // _limit (1x)
		57365: 192, // _local (1x)
		57468: 193, // _metadata (1x)
		57469: 194, // _none (1x)
		57391: 195, // _precision (1x)
		57463: 196, // _private (1x)
		57464: 197, // _sharded (1x)
		57398: 198, // _using (1x)
		57440: 199, // _value (1x)
		57369: 200, // _year (1x)
		57488: 201, // BlockchainTableClauses (1x)
		57490: 202, // ChangeColumnClauseList (1x)
		57494: 203, // ColumnClauses (1x)
		57495: 204, // ColumnConstraintForModify (1x)
		57497: 205, // ColumnDefConstraint (1x)
		57498: 206, // ColumnDefList (1x)
		57502: 207, // ColumnNameListOrEmpty (1x)
		57503: 208, // ColumnProps (1x)
		57514: 209, // DefaultCollateClauseOrEmpty (1x)
		57516: 210, // DefaultOrIdentityClauseForModify (1x)
		57519: 211, // DropColumnOnline (1x)
		57524: 212, // EncryptAlgorithm (1x)
		57526: 213, // EncryptClauseForModify (1x)
		57527: 214, // EncryptionSpec (1x)
		57529: 215, // IdentifiedByClause (1x)
		57533: 216, // IdentityOptions (1x)
		57535: 217, // ImmutableTableClauses (1x)
		57539: 218, // InlineRefConstraint (1x)
		57540: 219, // IntergrityAlgorithm (1x)
		57542: 220, // InvisiblePropOrEmpty (1x)
		57546: 221, // Memoptimize (1x)
		57547: 222, // MemoptimizeForAlterTable (1x)
		57549: 223, // MemoptimizeReadForAlterTable (1x)
		57551: 224, // MemoptimizeWriteForAlterTable (1x)
		57554: 225, // ModifyColumnProps (1x)
		57557: 226, // ModifyColumnVisibilityList (1x)
		57561: 227, // OnCommitClause (1x)
		57562: 228, // OnCommitDef (1x)
		57563: 229, // OnCommitRows (1x)
		57565: 230, // OutOfLinePartStorageList (1x)
		57566: 231, // ParentTable (1x)
		57567: 232, // PhysicalProps (1x)
		57570: 233, // ReferencesOnDelete (1x)
		57571: 234, // RelTableDef (1x)
		57573: 235, // RelTableProps (1x)
		57574: 236, // RelTablePropsOrEmpty (1x)
		57575: 237, // RenameColumnClause (1x)
		57577: 238, // SaltProp (1x)
		57578: 239, // ShardingType (1x)
		57579: 240, // SortProp (1x)
		57580: 241, // Start (1x)
		57582: 242, // StatementList (1x)
		57583: 243, // TableDef (1x)
		57585: 244, // TableProps (1x)
		57586: 245, // TableType (1x)
		57484: 246, // $default (0x)
		57347: 247, // _from (0x)
		57346: 248, // _select (0x)
		57345: 249, // error (0x)
	}

	yySymNames = []string{
		"')'",
		"','",
		"_null",
		"_not",
		"_primary",
		"_references",
		"_unique",
		"_constraint",
		"_drop",
		"_with",
		"_scope",
		"_encrypt",
		"_default",
		"_decrypt",
		"$end",
		"';'",
		"_generated",
		"_invisible",
		"_visible",
		"_sort",
		"_collate",
		"_column",
		"_set",
		"_add",
		"_modify",
		"'('",
		"_intNumber",
		"_memoptimize",
		"_doubleQuoteStr",
		"_parent",
		"_nonquotedIdentifier",
		"_on",
		"Identifier",
		"_deferrable",
		"_initially",
		"_cache",
		"_cycle",
		"_increment",
		"_maxvalue",
		"_minvalue",
		"_no",
		"_nocache",
		"_nocycle",
		"_nomaxvalue",
		"_nominvalue",
		"_noorder",
		"_order",
		"_start",
		"_checkpoint",
		"_rename",
		"ColumnName",
		"_cascade",
		"_invalidate",
		"_online",
		"_salt",
		"_char",
		"'.'",
		"_norely",
		"_rely",
		"_singleQuoteStr",
		"_to",
		"_character",
		"_raw",
		"_rowid",
		"_bfile",
		"_binaryDouble",
		"_binaryFloat",
		"_blob",
		"_clob",
		"_date",
		"_dec",
		"_decimal",
		"_double",
		"_float",
		"_int",
		"_interger",
		"_interval",
		"_long",
		"_national",
		"_nchar",
		"_nclob",
		"_number",
		"_numeric",
		"_nvarchar2",
		"_real",
		"_smallInt",
		"_timestamp",
		"_urowid",
		"_varchar",
		"_varchar2",
		"'*'",
		"_identity",
		"_sharding",
		"_substitutable",
		"_varying",
		"NumberOrAsterisk",
		"TableName",
		"_as",
		"_for",
		"ColumnDef",
		"ConstraintNameOrEmpty",
		"ConstraintStateRely",
		"IdentityOptionsOrEmpty",
		"InlineConstraint",
		"RealColumnDef",
		"_by",
		"_identified",
		"AnsiSupportDataTypes",
		"CharacterDataTypes",
		"CollateClause",
		"ConstraintStateDeferrable",
		"ConstraintStateDeferredOrImmediate",
		"Datatype",
		"DatetimeDataTypes",
		"DropColumnCheckpoint",
		"DropColumnProp",
		"InvisibleProp",
		"LargeObjectDataTypes",
		"LongAndRawDataTypes",
		"NumberDataTypes",
		"OralceBuiltInDataTypes",
		"RowIdDataTypes",
		"_all",
		"_alter",
		"_at",
		"_blockchain",
		"_byte",
		"_columns",
		"_commit",
		"_create",
		"_data",
		"_definition",
		"_delete",
		"_force",
		"_levels",
		"_mouth",
		"_preserve",
		"_read",
		"_rows",
		"_second",
		"_table",
		"_temporary",
		"_time",
		"_unused",
		"_write",
		"_zone",
		"AddColumnClause",
		"AlterTableStmt",
		"ChangeColumnClause",
		"CollateClauseOrEmpty",
		"ColumnNameList",
		"ColumnNameListForDropColumn",
		"ConstraintState",
		"ConstraintStateOrEmpty",
		"CreateTableStmt",
		"DefaultClause",
		"DefaultOrIdentityClause",
		"DropColumnClause",
		"DropColumnProps",
		"DropColumnPropsOrEmpty",
		"EmptyStmt",
		"EncryptClause",
		"Expr",
		"IdentityClause",
		"IdentityOption",
		"InlineConstraintList",
		"InlineConstraintProp",
		"IsForce",
		"MemoptimizeRead",
		"MemoptimizeWrite",
		"ModifyColumnClause",
		"ModifyColumnProp",
		"ModifyColumnSubstitutable",
		"ModifyColumnVisibility",
		"ModifyRealColumnProp",
		"ReferencesClause",
		"RelTableProp",
		"Statement",
		"'='",
		"_always",
		"_constraints",
		"_continue",
		"_day",
		"_deferred",
		"_duplicated",
		"_extended",
		"_global",
		"_immediate",
		"_immutable",
		"_is",
		"_key",
		"_limit",
		"_local",
		"_metadata",
		"_none",
		"_precision",
		"_private",
		"_sharded",
		"_using",
		"_value",
		"_year",
		"BlockchainTableClauses",
		"ChangeColumnClauseList",
		"ColumnClauses",
		"ColumnConstraintForModify",
		"ColumnDefConstraint",
		"ColumnDefList",
		"ColumnNameListOrEmpty",
		"ColumnProps",
		"DefaultCollateClauseOrEmpty",
		"DefaultOrIdentityClauseForModify",
		"DropColumnOnline",
		"EncryptAlgorithm",
		"EncryptClauseForModify",
		"EncryptionSpec",
		"IdentifiedByClause",
		"IdentityOptions",
		"ImmutableTableClauses",
		"InlineRefConstraint",
		"IntergrityAlgorithm",
		"InvisiblePropOrEmpty",
		"Memoptimize",
		"MemoptimizeForAlterTable",
		"MemoptimizeReadForAlterTable",
		"MemoptimizeWriteForAlterTable",
		"ModifyColumnProps",
		"ModifyColumnVisibilityList",
		"OnCommitClause",
		"OnCommitDef",
		"OnCommitRows",
		"OutOfLinePartStorageList",
		"ParentTable",
		"PhysicalProps",
		"ReferencesOnDelete",
		"RelTableDef",
		"RelTableProps",
		"RelTablePropsOrEmpty",
		"RenameColumnClause",
		"SaltProp",
		"ShardingType",
		"SortProp",
		"Start",
		"StatementList",
		"TableDef",
		"TableProps",
		"TableType",
		"$default",
		"_from",
		"_select",
		"error",
	}

	yyTokenLiteralStrings = map[int]string{
		57480: "int number",
		57482: "double quotes string",
		57483: "nonquoted identifier",
		57481: "single quotes string",
	}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {241, 1},
		2:   {242, 1},
		3:   {242, 3},
		4:   {177, 1},
		5:   {177, 1},
		6:   {177, 1},
		7:   {160, 0},
		8:   {96, 1},
		9:   {96, 3},
		10:  {150, 1},
		11:  {150, 3},
		12:  {50, 1},
		13:  {32, 1},
		14:  {32, 1},
		15:  {147, 5},
		16:  {203, 1},
		17:  {203, 1},
		18:  {202, 1},
		19:  {202, 2},
		20:  {148, 1},
		21:  {148, 1},
		22:  {148, 1},
		23:  {146, 6},
		24:  {208, 0},
		25:  {230, 0},
		26:  {206, 1},
		27:  {206, 3},
		28:  {99, 1},
		29:  {104, 8},
		30:  {149, 0},
		31:  {149, 1},
		32:  {109, 2},
		33:  {240, 0},
		34:  {240, 1},
		35:  {220, 0},
		36:  {220, 1},
		37:  {116, 1},
		38:  {116, 1},
		39:  {156, 0},
		40:  {156, 1},
		41:  {156, 1},
		42:  {155, 2},
		43:  {155, 4},
		44:  {163, 4},
		45:  {163, 5},
		46:  {163, 5},
		47:  {163, 6},
		48:  {163, 8},
		49:  {102, 0},
		50:  {102, 3},
		51:  {216, 0},
		52:  {216, 1},
		53:  {216, 2},
		54:  {164, 3},
		55:  {164, 4},
		56:  {164, 3},
		57:  {164, 2},
		58:  {164, 1},
		59:  {164, 2},
		60:  {164, 1},
		61:  {164, 1},
		62:  {164, 1},
		63:  {164, 2},
		64:  {164, 1},
		65:  {164, 1},
		66:  {164, 1},
		67:  {161, 0},
		68:  {161, 2},
		69:  {214, 4},
		70:  {212, 0},
		71:  {212, 2},
		72:  {215, 0},
		73:  {215, 3},
		74:  {219, 0},
		75:  {219, 1},
		76:  {238, 0},
		77:  {238, 1},
		78:  {238, 2},
		79:  {205, 0},
		80:  {205, 1},
		81:  {205, 1},
		82:  {165, 1},
		83:  {165, 2},
		84:  {170, 4},
		85:  {170, 4},
		86:  {170, 1},
		87:  {225, 1},
		88:  {225, 3},
		89:  {171, 1},
		90:  {174, 6},
		91:  {210, 2},
		92:  {210, 1},
		93:  {213, 1},
		94:  {213, 1},
		95:  {204, 0},
		96:  {204, 1},
		97:  {226, 1},
		98:  {226, 3},
		99:  {173, 2},
		100: {172, 7},
		101: {172, 8},
		102: {167, 0},
		103: {167, 1},
		104: {157, 5},
		105: {157, 4},
		106: {157, 4},
		107: {157, 4},
		108: {151, 2},
		109: {151, 3},
		110: {159, 0},
		111: {159, 1},
		112: {158, 1},
		113: {158, 2},
		114: {115, 2},
		115: {115, 1},
		116: {211, 0},
		117: {211, 1},
		118: {114, 0},
		119: {114, 2},
		120: {237, 5},
		121: {154, 8},
		122: {245, 0},
		123: {245, 2},
		124: {245, 2},
		125: {245, 1},
		126: {245, 1},
		127: {245, 1},
		128: {245, 1},
		129: {245, 2},
		130: {239, 0},
		131: {239, 3},
		132: {239, 3},
		133: {239, 4},
		134: {239, 3},
		135: {231, 0},
		136: {231, 2},
		137: {243, 1},
		138: {234, 7},
		139: {217, 0},
		140: {201, 0},
		141: {209, 0},
		142: {209, 2},
		143: {227, 2},
		144: {228, 0},
		145: {228, 4},
		146: {228, 4},
		147: {229, 0},
		148: {229, 4},
		149: {229, 4},
		150: {232, 0},
		151: {244, 0},
		152: {236, 0},
		153: {236, 3},
		154: {235, 1},
		155: {235, 3},
		156: {176, 1},
		157: {112, 1},
		158: {112, 1},
		159: {95, 1},
		160: {95, 1},
		161: {120, 1},
		162: {120, 1},
		163: {120, 1},
		164: {120, 1},
		165: {120, 1},
		166: {120, 1},
		167: {108, 1},
		168: {108, 4},
		169: {108, 5},
		170: {108, 5},
		171: {108, 4},
		172: {108, 5},
		173: {108, 5},
		174: {108, 1},
		175: {108, 4},
		176: {108, 4},
		177: {119, 1},
		178: {119, 4},
		179: {119, 6},
		180: {119, 1},
		181: {119, 4},
		182: {119, 1},
		183: {119, 1},
		184: {118, 1},
		185: {118, 2},
		186: {118, 4},
		187: {113, 1},
		188: {113, 1},
		189: {113, 4},
		190: {113, 7},
		191: {113, 8},
		192: {113, 4},
		193: {113, 7},
		194: {113, 4},
		195: {113, 7},
		196: {113, 10},
		197: {113, 7},
		198: {117, 1},
		199: {117, 1},
		200: {117, 1},
		201: {117, 1},
		202: {121, 1},
		203: {121, 1},
		204: {121, 4},
		205: {107, 4},
		206: {107, 5},
		207: {107, 5},
		208: {107, 5},
		209: {107, 4},
		210: {107, 5},
		211: {107, 6},
		212: {107, 5},
		213: {107, 6},
		214: {107, 1},
		215: {107, 4},
		216: {107, 6},
		217: {107, 1},
		218: {107, 4},
		219: {107, 6},
		220: {107, 1},
		221: {107, 4},
		222: {107, 6},
		223: {107, 1},
		224: {107, 1},
		225: {107, 1},
		226: {107, 2},
		227: {107, 1},
		228: {100, 0},
		229: {100, 2},
		230: {103, 3},
		231: {166, 1},
		232: {166, 2},
		233: {166, 1},
		234: {166, 2},
		235: {166, 1},
		236: {175, 4},
		237: {207, 0},
		238: {207, 3},
		239: {233, 0},
		240: {233, 3},
		241: {233, 4},
		242: {153, 0},
		243: {153, 1},
		244: {152, 2},
		245: {152, 3},
		246: {152, 2},
		247: {152, 3},
		248: {110, 1},
		249: {110, 2},
		250: {111, 2},
		251: {111, 2},
		252: {101, 0},
		253: {101, 1},
		254: {101, 1},
		255: {218, 3},
		256: {218, 2},
		257: {218, 3},
		258: {222, 2},
		259: {223, 1},
		260: {223, 4},
		261: {224, 1},
		262: {224, 4},
		263: {221, 2},
		264: {168, 0},
		265: {168, 3},
		266: {169, 0},
		267: {169, 3},
		268: {162, 1},
		269: {162, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [490][]uint16{
		// 0
		{14: 263, 263, 123: 277, 129: 278, 147: 275, 154: 276, 160: 274, 177: 273, 241: 271, 272},
		{14: 270},
		{14: 269, 758},
		{14: 268, 268},
		{14: 266, 266},
		// 5
		{14: 265, 265},
		{14: 264, 264},
		{140: 649},
		{140: 279},
		{28: 148, 30: 148, 125: 286, 184: 284, 186: 281, 188: 285, 196: 282, 283, 245: 280},
		// 10
		{28: 292, 30: 291, 32: 290, 96: 293},
		{141: 289},
		{141: 288},
		{28: 145, 30: 145},
		{28: 144, 30: 144},
		// 15
		{28: 143, 30: 143, 125: 287},
		{28: 142, 30: 142},
		{28: 141, 30: 141},
		{28: 146, 30: 146},
		{28: 147, 30: 147},
		// 20
		{262, 262, 262, 262, 262, 262, 262, 262, 262, 12: 262, 14: 262, 262, 21: 262, 262, 262, 262, 262, 27: 262, 29: 262, 31: 262, 33: 262, 262, 40: 262, 49: 262, 56: 647, 92: 262},
		{257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 21: 257, 257, 257, 257, 257, 27: 257, 29: 257, 31: 257, 33: 257, 257, 40: 257, 48: 257, 257, 51: 257, 257, 257, 257, 257, 257, 59: 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 92: 257, 257},
		{256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 21: 256, 256, 256, 256, 256, 27: 256, 29: 256, 31: 256, 33: 256, 256, 40: 256, 48: 256, 256, 51: 256, 256, 256, 256, 256, 256, 59: 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 92: 256, 256},
		{12: 140, 14: 140, 140, 25: 140, 27: 140, 29: 140, 31: 140, 92: 295, 239: 294},
		{12: 118, 14: 118, 118, 25: 305, 27: 118, 29: 118, 31: 118, 234: 303, 236: 304, 243: 302},
		// 25
		{178: 296},
		{130: 298, 185: 299, 193: 297, 300},
		{12: 139, 14: 139, 139, 25: 139, 27: 139, 29: 139, 31: 139},
		{12: 138, 14: 138, 138, 25: 138, 27: 138, 29: 138, 31: 138},
		{130: 301},
		// 30
		{12: 136, 14: 136, 136, 25: 136, 27: 136, 29: 136, 31: 136},
		{12: 137, 14: 137, 137, 25: 137, 27: 137, 29: 137, 31: 137},
		{14: 6, 6, 27: 637, 29: 6, 168: 636, 221: 635},
		{14: 133, 133, 27: 133, 29: 133},
		{12: 131, 14: 131, 131, 27: 131, 29: 131, 31: 131, 217: 613},
		// 35
		{28: 292, 30: 291, 32: 306, 50: 308, 99: 311, 104: 307, 176: 310, 235: 309},
		{258, 258, 3: 258, 8: 258, 14: 258, 258, 17: 258, 258, 21: 258, 258, 258, 258, 48: 258, 51: 258, 258, 258, 55: 258, 60: 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 93: 258},
		{242, 242},
		{55: 324, 61: 343, 333, 341, 340, 331, 330, 337, 338, 334, 348, 347, 352, 329, 350, 349, 336, 332, 345, 326, 339, 328, 346, 327, 353, 351, 335, 342, 344, 325, 107: 317, 318, 112: 315, 321, 117: 322, 320, 319, 316, 323},
		{312, 313},
		// 40
		{116, 116},
		{114, 114},
		{12: 117, 14: 117, 117, 27: 117, 29: 117, 31: 117},
		{28: 292, 30: 291, 32: 306, 50: 308, 99: 311, 104: 307, 176: 314},
		{115, 115},
		// 45
		{240, 240, 240, 240, 240, 240, 240, 240, 9: 240, 240, 240, 240, 16: 240, 240, 240, 240, 478, 109: 477, 149: 476},
		{113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 16: 113, 113, 113, 113, 113},
		{112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 16: 112, 112, 112, 112, 112},
		{109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 16: 109, 109, 109, 109, 109},
		{108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 16: 108, 108, 108, 108, 108},
		// 50
		{107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 16: 107, 107, 107, 107, 107},
		{106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 16: 106, 106, 106, 106, 106},
		{105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 16: 105, 105, 105, 105, 105},
		{104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 16: 104, 104, 104, 104, 104},
		{103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 16: 103, 103, 103, 103, 103, 25: 465, 94: 466},
		// 55
		{25: 458},
		{96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 16: 96, 96, 96, 96, 96, 25: 451, 94: 452},
		{25: 448},
		{93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 16: 93, 93, 93, 93, 93, 25: 442},
		{90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 16: 90, 90, 90, 90, 90, 25: 439},
		// 60
		{88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 16: 88, 88, 88, 88, 88},
		{87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 16: 87, 87, 87, 87, 87},
		{86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 16: 86, 86, 86, 86, 86, 62: 438},
		{25: 435},
		{83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 16: 83, 83, 83, 83, 83},
		// 65
		{82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 16: 82, 82, 82, 82, 82, 25: 426},
		{182: 405, 200: 404},
		{72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 16: 72, 72, 72, 72, 72},
		{71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 16: 71, 71, 71, 71, 71},
		{70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 16: 70, 70, 70, 70, 70},
		// 70
		{69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 16: 69, 69, 69, 69, 69},
		{68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 16: 68, 68, 68, 68, 68},
		{67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 16: 67, 67, 67, 67, 67, 25: 401},
		{25: 394, 94: 395},
		{25: 391},
		// 75
		{55: 376, 61: 375},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 16: 56, 56, 56, 56, 56, 25: 369},
		{53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 16: 53, 53, 53, 53, 53, 25: 363},
		{50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 16: 50, 50, 50, 50, 50, 25: 355},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 16: 47, 47, 47, 47, 47},
		// 80
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 16: 46, 46, 46, 46, 46},
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 16: 45, 45, 45, 45, 45},
		{195: 354},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 16: 43, 43, 43, 43, 43},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 16: 44, 44, 44, 44, 44},
		// 85
		{26: 356, 90: 357, 95: 358},
		{111, 111, 56: 111},
		{110, 110, 56: 110},
		{359, 56: 360},
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 16: 49, 49, 49, 49, 49},
		// 90
		{26: 361},
		{362},
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 16: 48, 48, 48, 48, 48},
		{26: 356, 90: 357, 95: 364},
		{365, 56: 366},
		// 95
		{52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 16: 52, 52, 52, 52, 52},
		{26: 367},
		{368},
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 16: 51, 51, 51, 51, 51},
		{26: 356, 90: 357, 95: 370},
		// 100
		{371, 56: 372},
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 16: 55, 55, 55, 55, 55},
		{26: 373},
		{374},
		{54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 16: 54, 54, 54, 54, 54},
		// 105
		{25: 384, 94: 385},
		{25: 377, 94: 378},
		{26: 382},
		{25: 379},
		{26: 380},
		// 110
		{381},
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 16: 57, 57, 57, 57, 57},
		{383},
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 16: 58, 58, 58, 58, 58},
		{26: 389},
		// 115
		{25: 386},
		{26: 387},
		{388},
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 16: 59, 59, 59, 59, 59},
		{390},
		// 120
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 16: 60, 60, 60, 60, 60},
		{26: 392},
		{393},
		{61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 16: 61, 61, 61, 61, 61},
		{26: 399},
		// 125
		{25: 396},
		{26: 397},
		{398},
		{64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 16: 64, 64, 64, 64, 64},
		{400},
		// 130
		{65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 16: 65, 65, 65, 65, 65},
		{26: 402},
		{403},
		{66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 16: 66, 66, 66, 66, 66},
		{25: 420, 60: 419},
		// 135
		{25: 407, 60: 406},
		{139: 415},
		{26: 408},
		{409},
		{60: 410},
		// 140
		{139: 411},
		{75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 16: 75, 75, 75, 75, 75, 25: 412},
		{26: 413},
		{414},
		{74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 16: 74, 74, 74, 74, 74},
		// 145
		{76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 16: 76, 76, 76, 76, 76, 25: 416},
		{26: 417},
		{418},
		{73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 16: 73, 73, 73, 73, 73},
		{135: 425},
		// 150
		{26: 421},
		{422},
		{60: 423},
		{135: 424},
		{77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 16: 77, 77, 77, 77, 77},
		// 155
		{78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 16: 78, 78, 78, 78, 78},
		{26: 427},
		{428},
		{81, 81, 81, 81, 81, 81, 81, 81, 81, 429, 81, 81, 81, 81, 16: 81, 81, 81, 81, 81},
		{142: 430, 192: 431},
		// 160
		{145: 434},
		{142: 432},
		{145: 433},
		{79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 16: 79, 79, 79, 79, 79},
		{80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 16: 80, 80, 80, 80, 80},
		// 165
		{26: 436},
		{437},
		{84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 16: 84, 84, 84, 84, 84},
		{85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 16: 85, 85, 85, 85, 85},
		{26: 356, 90: 357, 95: 440},
		// 170
		{441},
		{89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 16: 89, 89, 89, 89, 89},
		{26: 356, 90: 357, 95: 443},
		{444, 445},
		{92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 16: 92, 92, 92, 92, 92},
		// 175
		{26: 446},
		{447},
		{91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 16: 91, 91, 91, 91, 91},
		{26: 449},
		{450},
		// 180
		{94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 16: 94, 94, 94, 94, 94},
		{26: 456},
		{25: 453},
		{26: 454},
		{455},
		// 185
		{62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 16: 62, 62, 62, 62, 62},
		{457},
		{95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 16: 95, 95, 95, 95, 95},
		{26: 459},
		{460, 55: 462, 126: 461},
		// 190
		{99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 16: 99, 99, 99, 99, 99},
		{464},
		{463},
		{97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 16: 97, 97, 97, 97, 97},
		{98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 16: 98, 98, 98, 98, 98},
		// 195
		{26: 470},
		{25: 467},
		{26: 468},
		{469},
		{63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 16: 63, 63, 63, 63, 63},
		// 200
		{471, 55: 473, 126: 472},
		{102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 16: 102, 102, 102, 102, 102},
		{475},
		{474},
		{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 16: 100, 100, 100, 100, 100},
		// 205
		{101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 16: 101, 101, 101, 101, 101},
		{237, 237, 237, 237, 237, 237, 237, 237, 9: 237, 237, 237, 237, 16: 237, 237, 237, 481, 240: 480},
		{239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 16: 239, 239, 239, 239},
		{28: 292, 30: 291, 32: 479},
		{238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 27: 238, 29: 238, 31: 238},
		// 210
		{235, 235, 235, 235, 235, 235, 235, 235, 9: 235, 235, 235, 235, 16: 235, 484, 485, 116: 483, 220: 482},
		{236, 236, 236, 236, 236, 236, 236, 236, 9: 236, 236, 236, 236, 16: 236, 236, 236},
		{231, 231, 231, 231, 231, 231, 231, 231, 9: 231, 231, 231, 489, 16: 490, 155: 487, 486, 163: 488},
		{234, 234, 234, 234, 234, 234, 234, 234, 9: 234, 234, 234, 234, 16: 234},
		{233, 233, 233, 233, 233, 233, 233, 233, 9: 233, 233, 233, 233, 16: 233},
		// 215
		{232, 232, 232, 232, 232, 232, 232, 232, 9: 232, 232, 232, 232, 16: 232},
		{203, 203, 203, 203, 203, 203, 203, 203, 9: 203, 203, 541, 161: 540},
		{230, 230, 230, 230, 230, 230, 230, 230, 9: 230, 230, 230, 13: 230},
		{229, 229, 229, 229, 229, 229, 229, 229, 9: 229, 229, 229, 13: 229},
		{26: 536, 28: 537, 40: 535, 162: 534},
		// 220
		{97: 491, 105: 493, 179: 492},
		{91: 532},
		{97: 529},
		{12: 494},
		{31: 496, 97: 495},
		// 225
		{91: 527},
		{2: 497},
		{97: 498},
		{91: 499},
		{221, 221, 221, 221, 221, 221, 221, 221, 9: 221, 221, 221, 13: 221, 25: 501, 102: 500},
		// 230
		{222, 222, 222, 222, 222, 222, 222, 222, 9: 222, 222, 222, 13: 222},
		{219, 35: 512, 510, 505, 506, 508, 41: 513, 511, 507, 509, 515, 514, 504, 164: 503, 216: 502},
		{525, 35: 512, 510, 505, 506, 508, 41: 513, 511, 507, 509, 515, 514, 504, 164: 526},
		{218, 35: 218, 218, 218, 218, 218, 41: 218, 218, 218, 218, 218, 218, 218},
		{9: 521},
		// 235
		{105: 519},
		{26: 518},
		{212, 35: 212, 212, 212, 212, 212, 41: 212, 212, 212, 212, 212, 212, 212},
		{26: 517},
		{210, 35: 210, 210, 210, 210, 210, 41: 210, 210, 210, 210, 210, 210, 210},
		// 240
		{209, 35: 209, 209, 209, 209, 209, 41: 209, 209, 209, 209, 209, 209, 209},
		{208, 35: 208, 208, 208, 208, 208, 41: 208, 208, 208, 208, 208, 208, 208},
		{26: 516},
		{206, 35: 206, 206, 206, 206, 206, 41: 206, 206, 206, 206, 206, 206, 206},
		{205, 35: 205, 205, 205, 205, 205, 41: 205, 205, 205, 205, 205, 205, 205},
		// 245
		{204, 35: 204, 204, 204, 204, 204, 41: 204, 204, 204, 204, 204, 204, 204},
		{207, 35: 207, 207, 207, 207, 207, 41: 207, 207, 207, 207, 207, 207, 207},
		{211, 35: 211, 211, 211, 211, 211, 41: 211, 211, 211, 211, 211, 211, 211},
		{213, 35: 213, 213, 213, 213, 213, 41: 213, 213, 213, 213, 213, 213, 213},
		{26: 520},
		// 250
		{214, 35: 214, 214, 214, 214, 214, 41: 214, 214, 214, 214, 214, 214, 214},
		{26: 522, 191: 523},
		{216, 35: 216, 216, 216, 216, 216, 41: 216, 216, 216, 216, 216, 216, 216},
		{199: 524},
		{215, 35: 215, 215, 215, 215, 215, 41: 215, 215, 215, 215, 215, 215, 215},
		// 255
		{220, 220, 220, 220, 220, 220, 220, 220, 9: 220, 220, 220, 13: 220},
		{217, 35: 217, 217, 217, 217, 217, 41: 217, 217, 217, 217, 217, 217, 217},
		{221, 221, 221, 221, 221, 221, 221, 221, 9: 221, 221, 221, 13: 221, 25: 501, 102: 528},
		{223, 223, 223, 223, 223, 223, 223, 223, 9: 223, 223, 223, 13: 223},
		{91: 530},
		// 260
		{221, 221, 221, 221, 221, 221, 221, 221, 9: 221, 221, 221, 13: 221, 25: 501, 102: 531},
		{225, 225, 225, 225, 225, 225, 225, 225, 9: 225, 225, 225, 13: 225},
		{221, 221, 221, 221, 221, 221, 221, 221, 9: 221, 221, 221, 13: 221, 25: 501, 102: 533},
		{226, 226, 226, 226, 226, 226, 226, 226, 9: 226, 226, 226, 13: 226},
		{228, 228, 228, 228, 228, 228, 228, 228, 9: 228, 228, 228, 13: 228},
		// 265
		{2: 538},
		{2, 2, 2, 2, 2, 2, 2, 2, 9: 2, 2, 2, 13: 2},
		{1, 1, 1, 1, 1, 1, 1, 1, 9: 1, 1, 1, 13: 1},
		{26: 536, 28: 537, 162: 539},
		{227, 227, 227, 227, 227, 227, 227, 227, 9: 227, 227, 227, 13: 227},
		// 270
		{191, 191, 42, 42, 42, 42, 42, 560, 9: 563, 562, 100: 561, 103: 559, 165: 558, 205: 556, 218: 557},
		{200, 200, 200, 200, 200, 200, 200, 200, 9: 200, 200, 40: 200, 54: 200, 59: 200, 106: 200, 198: 544, 212: 543, 214: 542},
		{202, 202, 202, 202, 202, 202, 202, 202, 9: 202, 202},
		{198, 198, 198, 198, 198, 198, 198, 198, 9: 198, 198, 40: 198, 54: 198, 59: 198, 106: 547, 215: 546},
		{59: 545},
		// 275
		{199, 199, 199, 199, 199, 199, 199, 199, 9: 199, 199, 40: 199, 54: 199, 59: 199, 106: 199},
		{196, 196, 196, 196, 196, 196, 196, 196, 9: 196, 196, 40: 196, 54: 196, 59: 551, 219: 550},
		{105: 548},
		{28: 292, 30: 291, 32: 549},
		{197, 197, 197, 197, 197, 197, 197, 197, 9: 197, 197, 40: 197, 54: 197, 59: 197},
		// 280
		{194, 194, 194, 194, 194, 194, 194, 194, 9: 194, 194, 40: 554, 54: 553, 238: 552},
		{195, 195, 195, 195, 195, 195, 195, 195, 9: 195, 195, 40: 195, 54: 195},
		{201, 201, 201, 201, 201, 201, 201, 201, 9: 201, 201},
		{193, 193, 193, 193, 193, 193, 193, 193, 9: 193, 193},
		{54: 555},
		// 285
		{192, 192, 192, 192, 192, 192, 192, 192, 9: 192, 192},
		{241, 241},
		{190, 190},
		{189, 189, 42, 42, 42, 42, 42, 560, 100: 611, 103: 610},
		{188, 188, 188, 188, 188, 188, 188, 188},
		// 290
		{28: 292, 30: 291, 32: 609},
		{2: 568, 569, 571, 573, 570, 166: 567, 175: 572},
		{189: 565},
		{63: 564},
		{14, 14},
		// 295
		{28: 292, 30: 291, 32: 290, 96: 566},
		{15, 15},
		{28, 28, 28, 592, 28, 28, 28, 28, 33: 591, 593, 110: 589, 590, 152: 588, 608},
		{39, 39, 39, 39, 39, 39, 39, 39, 33: 39, 39},
		{2: 607},
		// 300
		{37, 37, 37, 37, 37, 37, 37, 37, 33: 37, 37},
		{190: 606},
		{35, 35, 35, 592, 35, 35, 35, 35, 33: 591, 593, 110: 589, 590, 152: 588, 594},
		{28: 292, 30: 291, 32: 290, 96: 574},
		{33, 33, 33, 33, 33, 33, 33, 33, 25: 576, 31: 33, 33: 33, 33, 207: 575},
		// 305
		{31, 31, 31, 31, 31, 31, 31, 31, 31: 583, 33: 31, 31, 233: 582},
		{28: 292, 30: 291, 32: 306, 50: 577, 150: 578},
		{260, 260},
		{580, 579},
		{28: 292, 30: 291, 32: 306, 50: 581},
		// 310
		{32, 32, 32, 32, 32, 32, 32, 32, 31: 32, 33: 32, 32},
		{259, 259},
		{34, 34, 34, 34, 34, 34, 34, 34, 33: 34, 34},
		{132: 584},
		{22: 586, 51: 585},
		// 315
		{30, 30, 30, 30, 30, 30, 30, 30, 33: 30, 30},
		{2: 587},
		{29, 29, 29, 29, 29, 29, 29, 29, 33: 29, 29},
		{27, 27, 27, 27, 27, 27, 27, 27},
		{18, 18, 18, 18, 18, 18, 18, 18, 34: 593, 57: 601, 600, 101: 603, 111: 604},
		// 320
		{18, 18, 18, 592, 18, 18, 18, 18, 33: 591, 57: 601, 600, 101: 598, 110: 599},
		{22, 22, 22, 22, 22, 22, 22, 22, 34: 22, 57: 22, 22},
		{33: 597},
		{183: 595, 187: 596},
		{13, 13},
		// 325
		{20, 20, 20, 20, 20, 20, 20, 20, 33: 20, 57: 20, 20},
		{19, 19, 19, 19, 19, 19, 19, 19, 33: 19, 57: 19, 19},
		{21, 21, 21, 21, 21, 21, 21, 21, 34: 21, 57: 21, 21},
		{24, 24, 24, 24, 24, 24, 24, 24},
		{18, 18, 18, 18, 18, 18, 18, 18, 57: 601, 600, 101: 602},
		// 330
		{17, 17, 17, 17, 17, 17, 17, 17},
		{16, 16, 16, 16, 16, 16, 16, 16},
		{23, 23, 23, 23, 23, 23, 23, 23},
		{26, 26, 26, 26, 26, 26, 26, 26},
		{18, 18, 18, 18, 18, 18, 18, 18, 57: 601, 600, 101: 605},
		// 335
		{25, 25, 25, 25, 25, 25, 25, 25},
		{36, 36, 36, 36, 36, 36, 36, 36, 33: 36, 36},
		{38, 38, 38, 38, 38, 38, 38, 38, 33: 38, 38},
		{40, 40, 40, 40, 40, 40, 40, 40},
		{2: 41, 41, 41, 41, 41},
		// 340
		{187, 187, 187, 187, 187, 187, 187, 187},
		{2: 568, 569, 571, 573, 570, 166: 567, 175: 612},
		{35, 35, 35, 35, 35, 35, 35, 35, 33: 35, 35},
		{12: 130, 14: 130, 130, 27: 130, 29: 130, 31: 130, 201: 614},
		{12: 616, 14: 129, 129, 27: 129, 29: 129, 31: 129, 209: 615},
		// 345
		{14: 126, 126, 27: 126, 29: 126, 31: 620, 227: 618, 619},
		{20: 478, 109: 617},
		{14: 128, 128, 27: 128, 29: 128, 31: 128},
		{14: 120, 120, 27: 120, 29: 120, 232: 633},
		{14: 123, 123, 27: 123, 29: 123, 31: 627, 229: 626},
		// 350
		{128: 621},
		{8: 622, 136: 623},
		{131: 625},
		{131: 624},
		{14: 124, 124, 27: 124, 29: 124, 31: 124},
		// 355
		{14: 125, 125, 27: 125, 29: 125, 31: 125},
		{14: 127, 127, 27: 127, 29: 127},
		{128: 628},
		{132: 629, 136: 630},
		{138: 632},
		// 360
		{138: 631},
		{14: 121, 121, 27: 121, 29: 121},
		{14: 122, 122, 27: 122, 29: 122},
		{14: 119, 119, 27: 119, 29: 119, 244: 634},
		{14: 132, 132, 27: 132, 29: 132},
		// 365
		{14: 135, 135, 29: 645, 231: 644},
		{14: 4, 4, 27: 641, 29: 4, 169: 640},
		{98: 638},
		{137: 639},
		{8: 5, 14: 5, 5, 21: 5, 5, 5, 5, 27: 5, 29: 5, 40: 5, 49: 5},
		// 370
		{14: 7, 7, 29: 7},
		{98: 642},
		{144: 643},
		{8: 3, 14: 3, 3, 21: 3, 3, 3, 3, 29: 3, 49: 3},
		{14: 149, 149},
		// 375
		{28: 292, 30: 291, 32: 290, 96: 646},
		{14: 134, 134},
		{28: 292, 30: 291, 32: 648},
		{261, 261, 261, 261, 261, 261, 261, 261, 261, 12: 261, 14: 261, 261, 21: 261, 261, 261, 261, 261, 27: 261, 29: 261, 31: 261, 33: 261, 261, 40: 261, 49: 261, 92: 261},
		{28: 292, 30: 291, 32: 290, 96: 650},
		// 380
		{8: 6, 21: 6, 6, 6, 6, 27: 637, 40: 654, 49: 6, 168: 653, 222: 651, 652},
		{8: 676, 21: 674, 675, 671, 672, 49: 677, 146: 668, 148: 667, 157: 670, 170: 669, 172: 673, 202: 665, 664, 237: 666},
		{8: 4, 21: 4, 4, 4, 4, 27: 641, 40: 660, 49: 4, 169: 659, 224: 658},
		{8: 11, 21: 11, 11, 11, 11, 27: 11, 40: 11, 49: 11},
		{27: 655},
		// 385
		{98: 656},
		{137: 657},
		{8: 10, 21: 10, 10, 10, 10, 27: 10, 40: 10, 49: 10},
		{8: 12, 21: 12, 12, 12, 12, 49: 12},
		{8: 9, 21: 9, 9, 9, 9, 49: 9},
		// 390
		{27: 661},
		{98: 662},
		{144: 663},
		{8: 8, 21: 8, 8, 8, 8, 49: 8},
		{14: 255, 255},
		// 395
		{8: 676, 14: 254, 254, 21: 674, 675, 671, 672, 146: 668, 148: 757, 157: 670, 170: 669, 172: 673},
		{14: 253, 253},
		{8: 252, 14: 252, 252, 21: 252, 252, 252, 252},
		{8: 250, 14: 250, 250, 21: 250, 250, 250, 250},
		{8: 249, 14: 249, 249, 21: 249, 249, 249, 249},
		// 400
		{8: 248, 14: 248, 248, 21: 248, 248, 248, 248},
		{25: 749},
		{25: 722},
		{8: 184, 14: 184, 184, 21: 184, 184, 184, 184},
		{28: 292, 30: 291, 32: 306, 50: 709},
		// 405
		{143: 704},
		{21: 685, 25: 686, 127: 684, 143: 683, 151: 682},
		{21: 678},
		{28: 292, 30: 291, 32: 306, 50: 679},
		{60: 680},
		// 410
		{28: 292, 30: 291, 32: 306, 50: 681},
		{14: 150, 150},
		{8: 160, 14: 160, 160, 21: 160, 160, 160, 160, 48: 160, 51: 699, 700, 115: 698, 158: 697, 696},
		{127: 694},
		{181: 690},
		// 415
		{28: 292, 30: 291, 32: 306, 50: 689},
		{28: 292, 30: 291, 32: 306, 50: 577, 150: 687},
		{688, 579},
		{8: 161, 14: 161, 161, 21: 161, 161, 161, 161, 48: 161, 51: 161, 161, 161},
		{8: 162, 14: 162, 162, 21: 162, 162, 162, 162, 48: 162, 51: 162, 162, 162},
		// 420
		{8: 152, 14: 152, 152, 21: 152, 152, 152, 152, 48: 692, 114: 691},
		{8: 163, 14: 163, 163, 21: 163, 163, 163, 163},
		{26: 693},
		{8: 151, 14: 151, 151, 21: 151, 151, 151, 151},
		{8: 152, 14: 152, 152, 21: 152, 152, 152, 152, 48: 692, 114: 695},
		// 425
		{8: 164, 14: 164, 164, 21: 164, 164, 164, 164},
		{8: 152, 14: 152, 152, 21: 152, 152, 152, 152, 48: 692, 114: 703},
		{8: 159, 14: 159, 159, 21: 159, 159, 159, 159, 48: 159, 51: 699, 700, 159, 115: 702},
		{8: 158, 14: 158, 158, 21: 158, 158, 158, 158, 48: 158, 51: 158, 158, 158},
		{180: 701},
		// 430
		{8: 155, 14: 155, 155, 21: 155, 155, 155, 155, 48: 155, 51: 155, 155, 155},
		{8: 156, 14: 156, 156, 21: 156, 156, 156, 156, 48: 156, 51: 156, 156, 156},
		{8: 157, 14: 157, 157, 21: 157, 157, 157, 157, 48: 157, 51: 157, 157, 157},
		{8: 165, 14: 165, 165, 21: 165, 165, 165, 165},
		{21: 685, 25: 686, 151: 705},
		// 435
		{8: 160, 14: 160, 160, 21: 160, 160, 160, 160, 51: 699, 700, 160, 115: 698, 158: 697, 706},
		{8: 154, 14: 154, 154, 21: 154, 154, 154, 154, 53: 708, 211: 707},
		{8: 166, 14: 166, 166, 21: 166, 166, 166, 166},
		{8: 153, 14: 153, 153, 21: 153, 153, 153, 153},
		{3: 711, 93: 710},
		// 440
		{124: 718},
		{93: 712},
		{124: 713},
		{122: 714},
		{134: 715},
		// 445
		{8: 168, 14: 168, 168, 21: 168, 168, 168, 168, 133: 717, 167: 716},
		{8: 169, 14: 169, 169, 21: 169, 169, 169, 169},
		{8: 167, 14: 167, 167, 21: 167, 167, 167, 167},
		{122: 719},
		{134: 720},
		// 450
		{8: 168, 14: 168, 168, 21: 168, 168, 168, 168, 133: 717, 167: 721},
		{8: 170, 14: 170, 170, 21: 170, 170, 170, 170},
		{28: 292, 30: 291, 32: 306, 50: 727, 171: 725, 173: 728, 726, 225: 723, 724},
		{745, 746},
		{741, 742},
		// 455
		{183, 183},
		{181, 181},
		{17: 484, 485, 55: 324, 61: 343, 333, 341, 340, 331, 330, 337, 338, 334, 348, 347, 352, 329, 350, 349, 336, 332, 345, 326, 339, 328, 346, 327, 353, 351, 335, 342, 344, 325, 107: 317, 318, 112: 729, 321, 116: 730, 322, 320, 319, 316, 323},
		{173, 173},
		{240, 240, 240, 240, 240, 240, 240, 240, 240, 11: 240, 240, 240, 16: 240, 20: 478, 109: 477, 149: 731},
		// 460
		{171, 171},
		{231, 231, 231, 231, 231, 231, 231, 231, 733, 11: 231, 489, 231, 16: 490, 155: 487, 734, 163: 488, 210: 732},
		{203, 203, 203, 203, 203, 203, 203, 203, 11: 541, 13: 737, 161: 738, 213: 736},
		{91: 735},
		{178, 178, 178, 178, 178, 178, 178, 178, 11: 178, 13: 178},
		// 465
		{179, 179, 179, 179, 179, 179, 179, 179, 11: 179, 13: 179},
		{175, 175, 42, 42, 42, 42, 42, 560, 100: 611, 103: 559, 165: 739, 204: 740},
		{177, 177, 177, 177, 177, 177, 177, 177},
		{176, 176, 176, 176, 176, 176, 176, 176},
		{174, 174, 42, 42, 42, 42, 42, 560, 100: 611, 103: 610},
		// 470
		{180, 180},
		{8: 185, 14: 185, 185, 21: 185, 185, 185, 185},
		{28: 292, 30: 291, 32: 306, 50: 744, 173: 743},
		{172, 172},
		{17: 484, 485, 116: 730},
		// 475
		{8: 186, 14: 186, 186, 21: 186, 186, 186, 186},
		{28: 292, 30: 291, 32: 306, 50: 748, 171: 747, 174: 726},
		{182, 182},
		{55: 324, 61: 343, 333, 341, 340, 331, 330, 337, 338, 334, 348, 347, 352, 329, 350, 349, 336, 332, 345, 326, 339, 328, 346, 327, 353, 351, 335, 342, 344, 325, 107: 317, 318, 112: 729, 321, 117: 322, 320, 319, 316, 323},
		{28: 292, 30: 291, 32: 306, 50: 308, 99: 751, 104: 307, 206: 750},
		// 480
		{752, 753},
		{244, 244},
		{8: 246, 14: 246, 246, 21: 246, 246, 246, 246, 208: 755},
		{28: 292, 30: 291, 32: 306, 50: 308, 99: 754, 104: 307},
		{243, 243},
		// 485
		{8: 245, 14: 245, 245, 21: 245, 245, 245, 245, 230: 756},
		{8: 247, 14: 247, 247, 21: 247, 247, 247, 247},
		{8: 251, 14: 251, 251, 21: 251, 251, 251, 251},
		{14: 263, 263, 123: 277, 129: 278, 147: 275, 154: 276, 160: 274, 177: 759},
		{14: 267, 267},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 249

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			if yyS[yypt-0].node != nil {
				stmt := yyS[yypt-0].node
				stmt.SetText(nextQuery(yylex))
				yylex.(*yyLexImpl).result = append(yylex.(*yyLexImpl).result, stmt)
			}
		}
	case 3:
		{
			if yyS[yypt-0].node != nil {
				stmt := yyS[yypt-0].node
				stmt.SetText(nextQuery(yylex))
				yylex.(*yyLexImpl).result = append(yylex.(*yyLexImpl).result, stmt)
			}
		}
	case 6:
		{
			yyVAL.node = &ast.CreateTableStmt{}
		}
	case 7:
		{
			yyVAL.node = nil
		}
	case 8:
		{
			yyVAL.anything = &ast.TableName{
				Table: yyS[yypt-0].anything.(*element.Identifier),
			}
		}
	case 9:
		{
			yyVAL.anything = &ast.TableName{
				Schema: yyS[yypt-2].anything.(*element.Identifier),
				Table:  yyS[yypt-0].anything.(*element.Identifier),
			}
		}
	case 12:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 13:
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeNonQuoted,
				Value: yyS[yypt-0].str,
			}
		}
	case 14:
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeQuoted,
				Value: yyS[yypt-0].str,
			}
		}
	case 15:
		{
			yyVAL.node = &ast.AlterTableStmt{
				TableName:     yyS[yypt-2].anything.(*ast.TableName),
				ColumnClauses: yyS[yypt-0].anything.([]ast.ColumnClause),
			}
		}
	case 16:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 17:
		{
			yyVAL.anything = []ast.ColumnClause{&ast.RenameColumnClause{}}
		}
	case 18:
		{
			yyVAL.anything = []ast.ColumnClause{yyS[yypt-0].anything.(ast.ColumnClause)}
		}
	case 19:
		{
			yyVAL.anything = append(yyS[yypt-1].anything.([]ast.ColumnClause), yyS[yypt-0].anything.(ast.ColumnClause))
		}
	case 20:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 21:
		{
			yyVAL.anything = &ast.ModifyColumnClause{}
		}
	case 22:
		{
			yyVAL.anything = &ast.DropColumnClause{}
		}
	case 23:
		{
			yyVAL.anything = &ast.AddColumnClause{
				Columns: yyS[yypt-3].anything.([]*ast.ColumnDef),
			}
		}
	case 24:
		{
			// TODO
		}
	case 25:
		{
			// TODO
		}
	case 26:
		{
			yyVAL.anything = []*ast.ColumnDef{yyS[yypt-0].anything.(*ast.ColumnDef)}
		}
	case 27:
		{
			yyVAL.anything = append(yyS[yypt-2].anything.([]*ast.ColumnDef), yyS[yypt-0].anything.(*ast.ColumnDef))
		}
	case 28:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 29:
		{
			var collation *ast.Collation
			if yyS[yypt-5].anything != nil {
				collation = yyS[yypt-5].anything.(*ast.Collation)
			}
			var invisible *ast.InvisibleProp
			if yyS[yypt-3].anything != nil {
				invisible = yyS[yypt-3].anything.(*ast.InvisibleProp)
			}

			yyVAL.anything = &ast.ColumnDef{
				ColumnName:    yyS[yypt-7].anything.(*element.Identifier),
				Datatype:      yyS[yypt-6].anything.(element.Datatype),
				Collation:     collation,
				Sort:          ast.SortProp(yyS[yypt-4].b),
				InvisibleProp: invisible,
			}
		}
	case 30:
		{
			yyVAL.anything = nil
		}
	case 31:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 32:
		{
			yyVAL.anything = &ast.Collation{Name: yyS[yypt-0].anything.(*element.Identifier)}
		}
	case 33:
		{
			yyVAL.b = false
		}
	case 34:
		{
			yyVAL.b = true
		}
	case 35:
		{
			yyVAL.anything = nil
		}
	case 36:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 37:
		{
			yyVAL.anything = &ast.InvisibleProp{Type: ast.InvisiblePropInvisible}
		}
	case 38:
		{
			yyVAL.anything = &ast.InvisibleProp{Type: ast.InvisiblePropVisible}
		}
	case 39:
		{
			// empty
		}
	case 49:
		{
			// empty
		}
	case 51:
		{
			// empty
		}
	case 67:
		{
			// empty
		}
	case 70:
		{
			// empty
		}
	case 72:
		{
			// empty
		}
	case 74:
		{
			// empty
		}
	case 76:
		{
			// empty
		}
	case 79:
		{
			// empty
		}
	case 84:
		{
			yyVAL.anything = nil
		}
	case 85:
		{
			yyVAL.anything = nil
		}
	case 86:
		{
			yyVAL.anything = nil
		}
	case 95:
		{
			// empty
		}
	case 102:
		{
			// empty
		}
	case 104:
		{
			yyVAL.anything = nil
		}
	case 105:
		{
			yyVAL.anything = nil
		}
	case 106:
		{
			yyVAL.anything = nil
		}
	case 107:
		{
			yyVAL.anything = nil
		}
	case 110:
		{
			// empty
		}
	case 116:
		{
			// empty
		}
	case 118:
		{
			// empty
		}
	case 120:
		{
			yyVAL.anything = nil
		}
	case 121:
		{
			yyVAL.node = nil
		}
	case 122:
		{
			// empty
		}
	case 130:
		{
			// empty
		}
	case 135:
		{
			// empty
		}
	case 141:
		{
			yyVAL.anything = nil
		}
	case 142:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 144:
		{
			// empty
		}
	case 147:
		{
			// empty
		}
	case 152:
		{
			// empty
		}
	case 157:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 158:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 159:
		{
			yyVAL.anything = &element.NumberOrAsterisk{Number: yyS[yypt-0].i}
		}
	case 160:
		{
			yyVAL.anything = &element.NumberOrAsterisk{IsAsterisk: true}
		}
	case 161:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 162:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 163:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 164:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 165:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 166:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 167:
		{
			d := &element.Char{}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 168:
		{
			size := yyS[yypt-1].i
			d := &element.Char{Size: &size}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 169:
		{
			size := yyS[yypt-2].i
			d := &element.Char{Size: &size, IsByteSize: true}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 170:
		{
			size := yyS[yypt-2].i
			d := &element.Char{Size: &size, IsCharSize: true}
			d.SetDataDef(element.DataDefChar)
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 171:
		{
			size := yyS[yypt-1].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 172:
		{
			size := yyS[yypt-2].i
			d := &element.Varchar2{}
			d.Size = &size
			d.IsByteSize = true
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 173:
		{
			size := yyS[yypt-2].i
			d := &element.Varchar2{}
			d.Size = &size
			d.IsCharSize = true
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 174:
		{
			d := &element.NChar{}
			d.SetDataDef(element.DataDefNChar)
			yyVAL.anything = d
		}
	case 175:
		{
			size := yyS[yypt-1].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNChar)
			yyVAL.anything = d
		}
	case 176:
		{
			size := yyS[yypt-1].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNVarChar2)
			yyVAL.anything = d
		}
	case 177:
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 178:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 179:
		{
			precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
			scale := yyS[yypt-1].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 180:
		{
			d := &element.Float{}
			d.SetDataDef(element.DataDefFloat)
			yyVAL.anything = d
		}
	case 181:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefFloat)
			yyVAL.anything = d
		}
	case 182:
		{
			d := &element.BinaryFloat{}
			d.SetDataDef(element.DataDefBinaryFloat)
			yyVAL.anything = d
		}
	case 183:
		{
			d := &element.BinaryDouble{}
			d.SetDataDef(element.DataDefBinaryDouble)
			yyVAL.anything = d
		}
	case 184:
		{
			d := &element.Long{}
			d.SetDataDef(element.DataDefLong)
			yyVAL.anything = d
		}
	case 185:
		{
			d := &element.LongRaw{}
			d.SetDataDef(element.DataDefLongRaw)
			yyVAL.anything = d
		}
	case 186:
		{
			size := yyS[yypt-1].i
			d := &element.Raw{Size: &size}
			d.SetDataDef(element.DataDefRaw)
			yyVAL.anything = d
		}
	case 187:
		{
			d := &element.Date{}
			d.SetDataDef(element.DataDefDate)
			yyVAL.anything = d
		}
	case 188:
		{
			d := &element.Timestamp{}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 189:
		{
			precision := yyS[yypt-1].i
			d := &element.Timestamp{FractionalSecondsPrecision: &precision}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 190:
		{
			precision := yyS[yypt-4].i
			d := &element.Timestamp{FractionalSecondsPrecision: &precision, WithTimeZone: true}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 191:
		{
			precision := yyS[yypt-5].i
			d := &element.Timestamp{FractionalSecondsPrecision: &precision, WithLocalTimeZone: true}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 192:
		{
			d := &element.IntervalYear{}
			d.SetDataDef(element.DataDefIntervalYear)
			yyVAL.anything = d
		}
	case 193:
		{
			precision := yyS[yypt-3].i
			d := &element.IntervalYear{Precision: &precision}
			d.SetDataDef(element.DataDefIntervalYear)
			yyVAL.anything = d
		}
	case 194:
		{
			d := &element.IntervalDay{}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 195:
		{
			precision := yyS[yypt-3].i
			d := &element.IntervalDay{Precision: &precision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 196:
		{
			precision := yyS[yypt-6].i
			sPrecision := yyS[yypt-1].i
			d := &element.IntervalDay{Precision: &precision, FractionalSecondsPrecision: &sPrecision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 197:
		{
			sPrecision := yyS[yypt-1].i
			d := &element.IntervalDay{FractionalSecondsPrecision: &sPrecision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 198:
		{
			d := &element.Blob{}
			d.SetDataDef(element.DataDefBlob)
			yyVAL.anything = d
		}
	case 199:
		{
			d := &element.Clob{}
			d.SetDataDef(element.DataDefClob)
			yyVAL.anything = d
		}
	case 200:
		{
			d := &element.NClob{}
			d.SetDataDef(element.DataDefNClob)
			yyVAL.anything = d
		}
	case 201:
		{
			d := &element.BFile{}
			d.SetDataDef(element.DataDefBFile)
			yyVAL.anything = d
		}
	case 202:
		{
			d := &element.RowId{}
			d.SetDataDef(element.DataDefRowId)
			yyVAL.anything = d
		}
	case 203:
		{
			d := &element.URowId{}
			d.SetDataDef(element.DataDefURowId)
			yyVAL.anything = d
		}
	case 204:
		{
			size := yyS[yypt-1].i
			d := &element.URowId{Size: &size}
			d.SetDataDef(element.DataDefURowId)
			yyVAL.anything = d
		}
	case 205:
		{
			d := &element.Char{}
			d.SetDataDef(element.DataDefCharacter)
			yyVAL.anything = d
		}
	case 206:
		{
			size := yyS[yypt-1].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharacterVarying)
			yyVAL.anything = d
		}
	case 207:
		{
			size := yyS[yypt-1].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharVarying)
			yyVAL.anything = d
		}
	case 208:
		{
			size := yyS[yypt-1].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNCharVarying)
			yyVAL.anything = d
		}
	case 209:
		{
			size := yyS[yypt-1].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefVarchar)
			yyVAL.anything = d
		}
	case 210:
		{
			size := yyS[yypt-1].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNationalCharacter)
			yyVAL.anything = d
		}
	case 211:
		{
			size := yyS[yypt-1].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNationalCharacterVarying)
			yyVAL.anything = d
		}
	case 212:
		{
			size := yyS[yypt-1].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNationalChar)
			yyVAL.anything = d
		}
	case 213:
		{
			size := yyS[yypt-1].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNationalCharVarying)
			yyVAL.anything = d
		}
	case 214:
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 215:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 216:
		{
			precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
			scale := yyS[yypt-1].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 217:
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 218:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 219:
		{
			precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
			scale := yyS[yypt-1].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 220:
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 221:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 222:
		{
			precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
			scale := yyS[yypt-1].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 223:
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefInteger)
			yyVAL.anything = d
		}
	case 224:
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefInt)
			yyVAL.anything = d
		}
	case 225:
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefSmallInt)
			yyVAL.anything = d
		}
	case 226:
		{
			precision := &element.NumberOrAsterisk{Number: 126}
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefDoublePrecision)
			yyVAL.anything = d
		}
	case 227:
		{
			precision := &element.NumberOrAsterisk{Number: 63}
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefReal)
			yyVAL.anything = d
		}
	case 228:
		{
			// empty
		}
	case 237:
		{
			// empty
		}
	case 239:
		{
			// empty
		}
	case 242:
		{
			// empty
		}
	case 252:
		{
			// empty
		}
	case 264:
		{
			// empty
		}
	case 266:
		{
			// empty
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

// Code generated by goyacc - DO NOT EDIT.

package oralce_sql_parser

import __yyfmt__ "fmt"

import (
	"github.com/sjjian/oralce_sql_parser/ast"
	"github.com/sjjian/oralce_sql_parser/ast/datatype"
)

type yySymType struct {
	yys      int
	nothing  struct{}
	i        int
	str      string
	node     ast.Node
	anything interface{}
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault            = 57397
	yyEofCode            = 57344
	_add                 = 57350
	_alter               = 57348
	_bfile               = 57377
	_binaryDouble        = 57359
	_binaryFloat         = 57358
	_blob                = 57374
	_byte                = 57352
	_char                = 57351
	_character           = 57380
	_clob                = 57375
	_date                = 57362
	_day                 = 57372
	_dec                 = 57386
	_decimal             = 57385
	_double              = 57390
	_doubleQuoteStr      = 57395
	_float               = 57357
	_from                = 57347
	_int                 = 57388
	_intNumber           = 57393
	_interger            = 57387
	_interval            = 57368
	_local               = 57365
	_long                = 57360
	_mouth               = 57371
	_national            = 57383
	_nchar               = 57354
	_nclob               = 57376
	_nonquotedIdentifier = 57396
	_number              = 57356
	_numeric             = 57384
	_nvarchar2           = 57355
	_precision           = 57391
	_raw                 = 57361
	_real                = 57392
	_rowid               = 57378
	_second              = 57373
	_select              = 57346
	_singleQuoteStr      = 57394
	_smallInt            = 57389
	_table               = 57349
	_time                = 57366
	_timestamp           = 57363
	_to                  = 57370
	_urowid              = 57379
	_varchar             = 57382
	_varchar2            = 57353
	_varying             = 57381
	_with                = 57364
	_year                = 57369
	_zone                = 57367
	yyErrCode            = 57345

	yyMaxDepth = 200
	yyTabOfs   = -101
)

var (
	yyPrec = map[int]int{}

	yyXLAT = map[int]int{
		41:    0,  // ')' (111x)
		44:    1,  // ',' (79x)
		57393: 2,  // _intNumber (29x)
		40:    3,  // '(' (26x)
		57344: 4,  // $end (21x)
		57350: 5,  // _add (16x)
		57351: 6,  // _char (7x)
		46:    7,  // '.' (6x)
		57380: 8,  // _character (5x)
		57361: 9,  // _raw (5x)
		57381: 10, // _varying (5x)
		57377: 11, // _bfile (4x)
		57359: 12, // _binaryDouble (4x)
		57358: 13, // _binaryFloat (4x)
		57374: 14, // _blob (4x)
		57375: 15, // _clob (4x)
		57362: 16, // _date (4x)
		57386: 17, // _dec (4x)
		57385: 18, // _decimal (4x)
		57390: 19, // _double (4x)
		57395: 20, // _doubleQuoteStr (4x)
		57357: 21, // _float (4x)
		57388: 22, // _int (4x)
		57387: 23, // _interger (4x)
		57368: 24, // _interval (4x)
		57360: 25, // _long (4x)
		57383: 26, // _national (4x)
		57354: 27, // _nchar (4x)
		57376: 28, // _nclob (4x)
		57396: 29, // _nonquotedIdentifier (4x)
		57356: 30, // _number (4x)
		57384: 31, // _numeric (4x)
		57355: 32, // _nvarchar2 (4x)
		57392: 33, // _real (4x)
		57378: 34, // _rowid (4x)
		57389: 35, // _smallInt (4x)
		57363: 36, // _timestamp (4x)
		57370: 37, // _to (4x)
		57379: 38, // _urowid (4x)
		57382: 39, // _varchar (4x)
		57353: 40, // _varchar2 (4x)
		57414: 41, // Identifier (4x)
		57352: 42, // _byte (2x)
		57371: 43, // _mouth (2x)
		57373: 44, // _second (2x)
		57366: 45, // _time (2x)
		57367: 46, // _zone (2x)
		57398: 47, // AddColumnClause (2x)
		57401: 48, // ChangeColumnClause (2x)
		57406: 49, // ColumnDefinition (2x)
		57408: 50, // ColumnName (2x)
		57413: 51, // DropColumnClause (2x)
		57420: 52, // ModidyColumnClause (2x)
		57424: 53, // RealColumnDefinition (2x)
		57348: 54, // _alter (1x)
		57372: 55, // _day (1x)
		57365: 56, // _local (1x)
		57391: 57, // _precision (1x)
		57349: 58, // _table (1x)
		57364: 59, // _with (1x)
		57369: 60, // _year (1x)
		57399: 61, // AlterTableStmt (1x)
		57400: 62, // AnsiSupportDataTypes (1x)
		57402: 63, // ChangeColumnClauseList (1x)
		57403: 64, // CharacterDataTypes (1x)
		57404: 65, // CollateClause (1x)
		57405: 66, // ColumnClauses (1x)
		57407: 67, // ColumnDefinitionList (1x)
		57409: 68, // ColumnProperties (1x)
		57410: 69, // Datatype (1x)
		57411: 70, // DatetimeDataTypes (1x)
		57412: 71, // DefaultProperties (1x)
		57415: 72, // InvisibleProperty (1x)
		57416: 73, // LargeObjectDataTypes (1x)
		57417: 74, // LongAndRawDataTypes (1x)
		57418: 75, // MemoptimizeReadClause (1x)
		57419: 76, // MemoptimizeWriteClause (1x)
		57421: 77, // NumberDataTypes (1x)
		57422: 78, // OralceBuiltInDataTypes (1x)
		57423: 79, // OutOfLinePartStorageList (1x)
		57425: 80, // RenameColumnClause (1x)
		57426: 81, // RowIdDataTypes (1x)
		57427: 82, // SortProperty (1x)
		57428: 83, // Start (1x)
		57429: 84, // Statement (1x)
		57430: 85, // TableName (1x)
		57397: 86, // $default (0x)
		57347: 87, // _from (0x)
		57346: 88, // _select (0x)
		57394: 89, // _singleQuoteStr (0x)
		57345: 90, // error (0x)
	}

	yySymNames = []string{
		"')'",
		"','",
		"_intNumber",
		"'('",
		"$end",
		"_add",
		"_char",
		"'.'",
		"_character",
		"_raw",
		"_varying",
		"_bfile",
		"_binaryDouble",
		"_binaryFloat",
		"_blob",
		"_clob",
		"_date",
		"_dec",
		"_decimal",
		"_double",
		"_doubleQuoteStr",
		"_float",
		"_int",
		"_interger",
		"_interval",
		"_long",
		"_national",
		"_nchar",
		"_nclob",
		"_nonquotedIdentifier",
		"_number",
		"_numeric",
		"_nvarchar2",
		"_real",
		"_rowid",
		"_smallInt",
		"_timestamp",
		"_to",
		"_urowid",
		"_varchar",
		"_varchar2",
		"Identifier",
		"_byte",
		"_mouth",
		"_second",
		"_time",
		"_zone",
		"AddColumnClause",
		"ChangeColumnClause",
		"ColumnDefinition",
		"ColumnName",
		"DropColumnClause",
		"ModidyColumnClause",
		"RealColumnDefinition",
		"_alter",
		"_day",
		"_local",
		"_precision",
		"_table",
		"_with",
		"_year",
		"AlterTableStmt",
		"AnsiSupportDataTypes",
		"ChangeColumnClauseList",
		"CharacterDataTypes",
		"CollateClause",
		"ColumnClauses",
		"ColumnDefinitionList",
		"ColumnProperties",
		"Datatype",
		"DatetimeDataTypes",
		"DefaultProperties",
		"InvisibleProperty",
		"LargeObjectDataTypes",
		"LongAndRawDataTypes",
		"MemoptimizeReadClause",
		"MemoptimizeWriteClause",
		"NumberDataTypes",
		"OralceBuiltInDataTypes",
		"OutOfLinePartStorageList",
		"RenameColumnClause",
		"RowIdDataTypes",
		"SortProperty",
		"Start",
		"Statement",
		"TableName",
		"$default",
		"_from",
		"_select",
		"_singleQuoteStr",
		"error",
	}

	yyTokenLiteralStrings = map[int]string{
		57393: "int number",
		57395: "double quotes string",
		57396: "nonquoted identifier",
		57394: "single quotes string",
	}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {83, 1},
		2:   {84, 1},
		3:   {61, 6},
		4:   {85, 1},
		5:   {85, 3},
		6:   {41, 1},
		7:   {41, 1},
		8:   {75, 0},
		9:   {76, 0},
		10:  {66, 1},
		11:  {66, 1},
		12:  {63, 1},
		13:  {63, 2},
		14:  {48, 1},
		15:  {48, 1},
		16:  {48, 1},
		17:  {47, 6},
		18:  {68, 0},
		19:  {79, 0},
		20:  {52, 0},
		21:  {51, 0},
		22:  {80, 0},
		23:  {67, 1},
		24:  {67, 3},
		25:  {49, 1},
		26:  {53, 6},
		27:  {50, 1},
		28:  {65, 0},
		29:  {82, 0},
		30:  {72, 0},
		31:  {71, 0},
		32:  {69, 1},
		33:  {69, 1},
		34:  {78, 1},
		35:  {78, 1},
		36:  {78, 1},
		37:  {78, 1},
		38:  {78, 1},
		39:  {78, 1},
		40:  {64, 1},
		41:  {64, 4},
		42:  {64, 5},
		43:  {64, 5},
		44:  {64, 4},
		45:  {64, 5},
		46:  {64, 5},
		47:  {64, 1},
		48:  {64, 4},
		49:  {64, 4},
		50:  {77, 1},
		51:  {77, 4},
		52:  {77, 6},
		53:  {77, 1},
		54:  {77, 4},
		55:  {77, 1},
		56:  {77, 1},
		57:  {74, 1},
		58:  {74, 2},
		59:  {74, 4},
		60:  {70, 1},
		61:  {70, 1},
		62:  {70, 4},
		63:  {70, 7},
		64:  {70, 8},
		65:  {70, 4},
		66:  {70, 7},
		67:  {70, 4},
		68:  {70, 7},
		69:  {70, 10},
		70:  {70, 7},
		71:  {73, 1},
		72:  {73, 1},
		73:  {73, 1},
		74:  {73, 1},
		75:  {81, 1},
		76:  {81, 1},
		77:  {81, 4},
		78:  {62, 4},
		79:  {62, 5},
		80:  {62, 5},
		81:  {62, 5},
		82:  {62, 4},
		83:  {62, 5},
		84:  {62, 6},
		85:  {62, 5},
		86:  {62, 6},
		87:  {62, 1},
		88:  {62, 4},
		89:  {62, 6},
		90:  {62, 1},
		91:  {62, 4},
		92:  {62, 6},
		93:  {62, 1},
		94:  {62, 4},
		95:  {62, 6},
		96:  {62, 1},
		97:  {62, 1},
		98:  {62, 1},
		99:  {62, 2},
		100: {62, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [197][]uint16{
		// 0
		{54: 105, 61: 104, 83: 102, 103},
		{4: 101},
		{4: 100},
		{4: 99},
		{58: 106},
		// 5
		{20: 110, 29: 109, 41: 108, 85: 107},
		{4: 93, 93, 75: 113},
		{4: 97, 97, 7: 111},
		{4: 95, 95, 95, 95, 95, 95, 11: 95, 95, 95, 95, 95, 95, 95, 95, 95, 21: 95, 95, 95, 95, 95, 95, 95, 95, 30: 95, 95, 95, 95, 95, 95, 95, 38: 95, 95, 95},
		{4: 94, 94, 94, 94, 94, 94, 11: 94, 94, 94, 94, 94, 94, 94, 94, 94, 21: 94, 94, 94, 94, 94, 94, 94, 94, 30: 94, 94, 94, 94, 94, 94, 94, 38: 94, 94, 94},
		// 10
		{20: 110, 29: 109, 41: 112},
		{4: 96, 96},
		{4: 92, 92, 76: 114},
		{4: 81, 122, 47: 119, 118, 51: 121, 120, 63: 116, 66: 115, 80: 117},
		{4: 98},
		// 15
		{4: 91, 122, 47: 119, 297, 51: 121, 120},
		{4: 90},
		{4: 89, 89},
		{4: 87, 87},
		{4: 86, 86},
		// 20
		{4: 85, 85},
		{3: 123},
		{20: 110, 29: 109, 41: 128, 49: 125, 127, 53: 126, 67: 124},
		{292, 293},
		{78, 78},
		// 25
		{76, 76},
		{6: 138, 8: 157, 147, 11: 154, 145, 144, 151, 152, 148, 162, 161, 166, 21: 143, 164, 163, 150, 146, 159, 140, 153, 30: 142, 160, 141, 167, 155, 165, 149, 38: 156, 158, 139, 62: 131, 64: 132, 69: 129, 135, 73: 136, 134, 77: 133, 130, 81: 137},
		{6: 74, 8: 74, 74, 11: 74, 74, 74, 74, 74, 74, 74, 74, 74, 21: 74, 74, 74, 74, 74, 74, 74, 74, 30: 74, 74, 74, 74, 74, 74, 74, 38: 74, 74, 74},
		{73, 73, 65: 288},
		{69, 69},
		// 30
		{68, 68},
		{67, 67},
		{66, 66},
		{65, 65},
		{64, 64},
		// 35
		{63, 63},
		{62, 62},
		{61, 61, 3: 277, 10: 278},
		{3: 270},
		{54, 54, 3: 263, 10: 264},
		// 40
		{3: 260},
		{51, 51, 3: 254},
		{48, 48, 3: 251},
		{46, 46},
		{45, 45},
		// 45
		{44, 44, 9: 250},
		{3: 247},
		{41, 41},
		{40, 40, 3: 238},
		{55: 217, 60: 216},
		// 50
		{30, 30},
		{29, 29},
		{28, 28},
		{27, 27},
		{26, 26},
		// 55
		{25, 25, 3: 213},
		{3: 206, 10: 207},
		{3: 203},
		{6: 188, 8: 187},
		{14, 14, 3: 181},
		// 60
		{11, 11, 3: 175},
		{8, 8, 3: 169},
		{5, 5},
		{4, 4},
		{3, 3},
		// 65
		{57: 168},
		{1, 1},
		{2, 2},
		{2: 170},
		{171, 7: 172},
		// 70
		{7, 7},
		{2: 173},
		{174},
		{6, 6},
		{2: 176},
		// 75
		{177, 7: 178},
		{10, 10},
		{2: 179},
		{180},
		{9, 9},
		// 80
		{2: 182},
		{183, 7: 184},
		{13, 13},
		{2: 185},
		{186},
		// 85
		{12, 12},
		{3: 196, 10: 197},
		{3: 189, 10: 190},
		{2: 194},
		{3: 191},
		// 90
		{2: 192},
		{193},
		{15, 15},
		{195},
		{16, 16},
		// 95
		{2: 201},
		{3: 198},
		{2: 199},
		{200},
		{17, 17},
		// 100
		{202},
		{18, 18},
		{2: 204},
		{205},
		{19, 19},
		// 105
		{2: 211},
		{3: 208},
		{2: 209},
		{210},
		{22, 22},
		// 110
		{212},
		{23, 23},
		{2: 214},
		{215},
		{24, 24},
		// 115
		{3: 232, 37: 231},
		{3: 219, 37: 218},
		{44: 227},
		{2: 220},
		{221},
		// 120
		{37: 222},
		{44: 223},
		{33, 33, 3: 224},
		{2: 225},
		{226},
		// 125
		{32, 32},
		{34, 34, 3: 228},
		{2: 229},
		{230},
		{31, 31},
		// 130
		{43: 237},
		{2: 233},
		{234},
		{37: 235},
		{43: 236},
		// 135
		{35, 35},
		{36, 36},
		{2: 239},
		{240},
		{39, 39, 59: 241},
		// 140
		{45: 242, 56: 243},
		{46: 246},
		{45: 244},
		{46: 245},
		{37, 37},
		// 145
		{38, 38},
		{2: 248},
		{249},
		{42, 42},
		{43, 43},
		// 150
		{2: 252},
		{253},
		{47, 47},
		{2: 255},
		{256, 257},
		// 155
		{50, 50},
		{2: 258},
		{259},
		{49, 49},
		{2: 261},
		// 160
		{262},
		{52, 52},
		{2: 268},
		{3: 265},
		{2: 266},
		// 165
		{267},
		{20, 20},
		{269},
		{53, 53},
		{2: 271},
		// 170
		{272, 6: 274, 42: 273},
		{57, 57},
		{276},
		{275},
		{55, 55},
		// 175
		{56, 56},
		{2: 282},
		{3: 279},
		{2: 280},
		{281},
		// 180
		{21, 21},
		{283, 6: 285, 42: 284},
		{60, 60},
		{287},
		{286},
		// 185
		{58, 58},
		{59, 59},
		{72, 72, 82: 289},
		{71, 71, 72: 290},
		{70, 70, 71: 291},
		// 190
		{75, 75},
		{4: 83, 83, 68: 295},
		{20: 110, 29: 109, 41: 128, 49: 294, 127, 53: 126},
		{77, 77},
		{4: 82, 82, 79: 296},
		// 195
		{4: 84, 84},
		{4: 88, 88},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 90

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yylex.(*yyLexImpl).result = yyS[yypt-0].node
		}
	case 2:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 3:
		{
			yyVAL.node = &ast.AlterTableStmt{
				TableName:     yyS[yypt-3].anything.(*ast.TableName),
				ColumnClauses: yyS[yypt-0].anything.([]ast.ColumnClause),
			}
		}
	case 4:
		{
			yyVAL.anything = &ast.TableName{
				Table: yyS[yypt-0].anything.(*ast.Identifier),
			}
		}
	case 5:
		{
			yyVAL.anything = &ast.TableName{
				Schema: yyS[yypt-2].anything.(*ast.Identifier),
				Table:  yyS[yypt-0].anything.(*ast.Identifier),
			}
		}
	case 6:
		{
			yyVAL.anything = &ast.Identifier{
				Typ:   ast.IdentifierTypeNonQuoted,
				Value: yyS[yypt-0].str,
			}
		}
	case 7:
		{
			yyVAL.anything = &ast.Identifier{
				Typ:   ast.IdentifierTypeQuoted,
				Value: yyS[yypt-0].str,
			}
		}
	case 10:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 11:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 12:
		{
			yyVAL.anything = []ast.ColumnClause{yyS[yypt-0].anything.(ast.ColumnClause)}
		}
	case 13:
		{
			yyVAL.anything = append(yyS[yypt-1].anything.([]ast.ColumnClause), yyS[yypt-0].anything.(ast.ColumnClause))
		}
	case 14:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 15:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 16:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 17:
		{
			yyVAL.anything = &ast.AddColumnClause{
				Columns: yyS[yypt-3].anything.([]*ast.ColumnDefine),
			}
		}
	case 20:
		{
			// todo:
		}
	case 21:
		{
			// todo:
		}
	case 22:
		{
			// todo:
		}
	case 23:
		{
			yyVAL.anything = []*ast.ColumnDefine{yyS[yypt-0].anything.(*ast.ColumnDefine)}
		}
	case 24:
		{
			yyVAL.anything = append(yyS[yypt-2].anything.([]*ast.ColumnDefine), yyS[yypt-0].anything.(*ast.ColumnDefine))
		}
	case 25:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 26:
		{
			yyVAL.anything = &ast.ColumnDefine{
				ColumnName: yyS[yypt-5].anything.(*ast.Identifier),
				Datatype:   yyS[yypt-4].anything.(datatype.Datatype),
			}
		}
	case 27:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 32:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 33:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 34:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 35:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 36:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 37:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 38:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 39:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 40:
		{
			d := &datatype.Char{}
			d.SetDataDefine(datatype.DataDefineChar)
			yyVAL.anything = d
		}
	case 41:
		{
			size := yyS[yypt-1].i
			d := &datatype.Char{Size: &size}
			d.SetDataDefine(datatype.DataDefineChar)
			yyVAL.anything = d
		}
	case 42:
		{
			size := yyS[yypt-2].i
			d := &datatype.Char{Size: &size, IsByteSize: true}
			d.SetDataDefine(datatype.DataDefineChar)
			yyVAL.anything = d
		}
	case 43:
		{
			size := yyS[yypt-2].i
			d := &datatype.Char{Size: &size, IsCharSize: true}
			d.SetDataDefine(datatype.DataDefineChar)
			d.SetDataDefine(datatype.DataDefineChar)
			yyVAL.anything = d
		}
	case 44:
		{
			size := yyS[yypt-1].i
			d := &datatype.Varchar2{}
			d.Size = &size
			d.SetDataDefine(datatype.DataDefineVarchar2)
			yyVAL.anything = d
		}
	case 45:
		{
			size := yyS[yypt-2].i
			d := &datatype.Varchar2{}
			d.Size = &size
			d.IsByteSize = true
			d.SetDataDefine(datatype.DataDefineVarchar2)
			yyVAL.anything = d
		}
	case 46:
		{
			size := yyS[yypt-2].i
			d := &datatype.Varchar2{}
			d.Size = &size
			d.IsCharSize = true
			d.SetDataDefine(datatype.DataDefineVarchar2)
			yyVAL.anything = d
		}
	case 47:
		{
			d := &datatype.NChar{}
			d.SetDataDefine(datatype.DataDefineNChar)
			yyVAL.anything = d
		}
	case 48:
		{
			size := yyS[yypt-1].i
			d := &datatype.NChar{Size: &size}
			d.SetDataDefine(datatype.DataDefineNChar)
			yyVAL.anything = d
		}
	case 49:
		{
			size := yyS[yypt-1].i
			d := &datatype.NVarchar2{}
			d.Size = &size
			d.SetDataDefine(datatype.DataDefineNVarChar2)
			yyVAL.anything = d
		}
	case 50:
		{
			d := &datatype.Number{}
			d.SetDataDefine(datatype.DataDefineNumber)
			yyVAL.anything = d
		}
	case 51:
		{
			precision := yyS[yypt-1].i
			d := &datatype.Number{Precision: &precision}
			d.SetDataDefine(datatype.DataDefineNumber)
			yyVAL.anything = d
		}
	case 52:
		{
			precision := yyS[yypt-3].i
			scale := yyS[yypt-1].i
			d := &datatype.Number{Precision: &precision, Scale: &scale}
			d.SetDataDefine(datatype.DataDefineNumber)
			yyVAL.anything = d
		}
	case 53:
		{
			d := &datatype.Float{}
			d.SetDataDefine(datatype.DataDefineFloat)
			yyVAL.anything = d
		}
	case 54:
		{
			precision := yyS[yypt-1].i
			d := &datatype.Float{Precision: &precision}
			d.SetDataDefine(datatype.DataDefineFloat)
			yyVAL.anything = d
		}
	case 55:
		{
			d := &datatype.BinaryFloat{}
			d.SetDataDefine(datatype.DataDefineBinaryFloat)
			yyVAL.anything = d
		}
	case 56:
		{
			d := &datatype.BinaryDouble{}
			d.SetDataDefine(datatype.DataDefineBinaryDouble)
			yyVAL.anything = d
		}
	case 57:
		{
			d := &datatype.Long{}
			d.SetDataDefine(datatype.DataDefineLong)
			yyVAL.anything = d
		}
	case 58:
		{
			d := &datatype.LongRaw{}
			d.SetDataDefine(datatype.DataDefineLongRaw)
			yyVAL.anything = d
		}
	case 59:
		{
			size := yyS[yypt-1].i
			d := &datatype.Raw{Size: &size}
			d.SetDataDefine(datatype.DataDefineRaw)
			yyVAL.anything = d
		}
	case 60:
		{
			d := &datatype.Date{}
			d.SetDataDefine(datatype.DataDefineDate)
			yyVAL.anything = d
		}
	case 61:
		{
			d := &datatype.Timestamp{}
			d.SetDataDefine(datatype.DataDefineTimestamp)
			yyVAL.anything = d
		}
	case 62:
		{
			precision := yyS[yypt-1].i
			d := &datatype.Timestamp{FractionalSecondsPrecision: &precision}
			d.SetDataDefine(datatype.DataDefineTimestamp)
			yyVAL.anything = d
		}
	case 63:
		{
			precision := yyS[yypt-4].i
			d := &datatype.Timestamp{FractionalSecondsPrecision: &precision, WithTimeZone: true}
			d.SetDataDefine(datatype.DataDefineTimestamp)
			yyVAL.anything = d
		}
	case 64:
		{
			precision := yyS[yypt-5].i
			d := &datatype.Timestamp{FractionalSecondsPrecision: &precision, WithLocalTimeZone: true}
			d.SetDataDefine(datatype.DataDefineTimestamp)
			yyVAL.anything = d
		}
	case 65:
		{
			d := &datatype.IntervalYear{}
			d.SetDataDefine(datatype.DataDefineIntervalYear)
			yyVAL.anything = d
		}
	case 66:
		{
			precision := yyS[yypt-3].i
			d := &datatype.IntervalYear{Precision: &precision}
			d.SetDataDefine(datatype.DataDefineIntervalYear)
			yyVAL.anything = d
		}
	case 67:
		{
			d := &datatype.IntervalDay{}
			d.SetDataDefine(datatype.DataDefineIntervalDay)
			yyVAL.anything = d
		}
	case 68:
		{
			precision := yyS[yypt-3].i
			d := &datatype.IntervalDay{Precision: &precision}
			d.SetDataDefine(datatype.DataDefineIntervalDay)
			yyVAL.anything = d
		}
	case 69:
		{
			precision := yyS[yypt-6].i
			sPrecision := yyS[yypt-1].i
			d := &datatype.IntervalDay{Precision: &precision, FractionalSecondsPrecision: &sPrecision}
			d.SetDataDefine(datatype.DataDefineIntervalDay)
			yyVAL.anything = d
		}
	case 70:
		{
			sPrecision := yyS[yypt-1].i
			d := &datatype.IntervalDay{FractionalSecondsPrecision: &sPrecision}
			d.SetDataDefine(datatype.DataDefineIntervalDay)
			yyVAL.anything = d
		}
	case 71:
		{
			d := &datatype.Blob{}
			d.SetDataDefine(datatype.DataDefineBlob)
			yyVAL.anything = d
		}
	case 72:
		{
			d := &datatype.Clob{}
			d.SetDataDefine(datatype.DataDefineClob)
			yyVAL.anything = d
		}
	case 73:
		{
			d := &datatype.NClob{}
			d.SetDataDefine(datatype.DataDefineNClob)
			yyVAL.anything = d
		}
	case 74:
		{
			d := &datatype.BFile{}
			d.SetDataDefine(datatype.DataDefineBFile)
			yyVAL.anything = d
		}
	case 75:
		{
			d := &datatype.RowId{}
			d.SetDataDefine(datatype.DataDefineRowId)
			yyVAL.anything = d
		}
	case 76:
		{
			d := &datatype.URowId{}
			d.SetDataDefine(datatype.DataDefineURowId)
			yyVAL.anything = d
		}
	case 77:
		{
			size := yyS[yypt-1].i
			d := &datatype.URowId{Size: &size}
			d.SetDataDefine(datatype.DataDefineURowId)
			yyVAL.anything = d
		}
	case 78:
		{
			d := &datatype.Char{}
			d.SetDataDefine(datatype.DataDefineCharacter)
			yyVAL.anything = d
		}
	case 79:
		{
			size := yyS[yypt-1].i
			d := &datatype.Varchar2{}
			d.Size = &size
			d.SetDataDefine(datatype.DataDefineCharacterVarying)
			yyVAL.anything = d
		}
	case 80:
		{
			size := yyS[yypt-1].i
			d := &datatype.Varchar2{}
			d.Size = &size
			d.SetDataDefine(datatype.DataDefineCharVarying)
			yyVAL.anything = d
		}
	case 81:
		{
			size := yyS[yypt-1].i
			d := &datatype.NVarchar2{}
			d.Size = &size
			d.SetDataDefine(datatype.DataDefineNCharVarying)
			yyVAL.anything = d
		}
	case 82:
		{
			size := yyS[yypt-1].i
			d := &datatype.Varchar2{}
			d.Size = &size
			d.SetDataDefine(datatype.DataDefineVarchar)
			yyVAL.anything = d
		}
	case 83:
		{
			size := yyS[yypt-1].i
			d := &datatype.NChar{Size: &size}
			d.SetDataDefine(datatype.DataDefineNationalCharacter)
			yyVAL.anything = d
		}
	case 84:
		{
			size := yyS[yypt-1].i
			d := &datatype.NVarchar2{}
			d.Size = &size
			d.SetDataDefine(datatype.DataDefineNationalCharacterVarying)
			yyVAL.anything = d
		}
	case 85:
		{
			size := yyS[yypt-1].i
			d := &datatype.NChar{Size: &size}
			d.SetDataDefine(datatype.DataDefineNationalChar)
			yyVAL.anything = d
		}
	case 86:
		{
			size := yyS[yypt-1].i
			d := &datatype.NVarchar2{}
			d.Size = &size
			d.SetDataDefine(datatype.DataDefineNationalCharVarying)
			yyVAL.anything = d
		}
	case 87:
		{
			d := &datatype.Number{}
			d.SetDataDefine(datatype.DataDefineNumeric)
			yyVAL.anything = d
		}
	case 88:
		{
			precision := yyS[yypt-1].i
			d := &datatype.Number{Precision: &precision}
			d.SetDataDefine(datatype.DataDefineNumeric)
			yyVAL.anything = d
		}
	case 89:
		{
			precision := yyS[yypt-3].i
			scale := yyS[yypt-1].i
			d := &datatype.Number{Precision: &precision, Scale: &scale}
			d.SetDataDefine(datatype.DataDefineNumeric)
			yyVAL.anything = d
		}
	case 90:
		{
			d := &datatype.Number{}
			d.SetDataDefine(datatype.DataDefineDecimal)
			yyVAL.anything = d
		}
	case 91:
		{
			precision := yyS[yypt-1].i
			d := &datatype.Number{Precision: &precision}
			d.SetDataDefine(datatype.DataDefineDecimal)
			yyVAL.anything = d
		}
	case 92:
		{
			precision := yyS[yypt-3].i
			scale := yyS[yypt-1].i
			d := &datatype.Number{Precision: &precision, Scale: &scale}
			d.SetDataDefine(datatype.DataDefineDecimal)
			yyVAL.anything = d
		}
	case 93:
		{
			d := &datatype.Number{}
			d.SetDataDefine(datatype.DataDefineDec)
			yyVAL.anything = d
		}
	case 94:
		{
			precision := yyS[yypt-1].i
			d := &datatype.Number{Precision: &precision}
			d.SetDataDefine(datatype.DataDefineDec)
			yyVAL.anything = d
		}
	case 95:
		{
			precision := yyS[yypt-3].i
			scale := yyS[yypt-1].i
			d := &datatype.Number{Precision: &precision, Scale: &scale}
			d.SetDataDefine(datatype.DataDefineDec)
			yyVAL.anything = d
		}
	case 96:
		{
			precision := 38
			d := &datatype.Number{Precision: &precision}
			d.SetDataDefine(datatype.DataDefineInteger)
			yyVAL.anything = d
		}
	case 97:
		{
			precision := 38
			d := &datatype.Number{Precision: &precision}
			d.SetDataDefine(datatype.DataDefineInt)
			yyVAL.anything = d
		}
	case 98:
		{
			precision := 38
			d := &datatype.Number{Precision: &precision}
			d.SetDataDefine(datatype.DataDefineSmallInt)
			yyVAL.anything = d
		}
	case 99:
		{
			precision := 126
			d := &datatype.Float{Precision: &precision}
			d.SetDataDefine(datatype.DataDefineDoublePrecision)
			yyVAL.anything = d
		}
	case 100:
		{
			precision := 63
			d := &datatype.Float{Precision: &precision}
			d.SetDataDefine(datatype.DataDefineReal)
			yyVAL.anything = d
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

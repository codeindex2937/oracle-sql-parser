// Code generated by goyacc - DO NOT EDIT.

package oralce_sql_parser

import __yyfmt__ "fmt"

import (
	"github.com/sjjian/oralce_sql_parser/ast"
	"github.com/sjjian/oralce_sql_parser/ast/element"
)

type yySymType struct {
	yys      int
	nothing  struct{}
	i        int
	b        bool
	str      string
	node     ast.Node
	anything interface{}
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault            = 57445
	yyEofCode            = 57344
	_add                 = 57350
	_alter               = 57348
	_always              = 57423
	_as                  = 57424
	_bfile               = 57377
	_binaryDouble        = 57359
	_binaryFloat         = 57358
	_blob                = 57374
	_by                  = 57400
	_byte                = 57352
	_cache               = 57427
	_cascade             = 57410
	_char                = 57351
	_character           = 57380
	_clob                = 57375
	_collate             = 57393
	_constraint          = 57403
	_cycle               = 57428
	_date                = 57362
	_day                 = 57372
	_dec                 = 57386
	_decimal             = 57385
	_default             = 57422
	_deferrable          = 57414
	_deferred            = 57415
	_delete              = 57411
	_double              = 57390
	_doubleQuoteStr      = 57443
	_encrypt             = 57397
	_float               = 57357
	_from                = 57347
	_generated           = 57425
	_identified          = 57399
	_identity            = 57426
	_immediate           = 57416
	_increment           = 57429
	_initially           = 57417
	_int                 = 57388
	_intNumber           = 57441
	_interger            = 57387
	_interval            = 57368
	_invisible           = 57395
	_is                  = 57420
	_key                 = 57404
	_limit               = 57430
	_local               = 57365
	_long                = 57360
	_maxvalue            = 57431
	_minvalue            = 57432
	_mouth               = 57371
	_national            = 57383
	_nchar               = 57354
	_nclob               = 57376
	_no                  = 57401
	_nocache             = 57433
	_nocycle             = 57434
	_nomaxvalue          = 57435
	_nominvalue          = 57436
	_nonquotedIdentifier = 57444
	_noorder             = 57437
	_norely              = 57418
	_not                 = 57405
	_null                = 57406
	_number              = 57356
	_numeric             = 57384
	_nvarchar2           = 57355
	_on                  = 57412
	_order               = 57438
	_precision           = 57391
	_primary             = 57407
	_raw                 = 57361
	_real                = 57392
	_references          = 57409
	_rely                = 57419
	_rowid               = 57378
	_salt                = 57402
	_scope               = 57421
	_second              = 57373
	_select              = 57346
	_set                 = 57413
	_singleQuoteStr      = 57442
	_smallInt            = 57389
	_sort                = 57394
	_start               = 57439
	_table               = 57349
	_time                = 57366
	_timestamp           = 57363
	_to                  = 57370
	_unique              = 57408
	_urowid              = 57379
	_using               = 57398
	_value               = 57440
	_varchar             = 57382
	_varchar2            = 57353
	_varying             = 57381
	_visible             = 57396
	_with                = 57364
	_year                = 57369
	_zone                = 57367
	yyErrCode            = 57345

	yyMaxDepth = 200
	yyTabOfs   = -186
)

var (
	yyPrec = map[int]int{}

	yyXLAT = map[int]int{
		41:    0,   // ')' (206x)
		44:    1,   // ',' (157x)
		57406: 2,   // _null (148x)
		57405: 3,   // _not (144x)
		57407: 4,   // _primary (144x)
		57409: 5,   // _references (144x)
		57408: 6,   // _unique (144x)
		57403: 7,   // _constraint (141x)
		57364: 8,   // _with (108x)
		57421: 9,   // _scope (107x)
		57397: 10,  // _encrypt (95x)
		57422: 11,  // _default (80x)
		57425: 12,  // _generated (79x)
		57395: 13,  // _invisible (76x)
		57396: 14,  // _visible (76x)
		57394: 15,  // _sort (74x)
		57393: 16,  // _collate (70x)
		57441: 17,  // _intNumber (36x)
		40:    18,  // '(' (35x)
		57344: 19,  // $end (22x)
		57414: 20,  // _deferrable (21x)
		57417: 21,  // _initially (20x)
		59:    22,  // ';' (19x)
		57427: 23,  // _cache (17x)
		57428: 24,  // _cycle (17x)
		57429: 25,  // _increment (17x)
		57431: 26,  // _maxvalue (17x)
		57432: 27,  // _minvalue (17x)
		57433: 28,  // _nocache (17x)
		57434: 29,  // _nocycle (17x)
		57435: 30,  // _nomaxvalue (17x)
		57436: 31,  // _nominvalue (17x)
		57437: 32,  // _noorder (17x)
		57438: 33,  // _order (17x)
		57439: 34,  // _start (17x)
		57350: 35,  // _add (16x)
		57443: 36,  // _doubleQuoteStr (13x)
		57444: 37,  // _nonquotedIdentifier (11x)
		57477: 38,  // Identifier (11x)
		57401: 39,  // _no (10x)
		57402: 40,  // _salt (10x)
		46:    41,  // '.' (8x)
		57418: 42,  // _norely (8x)
		57412: 43,  // _on (8x)
		57419: 44,  // _rely (8x)
		57442: 45,  // _singleQuoteStr (8x)
		57351: 46,  // _char (7x)
		42:    47,  // '*' (5x)
		57380: 48,  // _character (5x)
		57361: 49,  // _raw (5x)
		57378: 50,  // _rowid (5x)
		57381: 51,  // _varying (5x)
		57494: 52,  // NumberOrAsterisk (5x)
		57424: 53,  // _as (4x)
		57377: 54,  // _bfile (4x)
		57359: 55,  // _binaryDouble (4x)
		57358: 56,  // _binaryFloat (4x)
		57374: 57,  // _blob (4x)
		57375: 58,  // _clob (4x)
		57362: 59,  // _date (4x)
		57386: 60,  // _dec (4x)
		57385: 61,  // _decimal (4x)
		57390: 62,  // _double (4x)
		57357: 63,  // _float (4x)
		57426: 64,  // _identity (4x)
		57388: 65,  // _int (4x)
		57387: 66,  // _interger (4x)
		57368: 67,  // _interval (4x)
		57360: 68,  // _long (4x)
		57383: 69,  // _national (4x)
		57354: 70,  // _nchar (4x)
		57376: 71,  // _nclob (4x)
		57356: 72,  // _number (4x)
		57384: 73,  // _numeric (4x)
		57355: 74,  // _nvarchar2 (4x)
		57392: 75,  // _real (4x)
		57389: 76,  // _smallInt (4x)
		57363: 77,  // _timestamp (4x)
		57370: 78,  // _to (4x)
		57379: 79,  // _urowid (4x)
		57382: 80,  // _varchar (4x)
		57353: 81,  // _varchar2 (4x)
		57457: 82,  // ColumnName (4x)
		57466: 83,  // ConstraintStateRely (4x)
		57481: 84,  // IdentityOptionsOrEmpty (4x)
		57400: 85,  // _by (3x)
		57399: 86,  // _identified (3x)
		57463: 87,  // ConstraintStateDeferrable (3x)
		57464: 88,  // ConstraintStateDeferredOrImmediate (3x)
		57506: 89,  // TableName (3x)
		57352: 90,  // _byte (2x)
		57371: 91,  // _mouth (2x)
		57373: 92,  // _second (2x)
		57366: 93,  // _time (2x)
		57367: 94,  // _zone (2x)
		57446: 95,  // AddColumnClause (2x)
		57449: 96,  // ChangeColumnClause (2x)
		57454: 97,  // ColumnDefinition (2x)
		57461: 98,  // ConstraintNameOrEmpty (2x)
		57462: 99,  // ConstraintState (2x)
		57465: 100, // ConstraintStateOrEmpty (2x)
		57471: 101, // DropColumnClause (2x)
		57475: 102, // Expr (2x)
		57479: 103, // IdentityOption (2x)
		57482: 104, // InlineConstraint (2x)
		57484: 105, // InlineConstraintProperty (2x)
		57492: 106, // ModidyColumnClause (2x)
		57497: 107, // RealColumnDefinition (2x)
		57498: 108, // ReferencesClause (2x)
		57348: 109, // _alter (1x)
		57423: 110, // _always (1x)
		57410: 111, // _cascade (1x)
		57372: 112, // _day (1x)
		57415: 113, // _deferred (1x)
		57411: 114, // _delete (1x)
		57416: 115, // _immediate (1x)
		57420: 116, // _is (1x)
		57404: 117, // _key (1x)
		57430: 118, // _limit (1x)
		57365: 119, // _local (1x)
		57391: 120, // _precision (1x)
		57413: 121, // _set (1x)
		57349: 122, // _table (1x)
		57398: 123, // _using (1x)
		57440: 124, // _value (1x)
		57369: 125, // _year (1x)
		57447: 126, // AlterTableStmt (1x)
		57448: 127, // AnsiSupportDataTypes (1x)
		57450: 128, // ChangeColumnClauseList (1x)
		57451: 129, // CharacterDataTypes (1x)
		57452: 130, // CollateClause (1x)
		57453: 131, // ColumnClauses (1x)
		57455: 132, // ColumnDefinitionConstraint (1x)
		57456: 133, // ColumnDefinitionList (1x)
		57458: 134, // ColumnNameList (1x)
		57459: 135, // ColumnNameListOrEmpty (1x)
		57460: 136, // ColumnProperties (1x)
		57467: 137, // Datatype (1x)
		57468: 138, // DatetimeDataTypes (1x)
		57469: 139, // DefaultClause (1x)
		57470: 140, // DefaultOrIdentityClause (1x)
		57472: 141, // EncryptAlgorithm (1x)
		57473: 142, // EncryptClause (1x)
		57474: 143, // EncryptionSpec (1x)
		57476: 144, // IdentifiedByClause (1x)
		57478: 145, // IdentityClause (1x)
		57480: 146, // IdentityOptions (1x)
		57483: 147, // InlineConstraintList (1x)
		57485: 148, // InlineRefConstraint (1x)
		57486: 149, // IntergrityAlgorithm (1x)
		57487: 150, // InvisibleProperty (1x)
		57488: 151, // LargeObjectDataTypes (1x)
		57489: 152, // LongAndRawDataTypes (1x)
		57490: 153, // MemoptimizeReadClause (1x)
		57491: 154, // MemoptimizeWriteClause (1x)
		57493: 155, // NumberDataTypes (1x)
		57495: 156, // OralceBuiltInDataTypes (1x)
		57496: 157, // OutOfLinePartStorageList (1x)
		57499: 158, // ReferencesOnDelete (1x)
		57500: 159, // RenameColumnClause (1x)
		57501: 160, // RowIdDataTypes (1x)
		57502: 161, // SaltProperty (1x)
		57503: 162, // SortProperty (1x)
		57504: 163, // Start (1x)
		57505: 164, // Statement (1x)
		57445: 165, // $default (0x)
		57347: 166, // _from (0x)
		57346: 167, // _select (0x)
		57345: 168, // error (0x)
	}

	yySymNames = []string{
		"')'",
		"','",
		"_null",
		"_not",
		"_primary",
		"_references",
		"_unique",
		"_constraint",
		"_with",
		"_scope",
		"_encrypt",
		"_default",
		"_generated",
		"_invisible",
		"_visible",
		"_sort",
		"_collate",
		"_intNumber",
		"'('",
		"$end",
		"_deferrable",
		"_initially",
		"';'",
		"_cache",
		"_cycle",
		"_increment",
		"_maxvalue",
		"_minvalue",
		"_nocache",
		"_nocycle",
		"_nomaxvalue",
		"_nominvalue",
		"_noorder",
		"_order",
		"_start",
		"_add",
		"_doubleQuoteStr",
		"_nonquotedIdentifier",
		"Identifier",
		"_no",
		"_salt",
		"'.'",
		"_norely",
		"_on",
		"_rely",
		"_singleQuoteStr",
		"_char",
		"'*'",
		"_character",
		"_raw",
		"_rowid",
		"_varying",
		"NumberOrAsterisk",
		"_as",
		"_bfile",
		"_binaryDouble",
		"_binaryFloat",
		"_blob",
		"_clob",
		"_date",
		"_dec",
		"_decimal",
		"_double",
		"_float",
		"_identity",
		"_int",
		"_interger",
		"_interval",
		"_long",
		"_national",
		"_nchar",
		"_nclob",
		"_number",
		"_numeric",
		"_nvarchar2",
		"_real",
		"_smallInt",
		"_timestamp",
		"_to",
		"_urowid",
		"_varchar",
		"_varchar2",
		"ColumnName",
		"ConstraintStateRely",
		"IdentityOptionsOrEmpty",
		"_by",
		"_identified",
		"ConstraintStateDeferrable",
		"ConstraintStateDeferredOrImmediate",
		"TableName",
		"_byte",
		"_mouth",
		"_second",
		"_time",
		"_zone",
		"AddColumnClause",
		"ChangeColumnClause",
		"ColumnDefinition",
		"ConstraintNameOrEmpty",
		"ConstraintState",
		"ConstraintStateOrEmpty",
		"DropColumnClause",
		"Expr",
		"IdentityOption",
		"InlineConstraint",
		"InlineConstraintProperty",
		"ModidyColumnClause",
		"RealColumnDefinition",
		"ReferencesClause",
		"_alter",
		"_always",
		"_cascade",
		"_day",
		"_deferred",
		"_delete",
		"_immediate",
		"_is",
		"_key",
		"_limit",
		"_local",
		"_precision",
		"_set",
		"_table",
		"_using",
		"_value",
		"_year",
		"AlterTableStmt",
		"AnsiSupportDataTypes",
		"ChangeColumnClauseList",
		"CharacterDataTypes",
		"CollateClause",
		"ColumnClauses",
		"ColumnDefinitionConstraint",
		"ColumnDefinitionList",
		"ColumnNameList",
		"ColumnNameListOrEmpty",
		"ColumnProperties",
		"Datatype",
		"DatetimeDataTypes",
		"DefaultClause",
		"DefaultOrIdentityClause",
		"EncryptAlgorithm",
		"EncryptClause",
		"EncryptionSpec",
		"IdentifiedByClause",
		"IdentityClause",
		"IdentityOptions",
		"InlineConstraintList",
		"InlineRefConstraint",
		"IntergrityAlgorithm",
		"InvisibleProperty",
		"LargeObjectDataTypes",
		"LongAndRawDataTypes",
		"MemoptimizeReadClause",
		"MemoptimizeWriteClause",
		"NumberDataTypes",
		"OralceBuiltInDataTypes",
		"OutOfLinePartStorageList",
		"ReferencesOnDelete",
		"RenameColumnClause",
		"RowIdDataTypes",
		"SaltProperty",
		"SortProperty",
		"Start",
		"Statement",
		"$default",
		"_from",
		"_select",
		"error",
	}

	yyTokenLiteralStrings = map[int]string{
		57441: "int number",
		57443: "double quotes string",
		57444: "nonquoted identifier",
		57442: "single quotes string",
	}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {163, 1},
		2:   {164, 1},
		3:   {164, 2},
		4:   {89, 1},
		5:   {89, 3},
		6:   {134, 1},
		7:   {134, 3},
		8:   {82, 1},
		9:   {38, 1},
		10:  {38, 1},
		11:  {126, 6},
		12:  {153, 0},
		13:  {154, 0},
		14:  {131, 1},
		15:  {131, 1},
		16:  {159, 0},
		17:  {128, 1},
		18:  {128, 2},
		19:  {96, 1},
		20:  {96, 1},
		21:  {96, 1},
		22:  {95, 6},
		23:  {106, 0},
		24:  {101, 0},
		25:  {136, 0},
		26:  {157, 0},
		27:  {133, 1},
		28:  {133, 3},
		29:  {97, 1},
		30:  {107, 8},
		31:  {130, 0},
		32:  {130, 2},
		33:  {162, 0},
		34:  {162, 1},
		35:  {150, 0},
		36:  {150, 1},
		37:  {150, 1},
		38:  {140, 0},
		39:  {140, 1},
		40:  {140, 1},
		41:  {139, 2},
		42:  {139, 4},
		43:  {145, 4},
		44:  {145, 5},
		45:  {145, 5},
		46:  {145, 6},
		47:  {145, 8},
		48:  {84, 0},
		49:  {84, 3},
		50:  {146, 0},
		51:  {146, 1},
		52:  {146, 2},
		53:  {103, 3},
		54:  {103, 4},
		55:  {103, 3},
		56:  {103, 2},
		57:  {103, 1},
		58:  {103, 2},
		59:  {103, 1},
		60:  {103, 1},
		61:  {103, 1},
		62:  {103, 2},
		63:  {103, 1},
		64:  {103, 1},
		65:  {103, 1},
		66:  {142, 0},
		67:  {142, 2},
		68:  {143, 4},
		69:  {141, 0},
		70:  {141, 2},
		71:  {144, 0},
		72:  {144, 3},
		73:  {149, 0},
		74:  {149, 1},
		75:  {161, 0},
		76:  {161, 1},
		77:  {161, 2},
		78:  {132, 0},
		79:  {132, 1},
		80:  {132, 1},
		81:  {147, 1},
		82:  {147, 2},
		83:  {137, 1},
		84:  {137, 1},
		85:  {52, 1},
		86:  {52, 1},
		87:  {156, 1},
		88:  {156, 1},
		89:  {156, 1},
		90:  {156, 1},
		91:  {156, 1},
		92:  {156, 1},
		93:  {129, 1},
		94:  {129, 4},
		95:  {129, 5},
		96:  {129, 5},
		97:  {129, 4},
		98:  {129, 5},
		99:  {129, 5},
		100: {129, 1},
		101: {129, 4},
		102: {129, 4},
		103: {155, 1},
		104: {155, 4},
		105: {155, 6},
		106: {155, 1},
		107: {155, 4},
		108: {155, 1},
		109: {155, 1},
		110: {152, 1},
		111: {152, 2},
		112: {152, 4},
		113: {138, 1},
		114: {138, 1},
		115: {138, 4},
		116: {138, 7},
		117: {138, 8},
		118: {138, 4},
		119: {138, 7},
		120: {138, 4},
		121: {138, 7},
		122: {138, 10},
		123: {138, 7},
		124: {151, 1},
		125: {151, 1},
		126: {151, 1},
		127: {151, 1},
		128: {160, 1},
		129: {160, 1},
		130: {160, 4},
		131: {127, 4},
		132: {127, 5},
		133: {127, 5},
		134: {127, 5},
		135: {127, 4},
		136: {127, 5},
		137: {127, 6},
		138: {127, 5},
		139: {127, 6},
		140: {127, 1},
		141: {127, 4},
		142: {127, 6},
		143: {127, 1},
		144: {127, 4},
		145: {127, 6},
		146: {127, 1},
		147: {127, 4},
		148: {127, 6},
		149: {127, 1},
		150: {127, 1},
		151: {127, 1},
		152: {127, 2},
		153: {127, 1},
		154: {98, 0},
		155: {98, 2},
		156: {104, 3},
		157: {105, 1},
		158: {105, 2},
		159: {105, 1},
		160: {105, 2},
		161: {105, 1},
		162: {108, 4},
		163: {135, 0},
		164: {135, 3},
		165: {158, 0},
		166: {158, 3},
		167: {158, 4},
		168: {100, 0},
		169: {100, 1},
		170: {99, 2},
		171: {99, 3},
		172: {99, 2},
		173: {99, 3},
		174: {87, 1},
		175: {87, 2},
		176: {88, 2},
		177: {88, 2},
		178: {83, 0},
		179: {83, 1},
		180: {83, 1},
		181: {148, 3},
		182: {148, 2},
		183: {148, 3},
		184: {102, 1},
		185: {102, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [331][]uint16{
		// 0
		{109: 190, 126: 189, 163: 187, 188},
		{19: 186},
		{19: 185},
		{19: 184, 22: 516},
		{122: 191},
		// 5
		{36: 194, 193, 192, 89: 195},
		{182, 182, 182, 182, 182, 182, 182, 182, 18: 182, 182, 182, 182, 182, 35: 182, 41: 514, 43: 182},
		{177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 18: 177, 177, 177, 177, 177, 35: 177, 39: 177, 177, 177, 43: 177, 45: 177, 177, 48: 177, 177, 177, 54: 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 65: 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 79: 177, 177, 177},
		{176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 18: 176, 176, 176, 176, 176, 35: 176, 39: 176, 176, 176, 43: 176, 45: 176, 176, 48: 176, 176, 176, 54: 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 65: 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 79: 176, 176, 176},
		{19: 174, 22: 174, 35: 174, 153: 196},
		// 10
		{19: 173, 22: 173, 35: 173, 154: 197},
		{19: 170, 22: 170, 35: 205, 95: 202, 201, 101: 204, 106: 203, 128: 199, 131: 198, 159: 200},
		{19: 175, 22: 175},
		{19: 172, 22: 172, 35: 205, 95: 202, 513, 101: 204, 106: 203},
		{19: 171, 22: 171},
		// 15
		{19: 169, 22: 169, 35: 169},
		{19: 167, 22: 167, 35: 167},
		{19: 166, 22: 166, 35: 166},
		{19: 165, 22: 165, 35: 165},
		{18: 206},
		// 20
		{36: 194, 193, 207, 82: 211, 97: 209, 107: 210, 133: 208},
		{178, 178, 46: 178, 48: 178, 178, 178, 54: 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 65: 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 79: 178, 178, 178},
		{508, 509},
		{159, 159},
		{157, 157},
		// 25
		{46: 221, 48: 240, 230, 238, 54: 237, 228, 227, 234, 235, 231, 245, 244, 249, 226, 65: 247, 246, 233, 229, 242, 223, 236, 225, 243, 224, 250, 248, 232, 79: 239, 241, 222, 127: 214, 129: 215, 137: 212, 218, 151: 219, 217, 155: 216, 213, 160: 220},
		{155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 374, 130: 373},
		{103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103},
		{102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102},
		{99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99},
		// 30
		{98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98},
		{97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97},
		{96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96},
		{95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95},
		{94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94},
		// 35
		{93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 18: 362, 51: 363},
		{18: 355},
		{86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 18: 348, 51: 349},
		{18: 345},
		{83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 18: 339},
		// 40
		{80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 18: 336},
		{78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78},
		{77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77},
		{76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 49: 335},
		{18: 332},
		// 45
		{73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73},
		{72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 18: 323},
		{112: 302, 125: 301},
		{62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62},
		{61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61},
		// 50
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60},
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59},
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58},
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 18: 298},
		{18: 291, 51: 292},
		// 55
		{18: 288},
		{46: 273, 48: 272},
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 18: 266},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 18: 260},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 18: 252},
		// 60
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35},
		{120: 251},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33},
		// 65
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34},
		{17: 253, 47: 254, 52: 255},
		{101, 101, 41: 101},
		{100, 100, 41: 100},
		{256, 41: 257},
		// 70
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{17: 258},
		{259},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38},
		{17: 253, 47: 254, 52: 261},
		// 75
		{262, 41: 263},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42},
		{17: 264},
		{265},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41},
		// 80
		{17: 253, 47: 254, 52: 267},
		{268, 41: 269},
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45},
		{17: 270},
		{271},
		// 85
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
		{18: 281, 51: 282},
		{18: 274, 51: 275},
		{17: 279},
		{18: 276},
		// 90
		{17: 277},
		{278},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47},
		{280},
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48},
		// 95
		{17: 286},
		{18: 283},
		{17: 284},
		{285},
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49},
		// 100
		{287},
		{50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50},
		{17: 289},
		{290},
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51},
		// 105
		{17: 296},
		{18: 293},
		{17: 294},
		{295},
		{54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54},
		// 110
		{297},
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
		{17: 299},
		{300},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56},
		// 115
		{18: 317, 78: 316},
		{18: 304, 78: 303},
		{92: 312},
		{17: 305},
		{306},
		// 120
		{78: 307},
		{92: 308},
		{65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 18: 309},
		{17: 310},
		{311},
		// 125
		{64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64},
		{66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 18: 313},
		{17: 314},
		{315},
		{63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63},
		// 130
		{91: 322},
		{17: 318},
		{319},
		{78: 320},
		{91: 321},
		// 135
		{67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67},
		{68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68},
		{17: 324},
		{325},
		{71, 71, 71, 71, 71, 71, 71, 71, 326, 71, 71, 71, 71, 71, 71, 71, 71},
		// 140
		{93: 327, 119: 328},
		{94: 331},
		{93: 329},
		{94: 330},
		{69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69},
		// 145
		{70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70},
		{17: 333},
		{334},
		{74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74},
		{75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75},
		// 150
		{17: 253, 47: 254, 52: 337},
		{338},
		{79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79},
		{17: 253, 47: 254, 52: 340},
		{341, 342},
		// 155
		{82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82},
		{17: 343},
		{344},
		{81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81},
		{17: 346},
		// 160
		{347},
		{84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84},
		{17: 353},
		{18: 350},
		{17: 351},
		// 165
		{352},
		{52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52},
		{354},
		{85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85},
		{17: 356},
		// 170
		{357, 46: 359, 90: 358},
		{89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89},
		{361},
		{360},
		{87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87},
		// 175
		{88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88},
		{17: 367},
		{18: 364},
		{17: 365},
		{366},
		// 180
		{53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53},
		{368, 46: 370, 90: 369},
		{92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92},
		{372},
		{371},
		// 185
		{90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90},
		{91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91},
		{153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 377, 162: 376},
		{36: 194, 193, 375},
		{154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154},
		// 190
		{151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 379, 380, 150: 378},
		{152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152},
		{148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 384, 385, 139: 382, 381, 145: 383},
		{150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150},
		{149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149},
		// 195
		{120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 436, 142: 435},
		{147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147},
		{146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146},
		{17: 431, 36: 432, 39: 430, 102: 429},
		{53: 386, 85: 388, 110: 387},
		// 200
		{64: 427},
		{53: 424},
		{11: 389},
		{43: 391, 53: 390},
		{64: 422},
		// 205
		{2: 392},
		{53: 393},
		{64: 394},
		{138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 18: 396, 84: 395},
		{139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139},
		// 210
		{136, 23: 407, 405, 400, 401, 403, 408, 406, 402, 404, 410, 409, 399, 103: 398, 146: 397},
		{420, 23: 407, 405, 400, 401, 403, 408, 406, 402, 404, 410, 409, 399, 103: 421},
		{135, 23: 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135},
		{8: 416},
		{85: 414},
		// 215
		{17: 413},
		{129, 23: 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129},
		{17: 412},
		{127, 23: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127},
		{126, 23: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126},
		// 220
		{125, 23: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125},
		{17: 411},
		{123, 23: 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123},
		{122, 23: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122},
		{121, 23: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121},
		// 225
		{124, 23: 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124},
		{128, 23: 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128},
		{130, 23: 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130},
		{17: 415},
		{131, 23: 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131},
		// 230
		{17: 417, 118: 418},
		{133, 23: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133},
		{124: 419},
		{132, 23: 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132},
		{137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137},
		// 235
		{134, 23: 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134},
		{138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 18: 396, 84: 423},
		{140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140},
		{64: 425},
		{138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 18: 396, 84: 426},
		// 240
		{142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142},
		{138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 18: 396, 84: 428},
		{143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143},
		{145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145},
		{2: 433},
		// 245
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{17: 431, 36: 432, 102: 434},
		{144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144},
		{108, 108, 32, 32, 32, 32, 32, 455, 458, 457, 98: 456, 104: 454, 132: 451, 147: 453, 452},
		// 250
		{117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 39: 117, 117, 45: 117, 86: 117, 123: 439, 141: 438, 143: 437},
		{119, 119, 119, 119, 119, 119, 119, 119, 119, 119},
		{115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 39: 115, 115, 45: 115, 86: 442, 144: 441},
		{45: 440},
		{116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 39: 116, 116, 45: 116, 86: 116},
		// 255
		{113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 39: 113, 113, 45: 446, 149: 445},
		{85: 443},
		{36: 194, 193, 444},
		{114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 39: 114, 114, 45: 114},
		{111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 39: 449, 448, 161: 447},
		// 260
		{112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 39: 112, 112},
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 118},
		{110, 110, 110, 110, 110, 110, 110, 110, 110, 110},
		{40: 450},
		{109, 109, 109, 109, 109, 109, 109, 109, 109, 109},
		// 265
		{156, 156},
		{107, 107},
		{106, 106, 32, 32, 32, 32, 32, 455, 98: 506, 104: 505},
		{105, 105, 105, 105, 105, 105, 105, 105},
		{36: 194, 193, 504},
		// 270
		{2: 463, 464, 466, 468, 465, 105: 462, 108: 467},
		{116: 460},
		{50: 459},
		{4, 4},
		{36: 194, 193, 192, 89: 461},
		// 275
		{5, 5},
		{18, 18, 18, 487, 18, 18, 18, 18, 20: 486, 488, 87: 484, 485, 99: 483, 503},
		{29, 29, 29, 29, 29, 29, 29, 29, 20: 29, 29},
		{2: 502},
		{27, 27, 27, 27, 27, 27, 27, 27, 20: 27, 27},
		// 280
		{117: 501},
		{25, 25, 25, 487, 25, 25, 25, 25, 20: 486, 488, 87: 484, 485, 99: 483, 489},
		{36: 194, 193, 192, 89: 469},
		{23, 23, 23, 23, 23, 23, 23, 23, 18: 471, 20: 23, 23, 43: 23, 135: 470},
		{21, 21, 21, 21, 21, 21, 21, 21, 20: 21, 21, 43: 478, 158: 477},
		// 285
		{36: 194, 193, 207, 82: 472, 134: 473},
		{180, 180},
		{475, 474},
		{36: 194, 193, 207, 82: 476},
		{22, 22, 22, 22, 22, 22, 22, 22, 20: 22, 22, 43: 22},
		// 290
		{179, 179},
		{24, 24, 24, 24, 24, 24, 24, 24, 20: 24, 24},
		{114: 479},
		{111: 480, 121: 481},
		{20, 20, 20, 20, 20, 20, 20, 20, 20: 20, 20},
		// 295
		{2: 482},
		{19, 19, 19, 19, 19, 19, 19, 19, 20: 19, 19},
		{17, 17, 17, 17, 17, 17, 17, 17},
		{8, 8, 8, 8, 8, 8, 8, 8, 21: 488, 42: 496, 44: 495, 83: 498, 88: 499},
		{8, 8, 8, 487, 8, 8, 8, 8, 20: 486, 42: 496, 44: 495, 83: 493, 87: 494},
		// 300
		{12, 12, 12, 12, 12, 12, 12, 12, 21: 12, 42: 12, 44: 12},
		{20: 492},
		{113: 490, 115: 491},
		{3, 3},
		{10, 10, 10, 10, 10, 10, 10, 10, 20: 10, 42: 10, 44: 10},
		// 305
		{9, 9, 9, 9, 9, 9, 9, 9, 20: 9, 42: 9, 44: 9},
		{11, 11, 11, 11, 11, 11, 11, 11, 21: 11, 42: 11, 44: 11},
		{14, 14, 14, 14, 14, 14, 14, 14},
		{8, 8, 8, 8, 8, 8, 8, 8, 42: 496, 44: 495, 83: 497},
		{7, 7, 7, 7, 7, 7, 7, 7},
		// 310
		{6, 6, 6, 6, 6, 6, 6, 6},
		{13, 13, 13, 13, 13, 13, 13, 13},
		{16, 16, 16, 16, 16, 16, 16, 16},
		{8, 8, 8, 8, 8, 8, 8, 8, 42: 496, 44: 495, 83: 500},
		{15, 15, 15, 15, 15, 15, 15, 15},
		// 315
		{26, 26, 26, 26, 26, 26, 26, 26, 20: 26, 26},
		{28, 28, 28, 28, 28, 28, 28, 28, 20: 28, 28},
		{30, 30, 30, 30, 30, 30, 30, 30},
		{2: 31, 31, 31, 31, 31},
		{104, 104, 104, 104, 104, 104, 104, 104},
		// 320
		{2: 463, 464, 466, 468, 465, 105: 462, 108: 507},
		{25, 25, 25, 25, 25, 25, 25, 25, 20: 25, 25},
		{19: 161, 22: 161, 35: 161, 136: 511},
		{36: 194, 193, 207, 82: 211, 97: 510, 107: 210},
		{158, 158},
		// 325
		{19: 160, 22: 160, 35: 160, 157: 512},
		{19: 164, 22: 164, 35: 164},
		{19: 168, 22: 168, 35: 168},
		{36: 194, 193, 515},
		{181, 181, 181, 181, 181, 181, 181, 181, 18: 181, 181, 181, 181, 181, 35: 181, 43: 181},
		// 330
		{19: 183},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 168

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yylex.(*yyLexImpl).result = yyS[yypt-0].node
		}
	case 2:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 3:
		{
			yyVAL.node = yyS[yypt-1].node
		}
	case 4:
		{
			yyVAL.anything = &ast.TableName{
				Table: yyS[yypt-0].anything.(*element.Identifier),
			}
		}
	case 5:
		{
			yyVAL.anything = &ast.TableName{
				Schema: yyS[yypt-2].anything.(*element.Identifier),
				Table:  yyS[yypt-0].anything.(*element.Identifier),
			}
		}
	case 8:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 9:
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeNonQuoted,
				Value: yyS[yypt-0].str,
			}
		}
	case 10:
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeQuoted,
				Value: yyS[yypt-0].str,
			}
		}
	case 11:
		{
			yyVAL.node = &ast.AlterTableStmt{
				TableName:     yyS[yypt-3].anything.(*ast.TableName),
				ColumnClauses: yyS[yypt-0].anything.([]ast.ColumnClause),
			}
		}
	case 12:
		{
			// TODO
		}
	case 13:
		{
			// TODO
		}
	case 14:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 15:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 16:
		{
			// todo:
		}
	case 17:
		{
			yyVAL.anything = []ast.ColumnClause{yyS[yypt-0].anything.(ast.ColumnClause)}
		}
	case 18:
		{
			yyVAL.anything = append(yyS[yypt-1].anything.([]ast.ColumnClause), yyS[yypt-0].anything.(ast.ColumnClause))
		}
	case 19:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 20:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 21:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 22:
		{
			yyVAL.anything = &ast.AddColumnClause{
				Columns: yyS[yypt-3].anything.([]*ast.ColumnDefine),
			}
		}
	case 23:
		{
			// todo:
		}
	case 24:
		{
			// todo:
		}
	case 25:
		{
			// TODO
		}
	case 26:
		{
			// TODO
		}
	case 27:
		{
			yyVAL.anything = []*ast.ColumnDefine{yyS[yypt-0].anything.(*ast.ColumnDefine)}
		}
	case 28:
		{
			yyVAL.anything = append(yyS[yypt-2].anything.([]*ast.ColumnDefine), yyS[yypt-0].anything.(*ast.ColumnDefine))
		}
	case 29:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 30:
		{
			var collation *ast.Collation
			if yyS[yypt-5].anything != nil {
				collation = yyS[yypt-5].anything.(*ast.Collation)
			}
			var invisible *ast.InvisibleProperty
			if yyS[yypt-3].anything != nil {
				invisible = yyS[yypt-3].anything.(*ast.InvisibleProperty)
			}

			yyVAL.anything = &ast.ColumnDefine{
				ColumnName:        yyS[yypt-7].anything.(*element.Identifier),
				Datatype:          yyS[yypt-6].anything.(element.Datatype),
				Collation:         collation,
				Sort:              ast.SortProperty(yyS[yypt-4].b),
				InvisibleProperty: invisible,
			}
		}
	case 31:
		{
			yyVAL.anything = nil
		}
	case 32:
		{
			yyVAL.anything = &ast.Collation{Name: yyS[yypt-0].anything.(*element.Identifier)}
		}
	case 33:
		{
			yyVAL.b = false
		}
	case 34:
		{
			yyVAL.b = true
		}
	case 35:
		{
			yyVAL.anything = nil
		}
	case 36:
		{
			yyVAL.anything = &ast.InvisibleProperty{Type: ast.InvisiblePropertyInvisible}
		}
	case 37:
		{
			yyVAL.anything = &ast.InvisibleProperty{Type: ast.InvisiblePropertyVisible}
		}
	case 38:
		{
			// empty
		}
	case 48:
		{
			// empty
		}
	case 50:
		{
			// empty
		}
	case 66:
		{
			// empty
		}
	case 69:
		{
			// empty
		}
	case 71:
		{
			// empty
		}
	case 73:
		{
			// empty
		}
	case 75:
		{
			// empty
		}
	case 78:
		{
			// empty
		}
	case 83:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 84:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 85:
		{
			yyVAL.anything = &element.NumberOrAsterisk{Number: yyS[yypt-0].i}
		}
	case 86:
		{
			yyVAL.anything = &element.NumberOrAsterisk{IsAsterisk: true}
		}
	case 87:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 88:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 89:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 90:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 91:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 92:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 93:
		{
			d := &element.Char{}
			d.SetDataDefine(element.DataDefineChar)
			yyVAL.anything = d
		}
	case 94:
		{
			size := yyS[yypt-1].i
			d := &element.Char{Size: &size}
			d.SetDataDefine(element.DataDefineChar)
			yyVAL.anything = d
		}
	case 95:
		{
			size := yyS[yypt-2].i
			d := &element.Char{Size: &size, IsByteSize: true}
			d.SetDataDefine(element.DataDefineChar)
			yyVAL.anything = d
		}
	case 96:
		{
			size := yyS[yypt-2].i
			d := &element.Char{Size: &size, IsCharSize: true}
			d.SetDataDefine(element.DataDefineChar)
			d.SetDataDefine(element.DataDefineChar)
			yyVAL.anything = d
		}
	case 97:
		{
			size := yyS[yypt-1].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDefine(element.DataDefineVarchar2)
			yyVAL.anything = d
		}
	case 98:
		{
			size := yyS[yypt-2].i
			d := &element.Varchar2{}
			d.Size = &size
			d.IsByteSize = true
			d.SetDataDefine(element.DataDefineVarchar2)
			yyVAL.anything = d
		}
	case 99:
		{
			size := yyS[yypt-2].i
			d := &element.Varchar2{}
			d.Size = &size
			d.IsCharSize = true
			d.SetDataDefine(element.DataDefineVarchar2)
			yyVAL.anything = d
		}
	case 100:
		{
			d := &element.NChar{}
			d.SetDataDefine(element.DataDefineNChar)
			yyVAL.anything = d
		}
	case 101:
		{
			size := yyS[yypt-1].i
			d := &element.NChar{Size: &size}
			d.SetDataDefine(element.DataDefineNChar)
			yyVAL.anything = d
		}
	case 102:
		{
			size := yyS[yypt-1].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDefine(element.DataDefineNVarChar2)
			yyVAL.anything = d
		}
	case 103:
		{
			d := &element.Number{}
			d.SetDataDefine(element.DataDefineNumber)
			yyVAL.anything = d
		}
	case 104:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDefine(element.DataDefineNumber)
			yyVAL.anything = d
		}
	case 105:
		{
			precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
			scale := yyS[yypt-1].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDefine(element.DataDefineNumber)
			yyVAL.anything = d
		}
	case 106:
		{
			d := &element.Float{}
			d.SetDataDefine(element.DataDefineFloat)
			yyVAL.anything = d
		}
	case 107:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Float{Precision: precision}
			d.SetDataDefine(element.DataDefineFloat)
			yyVAL.anything = d
		}
	case 108:
		{
			d := &element.BinaryFloat{}
			d.SetDataDefine(element.DataDefineBinaryFloat)
			yyVAL.anything = d
		}
	case 109:
		{
			d := &element.BinaryDouble{}
			d.SetDataDefine(element.DataDefineBinaryDouble)
			yyVAL.anything = d
		}
	case 110:
		{
			d := &element.Long{}
			d.SetDataDefine(element.DataDefineLong)
			yyVAL.anything = d
		}
	case 111:
		{
			d := &element.LongRaw{}
			d.SetDataDefine(element.DataDefineLongRaw)
			yyVAL.anything = d
		}
	case 112:
		{
			size := yyS[yypt-1].i
			d := &element.Raw{Size: &size}
			d.SetDataDefine(element.DataDefineRaw)
			yyVAL.anything = d
		}
	case 113:
		{
			d := &element.Date{}
			d.SetDataDefine(element.DataDefineDate)
			yyVAL.anything = d
		}
	case 114:
		{
			d := &element.Timestamp{}
			d.SetDataDefine(element.DataDefineTimestamp)
			yyVAL.anything = d
		}
	case 115:
		{
			precision := yyS[yypt-1].i
			d := &element.Timestamp{FractionalSecondsPrecision: &precision}
			d.SetDataDefine(element.DataDefineTimestamp)
			yyVAL.anything = d
		}
	case 116:
		{
			precision := yyS[yypt-4].i
			d := &element.Timestamp{FractionalSecondsPrecision: &precision, WithTimeZone: true}
			d.SetDataDefine(element.DataDefineTimestamp)
			yyVAL.anything = d
		}
	case 117:
		{
			precision := yyS[yypt-5].i
			d := &element.Timestamp{FractionalSecondsPrecision: &precision, WithLocalTimeZone: true}
			d.SetDataDefine(element.DataDefineTimestamp)
			yyVAL.anything = d
		}
	case 118:
		{
			d := &element.IntervalYear{}
			d.SetDataDefine(element.DataDefineIntervalYear)
			yyVAL.anything = d
		}
	case 119:
		{
			precision := yyS[yypt-3].i
			d := &element.IntervalYear{Precision: &precision}
			d.SetDataDefine(element.DataDefineIntervalYear)
			yyVAL.anything = d
		}
	case 120:
		{
			d := &element.IntervalDay{}
			d.SetDataDefine(element.DataDefineIntervalDay)
			yyVAL.anything = d
		}
	case 121:
		{
			precision := yyS[yypt-3].i
			d := &element.IntervalDay{Precision: &precision}
			d.SetDataDefine(element.DataDefineIntervalDay)
			yyVAL.anything = d
		}
	case 122:
		{
			precision := yyS[yypt-6].i
			sPrecision := yyS[yypt-1].i
			d := &element.IntervalDay{Precision: &precision, FractionalSecondsPrecision: &sPrecision}
			d.SetDataDefine(element.DataDefineIntervalDay)
			yyVAL.anything = d
		}
	case 123:
		{
			sPrecision := yyS[yypt-1].i
			d := &element.IntervalDay{FractionalSecondsPrecision: &sPrecision}
			d.SetDataDefine(element.DataDefineIntervalDay)
			yyVAL.anything = d
		}
	case 124:
		{
			d := &element.Blob{}
			d.SetDataDefine(element.DataDefineBlob)
			yyVAL.anything = d
		}
	case 125:
		{
			d := &element.Clob{}
			d.SetDataDefine(element.DataDefineClob)
			yyVAL.anything = d
		}
	case 126:
		{
			d := &element.NClob{}
			d.SetDataDefine(element.DataDefineNClob)
			yyVAL.anything = d
		}
	case 127:
		{
			d := &element.BFile{}
			d.SetDataDefine(element.DataDefineBFile)
			yyVAL.anything = d
		}
	case 128:
		{
			d := &element.RowId{}
			d.SetDataDefine(element.DataDefineRowId)
			yyVAL.anything = d
		}
	case 129:
		{
			d := &element.URowId{}
			d.SetDataDefine(element.DataDefineURowId)
			yyVAL.anything = d
		}
	case 130:
		{
			size := yyS[yypt-1].i
			d := &element.URowId{Size: &size}
			d.SetDataDefine(element.DataDefineURowId)
			yyVAL.anything = d
		}
	case 131:
		{
			d := &element.Char{}
			d.SetDataDefine(element.DataDefineCharacter)
			yyVAL.anything = d
		}
	case 132:
		{
			size := yyS[yypt-1].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDefine(element.DataDefineCharacterVarying)
			yyVAL.anything = d
		}
	case 133:
		{
			size := yyS[yypt-1].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDefine(element.DataDefineCharVarying)
			yyVAL.anything = d
		}
	case 134:
		{
			size := yyS[yypt-1].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDefine(element.DataDefineNCharVarying)
			yyVAL.anything = d
		}
	case 135:
		{
			size := yyS[yypt-1].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDefine(element.DataDefineVarchar)
			yyVAL.anything = d
		}
	case 136:
		{
			size := yyS[yypt-1].i
			d := &element.NChar{Size: &size}
			d.SetDataDefine(element.DataDefineNationalCharacter)
			yyVAL.anything = d
		}
	case 137:
		{
			size := yyS[yypt-1].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDefine(element.DataDefineNationalCharacterVarying)
			yyVAL.anything = d
		}
	case 138:
		{
			size := yyS[yypt-1].i
			d := &element.NChar{Size: &size}
			d.SetDataDefine(element.DataDefineNationalChar)
			yyVAL.anything = d
		}
	case 139:
		{
			size := yyS[yypt-1].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDefine(element.DataDefineNationalCharVarying)
			yyVAL.anything = d
		}
	case 140:
		{
			d := &element.Number{}
			d.SetDataDefine(element.DataDefineNumeric)
			yyVAL.anything = d
		}
	case 141:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDefine(element.DataDefineNumeric)
			yyVAL.anything = d
		}
	case 142:
		{
			precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
			scale := yyS[yypt-1].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDefine(element.DataDefineNumeric)
			yyVAL.anything = d
		}
	case 143:
		{
			d := &element.Number{}
			d.SetDataDefine(element.DataDefineDecimal)
			yyVAL.anything = d
		}
	case 144:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDefine(element.DataDefineDecimal)
			yyVAL.anything = d
		}
	case 145:
		{
			precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
			scale := yyS[yypt-1].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDefine(element.DataDefineDecimal)
			yyVAL.anything = d
		}
	case 146:
		{
			d := &element.Number{}
			d.SetDataDefine(element.DataDefineDec)
			yyVAL.anything = d
		}
	case 147:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDefine(element.DataDefineDec)
			yyVAL.anything = d
		}
	case 148:
		{
			precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
			scale := yyS[yypt-1].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDefine(element.DataDefineDec)
			yyVAL.anything = d
		}
	case 149:
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDefine(element.DataDefineInteger)
			yyVAL.anything = d
		}
	case 150:
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDefine(element.DataDefineInt)
			yyVAL.anything = d
		}
	case 151:
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDefine(element.DataDefineSmallInt)
			yyVAL.anything = d
		}
	case 152:
		{
			precision := &element.NumberOrAsterisk{Number: 126}
			d := &element.Float{Precision: precision}
			d.SetDataDefine(element.DataDefineDoublePrecision)
			yyVAL.anything = d
		}
	case 153:
		{
			precision := &element.NumberOrAsterisk{Number: 63}
			d := &element.Float{Precision: precision}
			d.SetDataDefine(element.DataDefineReal)
			yyVAL.anything = d
		}
	case 154:
		{
			// empty
		}
	case 163:
		{
			// empty
		}
	case 165:
		{
			// empty
		}
	case 168:
		{
			// empty
		}
	case 178:
		{
			// empty
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

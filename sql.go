// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"strings"

	"github.com/sjjian/oracle-sql-parser/ast"
	"github.com/sjjian/oracle-sql-parser/ast/element"
)

func nextQuery(yylex interface{}) string {
	lex := yylex.(*yyLexImpl)
	tc := lex.scanner.TC
	query := string(lex.scanner.Text[lex.lastPos:tc])
	lex.lastPos = tc
	return strings.TrimSpace(query)
}

type yySymType struct {
	yys      int
	nothing  struct{}
	i        int
	b        bool
	str      string
	node     ast.Node
	anything interface{}
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault                = 57559
	yyEofCode                = 57344
	_E                       = 57506
	_G                       = 57507
	_K                       = 57508
	_M                       = 57509
	_P                       = 57510
	_T                       = 57511
	_add                     = 57350
	_advanced                = 57515
	_all                     = 57444
	_alter                   = 57348
	_always                  = 57423
	_archive                 = 57521
	_as                      = 57424
	_at                      = 57445
	_attributes              = 57552
	_auto                    = 57526
	_basic                   = 57516
	_bfile                   = 57377
	_binaryDouble            = 57359
	_binaryFloat             = 57358
	_blob                    = 57374
	_blockchain              = 57459
	_buffer_pool             = 57490
	_by                      = 57400
	_byte                    = 57352
	_cache                   = 57427
	_capacity                = 57527
	_cascade                 = 57410
	_cell_flash_cache        = 57491
	_char                    = 57351
	_character               = 57380
	_checkpoint              = 57456
	_clob                    = 57375
	_cluster                 = 57480
	_collate                 = 57393
	_column                  = 57446
	_columns                 = 57450
	_commit                  = 57472
	_compress                = 57517
	_constraint              = 57403
	_constraints             = 57453
	_continue                = 57451
	_create                  = 57458
	_creation                = 57482
	_critical                = 57532
	_cycle                   = 57428
	_data                    = 57466
	_date                    = 57362
	_day                     = 57372
	_dec                     = 57386
	_decimal                 = 57385
	_decrypt                 = 57443
	_default                 = 57422
	_deferrable              = 57414
	_deferred                = 57415
	_definition              = 57473
	_delete                  = 57411
	_delete_all              = 57542
	_disable                 = 57543
	_disable_all             = 57544
	_distribute              = 57535
	_dml                     = 57528
	_double                  = 57390
	_doubleQuoteStr          = 57557
	_drop                    = 57442
	_duplicate               = 57540
	_duplicated              = 57460
	_enable                  = 57545
	_enable_all              = 57546
	_encrypt                 = 57397
	_extended                = 57467
	_external                = 57549
	_filesystem_like_logging = 57512
	_flash_cache             = 57492
	_float                   = 57357
	_for                     = 57476
	_force                   = 57449
	_foreign                 = 57554
	_freelist                = 57493
	_freelists               = 57494
	_from                    = 57347
	_generated               = 57425
	_global                  = 57461
	_groups                  = 57505
	_heap                    = 57550
	_high                    = 57529
	_identified              = 57399
	_identity                = 57426
	_ilm                     = 57547
	_immediate               = 57416
	_immutable               = 57462
	_increment               = 57429
	_index                   = 57551
	_initial                 = 57495
	_initially               = 57417
	_initrans                = 57485
	_inmemory                = 57525
	_int                     = 57388
	_intNumber               = 57555
	_interger                = 57387
	_interval                = 57368
	_invalidate              = 57454
	_invisible               = 57395
	_is                      = 57420
	_keep                    = 57496
	_key                     = 57404
	_level                   = 57523
	_levels                  = 57447
	_limit                   = 57430
	_local                   = 57365
	_locking                 = 57524
	_logging                 = 57513
	_long                    = 57360
	_low                     = 57530
	_maxextents              = 57497
	_maxsize                 = 57498
	_maxtrans                = 57486
	_maxvalue                = 57431
	_medium                  = 57533
	_memcompress             = 57531
	_memoptimize             = 57477
	_metadata                = 57468
	_minextents              = 57499
	_minvalue                = 57432
	_modify                  = 57441
	_mouth                   = 57371
	_national                = 57383
	_nchar                   = 57354
	_nclob                   = 57376
	_next                    = 57500
	_no                      = 57401
	_nocache                 = 57433
	_nocompress              = 57518
	_nocycle                 = 57434
	_nologging               = 57514
	_nomaxvalue              = 57435
	_nominvalue              = 57436
	_none                    = 57469
	_nonquotedIdentifier     = 57558
	_noorder                 = 57437
	_norely                  = 57418
	_not                     = 57405
	_null                    = 57406
	_number                  = 57356
	_numeric                 = 57384
	_nvarchar2               = 57355
	_on                      = 57412
	_online                  = 57455
	_optimal                 = 57501
	_order                   = 57438
	_organization            = 57481
	_parent                  = 57471
	_partition               = 57536
	_pctfree                 = 57487
	_pctincrease             = 57502
	_pctused                 = 57488
	_policy                  = 57548
	_precision               = 57391
	_preserve                = 57474
	_primary                 = 57407
	_priority                = 57534
	_private                 = 57463
	_query                   = 57522
	_range                   = 57537
	_raw                     = 57361
	_read                    = 57478
	_real                    = 57392
	_recycle                 = 57503
	_references              = 57409
	_reject                  = 57553
	_rely                    = 57419
	_rename                  = 57457
	_row                     = 57519
	_rowid                   = 57378
	_rows                    = 57475
	_salt                    = 57402
	_scope                   = 57421
	_second                  = 57373
	_segment                 = 57483
	_select                  = 57346
	_service                 = 57539
	_set                     = 57413
	_sharded                 = 57464
	_sharding                = 57470
	_singleQuoteStr          = 57556
	_smallInt                = 57389
	_sort                    = 57394
	_spatial                 = 57541
	_start                   = 57439
	_storage                 = 57489
	_store                   = 57520
	_subpartition            = 57538
	_substitutable           = 57448
	_table                   = 57349
	_tablespace              = 57484
	_temporary               = 57465
	_time                    = 57366
	_timestamp               = 57363
	_to                      = 57370
	_unique                  = 57408
	_unlimited               = 57504
	_unused                  = 57452
	_urowid                  = 57379
	_using                   = 57398
	_value                   = 57440
	_varchar                 = 57382
	_varchar2                = 57353
	_varying                 = 57381
	_visible                 = 57396
	_with                    = 57364
	_write                   = 57479
	_year                    = 57369
	_zone                    = 57367
	yyErrCode                = 57345

	yyMaxDepth = 200
	yyTabOfs   = -420
)

var (
	yyPrec = map[int]int{}

	yyXLAT = map[int]int{
		41:    0,   // ')' (280x)
		57344: 1,   // $end (202x)
		59:    2,   // ';' (201x)
		44:    3,   // ',' (197x)
		57405: 4,   // _not (162x)
		57406: 5,   // _null (162x)
		57407: 6,   // _primary (160x)
		57408: 7,   // _unique (160x)
		57409: 8,   // _references (158x)
		57403: 9,   // _constraint (156x)
		57477: 10,  // _memoptimize (155x)
		57471: 11,  // _parent (152x)
		57397: 12,  // _encrypt (137x)
		57442: 13,  // _drop (125x)
		57446: 14,  // _column (117x)
		57364: 15,  // _with (110x)
		57421: 16,  // _scope (109x)
		57401: 17,  // _no (104x)
		57422: 18,  // _default (100x)
		57443: 19,  // _decrypt (93x)
		57547: 20,  // _ilm (93x)
		57525: 21,  // _inmemory (90x)
		57425: 22,  // _generated (83x)
		57395: 23,  // _invisible (80x)
		57396: 24,  // _visible (80x)
		57394: 25,  // _sort (75x)
		57393: 26,  // _collate (72x)
		57517: 27,  // _compress (69x)
		57519: 28,  // _row (68x)
		57518: 29,  // _nocompress (67x)
		57512: 30,  // _filesystem_like_logging (66x)
		57485: 31,  // _initrans (66x)
		57513: 32,  // _logging (66x)
		57486: 33,  // _maxtrans (66x)
		57514: 34,  // _nologging (66x)
		57487: 35,  // _pctfree (66x)
		57488: 36,  // _pctused (66x)
		57489: 37,  // _storage (66x)
		57484: 38,  // _tablespace (66x)
		40:    39,  // '(' (64x)
		57413: 40,  // _set (53x)
		57350: 41,  // _add (52x)
		57441: 42,  // _modify (51x)
		57555: 43,  // _intNumber (50x)
		57557: 44,  // _doubleQuoteStr (45x)
		57558: 45,  // _nonquotedIdentifier (43x)
		57490: 46,  // _buffer_pool (35x)
		57491: 47,  // _cell_flash_cache (35x)
		57492: 48,  // _flash_cache (35x)
		57493: 49,  // _freelist (35x)
		57494: 50,  // _freelists (35x)
		57495: 51,  // _initial (35x)
		57497: 52,  // _maxextents (35x)
		57498: 53,  // _maxsize (35x)
		57499: 54,  // _minextents (35x)
		57500: 55,  // _next (35x)
		57501: 56,  // _optimal (35x)
		57502: 57,  // _pctincrease (35x)
		57541: 58,  // _spatial (35x)
		57611: 59,  // Identifier (35x)
		57540: 60,  // _duplicate (32x)
		57549: 61,  // _external (28x)
		57481: 62,  // _organization (27x)
		57480: 63,  // _cluster (24x)
		57414: 64,  // _deferrable (24x)
		57412: 65,  // _on (24x)
		57483: 66,  // _segment (24x)
		57417: 67,  // _initially (23x)
		57576: 68,  // ColumnName (22x)
		57427: 69,  // _cache (17x)
		57428: 70,  // _cycle (17x)
		57535: 71,  // _distribute (17x)
		57429: 72,  // _increment (17x)
		57431: 73,  // _maxvalue (17x)
		57432: 74,  // _minvalue (17x)
		57433: 75,  // _nocache (17x)
		57434: 76,  // _nocycle (17x)
		57435: 77,  // _nomaxvalue (17x)
		57436: 78,  // _nominvalue (17x)
		57437: 79,  // _noorder (17x)
		57438: 80,  // _order (17x)
		57439: 81,  // _start (17x)
		57456: 82,  // _checkpoint (14x)
		57457: 83,  // _rename (14x)
		57410: 84,  // _cascade (13x)
		57476: 85,  // _for (12x)
		57454: 86,  // _invalidate (12x)
		57455: 87,  // _online (12x)
		57534: 88,  // _priority (11x)
		57402: 89,  // _salt (10x)
		57351: 90,  // _char (9x)
		57577: 91,  // ColumnNameList (9x)
		46:    92,  // '.' (8x)
		57418: 93,  // _norely (8x)
		57419: 94,  // _rely (8x)
		57378: 95,  // _rowid (8x)
		57556: 96,  // _singleQuoteStr (8x)
		57370: 97,  // _to (8x)
		57380: 98,  // _character (7x)
		57361: 99,  // _raw (7x)
		57583: 100, // ConstraintStateDeferrable (7x)
		57584: 101, // ConstraintStateDeferredOrImmediate (7x)
		57377: 102, // _bfile (6x)
		57359: 103, // _binaryDouble (6x)
		57358: 104, // _binaryFloat (6x)
		57374: 105, // _blob (6x)
		57375: 106, // _clob (6x)
		57362: 107, // _date (6x)
		57386: 108, // _dec (6x)
		57385: 109, // _decimal (6x)
		57390: 110, // _double (6x)
		57357: 111, // _float (6x)
		57554: 112, // _foreign (6x)
		57388: 113, // _int (6x)
		57387: 114, // _interger (6x)
		57368: 115, // _interval (6x)
		57360: 116, // _long (6x)
		57383: 117, // _national (6x)
		57354: 118, // _nchar (6x)
		57376: 119, // _nclob (6x)
		57356: 120, // _number (6x)
		57384: 121, // _numeric (6x)
		57355: 122, // _nvarchar2 (6x)
		57392: 123, // _real (6x)
		57389: 124, // _smallInt (6x)
		57363: 125, // _timestamp (6x)
		57379: 126, // _urowid (6x)
		57382: 127, // _varchar (6x)
		57353: 128, // _varchar2 (6x)
		57581: 129, // ConstraintNameOrEmpty (6x)
		57582: 130, // ConstraintState (6x)
		57585: 131, // ConstraintStateOrEmpty (6x)
		57669: 132, // PhysicalAttrClause (6x)
		57692: 133, // StorageClause (6x)
		57695: 134, // TableCompression (6x)
		42:    135, // '*' (5x)
		57529: 136, // _high (5x)
		57426: 137, // _identity (5x)
		57530: 138, // _low (5x)
		57469: 139, // _none (5x)
		57470: 140, // _sharding (5x)
		57448: 141, // _substitutable (5x)
		57381: 142, // _varying (5x)
		57628: 143, // InmemoryColumnClause (5x)
		57644: 144, // LoggingClause (5x)
		57660: 145, // NumberOrAsterisk (5x)
		57670: 146, // PhysicalAttrsClause (5x)
		57682: 147, // SegmentAttrClause (5x)
		57698: 148, // TableName (5x)
		57444: 149, // _all (4x)
		57424: 150, // _as (4x)
		57400: 151, // _by (4x)
		57548: 152, // _policy (4x)
		57573: 153, // ColumnDef (4x)
		57586: 154, // ConstraintStateRely (4x)
		57615: 155, // IdentityOptionsOrEmpty (4x)
		57617: 156, // IlmCompressionPolicy (4x)
		57618: 157, // IlmInmemoryPolicy (4x)
		57619: 158, // IlmPolicyClause (4x)
		57620: 159, // IlmTieringPolicy (4x)
		57623: 160, // InlineConstraint (4x)
		57629: 161, // InmemoryColumnClauses (4x)
		57630: 162, // InmemoryColumnClausesOrEmpty (4x)
		57672: 163, // RealColumnDef (4x)
		57686: 164, // SizeClause (4x)
		57411: 165, // _delete (3x)
		57399: 166, // _identified (3x)
		57496: 167, // _keep (3x)
		57404: 168, // _key (3x)
		57531: 169, // _memcompress (3x)
		57562: 170, // AnsiSupportDataTypes (3x)
		57566: 171, // CharacterDataTypes (3x)
		57567: 172, // CollateClause (3x)
		57588: 173, // Datatype (3x)
		57589: 174, // DatetimeDataTypes (3x)
		57595: 175, // DropColumnCheckpoint (3x)
		57598: 176, // DropColumnProp (3x)
		57640: 177, // InvisibleProp (3x)
		57643: 178, // LargeObjectDataTypes (3x)
		57645: 179, // LongAndRawDataTypes (3x)
		57659: 180, // NumberDataTypes (3x)
		57664: 181, // OralceBuiltInDataTypes (3x)
		57673: 182, // ReferencesClause (3x)
		57680: 183, // RowIdDataTypes (3x)
		57683: 184, // SegmentAttrsClause (3x)
		57348: 185, // _alter (2x)
		57445: 186, // _at (2x)
		57526: 187, // _auto (2x)
		57459: 188, // _blockchain (2x)
		57352: 189, // _byte (2x)
		57450: 190, // _columns (2x)
		57472: 191, // _commit (2x)
		57458: 192, // _create (2x)
		57466: 193, // _data (2x)
		57415: 194, // _deferred (2x)
		57473: 195, // _definition (2x)
		57449: 196, // _force (2x)
		57416: 197, // _immediate (2x)
		57523: 198, // _level (2x)
		57447: 199, // _levels (2x)
		57430: 200, // _limit (2x)
		57524: 201, // _locking (2x)
		57371: 202, // _mouth (2x)
		57536: 203, // _partition (2x)
		57474: 204, // _preserve (2x)
		57522: 205, // _query (2x)
		57478: 206, // _read (2x)
		57553: 207, // _reject (2x)
		57475: 208, // _rows (2x)
		57373: 209, // _second (2x)
		57520: 210, // _store (2x)
		57349: 211, // _table (2x)
		57465: 212, // _temporary (2x)
		57366: 213, // _time (2x)
		57504: 214, // _unlimited (2x)
		57452: 215, // _unused (2x)
		57479: 216, // _write (2x)
		57367: 217, // _zone (2x)
		57560: 218, // AddColumnClause (2x)
		57561: 219, // AlterTableStmt (2x)
		57564: 220, // ChangeColumnClause (2x)
		57568: 221, // CollateClauseOrEmpty (2x)
		57578: 222, // ColumnNameListForDropColumn (2x)
		57587: 223, // CreateTableStmt (2x)
		57590: 224, // DefaultClause (2x)
		57592: 225, // DefaultOrIdentityClause (2x)
		57596: 226, // DropColumnClause (2x)
		57599: 227, // DropColumnProps (2x)
		57600: 228, // DropColumnPropsOrEmpty (2x)
		57601: 229, // EmptyStmt (2x)
		57603: 230, // EncryptClause (2x)
		57606: 231, // Expr (2x)
		57608: 232, // ExternalTableClause (2x)
		57612: 233, // IdentityClause (2x)
		57613: 234, // IdentityOption (2x)
		57616: 235, // IlmClause (2x)
		57624: 236, // InlineConstraintList (2x)
		57625: 237, // InlineConstraintType (2x)
		57635: 238, // InmemoryMemCompress (2x)
		57638: 239, // InmemoryTableClause (2x)
		57642: 240, // IsForce (2x)
		57648: 241, // MemoptimizeRead (2x)
		57650: 242, // MemoptimizeWrite (2x)
		57652: 243, // ModifyColumnClause (2x)
		57653: 244, // ModifyColumnProp (2x)
		57655: 245, // ModifyColumnSubstitutable (2x)
		57656: 246, // ModifyColumnVisibility (2x)
		57658: 247, // ModifyRealColumnProp (2x)
		57666: 248, // OutOfLineConstraint (2x)
		57676: 249, // RelTableProp (2x)
		57684: 250, // SegmentAttrsClauseOrEmpty (2x)
		57690: 251, // Statement (2x)
		57693: 252, // StorageProp (2x)
		57696: 253, // TableCompressionOrEmpty (2x)
		61:    254, // '=' (1x)
		57515: 255, // _advanced (1x)
		57423: 256, // _always (1x)
		57521: 257, // _archive (1x)
		57552: 258, // _attributes (1x)
		57516: 259, // _basic (1x)
		57527: 260, // _capacity (1x)
		57453: 261, // _constraints (1x)
		57451: 262, // _continue (1x)
		57482: 263, // _creation (1x)
		57532: 264, // _critical (1x)
		57372: 265, // _day (1x)
		57542: 266, // _delete_all (1x)
		57543: 267, // _disable (1x)
		57544: 268, // _disable_all (1x)
		57528: 269, // _dml (1x)
		57460: 270, // _duplicated (1x)
		57506: 271, // _E (1x)
		57545: 272, // _enable (1x)
		57546: 273, // _enable_all (1x)
		57467: 274, // _extended (1x)
		57507: 275, // _G (1x)
		57461: 276, // _global (1x)
		57505: 277, // _groups (1x)
		57550: 278, // _heap (1x)
		57462: 279, // _immutable (1x)
		57551: 280, // _index (1x)
		57420: 281, // _is (1x)
		57508: 282, // _K (1x)
		57365: 283, // _local (1x)
		57509: 284, // _M (1x)
		57533: 285, // _medium (1x)
		57468: 286, // _metadata (1x)
		57510: 287, // _P (1x)
		57391: 288, // _precision (1x)
		57463: 289, // _private (1x)
		57537: 290, // _range (1x)
		57503: 291, // _recycle (1x)
		57539: 292, // _service (1x)
		57464: 293, // _sharded (1x)
		57538: 294, // _subpartition (1x)
		57511: 295, // _T (1x)
		57398: 296, // _using (1x)
		57440: 297, // _value (1x)
		57369: 298, // _year (1x)
		57563: 299, // BlockchainTableClauses (1x)
		57565: 300, // ChangeColumnClauseList (1x)
		57569: 301, // ColumnClauses (1x)
		57570: 302, // ColumnCompressLock (1x)
		57571: 303, // ColumnCompressProp (1x)
		57572: 304, // ColumnConstraintForModify (1x)
		57574: 305, // ColumnDefConstraint (1x)
		57575: 306, // ColumnDefList (1x)
		57579: 307, // ColumnNameListOrEmpty (1x)
		57580: 308, // ColumnProps (1x)
		57591: 309, // DefaultCollateClauseOrEmpty (1x)
		57593: 310, // DefaultOrIdentityClauseForModify (1x)
		57594: 311, // DeferredSegmentCreation (1x)
		57597: 312, // DropColumnOnline (1x)
		57602: 313, // EncryptAlgorithm (1x)
		57604: 314, // EncryptClauseForModify (1x)
		57605: 315, // EncryptionSpec (1x)
		57607: 316, // ExternalPartitionClause (1x)
		57609: 317, // HeapOrgTableClause (1x)
		57610: 318, // IdentifiedByClause (1x)
		57614: 319, // IdentityOptions (1x)
		57621: 320, // ImmutableTableClauses (1x)
		57622: 321, // IndexOrgTableClause (1x)
		57626: 322, // InlineRefConstraint (1x)
		57627: 323, // InmemoryAttrs (1x)
		57631: 324, // InmemoryDistribute (1x)
		57632: 325, // InmemoryDistributeBy (1x)
		57633: 326, // InmemoryDistributeFor (1x)
		57634: 327, // InmemoryDuplicate (1x)
		57636: 328, // InmemoryProp (1x)
		57637: 329, // InmemorySpatial (1x)
		57639: 330, // IntergrityAlgorithm (1x)
		57641: 331, // InvisiblePropOrEmpty (1x)
		57646: 332, // Memoptimize (1x)
		57647: 333, // MemoptimizeForAlterTable (1x)
		57649: 334, // MemoptimizeReadForAlterTable (1x)
		57651: 335, // MemoptimizeWriteForAlterTable (1x)
		57654: 336, // ModifyColumnProps (1x)
		57657: 337, // ModifyColumnVisibilityList (1x)
		57661: 338, // OnCommitClause (1x)
		57662: 339, // OnCommitDef (1x)
		57663: 340, // OnCommitRows (1x)
		57665: 341, // OrgClause (1x)
		57667: 342, // OutOfLinePartStorageList (1x)
		57668: 343, // ParentTable (1x)
		57671: 344, // PhysicalProps (1x)
		57674: 345, // ReferencesOnDelete (1x)
		57675: 346, // RelTableDef (1x)
		57677: 347, // RelTableProps (1x)
		57678: 348, // RelTablePropsOrEmpty (1x)
		57679: 349, // RenameColumnClause (1x)
		57681: 350, // SaltProp (1x)
		57685: 351, // ShardingType (1x)
		57687: 352, // SizeUnit (1x)
		57688: 353, // SortProp (1x)
		57689: 354, // Start (1x)
		57691: 355, // StatementList (1x)
		57694: 356, // StorageProps (1x)
		57697: 357, // TableDef (1x)
		57699: 358, // TableProps (1x)
		57700: 359, // TableType (1x)
		57559: 360, // $default (0x)
		57347: 361, // _from (0x)
		57346: 362, // _select (0x)
		57345: 363, // error (0x)
	}

	yySymNames = []string{
		"')'",
		"$end",
		"';'",
		"','",
		"_not",
		"_null",
		"_primary",
		"_unique",
		"_references",
		"_constraint",
		"_memoptimize",
		"_parent",
		"_encrypt",
		"_drop",
		"_column",
		"_with",
		"_scope",
		"_no",
		"_default",
		"_decrypt",
		"_ilm",
		"_inmemory",
		"_generated",
		"_invisible",
		"_visible",
		"_sort",
		"_collate",
		"_compress",
		"_row",
		"_nocompress",
		"_filesystem_like_logging",
		"_initrans",
		"_logging",
		"_maxtrans",
		"_nologging",
		"_pctfree",
		"_pctused",
		"_storage",
		"_tablespace",
		"'('",
		"_set",
		"_add",
		"_modify",
		"_intNumber",
		"_doubleQuoteStr",
		"_nonquotedIdentifier",
		"_buffer_pool",
		"_cell_flash_cache",
		"_flash_cache",
		"_freelist",
		"_freelists",
		"_initial",
		"_maxextents",
		"_maxsize",
		"_minextents",
		"_next",
		"_optimal",
		"_pctincrease",
		"_spatial",
		"Identifier",
		"_duplicate",
		"_external",
		"_organization",
		"_cluster",
		"_deferrable",
		"_on",
		"_segment",
		"_initially",
		"ColumnName",
		"_cache",
		"_cycle",
		"_distribute",
		"_increment",
		"_maxvalue",
		"_minvalue",
		"_nocache",
		"_nocycle",
		"_nomaxvalue",
		"_nominvalue",
		"_noorder",
		"_order",
		"_start",
		"_checkpoint",
		"_rename",
		"_cascade",
		"_for",
		"_invalidate",
		"_online",
		"_priority",
		"_salt",
		"_char",
		"ColumnNameList",
		"'.'",
		"_norely",
		"_rely",
		"_rowid",
		"_singleQuoteStr",
		"_to",
		"_character",
		"_raw",
		"ConstraintStateDeferrable",
		"ConstraintStateDeferredOrImmediate",
		"_bfile",
		"_binaryDouble",
		"_binaryFloat",
		"_blob",
		"_clob",
		"_date",
		"_dec",
		"_decimal",
		"_double",
		"_float",
		"_foreign",
		"_int",
		"_interger",
		"_interval",
		"_long",
		"_national",
		"_nchar",
		"_nclob",
		"_number",
		"_numeric",
		"_nvarchar2",
		"_real",
		"_smallInt",
		"_timestamp",
		"_urowid",
		"_varchar",
		"_varchar2",
		"ConstraintNameOrEmpty",
		"ConstraintState",
		"ConstraintStateOrEmpty",
		"PhysicalAttrClause",
		"StorageClause",
		"TableCompression",
		"'*'",
		"_high",
		"_identity",
		"_low",
		"_none",
		"_sharding",
		"_substitutable",
		"_varying",
		"InmemoryColumnClause",
		"LoggingClause",
		"NumberOrAsterisk",
		"PhysicalAttrsClause",
		"SegmentAttrClause",
		"TableName",
		"_all",
		"_as",
		"_by",
		"_policy",
		"ColumnDef",
		"ConstraintStateRely",
		"IdentityOptionsOrEmpty",
		"IlmCompressionPolicy",
		"IlmInmemoryPolicy",
		"IlmPolicyClause",
		"IlmTieringPolicy",
		"InlineConstraint",
		"InmemoryColumnClauses",
		"InmemoryColumnClausesOrEmpty",
		"RealColumnDef",
		"SizeClause",
		"_delete",
		"_identified",
		"_keep",
		"_key",
		"_memcompress",
		"AnsiSupportDataTypes",
		"CharacterDataTypes",
		"CollateClause",
		"Datatype",
		"DatetimeDataTypes",
		"DropColumnCheckpoint",
		"DropColumnProp",
		"InvisibleProp",
		"LargeObjectDataTypes",
		"LongAndRawDataTypes",
		"NumberDataTypes",
		"OralceBuiltInDataTypes",
		"ReferencesClause",
		"RowIdDataTypes",
		"SegmentAttrsClause",
		"_alter",
		"_at",
		"_auto",
		"_blockchain",
		"_byte",
		"_columns",
		"_commit",
		"_create",
		"_data",
		"_deferred",
		"_definition",
		"_force",
		"_immediate",
		"_level",
		"_levels",
		"_limit",
		"_locking",
		"_mouth",
		"_partition",
		"_preserve",
		"_query",
		"_read",
		"_reject",
		"_rows",
		"_second",
		"_store",
		"_table",
		"_temporary",
		"_time",
		"_unlimited",
		"_unused",
		"_write",
		"_zone",
		"AddColumnClause",
		"AlterTableStmt",
		"ChangeColumnClause",
		"CollateClauseOrEmpty",
		"ColumnNameListForDropColumn",
		"CreateTableStmt",
		"DefaultClause",
		"DefaultOrIdentityClause",
		"DropColumnClause",
		"DropColumnProps",
		"DropColumnPropsOrEmpty",
		"EmptyStmt",
		"EncryptClause",
		"Expr",
		"ExternalTableClause",
		"IdentityClause",
		"IdentityOption",
		"IlmClause",
		"InlineConstraintList",
		"InlineConstraintType",
		"InmemoryMemCompress",
		"InmemoryTableClause",
		"IsForce",
		"MemoptimizeRead",
		"MemoptimizeWrite",
		"ModifyColumnClause",
		"ModifyColumnProp",
		"ModifyColumnSubstitutable",
		"ModifyColumnVisibility",
		"ModifyRealColumnProp",
		"OutOfLineConstraint",
		"RelTableProp",
		"SegmentAttrsClauseOrEmpty",
		"Statement",
		"StorageProp",
		"TableCompressionOrEmpty",
		"'='",
		"_advanced",
		"_always",
		"_archive",
		"_attributes",
		"_basic",
		"_capacity",
		"_constraints",
		"_continue",
		"_creation",
		"_critical",
		"_day",
		"_delete_all",
		"_disable",
		"_disable_all",
		"_dml",
		"_duplicated",
		"_E",
		"_enable",
		"_enable_all",
		"_extended",
		"_G",
		"_global",
		"_groups",
		"_heap",
		"_immutable",
		"_index",
		"_is",
		"_K",
		"_local",
		"_M",
		"_medium",
		"_metadata",
		"_P",
		"_precision",
		"_private",
		"_range",
		"_recycle",
		"_service",
		"_sharded",
		"_subpartition",
		"_T",
		"_using",
		"_value",
		"_year",
		"BlockchainTableClauses",
		"ChangeColumnClauseList",
		"ColumnClauses",
		"ColumnCompressLock",
		"ColumnCompressProp",
		"ColumnConstraintForModify",
		"ColumnDefConstraint",
		"ColumnDefList",
		"ColumnNameListOrEmpty",
		"ColumnProps",
		"DefaultCollateClauseOrEmpty",
		"DefaultOrIdentityClauseForModify",
		"DeferredSegmentCreation",
		"DropColumnOnline",
		"EncryptAlgorithm",
		"EncryptClauseForModify",
		"EncryptionSpec",
		"ExternalPartitionClause",
		"HeapOrgTableClause",
		"IdentifiedByClause",
		"IdentityOptions",
		"ImmutableTableClauses",
		"IndexOrgTableClause",
		"InlineRefConstraint",
		"InmemoryAttrs",
		"InmemoryDistribute",
		"InmemoryDistributeBy",
		"InmemoryDistributeFor",
		"InmemoryDuplicate",
		"InmemoryProp",
		"InmemorySpatial",
		"IntergrityAlgorithm",
		"InvisiblePropOrEmpty",
		"Memoptimize",
		"MemoptimizeForAlterTable",
		"MemoptimizeReadForAlterTable",
		"MemoptimizeWriteForAlterTable",
		"ModifyColumnProps",
		"ModifyColumnVisibilityList",
		"OnCommitClause",
		"OnCommitDef",
		"OnCommitRows",
		"OrgClause",
		"OutOfLinePartStorageList",
		"ParentTable",
		"PhysicalProps",
		"ReferencesOnDelete",
		"RelTableDef",
		"RelTableProps",
		"RelTablePropsOrEmpty",
		"RenameColumnClause",
		"SaltProp",
		"ShardingType",
		"SizeUnit",
		"SortProp",
		"Start",
		"StatementList",
		"StorageProps",
		"TableDef",
		"TableProps",
		"TableType",
		"$default",
		"_from",
		"_select",
		"error",
	}

	yyTokenLiteralStrings = map[int]string{
		57555: "int number",
		57557: "double quotes string",
		57558: "nonquoted identifier",
		57556: "single quotes string",
	}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {354, 1},
		2:   {355, 1},
		3:   {355, 3},
		4:   {251, 1},
		5:   {251, 1},
		6:   {251, 1},
		7:   {229, 0},
		8:   {148, 1},
		9:   {148, 3},
		10:  {91, 1},
		11:  {91, 3},
		12:  {68, 1},
		13:  {59, 1},
		14:  {59, 1},
		15:  {219, 5},
		16:  {301, 1},
		17:  {301, 1},
		18:  {300, 1},
		19:  {300, 2},
		20:  {220, 1},
		21:  {220, 1},
		22:  {220, 1},
		23:  {218, 6},
		24:  {308, 0},
		25:  {342, 0},
		26:  {306, 1},
		27:  {306, 3},
		28:  {153, 1},
		29:  {163, 8},
		30:  {221, 0},
		31:  {221, 1},
		32:  {172, 2},
		33:  {353, 0},
		34:  {353, 1},
		35:  {331, 0},
		36:  {331, 1},
		37:  {177, 1},
		38:  {177, 1},
		39:  {225, 0},
		40:  {225, 1},
		41:  {225, 1},
		42:  {224, 2},
		43:  {224, 4},
		44:  {233, 4},
		45:  {233, 5},
		46:  {233, 5},
		47:  {233, 6},
		48:  {233, 8},
		49:  {155, 0},
		50:  {155, 3},
		51:  {319, 0},
		52:  {319, 1},
		53:  {319, 2},
		54:  {234, 3},
		55:  {234, 4},
		56:  {234, 3},
		57:  {234, 2},
		58:  {234, 1},
		59:  {234, 2},
		60:  {234, 1},
		61:  {234, 1},
		62:  {234, 1},
		63:  {234, 2},
		64:  {234, 1},
		65:  {234, 1},
		66:  {234, 1},
		67:  {230, 0},
		68:  {230, 2},
		69:  {315, 4},
		70:  {313, 0},
		71:  {313, 2},
		72:  {318, 0},
		73:  {318, 3},
		74:  {330, 0},
		75:  {330, 1},
		76:  {350, 0},
		77:  {350, 1},
		78:  {350, 2},
		79:  {305, 0},
		80:  {305, 1},
		81:  {305, 1},
		82:  {236, 1},
		83:  {236, 2},
		84:  {243, 4},
		85:  {243, 4},
		86:  {243, 1},
		87:  {336, 1},
		88:  {336, 3},
		89:  {244, 1},
		90:  {247, 6},
		91:  {310, 2},
		92:  {310, 1},
		93:  {314, 1},
		94:  {314, 1},
		95:  {304, 0},
		96:  {304, 1},
		97:  {337, 1},
		98:  {337, 3},
		99:  {246, 2},
		100: {245, 7},
		101: {245, 8},
		102: {240, 0},
		103: {240, 1},
		104: {226, 5},
		105: {226, 4},
		106: {226, 4},
		107: {226, 4},
		108: {222, 2},
		109: {222, 3},
		110: {228, 0},
		111: {228, 1},
		112: {227, 1},
		113: {227, 2},
		114: {176, 2},
		115: {176, 1},
		116: {312, 0},
		117: {312, 1},
		118: {175, 0},
		119: {175, 2},
		120: {349, 5},
		121: {223, 8},
		122: {359, 0},
		123: {359, 2},
		124: {359, 2},
		125: {359, 1},
		126: {359, 1},
		127: {359, 1},
		128: {359, 1},
		129: {359, 2},
		130: {351, 0},
		131: {351, 3},
		132: {351, 3},
		133: {351, 4},
		134: {351, 3},
		135: {343, 0},
		136: {343, 2},
		137: {357, 1},
		138: {346, 7},
		139: {320, 0},
		140: {299, 0},
		141: {309, 0},
		142: {309, 2},
		143: {338, 2},
		144: {339, 0},
		145: {339, 4},
		146: {339, 4},
		147: {340, 0},
		148: {340, 4},
		149: {340, 4},
		150: {344, 0},
		151: {344, 5},
		152: {344, 3},
		153: {344, 2},
		154: {344, 5},
		155: {311, 0},
		156: {311, 3},
		157: {311, 3},
		158: {250, 0},
		159: {250, 1},
		160: {184, 1},
		161: {184, 2},
		162: {147, 1},
		163: {147, 2},
		164: {147, 3},
		165: {147, 1},
		166: {147, 1},
		167: {146, 1},
		168: {146, 2},
		169: {132, 2},
		170: {132, 2},
		171: {132, 2},
		172: {132, 2},
		173: {132, 1},
		174: {133, 4},
		175: {356, 1},
		176: {356, 2},
		177: {252, 2},
		178: {252, 2},
		179: {252, 2},
		180: {252, 2},
		181: {252, 2},
		182: {252, 2},
		183: {252, 2},
		184: {252, 2},
		185: {252, 2},
		186: {252, 3},
		187: {252, 1},
		188: {252, 2},
		189: {252, 2},
		190: {252, 2},
		191: {252, 2},
		192: {252, 2},
		193: {252, 2},
		194: {252, 2},
		195: {252, 2},
		196: {252, 2},
		197: {252, 2},
		198: {252, 2},
		199: {252, 1},
		200: {164, 2},
		201: {352, 0},
		202: {352, 1},
		203: {352, 1},
		204: {352, 1},
		205: {352, 1},
		206: {352, 1},
		207: {352, 1},
		208: {144, 1},
		209: {144, 1},
		210: {144, 1},
		211: {253, 0},
		212: {253, 1},
		213: {134, 1},
		214: {134, 3},
		215: {134, 4},
		216: {134, 4},
		217: {134, 5},
		218: {134, 1},
		219: {303, 0},
		220: {303, 2},
		221: {303, 3},
		222: {303, 3},
		223: {303, 2},
		224: {303, 3},
		225: {303, 3},
		226: {302, 0},
		227: {302, 3},
		228: {302, 4},
		229: {239, 0},
		230: {239, 3},
		231: {239, 3},
		232: {239, 1},
		233: {323, 5},
		234: {238, 0},
		235: {238, 3},
		236: {238, 3},
		237: {238, 4},
		238: {238, 4},
		239: {238, 3},
		240: {238, 4},
		241: {238, 4},
		242: {238, 2},
		243: {238, 2},
		244: {328, 0},
		245: {328, 2},
		246: {328, 2},
		247: {328, 2},
		248: {328, 2},
		249: {328, 2},
		250: {324, 0},
		251: {324, 3},
		252: {325, 0},
		253: {325, 1},
		254: {325, 3},
		255: {325, 2},
		256: {325, 2},
		257: {326, 0},
		258: {326, 3},
		259: {326, 3},
		260: {326, 3},
		261: {326, 3},
		262: {327, 0},
		263: {327, 1},
		264: {327, 2},
		265: {327, 2},
		266: {329, 0},
		267: {329, 2},
		268: {162, 0},
		269: {162, 1},
		270: {161, 1},
		271: {161, 2},
		272: {143, 4},
		273: {143, 5},
		274: {143, 5},
		275: {235, 0},
		276: {235, 4},
		277: {235, 4},
		278: {235, 4},
		279: {235, 4},
		280: {235, 2},
		281: {235, 2},
		282: {235, 2},
		283: {158, 1},
		284: {158, 1},
		285: {158, 1},
		286: {156, 0},
		287: {159, 0},
		288: {157, 0},
		289: {341, 3},
		290: {341, 3},
		291: {341, 2},
		292: {317, 3},
		293: {321, 0},
		294: {232, 0},
		295: {316, 4},
		296: {316, 6},
		297: {358, 0},
		298: {348, 0},
		299: {348, 3},
		300: {347, 1},
		301: {347, 3},
		302: {249, 1},
		303: {249, 1},
		304: {173, 1},
		305: {173, 1},
		306: {145, 1},
		307: {145, 1},
		308: {181, 1},
		309: {181, 1},
		310: {181, 1},
		311: {181, 1},
		312: {181, 1},
		313: {181, 1},
		314: {171, 1},
		315: {171, 4},
		316: {171, 5},
		317: {171, 5},
		318: {171, 4},
		319: {171, 5},
		320: {171, 5},
		321: {171, 1},
		322: {171, 4},
		323: {171, 4},
		324: {180, 1},
		325: {180, 4},
		326: {180, 6},
		327: {180, 1},
		328: {180, 4},
		329: {180, 1},
		330: {180, 1},
		331: {179, 1},
		332: {179, 2},
		333: {179, 4},
		334: {174, 1},
		335: {174, 1},
		336: {174, 4},
		337: {174, 7},
		338: {174, 8},
		339: {174, 4},
		340: {174, 7},
		341: {174, 4},
		342: {174, 7},
		343: {174, 10},
		344: {174, 7},
		345: {178, 1},
		346: {178, 1},
		347: {178, 1},
		348: {178, 1},
		349: {183, 1},
		350: {183, 1},
		351: {183, 4},
		352: {170, 4},
		353: {170, 5},
		354: {170, 5},
		355: {170, 5},
		356: {170, 4},
		357: {170, 5},
		358: {170, 6},
		359: {170, 5},
		360: {170, 6},
		361: {170, 1},
		362: {170, 4},
		363: {170, 6},
		364: {170, 1},
		365: {170, 4},
		366: {170, 6},
		367: {170, 1},
		368: {170, 4},
		369: {170, 6},
		370: {170, 1},
		371: {170, 1},
		372: {170, 1},
		373: {170, 2},
		374: {170, 1},
		375: {129, 0},
		376: {129, 2},
		377: {160, 3},
		378: {160, 3},
		379: {237, 1},
		380: {237, 2},
		381: {237, 1},
		382: {237, 2},
		383: {182, 4},
		384: {307, 0},
		385: {307, 3},
		386: {345, 0},
		387: {345, 3},
		388: {345, 4},
		389: {131, 0},
		390: {131, 1},
		391: {130, 2},
		392: {130, 3},
		393: {130, 2},
		394: {130, 3},
		395: {100, 1},
		396: {100, 2},
		397: {101, 2},
		398: {101, 2},
		399: {154, 0},
		400: {154, 1},
		401: {154, 1},
		402: {322, 3},
		403: {322, 2},
		404: {322, 3},
		405: {248, 6},
		406: {248, 7},
		407: {248, 8},
		408: {333, 2},
		409: {334, 1},
		410: {334, 4},
		411: {335, 1},
		412: {335, 4},
		413: {332, 2},
		414: {241, 0},
		415: {241, 3},
		416: {242, 0},
		417: {242, 3},
		418: {231, 1},
		419: {231, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [732][]uint16{
		// 0
		{1: 413, 413, 185: 427, 192: 428, 219: 425, 223: 426, 229: 424, 251: 423, 354: 421, 422},
		{1: 420},
		{1: 419, 1150},
		{1: 418, 418},
		{1: 416, 416},
		// 5
		{1: 415, 415},
		{1: 414, 414},
		{211: 1041},
		{211: 429},
		{44: 298, 298, 188: 436, 270: 434, 276: 431, 279: 435, 289: 432, 293: 433, 359: 430},
		// 10
		{44: 442, 441, 59: 440, 148: 443},
		{212: 439},
		{212: 438},
		{44: 295, 295},
		{44: 294, 294},
		// 15
		{44: 293, 293, 188: 437},
		{44: 292, 292},
		{44: 291, 291},
		{44: 296, 296},
		{44: 297, 297},
		// 20
		{412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 13: 412, 412, 17: 412, 412, 27: 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 61: 412, 412, 412, 412, 412, 412, 412, 83: 412, 92: 1039, 140: 412},
		{407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 27: 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 58: 407, 60: 407, 407, 407, 407, 407, 407, 407, 407, 82: 407, 407, 407, 86: 407, 407, 89: 407, 407, 92: 407, 95: 407, 407, 407, 407, 407, 102: 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 140: 407, 407},
		{406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 27: 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 58: 406, 60: 406, 406, 406, 406, 406, 406, 406, 406, 82: 406, 406, 406, 86: 406, 406, 89: 406, 406, 92: 406, 95: 406, 406, 406, 406, 406, 102: 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 140: 406, 406},
		{1: 290, 290, 10: 290, 290, 14: 290, 18: 290, 27: 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 61: 290, 290, 290, 65: 290, 290, 140: 445, 351: 444},
		{1: 122, 122, 10: 122, 122, 14: 122, 18: 122, 27: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 455, 61: 122, 122, 122, 65: 122, 122, 346: 453, 348: 454, 357: 452},
		// 25
		{254: 446},
		{139: 450, 193: 448, 274: 449, 286: 447},
		{1: 289, 289, 10: 289, 289, 14: 289, 18: 289, 27: 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 61: 289, 289, 289, 65: 289, 289},
		{1: 288, 288, 10: 288, 288, 14: 288, 18: 288, 27: 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 61: 288, 288, 288, 65: 288, 288},
		{193: 451},
		// 30
		{1: 286, 286, 10: 286, 286, 14: 286, 18: 286, 27: 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 61: 286, 286, 286, 65: 286, 286},
		{1: 287, 287, 10: 287, 287, 14: 287, 18: 287, 27: 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 61: 287, 287, 287, 65: 287, 287},
		{1: 6, 6, 10: 1029, 6, 241: 1028, 332: 1027},
		{1: 283, 283, 10: 283, 283},
		{1: 281, 281, 10: 281, 281, 14: 281, 18: 281, 27: 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 61: 281, 281, 281, 65: 281, 281, 320: 784},
		// 35
		{6: 45, 45, 9: 463, 44: 442, 441, 59: 456, 68: 458, 112: 45, 129: 464, 153: 461, 163: 457, 248: 462, 460, 347: 459},
		{408, 408, 408, 408, 408, 10: 408, 408, 13: 408, 408, 17: 408, 20: 408, 408, 23: 408, 408, 40: 408, 408, 408, 82: 408, 84: 408, 86: 408, 408, 90: 408, 95: 408, 97: 408, 408, 408, 102: 408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 113: 408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 141: 408},
		{392, 3: 392},
		{90: 528, 95: 545, 98: 547, 537, 102: 544, 535, 534, 541, 542, 538, 552, 551, 556, 533, 113: 554, 553, 540, 536, 549, 530, 543, 532, 550, 531, 557, 555, 539, 546, 548, 529, 170: 521, 522, 173: 519, 525, 178: 526, 524, 523, 520, 183: 527},
		{516, 3: 517},
		// 40
		{120, 3: 120},
		{118, 3: 118},
		{117, 3: 117},
		{44: 442, 441, 59: 515},
		{6: 466, 465, 112: 467},
		// 45
		{39: 511},
		{168: 506},
		{168: 468},
		{39: 469},
		{44: 442, 441, 59: 456, 68: 470, 91: 471},
		// 50
		{410, 3: 410},
		{473, 3: 472},
		{44: 442, 441, 59: 456, 68: 505},
		{8: 474, 182: 475},
		{44: 442, 441, 59: 440, 148: 494},
		// 55
		{31, 3: 31, 480, 64: 479, 67: 481, 100: 477, 478, 130: 476, 482},
		{30, 3: 30, 30, 30, 30, 30, 30, 30},
		{21, 3: 21, 21, 21, 21, 21, 21, 21, 67: 481, 93: 489, 488, 101: 492, 154: 491},
		{21, 3: 21, 480, 21, 21, 21, 21, 21, 64: 479, 93: 489, 488, 100: 487, 154: 486},
		{25, 3: 25, 25, 25, 25, 25, 25, 25, 67: 25, 93: 25, 25},
		// 60
		{64: 485},
		{194: 483, 197: 484},
		{13, 3: 13},
		{23, 3: 23, 23, 23, 23, 23, 23, 23, 64: 23, 93: 23, 23},
		{22, 3: 22, 22, 22, 22, 22, 22, 22, 64: 22, 93: 22, 22},
		// 65
		{24, 3: 24, 24, 24, 24, 24, 24, 24, 67: 24, 93: 24, 24},
		{27, 3: 27, 27, 27, 27, 27, 27, 27},
		{21, 3: 21, 21, 21, 21, 21, 21, 21, 93: 489, 488, 154: 490},
		{20, 3: 20, 20, 20, 20, 20, 20, 20},
		{19, 3: 19, 19, 19, 19, 19, 19, 19},
		// 70
		{26, 3: 26, 26, 26, 26, 26, 26, 26},
		{29, 3: 29, 29, 29, 29, 29, 29, 29},
		{21, 3: 21, 21, 21, 21, 21, 21, 21, 93: 489, 488, 154: 493},
		{28, 3: 28, 28, 28, 28, 28, 28, 28},
		{36, 3: 36, 36, 36, 36, 36, 36, 36, 39: 496, 64: 36, 36, 67: 36, 307: 495},
		// 75
		{34, 3: 34, 34, 34, 34, 34, 34, 34, 64: 34, 500, 67: 34, 345: 499},
		{44: 442, 441, 59: 456, 68: 470, 91: 497},
		{498, 3: 472},
		{35, 3: 35, 35, 35, 35, 35, 35, 35, 64: 35, 35, 67: 35},
		{37, 3: 37, 37, 37, 37, 37, 37, 37, 64: 37, 67: 37},
		// 80
		{165: 501},
		{40: 503, 84: 502},
		{33, 3: 33, 33, 33, 33, 33, 33, 33, 64: 33, 67: 33},
		{5: 504},
		{32, 3: 32, 32, 32, 32, 32, 32, 32, 64: 32, 67: 32},
		// 85
		{409, 3: 409},
		{39: 507},
		{44: 442, 441, 59: 456, 68: 470, 91: 508},
		{509, 3: 472},
		{31, 3: 31, 480, 64: 479, 67: 481, 100: 477, 478, 130: 476, 510},
		// 90
		{14, 3: 14},
		{44: 442, 441, 59: 456, 68: 470, 91: 512},
		{513, 3: 472},
		{31, 3: 31, 480, 64: 479, 67: 481, 100: 477, 478, 130: 476, 514},
		{15, 3: 15},
		// 95
		{4: 44, 44, 44, 44, 44, 112: 44},
		{1: 121, 121, 10: 121, 121, 14: 121, 18: 121, 27: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 61: 121, 121, 121, 65: 121, 121},
		{6: 45, 45, 9: 463, 44: 442, 441, 59: 456, 68: 458, 112: 45, 129: 464, 153: 461, 163: 457, 248: 462, 518},
		{119, 3: 119},
		{390, 3: 390, 390, 390, 390, 390, 390, 390, 12: 390, 15: 390, 390, 18: 390, 22: 390, 390, 390, 390, 682, 172: 681, 221: 680},
		// 100
		{116, 3: 116, 116, 116, 116, 116, 116, 116, 12: 116, 116, 15: 116, 116, 18: 116, 116, 22: 116, 116, 116, 116, 116},
		{115, 3: 115, 115, 115, 115, 115, 115, 115, 12: 115, 115, 15: 115, 115, 18: 115, 115, 22: 115, 115, 115, 115, 115},
		{112, 3: 112, 112, 112, 112, 112, 112, 112, 12: 112, 112, 15: 112, 112, 18: 112, 112, 22: 112, 112, 112, 112, 112},
		{111, 3: 111, 111, 111, 111, 111, 111, 111, 12: 111, 111, 15: 111, 111, 18: 111, 111, 22: 111, 111, 111, 111, 111},
		{110, 3: 110, 110, 110, 110, 110, 110, 110, 12: 110, 110, 15: 110, 110, 18: 110, 110, 22: 110, 110, 110, 110, 110},
		// 105
		{109, 3: 109, 109, 109, 109, 109, 109, 109, 12: 109, 109, 15: 109, 109, 18: 109, 109, 22: 109, 109, 109, 109, 109},
		{108, 3: 108, 108, 108, 108, 108, 108, 108, 12: 108, 108, 15: 108, 108, 18: 108, 108, 22: 108, 108, 108, 108, 108},
		{107, 3: 107, 107, 107, 107, 107, 107, 107, 12: 107, 107, 15: 107, 107, 18: 107, 107, 22: 107, 107, 107, 107, 107},
		{106, 3: 106, 106, 106, 106, 106, 106, 106, 12: 106, 106, 15: 106, 106, 18: 106, 106, 22: 106, 106, 106, 106, 106, 39: 669, 142: 670},
		{39: 662},
		// 110
		{99, 3: 99, 99, 99, 99, 99, 99, 99, 12: 99, 99, 15: 99, 99, 18: 99, 99, 22: 99, 99, 99, 99, 99, 39: 655, 142: 656},
		{39: 652},
		{96, 3: 96, 96, 96, 96, 96, 96, 96, 12: 96, 96, 15: 96, 96, 18: 96, 96, 22: 96, 96, 96, 96, 96, 39: 646},
		{93, 3: 93, 93, 93, 93, 93, 93, 93, 12: 93, 93, 15: 93, 93, 18: 93, 93, 22: 93, 93, 93, 93, 93, 39: 643},
		{91, 3: 91, 91, 91, 91, 91, 91, 91, 12: 91, 91, 15: 91, 91, 18: 91, 91, 22: 91, 91, 91, 91, 91},
		// 115
		{90, 3: 90, 90, 90, 90, 90, 90, 90, 12: 90, 90, 15: 90, 90, 18: 90, 90, 22: 90, 90, 90, 90, 90},
		{89, 3: 89, 89, 89, 89, 89, 89, 89, 12: 89, 89, 15: 89, 89, 18: 89, 89, 22: 89, 89, 89, 89, 89, 99: 642},
		{39: 639},
		{86, 3: 86, 86, 86, 86, 86, 86, 86, 12: 86, 86, 15: 86, 86, 18: 86, 86, 22: 86, 86, 86, 86, 86},
		{85, 3: 85, 85, 85, 85, 85, 85, 85, 12: 85, 85, 15: 85, 85, 18: 85, 85, 22: 85, 85, 85, 85, 85, 39: 630},
		// 120
		{265: 609, 298: 608},
		{75, 3: 75, 75, 75, 75, 75, 75, 75, 12: 75, 75, 15: 75, 75, 18: 75, 75, 22: 75, 75, 75, 75, 75},
		{74, 3: 74, 74, 74, 74, 74, 74, 74, 12: 74, 74, 15: 74, 74, 18: 74, 74, 22: 74, 74, 74, 74, 74},
		{73, 3: 73, 73, 73, 73, 73, 73, 73, 12: 73, 73, 15: 73, 73, 18: 73, 73, 22: 73, 73, 73, 73, 73},
		{72, 3: 72, 72, 72, 72, 72, 72, 72, 12: 72, 72, 15: 72, 72, 18: 72, 72, 22: 72, 72, 72, 72, 72},
		// 125
		{71, 3: 71, 71, 71, 71, 71, 71, 71, 12: 71, 71, 15: 71, 71, 18: 71, 71, 22: 71, 71, 71, 71, 71},
		{70, 3: 70, 70, 70, 70, 70, 70, 70, 12: 70, 70, 15: 70, 70, 18: 70, 70, 22: 70, 70, 70, 70, 70, 39: 605},
		{39: 598, 142: 599},
		{39: 595},
		{90: 580, 98: 579},
		// 130
		{59, 3: 59, 59, 59, 59, 59, 59, 59, 12: 59, 59, 15: 59, 59, 18: 59, 59, 22: 59, 59, 59, 59, 59, 39: 573},
		{56, 3: 56, 56, 56, 56, 56, 56, 56, 12: 56, 56, 15: 56, 56, 18: 56, 56, 22: 56, 56, 56, 56, 56, 39: 567},
		{53, 3: 53, 53, 53, 53, 53, 53, 53, 12: 53, 53, 15: 53, 53, 18: 53, 53, 22: 53, 53, 53, 53, 53, 39: 559},
		{50, 3: 50, 50, 50, 50, 50, 50, 50, 12: 50, 50, 15: 50, 50, 18: 50, 50, 22: 50, 50, 50, 50, 50},
		{49, 3: 49, 49, 49, 49, 49, 49, 49, 12: 49, 49, 15: 49, 49, 18: 49, 49, 22: 49, 49, 49, 49, 49},
		// 135
		{48, 3: 48, 48, 48, 48, 48, 48, 48, 12: 48, 48, 15: 48, 48, 18: 48, 48, 22: 48, 48, 48, 48, 48},
		{288: 558},
		{46, 3: 46, 46, 46, 46, 46, 46, 46, 12: 46, 46, 15: 46, 46, 18: 46, 46, 22: 46, 46, 46, 46, 46},
		{47, 3: 47, 47, 47, 47, 47, 47, 47, 12: 47, 47, 15: 47, 47, 18: 47, 47, 22: 47, 47, 47, 47, 47},
		{43: 560, 135: 561, 145: 562},
		// 140
		{114, 3: 114, 92: 114},
		{113, 3: 113, 92: 113},
		{563, 92: 564},
		{52, 3: 52, 52, 52, 52, 52, 52, 52, 12: 52, 52, 15: 52, 52, 18: 52, 52, 22: 52, 52, 52, 52, 52},
		{43: 565},
		// 145
		{566},
		{51, 3: 51, 51, 51, 51, 51, 51, 51, 12: 51, 51, 15: 51, 51, 18: 51, 51, 22: 51, 51, 51, 51, 51},
		{43: 560, 135: 561, 145: 568},
		{569, 92: 570},
		{55, 3: 55, 55, 55, 55, 55, 55, 55, 12: 55, 55, 15: 55, 55, 18: 55, 55, 22: 55, 55, 55, 55, 55},
		// 150
		{43: 571},
		{572},
		{54, 3: 54, 54, 54, 54, 54, 54, 54, 12: 54, 54, 15: 54, 54, 18: 54, 54, 22: 54, 54, 54, 54, 54},
		{43: 560, 135: 561, 145: 574},
		{575, 92: 576},
		// 155
		{58, 3: 58, 58, 58, 58, 58, 58, 58, 12: 58, 58, 15: 58, 58, 18: 58, 58, 22: 58, 58, 58, 58, 58},
		{43: 577},
		{578},
		{57, 3: 57, 57, 57, 57, 57, 57, 57, 12: 57, 57, 15: 57, 57, 18: 57, 57, 22: 57, 57, 57, 57, 57},
		{39: 588, 142: 589},
		// 160
		{39: 581, 142: 582},
		{43: 586},
		{39: 583},
		{43: 584},
		{585},
		// 165
		{60, 3: 60, 60, 60, 60, 60, 60, 60, 12: 60, 60, 15: 60, 60, 18: 60, 60, 22: 60, 60, 60, 60, 60},
		{587},
		{61, 3: 61, 61, 61, 61, 61, 61, 61, 12: 61, 61, 15: 61, 61, 18: 61, 61, 22: 61, 61, 61, 61, 61},
		{43: 593},
		{39: 590},
		// 170
		{43: 591},
		{592},
		{62, 3: 62, 62, 62, 62, 62, 62, 62, 12: 62, 62, 15: 62, 62, 18: 62, 62, 22: 62, 62, 62, 62, 62},
		{594},
		{63, 3: 63, 63, 63, 63, 63, 63, 63, 12: 63, 63, 15: 63, 63, 18: 63, 63, 22: 63, 63, 63, 63, 63},
		// 175
		{43: 596},
		{597},
		{64, 3: 64, 64, 64, 64, 64, 64, 64, 12: 64, 64, 15: 64, 64, 18: 64, 64, 22: 64, 64, 64, 64, 64},
		{43: 603},
		{39: 600},
		// 180
		{43: 601},
		{602},
		{67, 3: 67, 67, 67, 67, 67, 67, 67, 12: 67, 67, 15: 67, 67, 18: 67, 67, 22: 67, 67, 67, 67, 67},
		{604},
		{68, 3: 68, 68, 68, 68, 68, 68, 68, 12: 68, 68, 15: 68, 68, 18: 68, 68, 22: 68, 68, 68, 68, 68},
		// 185
		{43: 606},
		{607},
		{69, 3: 69, 69, 69, 69, 69, 69, 69, 12: 69, 69, 15: 69, 69, 18: 69, 69, 22: 69, 69, 69, 69, 69},
		{39: 624, 97: 623},
		{39: 611, 97: 610},
		// 190
		{209: 619},
		{43: 612},
		{613},
		{97: 614},
		{209: 615},
		// 195
		{78, 3: 78, 78, 78, 78, 78, 78, 78, 12: 78, 78, 15: 78, 78, 18: 78, 78, 22: 78, 78, 78, 78, 78, 39: 616},
		{43: 617},
		{618},
		{77, 3: 77, 77, 77, 77, 77, 77, 77, 12: 77, 77, 15: 77, 77, 18: 77, 77, 22: 77, 77, 77, 77, 77},
		{79, 3: 79, 79, 79, 79, 79, 79, 79, 12: 79, 79, 15: 79, 79, 18: 79, 79, 22: 79, 79, 79, 79, 79, 39: 620},
		// 200
		{43: 621},
		{622},
		{76, 3: 76, 76, 76, 76, 76, 76, 76, 12: 76, 76, 15: 76, 76, 18: 76, 76, 22: 76, 76, 76, 76, 76},
		{202: 629},
		{43: 625},
		// 205
		{626},
		{97: 627},
		{202: 628},
		{80, 3: 80, 80, 80, 80, 80, 80, 80, 12: 80, 80, 15: 80, 80, 18: 80, 80, 22: 80, 80, 80, 80, 80},
		{81, 3: 81, 81, 81, 81, 81, 81, 81, 12: 81, 81, 15: 81, 81, 18: 81, 81, 22: 81, 81, 81, 81, 81},
		// 210
		{43: 631},
		{632},
		{84, 3: 84, 84, 84, 84, 84, 84, 84, 12: 84, 84, 15: 633, 84, 18: 84, 84, 22: 84, 84, 84, 84, 84},
		{213: 634, 283: 635},
		{217: 638},
		// 215
		{213: 636},
		{217: 637},
		{82, 3: 82, 82, 82, 82, 82, 82, 82, 12: 82, 82, 15: 82, 82, 18: 82, 82, 22: 82, 82, 82, 82, 82},
		{83, 3: 83, 83, 83, 83, 83, 83, 83, 12: 83, 83, 15: 83, 83, 18: 83, 83, 22: 83, 83, 83, 83, 83},
		{43: 640},
		// 220
		{641},
		{87, 3: 87, 87, 87, 87, 87, 87, 87, 12: 87, 87, 15: 87, 87, 18: 87, 87, 22: 87, 87, 87, 87, 87},
		{88, 3: 88, 88, 88, 88, 88, 88, 88, 12: 88, 88, 15: 88, 88, 18: 88, 88, 22: 88, 88, 88, 88, 88},
		{43: 560, 135: 561, 145: 644},
		{645},
		// 225
		{92, 3: 92, 92, 92, 92, 92, 92, 92, 12: 92, 92, 15: 92, 92, 18: 92, 92, 22: 92, 92, 92, 92, 92},
		{43: 560, 135: 561, 145: 647},
		{648, 3: 649},
		{95, 3: 95, 95, 95, 95, 95, 95, 95, 12: 95, 95, 15: 95, 95, 18: 95, 95, 22: 95, 95, 95, 95, 95},
		{43: 650},
		// 230
		{651},
		{94, 3: 94, 94, 94, 94, 94, 94, 94, 12: 94, 94, 15: 94, 94, 18: 94, 94, 22: 94, 94, 94, 94, 94},
		{43: 653},
		{654},
		{97, 3: 97, 97, 97, 97, 97, 97, 97, 12: 97, 97, 15: 97, 97, 18: 97, 97, 22: 97, 97, 97, 97, 97},
		// 235
		{43: 660},
		{39: 657},
		{43: 658},
		{659},
		{65, 3: 65, 65, 65, 65, 65, 65, 65, 12: 65, 65, 15: 65, 65, 18: 65, 65, 22: 65, 65, 65, 65, 65},
		// 240
		{661},
		{98, 3: 98, 98, 98, 98, 98, 98, 98, 12: 98, 98, 15: 98, 98, 18: 98, 98, 22: 98, 98, 98, 98, 98},
		{43: 663},
		{664, 90: 666, 189: 665},
		{102, 3: 102, 102, 102, 102, 102, 102, 102, 12: 102, 102, 15: 102, 102, 18: 102, 102, 22: 102, 102, 102, 102, 102},
		// 245
		{668},
		{667},
		{100, 3: 100, 100, 100, 100, 100, 100, 100, 12: 100, 100, 15: 100, 100, 18: 100, 100, 22: 100, 100, 100, 100, 100},
		{101, 3: 101, 101, 101, 101, 101, 101, 101, 12: 101, 101, 15: 101, 101, 18: 101, 101, 22: 101, 101, 101, 101, 101},
		{43: 674},
		// 250
		{39: 671},
		{43: 672},
		{673},
		{66, 3: 66, 66, 66, 66, 66, 66, 66, 12: 66, 66, 15: 66, 66, 18: 66, 66, 22: 66, 66, 66, 66, 66},
		{675, 90: 677, 189: 676},
		// 255
		{105, 3: 105, 105, 105, 105, 105, 105, 105, 12: 105, 105, 15: 105, 105, 18: 105, 105, 22: 105, 105, 105, 105, 105},
		{679},
		{678},
		{103, 3: 103, 103, 103, 103, 103, 103, 103, 12: 103, 103, 15: 103, 103, 18: 103, 103, 22: 103, 103, 103, 103, 103},
		{104, 3: 104, 104, 104, 104, 104, 104, 104, 12: 104, 104, 15: 104, 104, 18: 104, 104, 22: 104, 104, 104, 104, 104},
		// 260
		{387, 3: 387, 387, 387, 387, 387, 387, 387, 12: 387, 15: 387, 387, 18: 387, 22: 387, 387, 387, 685, 353: 684},
		{389, 3: 389, 389, 389, 389, 389, 389, 389, 12: 389, 389, 15: 389, 389, 18: 389, 389, 22: 389, 389, 389, 389},
		{44: 442, 441, 59: 683},
		{388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 18: 388, 388, 22: 388, 388, 388, 388, 27: 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 61: 388, 388, 388, 65: 388, 388},
		{385, 3: 385, 385, 385, 385, 385, 385, 385, 12: 385, 15: 385, 385, 18: 385, 22: 385, 688, 689, 177: 687, 331: 686},
		// 265
		{386, 3: 386, 386, 386, 386, 386, 386, 386, 12: 386, 15: 386, 386, 18: 386, 22: 386, 386, 386},
		{381, 3: 381, 381, 381, 381, 381, 381, 381, 12: 381, 15: 381, 381, 18: 693, 22: 694, 224: 691, 690, 233: 692},
		{384, 3: 384, 384, 384, 384, 384, 384, 384, 12: 384, 15: 384, 384, 18: 384, 22: 384},
		{383, 3: 383, 383, 383, 383, 383, 383, 383, 12: 383, 15: 383, 383, 18: 383, 22: 383},
		{382, 3: 382, 382, 382, 382, 382, 382, 382, 12: 382, 15: 382, 382, 18: 382, 22: 382},
		// 270
		{353, 3: 353, 353, 353, 353, 353, 353, 353, 12: 745, 15: 353, 353, 230: 744},
		{380, 3: 380, 380, 380, 380, 380, 380, 380, 12: 380, 15: 380, 380, 19: 380},
		{379, 3: 379, 379, 379, 379, 379, 379, 379, 12: 379, 15: 379, 379, 19: 379},
		{17: 739, 43: 740, 741, 231: 738},
		{150: 695, 697, 256: 696},
		// 275
		{137: 736},
		{150: 733},
		{18: 698},
		{65: 700, 150: 699},
		{137: 731},
		// 280
		{5: 701},
		{150: 702},
		{137: 703},
		{371, 3: 371, 371, 371, 371, 371, 371, 371, 12: 371, 15: 371, 371, 19: 371, 39: 705, 155: 704},
		{372, 3: 372, 372, 372, 372, 372, 372, 372, 12: 372, 15: 372, 372, 19: 372},
		// 285
		{369, 69: 716, 714, 72: 709, 710, 712, 717, 715, 711, 713, 719, 718, 708, 234: 707, 319: 706},
		{729, 69: 716, 714, 72: 709, 710, 712, 717, 715, 711, 713, 719, 718, 708, 234: 730},
		{368, 69: 368, 368, 72: 368, 368, 368, 368, 368, 368, 368, 368, 368, 368},
		{15: 725},
		{151: 723},
		// 290
		{43: 722},
		{362, 69: 362, 362, 72: 362, 362, 362, 362, 362, 362, 362, 362, 362, 362},
		{43: 721},
		{360, 69: 360, 360, 72: 360, 360, 360, 360, 360, 360, 360, 360, 360, 360},
		{359, 69: 359, 359, 72: 359, 359, 359, 359, 359, 359, 359, 359, 359, 359},
		// 295
		{358, 69: 358, 358, 72: 358, 358, 358, 358, 358, 358, 358, 358, 358, 358},
		{43: 720},
		{356, 69: 356, 356, 72: 356, 356, 356, 356, 356, 356, 356, 356, 356, 356},
		{355, 69: 355, 355, 72: 355, 355, 355, 355, 355, 355, 355, 355, 355, 355},
		{354, 69: 354, 354, 72: 354, 354, 354, 354, 354, 354, 354, 354, 354, 354},
		// 300
		{357, 69: 357, 357, 72: 357, 357, 357, 357, 357, 357, 357, 357, 357, 357},
		{361, 69: 361, 361, 72: 361, 361, 361, 361, 361, 361, 361, 361, 361, 361},
		{363, 69: 363, 363, 72: 363, 363, 363, 363, 363, 363, 363, 363, 363, 363},
		{43: 724},
		{364, 69: 364, 364, 72: 364, 364, 364, 364, 364, 364, 364, 364, 364, 364},
		// 305
		{43: 726, 200: 727},
		{366, 69: 366, 366, 72: 366, 366, 366, 366, 366, 366, 366, 366, 366, 366},
		{297: 728},
		{365, 69: 365, 365, 72: 365, 365, 365, 365, 365, 365, 365, 365, 365, 365},
		{370, 3: 370, 370, 370, 370, 370, 370, 370, 12: 370, 15: 370, 370, 19: 370},
		// 310
		{367, 69: 367, 367, 72: 367, 367, 367, 367, 367, 367, 367, 367, 367, 367},
		{371, 3: 371, 371, 371, 371, 371, 371, 371, 12: 371, 15: 371, 371, 19: 371, 39: 705, 155: 732},
		{373, 3: 373, 373, 373, 373, 373, 373, 373, 12: 373, 15: 373, 373, 19: 373},
		{137: 734},
		{371, 3: 371, 371, 371, 371, 371, 371, 371, 12: 371, 15: 371, 371, 19: 371, 39: 705, 155: 735},
		// 315
		{375, 3: 375, 375, 375, 375, 375, 375, 375, 12: 375, 15: 375, 375, 19: 375},
		{371, 3: 371, 371, 371, 371, 371, 371, 371, 12: 371, 15: 371, 371, 19: 371, 39: 705, 155: 737},
		{376, 3: 376, 376, 376, 376, 376, 376, 376, 12: 376, 15: 376, 376, 19: 376},
		{378, 3: 378, 378, 378, 378, 378, 378, 378, 12: 378, 15: 378, 378, 19: 378},
		{5: 742},
		// 320
		{2, 3: 2, 2, 2, 2, 2, 2, 2, 12: 2, 15: 2, 2, 19: 2},
		{1, 3: 1, 1, 1, 1, 1, 1, 1, 12: 1, 15: 1, 1, 19: 1},
		{43: 740, 741, 231: 743},
		{377, 3: 377, 377, 377, 377, 377, 377, 377, 12: 377, 15: 377, 377, 19: 377},
		{341, 3: 341, 45, 45, 45, 45, 45, 463, 15: 766, 765, 129: 764, 160: 763, 236: 762, 305: 760, 322: 761},
		// 325
		{350, 3: 350, 350, 350, 350, 350, 350, 350, 15: 350, 350, 350, 89: 350, 96: 350, 166: 350, 296: 748, 313: 747, 315: 746},
		{352, 3: 352, 352, 352, 352, 352, 352, 352, 15: 352, 352},
		{348, 3: 348, 348, 348, 348, 348, 348, 348, 15: 348, 348, 348, 89: 348, 96: 348, 166: 751, 318: 750},
		{96: 749},
		{349, 3: 349, 349, 349, 349, 349, 349, 349, 15: 349, 349, 349, 89: 349, 96: 349, 166: 349},
		// 330
		{346, 3: 346, 346, 346, 346, 346, 346, 346, 15: 346, 346, 346, 89: 346, 96: 755, 330: 754},
		{151: 752},
		{44: 442, 441, 59: 753},
		{347, 3: 347, 347, 347, 347, 347, 347, 347, 15: 347, 347, 347, 89: 347, 96: 347},
		{344, 3: 344, 344, 344, 344, 344, 344, 344, 15: 344, 344, 758, 89: 757, 350: 756},
		// 335
		{345, 3: 345, 345, 345, 345, 345, 345, 345, 15: 345, 345, 345, 89: 345},
		{351, 3: 351, 351, 351, 351, 351, 351, 351, 15: 351, 351},
		{343, 3: 343, 343, 343, 343, 343, 343, 343, 15: 343, 343},
		{89: 759},
		{342, 3: 342, 342, 342, 342, 342, 342, 342, 15: 342, 342},
		// 340
		{391, 3: 391},
		{340, 3: 340},
		{339, 3: 339, 45, 45, 45, 45, 45, 463, 129: 781, 160: 780},
		{338, 3: 338, 338, 338, 338, 338, 338, 338},
		{4: 773, 772, 775, 774, 474, 182: 771, 237: 770},
		// 345
		{281: 768},
		{95: 767},
		{17, 3: 17},
		{44: 442, 441, 59: 440, 148: 769},
		{18, 3: 18},
		// 350
		{31, 3: 31, 480, 31, 31, 31, 31, 31, 64: 479, 67: 481, 100: 477, 478, 130: 476, 779},
		{31, 3: 31, 480, 31, 31, 31, 31, 31, 64: 479, 67: 481, 100: 477, 478, 130: 476, 778},
		{41, 3: 41, 41, 41, 41, 41, 41, 41, 64: 41, 67: 41},
		{5: 777},
		{39, 3: 39, 39, 39, 39, 39, 39, 39, 64: 39, 67: 39},
		// 355
		{168: 776},
		{38, 3: 38, 38, 38, 38, 38, 38, 38, 64: 38, 67: 38},
		{40, 3: 40, 40, 40, 40, 40, 40, 40, 64: 40, 67: 40},
		{42, 3: 42, 42, 42, 42, 42, 42, 42},
		{43, 3: 43, 43, 43, 43, 43, 43, 43},
		// 360
		{337, 3: 337, 337, 337, 337, 337, 337, 337},
		{4: 773, 772, 775, 774, 474, 182: 782, 237: 770},
		{31, 3: 31, 480, 31, 31, 31, 31, 31, 64: 479, 67: 481, 100: 477, 478, 130: 476, 783},
		{42, 3: 42, 42, 42, 42, 42, 42, 42},
		{1: 280, 280, 10: 280, 280, 14: 280, 18: 280, 27: 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 61: 280, 280, 280, 65: 280, 280, 299: 785},
		// 365
		{1: 279, 279, 10: 279, 279, 14: 279, 18: 787, 27: 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 61: 279, 279, 279, 65: 279, 279, 309: 786},
		{1: 276, 276, 10: 276, 276, 14: 276, 27: 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 61: 276, 276, 276, 65: 791, 276, 338: 789, 790},
		{26: 682, 172: 788},
		{1: 278, 278, 10: 278, 278, 14: 278, 27: 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 61: 278, 278, 278, 65: 278, 278},
		{1: 270, 270, 10: 270, 270, 14: 265, 27: 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 61: 265, 265, 806, 66: 807, 311: 805, 344: 804},
		// 370
		{1: 273, 273, 10: 273, 273, 14: 273, 27: 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 61: 273, 273, 273, 65: 798, 273, 340: 797},
		{191: 792},
		{13: 793, 204: 794},
		{195: 796},
		{195: 795},
		// 375
		{1: 274, 274, 10: 274, 274, 14: 274, 27: 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 61: 274, 274, 274, 65: 274, 274},
		{1: 275, 275, 10: 275, 275, 14: 275, 27: 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 61: 275, 275, 275, 65: 275, 275},
		{1: 277, 277, 10: 277, 277, 14: 277, 27: 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 61: 277, 277, 277, 66: 277},
		{191: 799},
		{165: 800, 204: 801},
		// 380
		{208: 803},
		{208: 802},
		{1: 271, 271, 10: 271, 271, 14: 271, 27: 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 61: 271, 271, 271, 66: 271},
		{1: 272, 272, 10: 272, 272, 14: 272, 27: 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 61: 272, 272, 272, 66: 272},
		{1: 123, 123, 10: 123, 123, 358: 1026},
		// 385
		{14: 835, 27: 833, 834, 836, 832, 826, 830, 827, 831, 824, 825, 829, 820, 61: 837, 816, 132: 823, 828, 822, 144: 821, 146: 819, 818, 184: 815, 316: 817},
		{44: 442, 441, 59: 811},
		{263: 808},
		{194: 810, 197: 809},
		{14: 264, 27: 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 61: 264, 264},
		// 390
		{14: 263, 27: 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 61: 263, 263},
		{39: 812},
		{44: 442, 441, 59: 456, 68: 470, 91: 813},
		{814, 3: 472},
		{1: 266, 266, 10: 266, 266},
		// 395
		{1: 209, 209, 10: 209, 209, 14: 835, 17: 209, 20: 209, 209, 27: 833, 834, 836, 832, 826, 830, 827, 831, 824, 825, 829, 820, 132: 823, 828, 1023, 144: 821, 146: 819, 929, 253: 1022},
		{61: 924, 278: 922, 280: 923, 341: 921},
		{1: 267, 267, 10: 267, 267},
		{1: 260, 260, 10: 260, 260, 14: 260, 17: 260, 20: 260, 260, 27: 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260},
		{1: 258, 258, 10: 258, 258, 14: 258, 17: 258, 20: 258, 258, 27: 258, 258, 258, 258, 826, 258, 827, 258, 824, 825, 829, 258, 132: 920, 828},
		// 400
		{40: 918, 44: 442, 441, 59: 917},
		{1: 255, 255, 10: 255, 255, 14: 255, 17: 255, 20: 255, 255, 27: 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},
		{1: 254, 254, 10: 254, 254, 14: 254, 17: 254, 20: 254, 254, 27: 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254},
		{1: 253, 253, 10: 253, 253, 14: 253, 17: 253, 20: 253, 253, 27: 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253},
		{43: 916},
		// 405
		{43: 915},
		{43: 914},
		{43: 913},
		{1: 247, 247, 10: 247, 247, 14: 247, 17: 247, 20: 247, 247, 27: 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247},
		{39: 865},
		// 410
		{1: 212, 212, 10: 212, 212, 14: 212, 17: 212, 20: 212, 212, 27: 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212},
		{1: 211, 211, 10: 211, 211, 14: 211, 17: 211, 20: 211, 211, 27: 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211},
		{1: 210, 210, 10: 210, 210, 14: 210, 17: 210, 20: 210, 210, 27: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210},
		{1: 207, 207, 10: 207, 207, 14: 207, 17: 207, 20: 207, 207, 27: 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207},
		{210: 861},
		// 415
		{210: 843},
		{1: 202, 202, 10: 202, 202, 14: 202, 17: 202, 20: 202, 202, 27: 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202},
		{203: 838},
		{258: 839},
		{1: 126, 126, 10: 126, 126, 207: 126, 232: 840},
		// 420
		{1: 125, 125, 10: 125, 125, 207: 841},
		{200: 842},
		{1: 124, 124, 10: 124, 124},
		{27: 844},
		{1: 201, 201, 10: 201, 201, 14: 201, 17: 201, 20: 201, 201, 27: 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 85: 846, 303: 845},
		// 425
		{1: 194, 194, 10: 194, 194, 14: 194, 17: 855, 20: 194, 194, 27: 194, 854, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 302: 853},
		{205: 847, 257: 848},
		{1: 200, 200, 10: 200, 200, 14: 200, 17: 200, 20: 200, 200, 27: 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 136: 852, 138: 851},
		{1: 197, 197, 10: 197, 197, 14: 197, 17: 197, 20: 197, 197, 27: 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 136: 850, 138: 849},
		{1: 196, 196, 10: 196, 196, 14: 196, 17: 196, 20: 196, 196, 27: 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196},
		// 430
		{1: 195, 195, 10: 195, 195, 14: 195, 17: 195, 20: 195, 195, 27: 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195},
		{1: 199, 199, 10: 199, 199, 14: 199, 17: 199, 20: 199, 199, 27: 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199},
		{1: 198, 198, 10: 198, 198, 14: 198, 17: 198, 20: 198, 198, 27: 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198},
		{1: 203, 203, 10: 203, 203, 14: 203, 17: 203, 20: 203, 203, 27: 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203},
		{198: 859},
		// 435
		{28: 856},
		{198: 857},
		{201: 858},
		{1: 192, 192, 10: 192, 192, 14: 192, 17: 192, 20: 192, 192, 27: 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192},
		{201: 860},
		// 440
		{1: 193, 193, 10: 193, 193, 14: 193, 17: 193, 20: 193, 193, 27: 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193},
		{27: 862},
		{1: 206, 206, 10: 206, 206, 14: 206, 17: 206, 20: 206, 206, 27: 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 255: 864, 259: 863},
		{1: 205, 205, 10: 205, 205, 14: 205, 17: 205, 20: 205, 205, 27: 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205},
		{1: 204, 204, 10: 204, 204, 14: 204, 17: 204, 20: 204, 204, 27: 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204},
		// 445
		{12: 880, 46: 877, 879, 878, 875, 874, 868, 871, 872, 870, 869, 876, 873, 252: 867, 356: 866},
		{911, 12: 880, 46: 877, 879, 878, 875, 874, 868, 871, 872, 870, 869, 876, 873, 252: 912},
		{245, 12: 245, 46: 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245},
		{43: 892, 164: 910},
		{43: 892, 164: 909},
		// 450
		{43: 908},
		{43: 906, 214: 907},
		{43: 892, 164: 905, 214: 904},
		{43: 903},
		{43: 902},
		// 455
		{277: 900},
		{233, 5: 891, 12: 233, 43: 892, 46: 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 164: 890},
		{18: 889, 167: 887, 291: 888},
		{18: 886, 139: 885, 167: 884},
		{18: 883, 139: 882, 167: 881},
		// 460
		{221, 12: 221, 46: 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221},
		{224, 12: 224, 46: 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224},
		{223, 12: 223, 46: 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223},
		{222, 12: 222, 46: 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222},
		{227, 12: 227, 46: 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227},
		// 465
		{226, 12: 226, 46: 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226},
		{225, 12: 225, 46: 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225},
		{230, 12: 230, 46: 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230},
		{229, 12: 229, 46: 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229},
		{228, 12: 228, 46: 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228},
		// 470
		{232, 12: 232, 46: 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232},
		{231, 12: 231, 46: 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231},
		{219, 12: 219, 46: 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 271: 899, 275: 896, 282: 894, 284: 895, 287: 898, 295: 897, 352: 893},
		{220, 12: 220, 46: 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220},
		{218, 12: 218, 46: 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218},
		// 475
		{217, 12: 217, 46: 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217},
		{216, 12: 216, 46: 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216},
		{215, 12: 215, 46: 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215},
		{214, 12: 214, 46: 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214},
		{213, 12: 213, 46: 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213},
		// 480
		{43: 901},
		{234, 12: 234, 46: 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234},
		{235, 12: 235, 46: 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235},
		{236, 12: 236, 46: 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236},
		{238, 12: 238, 46: 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238},
		// 485
		{237, 12: 237, 46: 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237},
		{240, 12: 240, 46: 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240},
		{239, 12: 239, 46: 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239},
		{241, 12: 241, 46: 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241},
		{242, 12: 242, 46: 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242},
		// 490
		{243, 12: 243, 46: 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243},
		{1: 246, 246, 10: 246, 246, 14: 246, 17: 246, 20: 246, 246, 27: 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246},
		{244, 12: 244, 46: 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244},
		{1: 248, 248, 10: 248, 248, 14: 248, 17: 248, 20: 248, 248, 27: 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248},
		{1: 249, 249, 10: 249, 249, 14: 249, 17: 249, 20: 249, 249, 27: 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249},
		// 495
		{1: 250, 250, 10: 250, 250, 14: 250, 17: 250, 20: 250, 250, 27: 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250},
		{1: 251, 251, 10: 251, 251, 14: 251, 17: 251, 20: 251, 251, 27: 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251},
		{1: 257, 257, 10: 257, 257, 14: 257, 17: 257, 20: 257, 257, 27: 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257},
		{44: 442, 441, 59: 919},
		{1: 256, 256, 10: 256, 256, 14: 256, 17: 256, 20: 256, 256, 27: 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256},
		// 500
		{1: 252, 252, 10: 252, 252, 14: 252, 17: 252, 20: 252, 252, 27: 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252},
		{1: 268, 268, 10: 268, 268},
		{1: 262, 262, 10: 262, 262, 14: 835, 17: 262, 20: 262, 262, 27: 833, 834, 836, 832, 826, 830, 827, 831, 824, 825, 829, 820, 132: 823, 828, 822, 144: 821, 146: 819, 818, 184: 926, 250: 930},
		{1: 262, 262, 10: 262, 262, 14: 835, 27: 833, 834, 836, 832, 826, 830, 827, 831, 824, 825, 829, 820, 132: 823, 828, 822, 144: 821, 146: 819, 818, 184: 926, 250: 927},
		{1: 126, 126, 10: 126, 126, 232: 925},
		// 505
		{1: 129, 129, 10: 129, 129},
		{1: 261, 261, 10: 261, 261, 14: 835, 17: 261, 20: 261, 261, 27: 833, 834, 836, 832, 826, 830, 827, 831, 824, 825, 829, 820, 132: 823, 828, 822, 144: 821, 146: 819, 929},
		{1: 127, 127, 10: 127, 127, 321: 928},
		{1: 130, 130, 10: 130, 130},
		{1: 259, 259, 10: 259, 259, 14: 259, 17: 259, 20: 259, 259, 27: 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259},
		// 510
		{1: 209, 209, 10: 209, 209, 14: 835, 17: 209, 20: 209, 209, 27: 833, 834, 836, 134: 931, 253: 933, 317: 932},
		{1: 208, 208, 10: 208, 208, 17: 208, 20: 208, 208},
		{1: 131, 131, 10: 131, 131},
		{1: 191, 191, 10: 191, 191, 17: 935, 20: 191, 934, 143: 938, 161: 937, 936, 239: 939},
		{1: 186, 186, 10: 186, 186, 17: 968, 20: 186, 186, 39: 969, 58: 186, 60: 186, 71: 186, 88: 186, 169: 967, 238: 989, 323: 988},
		// 515
		{21: 986},
		{1: 188, 188, 10: 188, 188, 20: 188},
		{1: 151, 151, 10: 151, 151, 17: 962, 20: 151, 961, 143: 960},
		{1: 150, 150, 10: 150, 150, 17: 150, 20: 150, 150},
		{1: 145, 145, 10: 145, 145, 20: 940, 235: 941},
		// 520
		{41: 942, 165: 943, 266: 946, 945, 948, 272: 944, 947},
		{1: 128, 128, 10: 128, 128},
		{152: 958},
		{152: 956},
		{152: 954},
		// 525
		{152: 949},
		{1: 140, 140, 10: 140, 140},
		{1: 139, 139, 10: 139, 139},
		{1: 138, 138, 10: 138, 138},
		{1: 134, 134, 10: 134, 134, 156: 951, 953, 950, 952},
		// 530
		{1: 141, 141, 10: 141, 141},
		{1: 137, 137, 10: 137, 137},
		{1: 136, 136, 10: 136, 136},
		{1: 135, 135, 10: 135, 135},
		{1: 134, 134, 10: 134, 134, 156: 951, 953, 955, 952},
		// 535
		{1: 142, 142, 10: 142, 142},
		{1: 134, 134, 10: 134, 134, 156: 951, 953, 957, 952},
		{1: 143, 143, 10: 143, 143},
		{1: 134, 134, 10: 134, 134, 156: 951, 953, 959, 952},
		{1: 144, 144, 10: 144, 144},
		// 540
		{1: 149, 149, 10: 149, 149, 17: 149, 20: 149, 149},
		{17: 968, 39: 969, 169: 967, 238: 970},
		{21: 963},
		{39: 964},
		{44: 442, 441, 59: 456, 68: 470, 91: 965},
		// 545
		{966, 3: 472},
		{1: 146, 146, 10: 146, 146, 17: 146, 20: 146, 146},
		{85: 977, 187: 978},
		{169: 976},
		{44: 442, 441, 59: 456, 68: 470, 91: 974},
		// 550
		{39: 971},
		{44: 442, 441, 59: 456, 68: 470, 91: 972},
		{973, 3: 472},
		{1: 147, 147, 10: 147, 147, 17: 147, 20: 147, 147},
		{975, 3: 472},
		// 555
		{1: 148, 148, 10: 148, 148, 17: 148, 20: 148, 148},
		{1: 178, 178, 10: 178, 178, 17: 178, 20: 178, 178, 39: 178, 58: 178, 60: 178, 71: 178, 88: 178},
		{205: 980, 260: 981, 269: 979},
		{1: 177, 177, 10: 177, 177, 17: 177, 20: 177, 177, 39: 177, 58: 177, 60: 177, 71: 177, 88: 177},
		{1: 185, 185, 10: 185, 185, 17: 185, 20: 185, 185, 39: 185, 58: 185, 60: 185, 71: 185, 88: 185},
		// 560
		{1: 184, 184, 10: 184, 184, 17: 184, 20: 184, 184, 39: 184, 58: 184, 60: 184, 71: 184, 88: 184, 136: 985, 138: 984},
		{1: 181, 181, 10: 181, 181, 17: 181, 20: 181, 181, 39: 181, 58: 181, 60: 181, 71: 181, 88: 181, 136: 983, 138: 982},
		{1: 180, 180, 10: 180, 180, 17: 180, 20: 180, 180, 39: 180, 58: 180, 60: 180, 71: 180, 88: 180},
		{1: 179, 179, 10: 179, 179, 17: 179, 20: 179, 179, 39: 179, 58: 179, 60: 179, 71: 179, 88: 179},
		{1: 183, 183, 10: 183, 183, 17: 183, 20: 183, 183, 39: 183, 58: 183, 60: 183, 71: 183, 88: 183},
		// 565
		{1: 182, 182, 10: 182, 182, 17: 182, 20: 182, 182, 39: 182, 58: 182, 60: 182, 71: 182, 88: 182},
		{1: 152, 152, 10: 152, 152, 17: 962, 20: 152, 961, 39: 964, 143: 938, 161: 937, 987},
		{1: 189, 189, 10: 189, 189, 20: 189},
		{1: 152, 152, 10: 152, 152, 17: 962, 20: 152, 961, 143: 938, 161: 937, 1021},
		{1: 176, 176, 10: 176, 176, 17: 176, 20: 176, 176, 39: 971, 58: 176, 60: 176, 71: 176, 88: 991, 328: 990},
		// 570
		{1: 170, 170, 10: 170, 170, 17: 170, 20: 170, 170, 58: 170, 60: 170, 71: 998, 324: 997},
		{136: 995, 138: 993, 992, 264: 996, 285: 994},
		{1: 175, 175, 10: 175, 175, 17: 175, 20: 175, 175, 58: 175, 60: 175, 71: 175},
		{1: 174, 174, 10: 174, 174, 17: 174, 20: 174, 174, 58: 174, 60: 174, 71: 174},
		{1: 173, 173, 10: 173, 173, 17: 173, 20: 173, 173, 58: 173, 60: 173, 71: 173},
		// 575
		{1: 172, 172, 10: 172, 172, 17: 172, 20: 172, 172, 58: 172, 60: 172, 71: 172},
		{1: 171, 171, 10: 171, 171, 17: 171, 20: 171, 171, 58: 171, 60: 171, 71: 171},
		{1: 158, 158, 10: 158, 158, 17: 1015, 20: 158, 158, 58: 158, 60: 1014, 327: 1013},
		{1: 168, 168, 10: 168, 168, 17: 168, 20: 168, 168, 58: 168, 60: 168, 85: 168, 151: 1001, 187: 1000, 325: 999},
		{1: 163, 163, 10: 163, 163, 17: 163, 20: 163, 163, 58: 163, 60: 163, 85: 1007, 326: 1006},
		// 580
		{1: 167, 167, 10: 167, 167, 17: 167, 20: 167, 167, 58: 167, 60: 167, 85: 167},
		{95: 1002, 203: 1003, 294: 1004},
		{290: 1005},
		{1: 165, 165, 10: 165, 165, 17: 165, 20: 165, 165, 58: 165, 60: 165, 85: 165},
		{1: 164, 164, 10: 164, 164, 17: 164, 20: 164, 164, 58: 164, 60: 164, 85: 164},
		// 585
		{1: 166, 166, 10: 166, 166, 17: 166, 20: 166, 166, 58: 166, 60: 166, 85: 166},
		{1: 169, 169, 10: 169, 169, 17: 169, 20: 169, 169, 58: 169, 60: 169},
		{292: 1008},
		{18: 1009, 44: 442, 441, 59: 1011, 139: 1012, 149: 1010},
		{1: 162, 162, 10: 162, 162, 17: 162, 20: 162, 162, 58: 162, 60: 162},
		// 590
		{1: 161, 161, 10: 161, 161, 17: 161, 20: 161, 161, 58: 161, 60: 161},
		{1: 160, 160, 10: 160, 160, 17: 160, 20: 160, 160, 58: 160, 60: 160},
		{1: 159, 159, 10: 159, 159, 17: 159, 20: 159, 159, 58: 159, 60: 159},
		{1: 154, 154, 10: 154, 154, 17: 154, 20: 154, 154, 58: 1019, 329: 1018},
		{1: 157, 157, 10: 157, 157, 17: 157, 20: 157, 157, 58: 157, 149: 1017},
		// 595
		{60: 1016},
		{1: 155, 155, 10: 155, 155, 17: 155, 20: 155, 155, 58: 155},
		{1: 156, 156, 10: 156, 156, 17: 156, 20: 156, 156, 58: 156},
		{1: 187, 187, 10: 187, 187, 17: 187, 20: 187, 187},
		{44: 442, 441, 59: 456, 68: 1020},
		// 600
		{1: 153, 153, 10: 153, 153, 17: 153, 20: 153, 153},
		{1: 190, 190, 10: 190, 190, 20: 190},
		{1: 191, 191, 10: 191, 191, 17: 935, 20: 191, 934, 143: 938, 161: 937, 936, 239: 1024},
		{1: 254, 254, 10: 254, 254, 14: 254, 17: 254, 20: 254, 254, 27: 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254},
		{1: 145, 145, 10: 145, 145, 20: 940, 235: 1025},
		// 605
		{1: 269, 269, 10: 269, 269},
		{1: 282, 282, 10: 282, 282},
		{1: 285, 285, 11: 1037, 343: 1036},
		{1: 4, 4, 10: 1033, 4, 242: 1032},
		{85: 1030},
		// 610
		{206: 1031},
		{1: 5, 5, 10: 5, 5, 13: 5, 5, 17: 5, 40: 5, 5, 5, 83: 5},
		{1: 7, 7, 11: 7},
		{85: 1034},
		{216: 1035},
		// 615
		{1: 3, 3, 11: 3, 13: 3, 3, 40: 3, 3, 3, 83: 3},
		{1: 299, 299},
		{44: 442, 441, 59: 440, 148: 1038},
		{1: 284, 284},
		{44: 442, 441, 59: 1040},
		// 620
		{411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 13: 411, 411, 17: 411, 411, 27: 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 61: 411, 411, 411, 411, 411, 411, 411, 83: 411, 140: 411},
		{44: 442, 441, 59: 440, 148: 1042},
		{10: 1029, 13: 6, 6, 17: 1046, 40: 6, 6, 6, 83: 6, 241: 1045, 333: 1043, 1044},
		{13: 1068, 1066, 40: 1067, 1063, 1064, 83: 1069, 218: 1060, 220: 1059, 226: 1062, 243: 1061, 245: 1065, 300: 1057, 1056, 349: 1058},
		{10: 1033, 13: 4, 4, 17: 1052, 40: 4, 4, 4, 83: 4, 242: 1051, 335: 1050},
		// 625
		{10: 11, 13: 11, 11, 17: 11, 40: 11, 11, 11, 83: 11},
		{10: 1047},
		{85: 1048},
		{206: 1049},
		{10: 10, 13: 10, 10, 17: 10, 40: 10, 10, 10, 83: 10},
		// 630
		{13: 12, 12, 40: 12, 12, 12, 83: 12},
		{13: 9, 9, 40: 9, 9, 9, 83: 9},
		{10: 1053},
		{85: 1054},
		{216: 1055},
		// 635
		{13: 8, 8, 40: 8, 8, 8, 83: 8},
		{1: 405, 405},
		{1: 404, 404, 13: 1068, 1066, 40: 1067, 1063, 1064, 218: 1060, 220: 1149, 226: 1062, 243: 1061, 245: 1065},
		{1: 403, 403},
		{1: 402, 402, 13: 402, 402, 40: 402, 402, 402},
		// 640
		{1: 400, 400, 13: 400, 400, 40: 400, 400, 400},
		{1: 399, 399, 13: 399, 399, 40: 399, 399, 399},
		{1: 398, 398, 13: 398, 398, 40: 398, 398, 398},
		{39: 1141},
		{39: 1114},
		// 645
		{1: 334, 334, 13: 334, 334, 40: 334, 334, 334},
		{44: 442, 441, 59: 456, 68: 1101},
		{215: 1096},
		{14: 1077, 39: 1078, 190: 1076, 215: 1075, 222: 1074},
		{14: 1070},
		// 650
		{44: 442, 441, 59: 456, 68: 1071},
		{97: 1072},
		{44: 442, 441, 59: 456, 68: 1073},
		{1: 300, 300},
		{1: 310, 310, 13: 310, 310, 40: 310, 310, 310, 82: 310, 84: 1091, 86: 1092, 176: 1090, 227: 1089, 1088},
		// 655
		{190: 1086},
		{262: 1082},
		{44: 442, 441, 59: 456, 68: 1081},
		{44: 442, 441, 59: 456, 68: 470, 91: 1079},
		{1080, 3: 472},
		// 660
		{1: 311, 311, 13: 311, 311, 40: 311, 311, 311, 82: 311, 84: 311, 86: 311, 311},
		{1: 312, 312, 13: 312, 312, 40: 312, 312, 312, 82: 312, 84: 312, 86: 312, 312},
		{1: 302, 302, 13: 302, 302, 40: 302, 302, 302, 82: 1084, 175: 1083},
		{1: 313, 313, 13: 313, 313, 40: 313, 313, 313},
		{43: 1085},
		// 665
		{1: 301, 301, 13: 301, 301, 40: 301, 301, 301},
		{1: 302, 302, 13: 302, 302, 40: 302, 302, 302, 82: 1084, 175: 1087},
		{1: 314, 314, 13: 314, 314, 40: 314, 314, 314},
		{1: 302, 302, 13: 302, 302, 40: 302, 302, 302, 82: 1084, 175: 1095},
		{1: 309, 309, 13: 309, 309, 40: 309, 309, 309, 82: 309, 84: 1091, 86: 1092, 309, 176: 1094},
		// 670
		{1: 308, 308, 13: 308, 308, 40: 308, 308, 308, 82: 308, 84: 308, 86: 308, 308},
		{261: 1093},
		{1: 305, 305, 13: 305, 305, 40: 305, 305, 305, 82: 305, 84: 305, 86: 305, 305},
		{1: 306, 306, 13: 306, 306, 40: 306, 306, 306, 82: 306, 84: 306, 86: 306, 306},
		{1: 307, 307, 13: 307, 307, 40: 307, 307, 307, 82: 307, 84: 307, 86: 307, 307},
		// 675
		{1: 315, 315, 13: 315, 315, 40: 315, 315, 315},
		{14: 1077, 39: 1078, 222: 1097},
		{1: 310, 310, 13: 310, 310, 40: 310, 310, 310, 84: 1091, 86: 1092, 310, 176: 1090, 227: 1089, 1098},
		{1: 304, 304, 13: 304, 304, 40: 304, 304, 304, 87: 1100, 312: 1099},
		{1: 316, 316, 13: 316, 316, 40: 316, 316, 316},
		// 680
		{1: 303, 303, 13: 303, 303, 40: 303, 303, 303},
		{4: 1103, 141: 1102},
		{186: 1110},
		{141: 1104},
		{186: 1105},
		// 685
		{149: 1106},
		{199: 1107},
		{1: 318, 318, 13: 318, 318, 40: 318, 318, 318, 196: 1109, 240: 1108},
		{1: 319, 319, 13: 319, 319, 40: 319, 319, 319},
		{1: 317, 317, 13: 317, 317, 40: 317, 317, 317},
		// 690
		{149: 1111},
		{199: 1112},
		{1: 318, 318, 13: 318, 318, 40: 318, 318, 318, 196: 1109, 240: 1113},
		{1: 320, 320, 13: 320, 320, 40: 320, 320, 320},
		{44: 442, 441, 59: 456, 68: 1119, 244: 1117, 246: 1120, 1118, 336: 1115, 1116},
		// 695
		{1137, 3: 1138},
		{1133, 3: 1134},
		{333, 3: 333},
		{331, 3: 331},
		{23: 688, 689, 90: 528, 95: 545, 98: 547, 537, 102: 544, 535, 534, 541, 542, 538, 552, 551, 556, 533, 113: 554, 553, 540, 536, 549, 530, 543, 532, 550, 531, 557, 555, 539, 546, 548, 529, 170: 521, 522, 173: 1121, 525, 177: 1122, 526, 524, 523, 520, 183: 527},
		// 700
		{323, 3: 323},
		{390, 3: 390, 390, 390, 390, 390, 390, 390, 12: 390, 390, 18: 390, 390, 22: 390, 26: 682, 172: 681, 221: 1123},
		{321, 3: 321},
		{381, 3: 381, 381, 381, 381, 381, 381, 381, 12: 381, 1125, 18: 693, 381, 22: 694, 224: 691, 1126, 233: 692, 310: 1124},
		{353, 3: 353, 353, 353, 353, 353, 353, 353, 12: 745, 19: 1129, 230: 1130, 314: 1128},
		// 705
		{137: 1127},
		{328, 3: 328, 328, 328, 328, 328, 328, 328, 12: 328, 19: 328},
		{329, 3: 329, 329, 329, 329, 329, 329, 329, 12: 329, 19: 329},
		{325, 3: 325, 45, 45, 45, 45, 45, 463, 129: 781, 160: 763, 236: 1131, 304: 1132},
		{327, 3: 327, 327, 327, 327, 327, 327, 327},
		// 710
		{326, 3: 326, 326, 326, 326, 326, 326, 326},
		{324, 3: 324, 45, 45, 45, 45, 45, 463, 129: 781, 160: 780},
		{330, 3: 330},
		{1: 335, 335, 13: 335, 335, 40: 335, 335, 335},
		{44: 442, 441, 59: 456, 68: 1136, 246: 1135},
		// 715
		{322, 3: 322},
		{23: 688, 689, 177: 1122},
		{1: 336, 336, 13: 336, 336, 40: 336, 336, 336},
		{44: 442, 441, 59: 456, 68: 1140, 244: 1139, 247: 1118},
		{332, 3: 332},
		// 720
		{90: 528, 95: 545, 98: 547, 537, 102: 544, 535, 534, 541, 542, 538, 552, 551, 556, 533, 113: 554, 553, 540, 536, 549, 530, 543, 532, 550, 531, 557, 555, 539, 546, 548, 529, 170: 521, 522, 173: 1121, 525, 178: 526, 524, 523, 520, 183: 527},
		{44: 442, 441, 59: 456, 68: 458, 153: 1143, 163: 457, 306: 1142},
		{1144, 3: 1145},
		{394, 3: 394},
		{1: 396, 396, 13: 396, 396, 40: 396, 396, 396, 308: 1147},
		// 725
		{44: 442, 441, 59: 456, 68: 458, 153: 1146, 163: 457},
		{393, 3: 393},
		{1: 395, 395, 13: 395, 395, 40: 395, 395, 395, 342: 1148},
		{1: 397, 397, 13: 397, 397, 40: 397, 397, 397},
		{1: 401, 401, 13: 401, 401, 40: 401, 401, 401},
		// 730
		{1: 413, 413, 185: 427, 192: 428, 219: 425, 223: 426, 229: 424, 251: 1151},
		{1: 417, 417},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 363

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			if yyS[yypt-0].node != nil {
				stmt := yyS[yypt-0].node
				stmt.SetText(nextQuery(yylex))
				yylex.(*yyLexImpl).result = append(yylex.(*yyLexImpl).result, stmt)
			}
		}
	case 3:
		{
			if yyS[yypt-0].node != nil {
				stmt := yyS[yypt-0].node
				stmt.SetText(nextQuery(yylex))
				yylex.(*yyLexImpl).result = append(yylex.(*yyLexImpl).result, stmt)
			}
		}
	case 7:
		{
			yyVAL.node = nil
		}
	case 8:
		{
			yyVAL.anything = &ast.TableName{
				Table: yyS[yypt-0].anything.(*element.Identifier),
			}
		}
	case 9:
		{
			yyVAL.anything = &ast.TableName{
				Schema: yyS[yypt-2].anything.(*element.Identifier),
				Table:  yyS[yypt-0].anything.(*element.Identifier),
			}
		}
	case 10:
		{
			yyVAL.anything = []*element.Identifier{yyS[yypt-0].anything.(*element.Identifier)}
		}
	case 11:
		{
			yyVAL.anything = append(yyS[yypt-2].anything.([]*element.Identifier), yyS[yypt-0].anything.(*element.Identifier))
		}
	case 12:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 13:
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeNonQuoted,
				Value: yyS[yypt-0].str,
			}
		}
	case 14:
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeQuoted,
				Value: yyS[yypt-0].str,
			}
		}
	case 15:
		{
			yyVAL.node = &ast.AlterTableStmt{
				TableName:     yyS[yypt-2].anything.(*ast.TableName),
				ColumnClauses: yyS[yypt-0].anything.([]ast.AlterTableClause),
			}
		}
	case 16:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 17:
		{
			yyVAL.anything = []ast.AlterTableClause{yyS[yypt-0].anything.(ast.AlterTableClause)}
		}
	case 18:
		{
			yyVAL.anything = []ast.AlterTableClause{yyS[yypt-0].anything.(ast.AlterTableClause)}
		}
	case 19:
		{
			yyVAL.anything = append(yyS[yypt-1].anything.([]ast.AlterTableClause), yyS[yypt-0].anything.(ast.AlterTableClause))
		}
	case 23:
		{
			yyVAL.anything = &ast.AddColumnClause{
				Columns: yyS[yypt-3].anything.([]*ast.ColumnDef),
			}
		}
	case 24:
		{
			// TODO
		}
	case 25:
		{
			// TODO
		}
	case 26:
		{
			yyVAL.anything = []*ast.ColumnDef{yyS[yypt-0].anything.(*ast.ColumnDef)}
		}
	case 27:
		{
			yyVAL.anything = append(yyS[yypt-2].anything.([]*ast.ColumnDef), yyS[yypt-0].anything.(*ast.ColumnDef))
		}
	case 28:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 29:
		{
			var collation *ast.Collation
			if yyS[yypt-5].anything != nil {
				collation = yyS[yypt-5].anything.(*ast.Collation)
			}
			props := []ast.ColumnProp{}
			sort := ast.ColumnProp(yyS[yypt-4].i)
			if sort != ast.ColumnPropEmpty {
				props = append(props, sort)
			}
			invisible := ast.ColumnProp(yyS[yypt-3].i)
			if invisible != ast.ColumnPropEmpty {
				props = append(props, invisible)
			}

			var constraints []*ast.InlineConstraint
			if yyS[yypt-0].anything != nil {
				constraints = yyS[yypt-0].anything.([]*ast.InlineConstraint)
			}

			yyVAL.anything = &ast.ColumnDef{
				ColumnName:  yyS[yypt-7].anything.(*element.Identifier),
				Datatype:    yyS[yypt-6].anything.(element.Datatype),
				Collation:   collation,
				Props:       props,
				Constraints: constraints,
			}
		}
	case 30:
		{
			yyVAL.anything = nil
		}
	case 31:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 32:
		{
			yyVAL.anything = &ast.Collation{Name: yyS[yypt-0].anything.(*element.Identifier)}
		}
	case 33:
		{
			yyVAL.i = int(ast.ColumnPropEmpty)
		}
	case 34:
		{
			yyVAL.i = int(ast.ColumnPropSort)
		}
	case 35:
		{
			yyVAL.i = int(ast.ColumnPropEmpty)
		}
	case 37:
		{
			yyVAL.i = int(ast.ColumnPropInvisible)
		}
	case 38:
		{
			yyVAL.i = int(ast.ColumnPropVisible)
		}
	case 39:
		{
			// empty
		}
	case 49:
		{
			// empty
		}
	case 51:
		{
			// empty
		}
	case 67:
		{
			// empty
		}
	case 70:
		{
			// empty
		}
	case 72:
		{
			// empty
		}
	case 74:
		{
			// empty
		}
	case 76:
		{
			// empty
		}
	case 79:
		{
			yyVAL.anything = nil
		}
	case 80:
		{
			yyVAL.anything = nil
		}
	case 81:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 82:
		{
			yyVAL.anything = []*ast.InlineConstraint{yyS[yypt-0].anything.(*ast.InlineConstraint)}
		}
	case 83:
		{
			yyVAL.anything = append(yyS[yypt-1].anything.([]*ast.InlineConstraint), yyS[yypt-0].anything.(*ast.InlineConstraint))
		}
	case 84:
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyS[yypt-1].anything.([]*ast.ColumnDef),
			}
		}
	case 85:
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyS[yypt-1].anything.([]*ast.ColumnDef),
			}
		}
	case 86:
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyS[yypt-0].anything.([]*ast.ColumnDef),
			}
		}
	case 87:
		{
			yyVAL.anything = []*ast.ColumnDef{yyS[yypt-0].anything.(*ast.ColumnDef)}
		}
	case 88:
		{
			yyVAL.anything = append(yyS[yypt-2].anything.([]*ast.ColumnDef), yyS[yypt-0].anything.(*ast.ColumnDef))
		}
	case 90:
		{
			var collation *ast.Collation
			if yyS[yypt-3].anything != nil {
				collation = yyS[yypt-3].anything.(*ast.Collation)
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyS[yypt-5].anything.(*element.Identifier),
				Datatype:   yyS[yypt-4].anything.(element.Datatype),
				Collation:  collation,
				Props:      []ast.ColumnProp{},
			}
		}
	case 95:
		{
			// empty
		}
	case 97:
		{
			yyVAL.anything = []*ast.ColumnDef{yyS[yypt-0].anything.(*ast.ColumnDef)}
		}
	case 98:
		{
			yyVAL.anything = append(yyS[yypt-2].anything.([]*ast.ColumnDef), yyS[yypt-0].anything.(*ast.ColumnDef))
		}
	case 99:
		{
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyS[yypt-1].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{ast.ColumnProp(yyS[yypt-0].i)},
			}
		}
	case 100:
		{
			prop := ast.ColumnPropSubstitutable
			if yyS[yypt-0].b {
				prop = ast.ColumnPropSubstitutableForce
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyS[yypt-5].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{prop},
			}
		}
	case 101:
		{
			prop := ast.ColumnPropNotSubstitutable
			if yyS[yypt-0].b {
				prop = ast.ColumnPropNotSubstitutableForce
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyS[yypt-6].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{prop},
			}
		}
	case 102:
		{
			yyVAL.b = false
		}
	case 103:
		{
			yyVAL.b = true
		}
	case 104:
		{
			props := []ast.DropColumnProp{}
			if yyS[yypt-1].anything != nil {
				props = append(props, yyS[yypt-1].anything.([]ast.DropColumnProp)...)
			}
			online := ast.DropColumnProp(yyS[yypt-0].i)
			if online != ast.DropColumnPropEmpty {
				props = append(props, online)
			}
			yyVAL.anything = &ast.DropColumnClause{
				Type:    ast.DropColumnTypeSetUnused,
				Columns: yyS[yypt-2].anything.([]*element.Identifier),
				Props:   props,
			}
		}
	case 105:
		{
			props := []ast.DropColumnProp{}
			if yyS[yypt-1].anything != nil {
				props = append(props, yyS[yypt-1].anything.([]ast.DropColumnProp)...)
			}
			cc := &ast.DropColumnClause{
				Type:    ast.DropColumnTypeDrop,
				Columns: yyS[yypt-2].anything.([]*element.Identifier),
				Props:   props,
			}
			var checkout int
			if yyS[yypt-0].anything != nil {
				checkout = yyS[yypt-0].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 106:
		{
			cc := &ast.DropColumnClause{
				Type: ast.DropColumnTypeDropUnusedColumns,
			}
			var checkout int
			if yyS[yypt-0].anything != nil {
				checkout = yyS[yypt-0].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 107:
		{
			cc := &ast.DropColumnClause{
				Type: ast.DropColumnTypeDropColumnsContinue,
			}
			var checkout int
			if yyS[yypt-0].anything != nil {
				checkout = yyS[yypt-0].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 108:
		{
			yyVAL.anything = []*element.Identifier{yyS[yypt-0].anything.(*element.Identifier)}
		}
	case 109:
		{
			yyVAL.anything = yyS[yypt-1].anything
		}
	case 110:
		{
			yyVAL.anything = nil
		}
	case 112:
		{
			yyVAL.anything = []ast.DropColumnProp{ast.DropColumnProp(yyS[yypt-0].i)}
		}
	case 113:
		{
			yyVAL.anything = append(yyS[yypt-1].anything.([]ast.DropColumnProp), ast.DropColumnProp(yyS[yypt-0].i))
		}
	case 114:
		{
			yyVAL.i = int(ast.DropColumnPropCascade)
		}
	case 115:
		{
			yyVAL.i = int(ast.DropColumnPropInvalidate)
		}
	case 116:
		{
			yyVAL.i = int(ast.DropColumnPropEmpty)
		}
	case 117:
		{
			yyVAL.i = int(ast.DropColumnPropOnline)
		}
	case 118:
		{
			yyVAL.anything = nil
		}
	case 119:
		{
			yyVAL.anything = yyS[yypt-0].i
		}
	case 120:
		{
			yyVAL.anything = &ast.RenameColumnClause{
				OldName: yyS[yypt-2].anything.(*element.Identifier),
				NewName: yyS[yypt-0].anything.(*element.Identifier),
			}
		}
	case 121:
		{
			yyVAL.node = &ast.CreateTableStmt{
				TableName: yyS[yypt-4].anything.(*ast.TableName),
				RelTable:  yyS[yypt-2].anything.(*ast.RelTableDef),
			}
		}
	case 122:
		{
			// empty
		}
	case 130:
		{
			// empty
		}
	case 135:
		{
			// empty
		}
	case 138:
		{
			rd := &ast.RelTableDef{}
			if yyS[yypt-6].anything != nil {
				rd.TableStructs = yyS[yypt-6].anything.([]ast.TableStructDef)
			}
			yyVAL.anything = rd
		}
	case 141:
		{
			yyVAL.anything = nil
		}
	case 142:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 144:
		{
			// empty
		}
	case 147:
		{
			// empty
		}
	case 150:
		{
			// empty
		}
	case 155:
		{
			// empty
		}
	case 158:
		{
			// empty
		}
	case 201:
		{
			// empty
		}
	case 211:
		{
			// empty
		}
	case 219:
		{
			// empty
		}
	case 226:
		{
			// empty
		}
	case 229:
		{
			// empty
		}
	case 234:
		{
			// empty
		}
	case 244:
		{
			// empty
		}
	case 250:
		{
			// empty
		}
	case 252:
		{
			// empty
		}
	case 257:
		{
			// empty
		}
	case 262:
		{
			// empty
		}
	case 266:
		{
			// empty
		}
	case 268:
		{
			// empty
		}
	case 275:
		{
			// empty
		}
	case 298:
		{
			yyVAL.anything = nil
		}
	case 299:
		{
			yyVAL.anything = yyS[yypt-1].anything
		}
	case 300:
		{
			yyVAL.anything = []ast.TableStructDef{yyS[yypt-0].anything.(ast.TableStructDef)}
		}
	case 301:
		{
			yyVAL.anything = append(yyS[yypt-2].anything.([]ast.TableStructDef), yyS[yypt-0].anything.(ast.TableStructDef))
		}
	case 302:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 303:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 304:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 305:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 306:
		{
			yyVAL.anything = &element.NumberOrAsterisk{Number: yyS[yypt-0].i}
		}
	case 307:
		{
			yyVAL.anything = &element.NumberOrAsterisk{IsAsterisk: true}
		}
	case 308:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 309:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 310:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 311:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 312:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 313:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 314:
		{
			d := &element.Char{}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 315:
		{
			size := yyS[yypt-1].i
			d := &element.Char{Size: &size}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 316:
		{
			size := yyS[yypt-2].i
			d := &element.Char{Size: &size, IsByteSize: true}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 317:
		{
			size := yyS[yypt-2].i
			d := &element.Char{Size: &size, IsCharSize: true}
			d.SetDataDef(element.DataDefChar)
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 318:
		{
			size := yyS[yypt-1].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 319:
		{
			size := yyS[yypt-2].i
			d := &element.Varchar2{}
			d.Size = &size
			d.IsByteSize = true
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 320:
		{
			size := yyS[yypt-2].i
			d := &element.Varchar2{}
			d.Size = &size
			d.IsCharSize = true
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 321:
		{
			d := &element.NChar{}
			d.SetDataDef(element.DataDefNChar)
			yyVAL.anything = d
		}
	case 322:
		{
			size := yyS[yypt-1].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNChar)
			yyVAL.anything = d
		}
	case 323:
		{
			size := yyS[yypt-1].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNVarChar2)
			yyVAL.anything = d
		}
	case 324:
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 325:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 326:
		{
			precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
			scale := yyS[yypt-1].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 327:
		{
			d := &element.Float{}
			d.SetDataDef(element.DataDefFloat)
			yyVAL.anything = d
		}
	case 328:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefFloat)
			yyVAL.anything = d
		}
	case 329:
		{
			d := &element.BinaryFloat{}
			d.SetDataDef(element.DataDefBinaryFloat)
			yyVAL.anything = d
		}
	case 330:
		{
			d := &element.BinaryDouble{}
			d.SetDataDef(element.DataDefBinaryDouble)
			yyVAL.anything = d
		}
	case 331:
		{
			d := &element.Long{}
			d.SetDataDef(element.DataDefLong)
			yyVAL.anything = d
		}
	case 332:
		{
			d := &element.LongRaw{}
			d.SetDataDef(element.DataDefLongRaw)
			yyVAL.anything = d
		}
	case 333:
		{
			size := yyS[yypt-1].i
			d := &element.Raw{Size: &size}
			d.SetDataDef(element.DataDefRaw)
			yyVAL.anything = d
		}
	case 334:
		{
			d := &element.Date{}
			d.SetDataDef(element.DataDefDate)
			yyVAL.anything = d
		}
	case 335:
		{
			d := &element.Timestamp{}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 336:
		{
			precision := yyS[yypt-1].i
			d := &element.Timestamp{FractionalSecondsPrecision: &precision}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 337:
		{
			precision := yyS[yypt-4].i
			d := &element.Timestamp{FractionalSecondsPrecision: &precision, WithTimeZone: true}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 338:
		{
			precision := yyS[yypt-5].i
			d := &element.Timestamp{FractionalSecondsPrecision: &precision, WithLocalTimeZone: true}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 339:
		{
			d := &element.IntervalYear{}
			d.SetDataDef(element.DataDefIntervalYear)
			yyVAL.anything = d
		}
	case 340:
		{
			precision := yyS[yypt-3].i
			d := &element.IntervalYear{Precision: &precision}
			d.SetDataDef(element.DataDefIntervalYear)
			yyVAL.anything = d
		}
	case 341:
		{
			d := &element.IntervalDay{}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 342:
		{
			precision := yyS[yypt-3].i
			d := &element.IntervalDay{Precision: &precision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 343:
		{
			precision := yyS[yypt-6].i
			sPrecision := yyS[yypt-1].i
			d := &element.IntervalDay{Precision: &precision, FractionalSecondsPrecision: &sPrecision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 344:
		{
			sPrecision := yyS[yypt-1].i
			d := &element.IntervalDay{FractionalSecondsPrecision: &sPrecision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 345:
		{
			d := &element.Blob{}
			d.SetDataDef(element.DataDefBlob)
			yyVAL.anything = d
		}
	case 346:
		{
			d := &element.Clob{}
			d.SetDataDef(element.DataDefClob)
			yyVAL.anything = d
		}
	case 347:
		{
			d := &element.NClob{}
			d.SetDataDef(element.DataDefNClob)
			yyVAL.anything = d
		}
	case 348:
		{
			d := &element.BFile{}
			d.SetDataDef(element.DataDefBFile)
			yyVAL.anything = d
		}
	case 349:
		{
			d := &element.RowId{}
			d.SetDataDef(element.DataDefRowId)
			yyVAL.anything = d
		}
	case 350:
		{
			d := &element.URowId{}
			d.SetDataDef(element.DataDefURowId)
			yyVAL.anything = d
		}
	case 351:
		{
			size := yyS[yypt-1].i
			d := &element.URowId{Size: &size}
			d.SetDataDef(element.DataDefURowId)
			yyVAL.anything = d
		}
	case 352:
		{
			d := &element.Char{}
			d.SetDataDef(element.DataDefCharacter)
			yyVAL.anything = d
		}
	case 353:
		{
			size := yyS[yypt-1].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharacterVarying)
			yyVAL.anything = d
		}
	case 354:
		{
			size := yyS[yypt-1].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharVarying)
			yyVAL.anything = d
		}
	case 355:
		{
			size := yyS[yypt-1].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNCharVarying)
			yyVAL.anything = d
		}
	case 356:
		{
			size := yyS[yypt-1].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefVarchar)
			yyVAL.anything = d
		}
	case 357:
		{
			size := yyS[yypt-1].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNationalCharacter)
			yyVAL.anything = d
		}
	case 358:
		{
			size := yyS[yypt-1].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNationalCharacterVarying)
			yyVAL.anything = d
		}
	case 359:
		{
			size := yyS[yypt-1].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNationalChar)
			yyVAL.anything = d
		}
	case 360:
		{
			size := yyS[yypt-1].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNationalCharVarying)
			yyVAL.anything = d
		}
	case 361:
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 362:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 363:
		{
			precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
			scale := yyS[yypt-1].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 364:
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 365:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 366:
		{
			precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
			scale := yyS[yypt-1].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 367:
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 368:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 369:
		{
			precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
			scale := yyS[yypt-1].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 370:
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefInteger)
			yyVAL.anything = d
		}
	case 371:
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefInt)
			yyVAL.anything = d
		}
	case 372:
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefSmallInt)
			yyVAL.anything = d
		}
	case 373:
		{
			precision := &element.NumberOrAsterisk{Number: 126}
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefDoublePrecision)
			yyVAL.anything = d
		}
	case 374:
		{
			precision := &element.NumberOrAsterisk{Number: 63}
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefReal)
			yyVAL.anything = d
		}
	case 375:
		{
			yyVAL.anything = nil
		}
	case 376:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 377:
		{
			constraint := &ast.InlineConstraint{}
			if yyS[yypt-2].anything != nil {
				constraint.Name = yyS[yypt-2].anything.(*element.Identifier)
			}
			constraint.Type = ast.ConstraintType(yyS[yypt-1].i)
			yyVAL.anything = constraint
		}
	case 378:
		{
			constraint := &ast.InlineConstraint{}
			if yyS[yypt-2].anything != nil {
				constraint.Name = yyS[yypt-2].anything.(*element.Identifier)
			}
			constraint.Type = ast.ConstraintTypeReferences
			yyVAL.anything = constraint
		}
	case 379:
		{
			yyVAL.i = int(ast.ConstraintTypeNull)
		}
	case 380:
		{
			yyVAL.i = int(ast.ConstraintTypeNotNull)
		}
	case 381:
		{
			yyVAL.i = int(ast.ConstraintTypeUnique)
		}
	case 382:
		{
			yyVAL.i = int(ast.ConstraintTypePK)
		}
	case 384:
		{
			// empty
		}
	case 386:
		{
			// empty
		}
	case 389:
		{
			// empty
		}
	case 399:
		{
			// empty
		}
	case 405:
		{
			constraint := &ast.OutOfLineConstraint{}
			if yyS[yypt-5].anything != nil {
				constraint.Name = yyS[yypt-5].anything.(*element.Identifier)
			}
			constraint.Type = ast.ConstraintTypeUnique
			constraint.Columns = yyS[yypt-2].anything.([]*element.Identifier)
			yyVAL.anything = constraint
		}
	case 406:
		{
			constraint := &ast.OutOfLineConstraint{}
			if yyS[yypt-6].anything != nil {
				constraint.Name = yyS[yypt-6].anything.(*element.Identifier)
			}
			constraint.Type = ast.ConstraintTypePK
			constraint.Columns = yyS[yypt-2].anything.([]*element.Identifier)
			yyVAL.anything = constraint
		}
	case 407:
		{
			constraint := &ast.OutOfLineConstraint{}
			if yyS[yypt-7].anything != nil {
				constraint.Name = yyS[yypt-7].anything.(*element.Identifier)
			}
			constraint.Type = ast.ConstraintTypeReferences
			constraint.Columns = yyS[yypt-3].anything.([]*element.Identifier)
			yyVAL.anything = constraint
		}
	case 414:
		{
			// empty
		}
	case 416:
		{
			// empty
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

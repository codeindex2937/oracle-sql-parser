// Code generated by goyacc -o sql.go -l sql.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

import (
	"strings"

	"github.com/codeindex2937/oracle-sql-parser/ast"
	"github.com/codeindex2937/oracle-sql-parser/ast/element"
)

func nextQuery(yylex interface{}) string {
	lex := yylex.(*yyLexImpl)
	tc := lex.scanner.TC
	query := string(lex.scanner.Text[lex.lastPos:tc])
	lex.lastPos = tc
	return strings.TrimSpace(query)
}

type yySymType struct {
	yys      int
	nothing  struct{}
	i        int
	b        bool
	str      string
	node     ast.Node
	anything interface{}
}

const _action = 57346
const _add = 57347
const _all = 57348
const _alter = 57349
const _as = 57350
const _asc = 57351
const _by = 57352
const _char = 57353
const _cluster = 57354
const _column = 57355
const _compress = 57356
const _create = 57357
const _date = 57358
const _decimal = 57359
const _default = 57360
const _delete = 57361
const _desc = 57362
const _drop = 57363
const _float = 57364
const _for = 57365
const _from = 57366
const _identified = 57367
const _immediate = 57368
const _increment = 57369
const _index = 57370
const _initial = 57371
const _integer = 57372
const _into = 57373
const _is = 57374
const _level = 57375
const _long = 57376
const _maxextents = 57377
const _modify = 57378
const _nocompress = 57379
const _not = 57380
const _null = 57381
const _number = 57382
const _on = 57383
const _online = 57384
const _optimal = 57385
const _order = 57386
const _pctfree = 57387
const _raw = 57388
const _rename = 57389
const _restrict = 57390
const _row = 57391
const _rowid = 57392
const _rows = 57393
const _select = 57394
const _set = 57395
const _smallInt = 57396
const _start = 57397
const _table = 57398
const _to = 57399
const _unique = 57400
const _update = 57401
const _validate = 57402
const _varchar = 57403
const _varchar2 = 57404
const _with = 57405
const _sequence = 57406
const _advanced = 57407
const _always = 57408
const _archive = 57409
const _at = 57410
const _attributes = 57411
const _auto = 57412
const _basic = 57413
const _bfile = 57414
const _binaryDouble = 57415
const _binaryFloat = 57416
const _bitmap = 57417
const _blob = 57418
const _blockchain = 57419
const _buffer_pool = 57420
const _byte = 57421
const _cache = 57422
const _capacity = 57423
const _cascade = 57424
const _cell_flash_cache = 57425
const _character = 57426
const _check = 57427
const _checkpoint = 57428
const _clob = 57429
const _collate = 57430
const _columns = 57431
const _commit = 57432
const _constraint = 57433
const _constraints = 57434
const _continue = 57435
const _creation = 57436
const _critical = 57437
const _cycle = 57438
const _data = 57439
const _day = 57440
const _dec = 57441
const _decrypt = 57442
const _deferrable = 57443
const _deferred = 57444
const _definition = 57445
const _delete_all = 57446
const _disable = 57447
const _disable_all = 57448
const _distribute = 57449
const _dml = 57450
const _double = 57451
const _duplicate = 57452
const _duplicated = 57453
const _E = 57454
const _enable = 57455
const _enable_all = 57456
const _encrypt = 57457
const _exceptions = 57458
const _extended = 57459
const _external = 57460
const _filesystem_like_logging = 57461
const _flash_cache = 57462
const _force = 57463
const _foreign = 57464
const _freelist = 57465
const _freelists = 57466
const _full = 57467
const _G = 57468
const _generated = 57469
const _global = 57470
const _groups = 57471
const _heap = 57472
const _high = 57473
const _identity = 57474
const _ilm = 57475
const _immutable = 57476
const _indexing = 57477
const _initially = 57478
const _initrans = 57479
const _inmemory = 57480
const _int = 57481
const _interval = 57482
const _invalidate = 57483
const _invalidation = 57484
const _invisible = 57485
const _K = 57486
const _keep = 57487
const _key = 57488
const _levels = 57489
const _limit = 57490
const _local = 57491
const _locking = 57492
const _logging = 57493
const _low = 57494
const _M = 57495
const _maxsize = 57496
const _maxtrans = 57497
const _maxvalue = 57498
const _medium = 57499
const _memcompress = 57500
const _memoptimize = 57501
const _metadata = 57502
const _minextents = 57503
const _minvalue = 57504
const _month = 57505
const _multivalue = 57506
const _national = 57507
const _nchar = 57508
const _nclob = 57509
const _next = 57510
const _no = 57511
const _nocache = 57512
const _nocycle = 57513
const _nologging = 57514
const _nomaxvalue = 57515
const _nominvalue = 57516
const _none = 57517
const _noorder = 57518
const _noparallel = 57519
const _norely = 57520
const _nosort = 57521
const _novalidate = 57522
const _numeric = 57523
const _nvarchar2 = 57524
const _organization = 57525
const _P = 57526
const _parallel = 57527
const _parent = 57528
const _partial = 57529
const _partition = 57530
const _pctincrease = 57531
const _pctused = 57532
const _peverse = 57533
const _policy = 57534
const _precision = 57535
const _preserve = 57536
const _primary = 57537
const _priority = 57538
const _private = 57539
const _purge = 57540
const _query = 57541
const _range = 57542
const _read = 57543
const _real = 57544
const _recycle = 57545
const _references = 57546
const _reject = 57547
const _rely = 57548
const _salt = 57549
const _scope = 57550
const _second = 57551
const _segment = 57552
const _service = 57553
const _sharded = 57554
const _sharding = 57555
const _sort = 57556
const _spatial = 57557
const _storage = 57558
const _store = 57559
const _subpartition = 57560
const _substitutable = 57561
const _T = 57562
const _tablespace = 57563
const _temporary = 57564
const _time = 57565
const _timestamp = 57566
const _unlimited = 57567
const _unusable = 57568
const _unused = 57569
const _urowid = 57570
const _usable = 57571
const _using = 57572
const _value = 57573
const _varying = 57574
const _visible = 57575
const _write = 57576
const _XMLType = 57577
const _year = 57578
const _zone = 57579
const _singleQuoteStr = 57580
const _doubleQuoteStr = 57581
const _nonquotedIdentifier = 57582
const _not_deferrable = 57583
const _no_inmemory = 57584
const _no_duplicate = 57585
const _row_level_locking = 57586
const _drop_index = 57587
const _intNumber = 57588

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"_action",
	"_add",
	"_all",
	"_alter",
	"_as",
	"_asc",
	"_by",
	"_char",
	"_cluster",
	"_column",
	"_compress",
	"_create",
	"_date",
	"_decimal",
	"_default",
	"_delete",
	"_desc",
	"_drop",
	"_float",
	"_for",
	"_from",
	"_identified",
	"_immediate",
	"_increment",
	"_index",
	"_initial",
	"_integer",
	"_into",
	"_is",
	"_level",
	"_long",
	"_maxextents",
	"_modify",
	"_nocompress",
	"_not",
	"_null",
	"_number",
	"_on",
	"_online",
	"_optimal",
	"_order",
	"_pctfree",
	"_raw",
	"_rename",
	"_restrict",
	"_row",
	"_rowid",
	"_rows",
	"_select",
	"_set",
	"_smallInt",
	"_start",
	"_table",
	"_to",
	"_unique",
	"_update",
	"_validate",
	"_varchar",
	"_varchar2",
	"_with",
	"_sequence",
	"_advanced",
	"_always",
	"_archive",
	"_at",
	"_attributes",
	"_auto",
	"_basic",
	"_bfile",
	"_binaryDouble",
	"_binaryFloat",
	"_bitmap",
	"_blob",
	"_blockchain",
	"_buffer_pool",
	"_byte",
	"_cache",
	"_capacity",
	"_cascade",
	"_cell_flash_cache",
	"_character",
	"_check",
	"_checkpoint",
	"_clob",
	"_collate",
	"_columns",
	"_commit",
	"_constraint",
	"_constraints",
	"_continue",
	"_creation",
	"_critical",
	"_cycle",
	"_data",
	"_day",
	"_dec",
	"_decrypt",
	"_deferrable",
	"_deferred",
	"_definition",
	"_delete_all",
	"_disable",
	"_disable_all",
	"_distribute",
	"_dml",
	"_double",
	"_duplicate",
	"_duplicated",
	"_E",
	"_enable",
	"_enable_all",
	"_encrypt",
	"_exceptions",
	"_extended",
	"_external",
	"_filesystem_like_logging",
	"_flash_cache",
	"_force",
	"_foreign",
	"_freelist",
	"_freelists",
	"_full",
	"_G",
	"_generated",
	"_global",
	"_groups",
	"_heap",
	"_high",
	"_identity",
	"_ilm",
	"_immutable",
	"_indexing",
	"_initially",
	"_initrans",
	"_inmemory",
	"_int",
	"_interval",
	"_invalidate",
	"_invalidation",
	"_invisible",
	"_K",
	"_keep",
	"_key",
	"_levels",
	"_limit",
	"_local",
	"_locking",
	"_logging",
	"_low",
	"_M",
	"_maxsize",
	"_maxtrans",
	"_maxvalue",
	"_medium",
	"_memcompress",
	"_memoptimize",
	"_metadata",
	"_minextents",
	"_minvalue",
	"_month",
	"_multivalue",
	"_national",
	"_nchar",
	"_nclob",
	"_next",
	"_no",
	"_nocache",
	"_nocycle",
	"_nologging",
	"_nomaxvalue",
	"_nominvalue",
	"_none",
	"_noorder",
	"_noparallel",
	"_norely",
	"_nosort",
	"_novalidate",
	"_numeric",
	"_nvarchar2",
	"_organization",
	"_P",
	"_parallel",
	"_parent",
	"_partial",
	"_partition",
	"_pctincrease",
	"_pctused",
	"_peverse",
	"_policy",
	"_precision",
	"_preserve",
	"_primary",
	"_priority",
	"_private",
	"_purge",
	"_query",
	"_range",
	"_read",
	"_real",
	"_recycle",
	"_references",
	"_reject",
	"_rely",
	"_salt",
	"_scope",
	"_second",
	"_segment",
	"_service",
	"_sharded",
	"_sharding",
	"_sort",
	"_spatial",
	"_storage",
	"_store",
	"_subpartition",
	"_substitutable",
	"_T",
	"_tablespace",
	"_temporary",
	"_time",
	"_timestamp",
	"_unlimited",
	"_unusable",
	"_unused",
	"_urowid",
	"_usable",
	"_using",
	"_value",
	"_varying",
	"_visible",
	"_write",
	"_XMLType",
	"_year",
	"_zone",
	"_singleQuoteStr",
	"_doubleQuoteStr",
	"_nonquotedIdentifier",
	"_not_deferrable",
	"_no_inmemory",
	"_no_duplicate",
	"_row_level_locking",
	"_drop_index",
	"_intNumber",
	"';'",
	"'.'",
	"','",
	"'('",
	"')'",
	"'='",
	"'*'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 12,
	56, 326,
	-2, 462,
	-1, 347,
	251, 712,
	-2, 715,
	-1, 648,
	1, 355,
	159, 355,
	186, 355,
	247, 355,
	-2, 360,
}

const yyPrivate = 57344

const yyLast = 1870

var yyAct = [...]int16{
	31, 875, 371, 952, 370, 923, 885, 568, 966, 567,
	812, 322, 955, 210, 933, 974, 784, 891, 963, 457,
	214, 783, 887, 566, 7, 30, 716, 786, 211, 713,
	668, 830, 804, 741, 964, 247, 635, 650, 549, 791,
	454, 500, 474, 610, 218, 806, 285, 785, 459, 383,
	460, 499, 350, 351, 227, 384, 359, 468, 361, 453,
	225, 312, 298, 262, 385, 611, 960, 478, 307, 1054,
	261, 478, 612, 1037, 1045, 412, 693, 587, 332, 676,
	433, 417, 478, 478, 1015, 980, 428, 756, 1001, 755,
	300, 696, 950, 695, 419, 690, 920, 689, 431, 860,
	588, 305, 859, 318, 427, 569, 858, 688, 579, 687,
	432, 318, 857, 856, 440, 935, 855, 303, 421, 686,
	478, 685, 630, 299, 779, 414, 425, 478, 478, 629,
	553, 478, 944, 545, 777, 774, 439, 430, 429, 478,
	436, 526, 1000, 934, 692, 773, 768, 675, 411, 766,
	488, 437, 487, 478, 302, 479, 316, 452, 450, 451,
	449, 765, 400, 418, 399, 764, 763, 762, 942, 761,
	961, 706, 705, 422, 698, 697, 694, 680, 959, 314,
	678, 672, 586, 609, 940, 624, 529, 314, 622, 317,
	607, 507, 505, 503, 318, 876, 1000, 959, 589, 972,
	581, 608, 901, 420, 435, 306, 576, 455, 606, 506,
	504, 502, 865, 778, 584, 684, 682, 665, 582, 604,
	211, 602, 221, 600, 211, 30, 230, 301, 594, 415,
	413, 438, 249, 525, 524, 585, 520, 742, 518, 517,
	591, 275, 573, 745, 936, 416, 426, 516, 590, 515,
	938, 750, 513, 580, 574, 512, 511, 508, 943, 941,
	304, 937, 939, 347, 945, 445, 423, 444, 367, 356,
	344, 304, 321, 295, 331, 884, 593, 572, 229, 592,
	842, 220, 295, 661, 570, 15, 751, 717, 442, 1024,
	1023, 753, 441, 315, 836, 1016, 575, 456, 341, 424,
	343, 991, 34, 33, 719, 297, 354, 353, 990, 835,
	358, 357, 718, 803, 551, 831, 691, 313, 368, 674,
	989, 369, 296, 754, 310, 313, 291, 916, 752, 11,
	834, 749, 748, 862, 341, 839, 461, 12, 838, 985,
	319, 833, 831, 14, 1049, 211, 775, 398, 319, 443,
	448, 339, 772, 771, 770, 769, 719, 767, 704, 702,
	342, 465, 746, 683, 718, 681, 679, 677, 673, 744,
	664, 659, 476, 658, 1060, 464, 743, 461, 625, 297,
	657, 623, 372, 380, 656, 935, 627, 343, 1022, 379,
	626, 619, 616, 615, 605, 603, 601, 747, 494, 496,
	599, 401, 944, 341, 548, 335, 334, 284, 283, 282,
	655, 477, 463, 934, 552, 1042, 898, 888, 960, 470,
	929, 1077, 472, 473, 34, 33, 873, 776, 699, 480,
	523, 319, 376, 1076, 485, 455, 377, 326, 942, 820,
	818, 327, 234, 1046, 794, 641, 320, 915, 492, 527,
	528, 491, 621, 532, 940, 534, 498, 224, 374, 828,
	700, 912, 216, 821, 660, 377, 215, 1070, 547, 546,
	327, 579, 482, 900, 899, 819, 462, 1050, 1066, 910,
	597, 555, 29, 277, 1074, 733, 921, 831, 911, 983,
	1041, 341, 703, 788, 787, 1021, 211, 709, 560, 1039,
	536, 1075, 598, 531, 289, 535, 533, 544, 1036, 541,
	540, 1044, 514, 789, 936, 539, 554, 462, 845, 914,
	938, 889, 961, 300, 896, 456, 620, 982, 943, 941,
	827, 937, 939, 484, 945, 1034, 297, 564, 563, 565,
	788, 787, 316, 538, 919, 586, 628, 827, 663, 825,
	303, 800, 701, 851, 975, 913, 613, 614, 956, 977,
	789, 617, 618, 581, 888, 642, 272, 13, 522, 957,
	228, 654, 272, 228, 1004, 317, 271, 584, 323, 1064,
	226, 582, 26, 273, 848, 1059, 730, 302, 976, 653,
	1079, 870, 1062, 299, 666, 643, 645, 669, 585, 27,
	1063, 412, 34, 33, 652, 1071, 433, 417, 1058, 931,
	662, 646, 428, 1061, 346, 345, 580, 366, 355, 362,
	419, 337, 336, 463, 431, 1056, 1035, 739, 953, 1057,
	427, 34, 33, 1033, 894, 1072, 432, 671, 391, 373,
	440, 1025, 592, 1043, 421, 843, 1055, 815, 738, 707,
	790, 414, 425, 947, 34, 33, 840, 877, 392, 709,
	301, 796, 439, 430, 429, 715, 436, 638, 889, 1032,
	708, 801, 248, 881, 411, 978, 279, 437, 363, 315,
	849, 270, 729, 734, 728, 727, 587, 735, 28, 418,
	1030, 714, 995, 712, 997, 1031, 231, 790, 1027, 422,
	905, 390, 996, 844, 902, 904, 709, 760, 714, 588,
	850, 846, 638, 1029, 569, 634, 393, 579, 907, 287,
	489, 211, 826, 781, 895, 725, 26, 805, 780, 420,
	435, 823, 19, 724, 822, 365, 893, 471, 290, 364,
	816, 847, 814, 27, 824, 25, 737, 501, 543, 469,
	217, 308, 475, 510, 1012, 415, 413, 438, 251, 669,
	1011, 967, 987, 559, 481, 521, 807, 809, 280, 863,
	906, 416, 426, 1053, 829, 832, 639, 861, 837, 23,
	903, 720, 841, 722, 1002, 467, 466, 853, 852, 212,
	854, 586, 423, 208, 519, 286, 20, 925, 907, 16,
	866, 908, 24, 878, 219, 973, 868, 589, 557, 581,
	820, 818, 864, 867, 442, 576, 897, 816, 441, 814,
	886, 639, 874, 584, 542, 424, 509, 582, 882, 309,
	653, 1003, 28, 1052, 821, 736, 879, 924, 1019, 721,
	651, 333, 579, 948, 585, 869, 819, 632, 631, 591,
	292, 573, 795, 710, 530, 949, 726, 590, 269, 1018,
	820, 818, 580, 574, 644, 21, 294, 213, 872, 1069,
	926, 1014, 375, 325, 324, 274, 918, 311, 758, 946,
	22, 293, 925, 798, 821, 951, 572, 927, 592, 759,
	562, 3, 579, 570, 883, 970, 819, 969, 268, 968,
	988, 816, 816, 814, 814, 575, 971, 209, 962, 236,
	930, 257, 958, 965, 281, 813, 586, 993, 797, 269,
	1067, 647, 558, 1020, 447, 223, 245, 266, 909, 740,
	446, 984, 880, 799, 581, 866, 723, 235, 640, 537,
	458, 979, 258, 288, 250, 578, 577, 986, 584, 992,
	571, 395, 582, 259, 490, 278, 1009, 1007, 890, 268,
	1068, 211, 243, 994, 1005, 1051, 586, 1065, 1048, 585,
	1008, 1026, 816, 1006, 814, 886, 1010, 998, 241, 1017,
	810, 999, 954, 1040, 581, 1013, 583, 580, 817, 811,
	892, 732, 649, 808, 731, 648, 486, 381, 584, 483,
	378, 276, 582, 17, 550, 1028, 782, 711, 633, 981,
	928, 871, 1038, 592, 793, 792, 35, 932, 815, 585,
	637, 636, 595, 497, 222, 802, 493, 1047, 1, 233,
	232, 667, 495, 396, 394, 922, 260, 580, 237, 917,
	382, 330, 329, 328, 239, 360, 561, 265, 338, 340,
	267, 349, 244, 242, 352, 238, 240, 348, 246, 264,
	263, 256, 255, 592, 254, 253, 252, 404, 815, 1073,
	300, 403, 410, 409, 434, 1078, 408, 36, 37, 38,
	39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 389, 57, 58,
	59, 60, 61, 386, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 80, 81, 82, 83, 84, 85, 86, 87, 88,
	89, 90, 91, 92, 388, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 387, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 35, 206, 207,
	407, 34, 33, 406, 405, 397, 402, 2, 10, 9,
	8, 6, 5, 4, 757, 18, 32, 556, 670, 596,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 36, 37,
	38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 80, 81, 82, 83, 84, 85, 86, 87,
	88, 89, 90, 91, 92, 93, 94, 95, 96, 97,
	98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 141, 142, 143, 144, 145, 146, 147,
	148, 149, 150, 151, 152, 153, 154, 155, 156, 157,
	158, 159, 160, 161, 162, 163, 164, 165, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 176, 177,
	178, 179, 180, 181, 182, 183, 184, 185, 186, 187,
	188, 189, 190, 191, 192, 193, 194, 195, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 35, 206,
	207, 0, 34, 33, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 81, 82, 83, 84, 85, 86,
	87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
	147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 164, 165, 166,
	167, 168, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 186,
	187, 188, 189, 190, 191, 192, 193, 194, 195, 196,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 742,
	206, 207, 0, 34, 33, 745, 0, 0, 0, 0,
	0, 0, 0, 750, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 751, 0,
	0, 0, 0, 753, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 754, 0, 0, 0, 0,
	752, 0, 0, 749, 748, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 746, 0, 0, 0, 0, 0,
	0, 744, 0, 0, 0, 0, 0, 0, 743, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 747,
}

var yyPact = [...]int16{
	322, -1000, 38, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 743, 668, 1474, 737, 322, 1474, 733, 839, 185,
	244, 240, -1000, -1000, 673, -1000, -1000, -1000, -1000, 762,
	33, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1474, -1000,
	411, 30, 1474, 1474, 882, -1000, -1000, -1000, 551, -1000,
	1474, 676, 906, 407, -1000, -1000, 424, -1000, 852, 1474,
	270, -1000, -1000, 882, -1000, 705, 904, 163, -1000, 162,
	-1000, -1000, -1000, 161, -1000, -1000, -1000, 693, -1000, -1000,
	306, 646, -1000, -1000, -1000, 845, -1000, 32, 10, 738,
	856, -1000, -1000, -1000, -1000, -1000, 98, -1000, 219, 1474,
	-1000, 419, 851, 850, 236, -1000, 24, -174, 800, -1000,
	160, 159, -1000, -1000, -1000, -1000, 480, 479, -1000, -1000,
	-1000, -1000, 23, 21, 90, 1474, -1000, 465, -1000, 185,
	20, 469, 468, 13, 1474, 185, 472, 19, 1474, 185,
	-1000, 484, 537, 650, 642, 471, 18, 185, 1474, 1474,
	181, 420, -1000, 849, 207, 231, -1000, -1000, 414, -1000,
	-1000, 1012, 541, 1243, -1000, -1000, -1000, -1000, -87, -1000,
	-1000, 590, -1000, -1000, 1474, 17, 15, 1474, -91, -92,
	-1000, -1000, -1000, 64, 276, 276, 1474, 729, 728, 663,
	537, -1000, 645, -1000, 663, 663, 670, 1474, 670, -1000,
	-96, -1000, 537, 696, 253, 202, -1000, -1000, 347, 413,
	-1000, -1000, -99, -1000, -1000, -1000, 185, 469, 468, 13,
	-1000, -1000, 623, -1000, 222, -1000, -1000, 185, 185, -1000,
	1474, 659, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -39, -40, -41, 7, 742, 6, 5, 2, -1000,
	-1000, -1000, 319, -1000, -1000, -1, -3, -11, -12, -1000,
	-1000, 748, -14, -1000, 702, 332, -1000, -1000, -1000, -1000,
	-1000, -16, -17, -110, 1474, 1474, -65, 822, -1000, -1000,
	1474, -1000, 1474, 659, -1000, -1000, -1000, 670, 337, 487,
	235, -1000, -1000, 722, 670, -118, 1474, 185, -1000, 158,
	-1000, -1000, -1000, -1000, 169, -1000, -121, 169, 1474, -1000,
	766, 916, 695, -1000, 1474, -1000, 872, -1000, 1012, -1000,
	693, -1000, -1000, 672, 28, -22, -1000, -1000, -1000, 266,
	-1000, 185, 154, -27, 150, -29, 149, -31, 148, -42,
	-49, -181, -181, -181, -1000, 147, 146, -181, -181, -1000,
	145, 303, 131, 128, 144, 140, 276, -122, -129, -1000,
	809, -1000, 590, -1000, 292, 694, -1000, 215, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 276, -1000, -1000, -1000, -1000,
	762, 836, -1000, 670, -1000, -1000, -1000, -1000, 464, 915,
	-1000, 799, 659, -1000, -1000, 672, -1000, -1000, -1000, -1000,
	392, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 138,
	134, 127, 125, -1000, -1000, -1000, -1000, 218, -1000, 423,
	124, -1000, -33, 185, 1474, -1000, 292, -1000, -1000, -70,
	122, 68, 121, -71, 120, -74, 119, -34, 117, -35,
	-130, -1000, -1000, -142, -154, 65, -75, -158, -76, -77,
	191, 237, 389, 113, 283, 112, -79, -80, -1000, 276,
	293, -1000, 814, 593, 533, -1000, -1000, -1000, 118, 773,
	620, 828, 670, -1000, -1000, 169, 551, 439, 473, 794,
	-1000, 656, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 496, -1000, -1000, -1000, 1680, -1000, -162, -1000, 869,
	649, -1000, -1000, -82, -1000, -84, -85, -86, -1000, -90,
	-1000, -102, 111, -105, 109, -1000, 108, -1000, 107, -1000,
	106, -1000, -106, -116, -1000, -1000, 100, -1000, -1000, -1000,
	190, -1000, -117, -37, -127, -1000, -1000, -1000, 276, 1474,
	-1000, 502, -1000, -1000, 214, -1000, -1000, 813, -1000, -1000,
	529, 910, 865, 491, -1000, -1000, 63, -1000, -1000, -1000,
	551, -1000, 797, 185, 637, -1000, 654, 528, -1000, -1000,
	208, -1000, 96, 96, 95, 84, 69, 92, 89, 527,
	241, 500, 566, 535, -1000, 672, 1474, -1000, -1000, -1000,
	576, -1000, -1000, -1000, -1000, -1000, -1000, -135, -1000, -138,
	-139, -145, -149, -1000, -1000, -152, -1000, 720, 87, 712,
	771, -38, -1000, 502, -1000, 455, 276, -1000, 806, -1000,
	445, -1000, -1000, 843, 188, 66, -55, 525, 795, 557,
	-1000, -1000, -1000, 879, -1000, 27, 672, -1000, -1000, 426,
	606, -1000, -1000, 336, -1000, 363, -1000, -1000, -1000, 257,
	256, -1000, -48, 678, 511, 597, 667, 750, -1000, -1000,
	-1000, 335, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	81, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 502, -1000, -1000, -1000, -1000, -1000,
	-1000, 381, -155, 277, 778, 1474, -1000, 276, -1000, -1000,
	-1000, 182, 900, -1000, -1000, -1000, 358, -55, 521, 804,
	-1000, 824, -159, 524, 185, 495, -1000, -1000, 400, -72,
	280, -1000, -1000, 847, 847, -1000, 692, -1000, 185, 883,
	881, 1474, -1000, -1000, 747, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 502, -1000,
	-1000, -51, 764, -1000, 506, 506, -166, -1000, 320, -1000,
	185, -1000, 88, -1000, 699, 890, 74, -1000, 62, -1000,
	-1000, -1000, 55, -1000, -1000, -1000, -1000, -55, 909, 1474,
	-1000, -1000, -1000, 588, 280, -108, 761, 416, -1000, 1474,
	400, -53, -1000, 279, 847, -1000, -1000, -1000, -1000, 689,
	848, -167, 49, 863, -1000, -1000, -1000, 820, 919, -1000,
	-1000, -1000, -1000, 288, -1000, -1000, -1000, 142, 43, -1000,
	-1000, -1000, -1000, 509, -1000, -1000, -1000, -1000, -1000, 591,
	1474, 538, 427, -1000, -1000, -178, -54, -1000, 495, -1000,
	294, -1000, -1000, 246, 444, -1000, -177, -1000, -1000, -1000,
	-1000, -1000, -1000, 212, -1000, -55, 234, 763, -182, -1000,
	-1000, -1000, -1000, -1000, -1000, 494, 477, -1000, -1000, 437,
	-1000, -1000, 130, 461, 448, -1000, -1000, -1000, 263, 914,
	-1000, 846, -1000, 417, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1474, -1000, -1000, 273,
	301, -1000, -1000, -1000, 415, -1000, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1269, 40, 1268, 58, 1267, 35, 1266, 1265, 1264,
	1263, 891, 1262, 1261, 24, 1260, 1259, 1258, 1257, 13,
	482, 0, 11, 2, 59, 1256, 1254, 1253, 1250, 1076,
	1074, 1073, 1072, 1071, 1067, 1066, 1065, 1064, 1062, 70,
	1061, 1060, 1059, 1057, 52, 1054, 1051, 53, 1050, 1049,
	1048, 55, 1047, 43, 51, 41, 1046, 4, 61, 57,
	1045, 56, 1043, 1042, 1041, 1040, 49, 64, 62, 47,
	1039, 21, 16, 27, 1036, 63, 39, 1035, 5, 15,
	1034, 1033, 1032, 1031, 30, 1030, 1029, 1028, 1026, 1025,
	1024, 1023, 1022, 36, 29, 1021, 1020, 26, 1, 1017,
	14, 1015, 1014, 1011, 1010, 1009, 1008, 1007, 1006, 19,
	42, 38, 1004, 44, 1003, 1001, 1000, 999, 997, 996,
	995, 994, 993, 992, 37, 991, 34, 6, 3, 990,
	989, 18, 10, 9, 7, 988, 988, 986, 985, 983,
	22, 982, 12, 981, 971, 968, 967, 965, 960, 958,
	17, 957, 956, 8, 955, 954, 46, 951, 45, 23,
	950, 946, 945, 32, 944, 943, 442, 940, 939, 938,
	936, 933, 932, 48, 50, 932, 930, 929, 33, 31,
	928, 925, 457, 60, 54, 924,
}

var yyR1 = [...]uint8{
	0, 87, 18, 18, 11, 11, 11, 11, 11, 11,
	11, 10, 19, 19, 57, 57, 23, 88, 88, 20,
	20, 89, 89, 22, 22, 21, 21, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	12, 35, 35, 36, 36, 38, 38, 39, 39, 39,
	41, 91, 92, 50, 50, 51, 49, 54, 54, 55,
	1, 1, 3, 3, 2, 2, 93, 93, 93, 95,
	95, 96, 96, 96, 96, 98, 98, 98, 99, 99,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 94, 94, 101, 102, 102, 103, 103,
	104, 104, 105, 105, 105, 70, 70, 71, 71, 42,
	42, 42, 43, 43, 44, 45, 106, 106, 107, 107,
	108, 108, 46, 46, 47, 48, 48, 6, 6, 52,
	52, 52, 52, 58, 58, 61, 61, 60, 60, 4,
	4, 5, 5, 59, 59, 40, 37, 37, 37, 37,
	37, 37, 74, 74, 75, 75, 75, 110, 110, 111,
	112, 112, 112, 113, 113, 13, 114, 114, 114, 114,
	114, 114, 114, 114, 115, 115, 115, 115, 115, 117,
	117, 62, 63, 118, 119, 56, 56, 120, 120, 120,
	120, 123, 123, 124, 124, 121, 121, 121, 121, 121,
	125, 125, 125, 131, 131, 126, 126, 132, 132, 132,
	132, 132, 136, 136, 133, 133, 133, 133, 133, 134,
	134, 134, 135, 135, 135, 135, 135, 135, 135, 138,
	138, 138, 138, 138, 138, 138, 139, 139, 127, 127,
	127, 141, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 143, 143, 143, 143, 143, 143, 144, 144,
	147, 147, 147, 147, 147, 148, 148, 148, 148, 148,
	145, 145, 145, 145, 146, 146, 140, 140, 149, 149,
	150, 150, 128, 128, 128, 128, 129, 129, 129, 151,
	152, 153, 130, 130, 122, 64, 64, 65, 65, 66,
	66, 14, 8, 8, 8, 8, 154, 80, 80, 157,
	158, 158, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 160, 160, 160, 160, 160,
	160, 161, 161, 162, 162, 162, 81, 82, 82, 83,
	83, 84, 9, 9, 9, 163, 163, 155, 155, 155,
	156, 156, 156, 15, 16, 17, 85, 85, 86, 86,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 164, 164, 165, 165, 24, 24, 24, 53,
	53, 25, 25, 25, 25, 25, 25, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 27, 27, 27,
	27, 27, 27, 27, 28, 28, 28, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 30, 30, 31,
	31, 31, 31, 32, 32, 32, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 34,
	69, 72, 72, 73, 73, 73, 73, 73, 109, 167,
	167, 167, 167, 167, 173, 173, 174, 174, 168, 168,
	168, 169, 169, 169, 169, 170, 170, 170, 171, 171,
	171, 172, 172, 76, 175, 175, 77, 78, 79, 79,
	79, 79, 79, 67, 67, 68, 68, 68, 68, 68,
	68, 68, 137, 177, 177, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 179, 180,
	180, 180, 180, 180, 180, 180, 90, 90, 90, 90,
	181, 181, 182, 182, 116, 116, 116, 116, 183, 184,
	97, 97, 176, 176, 176, 185, 185,
}

var yyR2 = [...]int8{
	0, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 3, 1, 3, 1, 1, 3, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	5, 1, 1, 1, 1, 1, 2, 1, 1, 1,
	6, 0, 0, 1, 3, 1, 8, 0, 1, 2,
	0, 1, 0, 1, 1, 1, 0, 1, 1, 2,
	4, 4, 5, 6, 8, 0, 2, 3, 1, 2,
	3, 4, 3, 2, 1, 2, 1, 1, 1, 2,
	1, 1, 1, 0, 2, 4, 0, 2, 0, 3,
	0, 1, 0, 1, 2, 0, 1, 1, 2, 4,
	4, 1, 1, 3, 1, 6, 2, 1, 1, 1,
	0, 1, 1, 3, 2, 7, 8, 0, 1, 5,
	4, 4, 4, 2, 3, 0, 1, 1, 2, 2,
	1, 0, 1, 0, 2, 5, 2, 5, 5, 7,
	5, 1, 1, 2, 5, 7, 5, 0, 1, 2,
	0, 2, 1, 0, 1, 8, 0, 2, 2, 1,
	1, 1, 1, 2, 0, 3, 3, 4, 3, 0,
	2, 1, 7, 0, 0, 0, 2, 0, 1, 1,
	2, 4, 4, 4, 4, 0, 4, 3, 2, 5,
	0, 3, 3, 0, 1, 1, 2, 1, 2, 3,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 3, 4, 4, 5, 4, 1, 0,
	2, 3, 3, 2, 3, 3, 1, 2, 1, 3,
	2, 5, 0, 3, 3, 4, 4, 3, 4, 4,
	2, 2, 0, 2, 2, 2, 2, 2, 0, 3,
	0, 1, 3, 2, 2, 0, 3, 3, 3, 3,
	0, 1, 2, 1, 0, 2, 0, 1, 1, 2,
	5, 4, 0, 2, 2, 2, 3, 3, 2, 2,
	0, 0, 4, 6, 0, 0, 3, 1, 3, 1,
	1, 9, 0, 1, 1, 1, 0, 1, 1, 3,
	1, 2, 1, 1, 1, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 3, 3,
	1, 2, 2, 1, 2, 1, 6, 0, 1, 1,
	3, 2, 0, 1, 1, 0, 1, 0, 1, 1,
	0, 2, 2, 5, 5, 4, 0, 1, 1, 2,
	3, 3, 2, 1, 2, 1, 1, 1, 2, 1,
	1, 1, 0, 2, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 5,
	5, 4, 5, 5, 1, 4, 4, 1, 4, 6,
	1, 4, 1, 1, 1, 2, 4, 1, 1, 4,
	5, 4, 7, 4, 7, 10, 7, 1, 4, 1,
	1, 1, 1, 1, 1, 4, 4, 5, 5, 5,
	4, 5, 6, 5, 6, 1, 4, 6, 1, 4,
	6, 1, 4, 6, 1, 1, 1, 2, 1, 1,
	2, 3, 2, 1, 2, 1, 2, 1, 6, 0,
	1, 2, 1, 2, 1, 1, 2, 2, 0, 1,
	1, 0, 3, 5, 3, 0, 1, 1, 0, 1,
	1, 0, 3, 5, 0, 3, 2, 2, 1, 1,
	2, 2, 2, 2, 1, 5, 6, 7, 9, 9,
	11, 4, 4, 1, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 3, 1, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 1, 2, 0,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 2,
	1, 4, 1, 4, 0, 1, 1, 2, 3, 3,
	1, 1, 0, 3, 4, 0, 1,
}

var yyChk = [...]int16{
	-1000, -87, -18, -11, -10, -12, -13, -14, -15, -16,
	-17, 7, 15, 245, 21, 247, 56, -114, -8, 64,
	128, 197, 212, 111, 134, 77, 58, 75, 164, -20,
	-22, -21, -7, 240, 239, 4, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 80, 81, 82, 83, 84, 85, 86, 87, 88,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 236, 237, 56, -11,
	-19, -22, 56, 28, -21, 222, 222, 77, -113, 42,
	248, -19, -90, -181, -182, -183, 169, -184, 159, 248,
	-19, -20, -85, -86, -166, 55, 27, 156, 173, 162,
	174, 96, 171, 80, 170, 44, 176, -6, 121, -22,
	-164, 82, -35, -36, -37, -38, -40, 5, 36, 47,
	-74, -39, -75, -41, -42, -52, 21, -48, 53, 13,
	-182, 169, 159, 159, 23, -22, -115, 213, -154, -166,
	63, 10, 246, 246, 246, -156, 102, 26, -165, 198,
	92, -39, 5, 36, 21, 250, -67, -69, -68, 91,
	58, 195, 122, 85, 250, 91, 195, 58, 13, 91,
	-75, 21, -58, 227, 89, 195, 58, 91, 13, 250,
	227, -23, -22, 159, 23, 23, 201, 234, -62, -63,
	-64, 250, 252, 41, 246, 246, 142, 142, -50, -51,
	-49, -23, -68, -21, 250, 146, 146, 250, -43, -46,
	-44, -47, -45, -23, -21, 146, 250, -23, -21, -61,
	-60, -4, 82, 141, 89, 93, 146, 250, -21, -23,
	-57, -23, -58, 219, 38, 23, 201, 234, -116, -183,
	-184, -118, -65, -66, -51, -67, 91, 195, 122, 85,
	160, 97, 117, 175, -80, -157, -81, 12, -19, 251,
	249, -24, -25, -33, -34, -26, -27, -28, -29, -31,
	-32, 84, 11, 166, 61, 165, 181, 17, 99, 30,
	139, 54, 109, 202, 235, 62, 182, 40, 22, 74,
	73, 34, 46, 16, -30, 140, 76, 87, 167, 72,
	50, 228, 224, -57, 250, 250, -176, -185, -23, 251,
	249, 251, 249, -24, -2, 143, 233, -109, -167, -173,
	-174, 101, 241, 136, -109, -57, 57, 57, -59, 86,
	-4, 92, -59, -59, -110, 82, -57, -110, 249, 251,
	-61, 68, 219, -117, 186, -184, -119, 251, 249, 97,
	-155, 229, 226, -88, -21, -82, -21, -91, -51, -54,
	-55, 88, 250, 232, 250, 232, 250, 232, 250, 84,
	11, 250, 250, 250, 193, 250, 250, 250, 250, 46,
	250, 63, 236, 98, 250, 250, 251, -57, -57, 251,
	32, -44, -23, -47, -23, -54, -110, -168, 206, 178,
	-174, -173, 102, 26, -110, 251, -23, -21, 246, -111,
	-112, 145, 245, 251, -111, -23, -5, 42, 6, 68,
	-19, -56, 18, -66, -156, -158, -159, -133, -134, 42,
	221, -160, 214, 179, 191, 233, 143, -161, -162, 45,
	190, 137, 155, -137, 151, 172, 119, 14, 37, 135,
	185, 177, 216, 248, 250, -92, -1, 214, -21, 246,
	250, 246, 250, 246, 250, 246, 250, 232, 250, 232,
	-53, 246, 253, -53, -53, 246, 246, -53, -53, 246,
	223, 149, 57, 250, 57, 250, 246, 246, -109, 251,
	251, 39, 38, -106, 21, -93, -95, -96, 18, 127,
	-169, 230, -109, -113, 28, -110, 147, 6, -120, -123,
	-124, 41, -55, -159, -21, 18, 246, 246, 246, 246,
	246, 65, 187, 125, 246, 250, -21, -83, -84, -23,
	-3, -2, 251, 246, 251, 79, 11, 246, 251, 246,
	251, 246, 250, 246, 250, 251, 249, 251, 249, 251,
	249, 251, 79, 11, 251, 251, 249, 251, 251, 237,
	223, 163, 246, 209, 246, 251, 251, -109, -76, 204,
	39, -107, 100, -94, 115, 132, -97, 169, 246, 238,
	8, 66, 10, -170, 113, 105, 28, -110, -111, -6,
	147, -121, -125, 12, 210, -124, 41, 90, 152, 131,
	-177, -178, 29, 168, 161, 35, 154, 189, 124, 123,
	43, 78, 120, 83, 115, 251, 249, -9, 9, 20,
	-93, 251, 251, 251, 251, 251, 251, 246, 251, 246,
	246, 246, 246, 251, 251, 246, 237, 251, 250, 251,
	-109, -19, -108, -71, -72, -69, -73, 39, 38, 58,
	195, -76, -101, -102, 230, 39, 132, 8, 18, -171,
	60, 180, -89, 250, -163, -21, -158, -6, -122, -126,
	183, -130, -132, 118, -133, 221, -134, -135, 14, 49,
	13, 37, -21, 94, 90, 21, 194, 19, 251, -178,
	-179, 246, -179, 246, 246, 225, 225, -179, 246, 246,
	129, -179, 39, 145, 203, 18, 145, 175, 18, 145,
	175, 18, -163, -84, -94, 251, 251, 251, 251, 251,
	251, 57, 246, 57, 41, 250, -72, -73, -109, 39,
	146, -103, 25, 238, -97, -98, 250, 132, 8, 41,
	-172, 116, -14, 15, 248, -127, -132, -140, 138, 242,
	-149, -150, -129, 130, 28, 118, 188, -21, 53, 217,
	217, 250, 26, 102, 194, 103, 103, 51, 51, -180,
	144, 153, 126, 220, 184, 112, 246, -70, -71, 163,
	251, 209, -77, -78, 59, 19, -57, -109, -104, 238,
	10, 251, -99, -100, 55, 27, 156, 173, 162, 174,
	96, 171, 80, 170, 44, 176, -98, 132, 39, 31,
	251, -21, -128, 133, -141, -142, 158, 169, -140, 250,
	138, 242, -150, -131, -126, -131, -153, 69, -21, 14,
	14, -57, 250, 41, -79, 48, 82, 53, 169, -79,
	251, -105, 207, 169, -21, 251, -100, 63, 10, 246,
	246, 246, -98, 8, -19, 104, 114, 106, -140, -143,
	250, 196, 23, 70, 158, -57, -142, -151, -127, -152,
	-153, 71, 65, -138, 23, 251, 246, -78, 39, 18,
	4, 207, 246, 148, 246, 132, -144, 107, -57, 175,
	152, 157, 131, 95, 108, 199, 81, 251, -128, 205,
	-139, 244, 169, 199, 67, 251, 231, -98, -145, 110,
	243, -147, 70, 10, 251, 152, 131, 152, 131, 148,
	244, 152, 131, 152, 131, -146, 215, 6, -148, 23,
	50, 188, 218, -23, 211, 200, 18, 6, -21, 175,
}

var yyDef = [...]int16{
	11, -2, 1, 2, 4, 5, 6, 7, 8, 9,
	10, 0, -2, 0, 0, 11, 0, 0, 0, 0,
	0, 0, 329, 330, 331, 332, 463, 464, 465, 323,
	19, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 0, 3,
	696, 12, 0, 0, 516, 327, 328, 333, 287, 324,
	0, 532, 0, 697, 698, 700, 0, 702, 0, 0,
	334, 466, 515, 517, 518, 0, 0, 0, 523, 0,
	525, 526, 527, 0, 529, 530, 531, 510, 288, 20,
	534, 0, 200, 201, 202, 203, 204, 0, 0, 0,
	311, 205, 312, 207, 208, 209, 0, 271, 0, 0,
	699, 0, 0, 0, 0, 13, 455, 0, 0, 519,
	0, 0, 522, 524, 528, 513, 0, 0, 514, 535,
	533, 206, 0, 0, 0, 0, 306, 0, 654, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	313, 0, 295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 16, 0, 0, 0, 708, 709, 704, 341,
	343, 0, 0, 0, 520, 521, 511, 512, 0, 213,
	215, 0, 653, 610, 0, 0, 0, -2, 0, 0,
	272, 282, 274, 0, 619, 619, 0, 0, 0, 303,
	296, 297, 0, 300, 303, 303, 317, 0, 317, 293,
	0, 14, 295, 0, 0, 0, 701, 703, 339, 705,
	706, 344, 0, 457, 459, 460, 54, 158, 85, 48,
	335, 336, 0, 338, 507, 467, 468, 0, 497, 211,
	0, 217, 536, 537, 538, 541, 542, 543, 544, 545,
	546, 0, 547, 554, 0, 0, 595, 598, 601, 604,
	605, 606, 0, 608, 609, 0, 0, 557, 560, 562,
	563, 564, 0, 567, 568, 0, 579, 580, 581, 582,
	583, 584, 577, 0, 0, 0, 0, 0, 716, 269,
	0, 270, 0, 217, 284, 224, 225, 317, 628, 620,
	622, 624, 625, 0, 317, 0, 0, 0, 290, 0,
	298, 299, 291, 292, 320, 318, 0, 320, 0, 294,
	301, 0, 0, 325, 0, 707, 345, 456, 0, 337,
	510, 508, 509, 0, 17, 0, 498, 212, 214, 220,
	218, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 607, 0, 0, 0, 0, 565,
	0, 0, 0, 0, 0, 0, 619, 0, 0, 661,
	0, 273, 0, 283, 0, 226, 307, 631, 629, 630,
	621, 623, 626, 627, 308, 619, 305, 310, 304, 314,
	323, 0, 322, 317, 316, 15, 289, 302, 0, 0,
	340, 347, 0, 458, 461, 469, 470, 472, 473, 474,
	0, 477, 478, 479, 480, 481, 482, 483, 484, 0,
	0, 0, 0, 378, 379, 380, 381, 485, 490, 0,
	493, 495, 0, 0, 0, 210, 222, 221, 219, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 539, 540, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 655, 619,
	0, 713, 0, 253, 0, 277, 227, 228, 0, 0,
	635, 0, 317, 319, 321, 320, 287, 0, -2, 348,
	349, 0, 346, 471, 475, 476, 374, 375, 376, 377,
	486, 487, 491, 492, 494, 0, 18, 0, 499, 502,
	226, 223, 586, 0, 548, 0, 0, 0, 555, 0,
	590, 0, 0, 0, 0, 596, 0, 599, 0, 602,
	0, 551, 0, 0, 556, 558, 0, 561, 566, 569,
	0, 571, 0, 573, 0, 585, 578, 656, 619, 0,
	714, 280, 278, 279, 256, 276, 229, 0, 710, 711,
	0, 0, 0, 638, 636, 637, 505, 309, 315, 285,
	287, 454, 0, 0, 0, 350, 0, 0, 488, 489,
	0, 663, 0, 0, 0, 0, 0, 0, 0, 0,
	675, 0, 0, 0, 687, 505, 0, 501, 503, 504,
	253, 587, 549, 550, 588, 589, 591, 0, 593, 0,
	0, 0, 0, 552, 553, 0, 570, 0, 0, 0,
	657, 0, 275, 281, 267, 0, 619, 613, 0, 615,
	0, 617, 254, 258, 0, 0, 235, 0, 0, 641,
	639, 640, 632, 0, 634, 21, 506, 286, 342, 436,
	0, 358, 365, 0, 367, 0, 370, 371, 382, 0,
	0, 388, 0, 0, 0, 0, 0, 0, 662, 664,
	665, 689, 666, 667, 668, 669, 670, 671, 672, 673,
	0, 676, 677, 678, 679, 680, 681, 682, 683, 684,
	685, 686, 496, 500, 265, 592, 594, 597, 600, 603,
	559, 0, 0, 0, 0, 0, 268, 619, 612, 614,
	616, 260, 0, 257, 230, 231, 0, 235, 0, 0,
	618, 0, 0, 462, 0, 442, 366, 398, 402, 436,
	437, 438, 357, 363, 363, 451, 0, 368, 0, 0,
	0, 0, 361, 362, 0, 351, 352, 354, 353, 688,
	690, 691, 692, 693, 694, 695, 674, 216, 266, 572,
	576, 574, 658, 659, 0, 0, 0, 611, 262, 261,
	0, 236, 0, 238, 0, 0, 0, 244, 0, 246,
	247, 248, 0, 250, 251, 252, 232, 235, 0, 0,
	633, 22, 356, 0, 436, 412, 0, 0, 400, 0,
	402, 0, 439, 436, 364, 450, 448, 451, 369, 383,
	389, 0, 0, 0, 646, 648, 649, 0, 0, 647,
	643, 255, 263, 0, 259, 237, 239, 0, 0, 243,
	245, 249, 233, 0, 642, 443, 444, 445, 399, 418,
	0, 0, 0, 411, 410, 0, 0, 446, 442, 447,
	452, 384, 385, 387, 0, 359, 0, 660, 650, 652,
	651, 264, 240, 0, 242, 235, 430, 420, 0, 413,
	414, 415, 416, 417, 403, 404, 407, 441, 449, 0,
	386, 396, 0, 390, 393, 575, 241, 234, 434, 431,
	433, 425, 421, 0, 440, 405, 406, 408, 409, 453,
	397, 391, 392, 394, 395, 401, 0, 432, 419, 0,
	0, 423, 424, 435, 0, 422, 426, 427, 428, 429,
}

var yyTok1 = [...]uint8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	250, 251, 253, 3, 249, 3, 248, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 247,
	3, 252,
}

var yyTok2 = [...]uint8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if yyDollar[1].node != nil {
				stmt := yyDollar[1].node
				stmt.SetText(nextQuery(yylex))
				yylex.(*yyLexImpl).result = append(yylex.(*yyLexImpl).result, stmt)
			}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if yyDollar[3].node != nil {
				stmt := yyDollar[3].node
				stmt.SetText(nextQuery(yylex))
				yylex.(*yyLexImpl).result = append(yylex.(*yyLexImpl).result, stmt)
			}
		}
	case 11:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.node = nil
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.TableName{
				Table: yyDollar[1].anything.(*element.Identifier),
			}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = &ast.TableName{
				Schema: yyDollar[1].anything.(*element.Identifier),
				Table:  yyDollar[3].anything.(*element.Identifier),
			}
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*element.Identifier{yyDollar[1].anything.(*element.Identifier)}
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*element.Identifier), yyDollar[3].anything.(*element.Identifier))
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.IndexName{
				Index: yyDollar[1].anything.(*element.Identifier),
			}
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = &ast.IndexName{
				Schema: yyDollar[1].anything.(*element.Identifier),
				Index:  yyDollar[3].anything.(*element.Identifier),
			}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeNonQuoted,
				Value: yyDollar[1].str,
			}
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeNonQuoted,
				Value: yyDollar[1].str,
			}
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeQuoted,
				Value: yyDollar[1].str,
			}
		}
	case 200:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.AlterTableStmt{
				TableName:         yyDollar[3].anything.(*ast.TableName),
				AlterTableClauses: yyDollar[5].anything.([]ast.AlterTableClause),
			}
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{yyDollar[1].anything.(ast.AlterTableClause)}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{yyDollar[1].anything.(ast.AlterTableClause)}
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.AlterTableClause), yyDollar[2].anything.(ast.AlterTableClause))
		}
	case 210:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.anything = &ast.AddColumnClause{
				Columns: yyDollar[3].anything.([]*ast.ColumnDef),
			}
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// TODO
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// TODO
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*ast.ColumnDef{yyDollar[1].anything.(*ast.ColumnDef)}
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*ast.ColumnDef), yyDollar[3].anything.(*ast.ColumnDef))
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 216:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			var collation *ast.Collation
			if yyDollar[3].anything != nil {
				collation = yyDollar[3].anything.(*ast.Collation)
			}
			props := []ast.ColumnProp{}
			sort := ast.ColumnProp(yyDollar[4].i)
			if sort != ast.ColumnPropEmpty {
				props = append(props, sort)
			}
			invisible := ast.ColumnProp(yyDollar[5].i)
			if invisible != ast.ColumnPropEmpty {
				props = append(props, invisible)
			}

			var constraints []*ast.InlineConstraint
			if yyDollar[8].anything != nil {
				constraints = yyDollar[8].anything.([]*ast.InlineConstraint)
			}

			yyVAL.anything = &ast.ColumnDef{
				ColumnName:  yyDollar[1].anything.(*element.Identifier),
				Datatype:    yyDollar[2].anything.(element.Datatype),
				Collation:   collation,
				Props:       props,
				Constraints: constraints,
			}
		}
	case 217:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.Collation{Name: yyDollar[2].anything.(*element.Identifier)}
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropEmpty)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropSort)
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropEmpty)
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropInvisible)
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropVisible)
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*ast.InlineConstraint{yyDollar[1].anything.(*ast.InlineConstraint)}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*ast.InlineConstraint), yyDollar[2].anything.(*ast.InlineConstraint))
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyDollar[3].anything.([]*ast.ColumnDef),
			}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyDollar[3].anything.([]*ast.ColumnDef),
			}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyDollar[1].anything.([]*ast.ColumnDef),
			}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*ast.ColumnDef{yyDollar[1].anything.(*ast.ColumnDef)}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*ast.ColumnDef), yyDollar[3].anything.(*ast.ColumnDef))
		}
	case 275:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			var collation *ast.Collation
			if yyDollar[3].anything != nil {
				collation = yyDollar[3].anything.(*ast.Collation)
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyDollar[1].anything.(*element.Identifier),
				Datatype:   yyDollar[2].anything.(element.Datatype),
				Collation:  collation,
				Props:      []ast.ColumnProp{},
			}
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*ast.ColumnDef{yyDollar[1].anything.(*ast.ColumnDef)}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*ast.ColumnDef), yyDollar[3].anything.(*ast.ColumnDef))
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyDollar[1].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{ast.ColumnProp(yyDollar[2].i)},
			}
		}
	case 285:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			prop := ast.ColumnPropSubstitutable
			if yyDollar[7].b {
				prop = ast.ColumnPropSubstitutableForce
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyDollar[2].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{prop},
			}
		}
	case 286:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			prop := ast.ColumnPropNotSubstitutable
			if yyDollar[8].b {
				prop = ast.ColumnPropNotSubstitutableForce
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyDollar[2].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{prop},
			}
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.b = false
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.b = true
		}
	case 289:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			props := []ast.DropColumnProp{}
			if yyDollar[4].anything != nil {
				props = append(props, yyDollar[4].anything.([]ast.DropColumnProp)...)
			}
			online := ast.DropColumnProp(yyDollar[5].i)
			if online != ast.DropColumnPropEmpty {
				props = append(props, online)
			}
			yyVAL.anything = &ast.DropColumnClause{
				Type:    ast.DropColumnTypeSetUnused,
				Columns: yyDollar[3].anything.([]*element.Identifier),
				Props:   props,
			}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			props := []ast.DropColumnProp{}
			if yyDollar[3].anything != nil {
				props = append(props, yyDollar[3].anything.([]ast.DropColumnProp)...)
			}
			cc := &ast.DropColumnClause{
				Type:    ast.DropColumnTypeDrop,
				Columns: yyDollar[2].anything.([]*element.Identifier),
				Props:   props,
			}
			var checkout int
			if yyDollar[4].anything != nil {
				checkout = yyDollar[4].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			cc := &ast.DropColumnClause{
				Type: ast.DropColumnTypeDropUnusedColumns,
			}
			var checkout int
			if yyDollar[4].anything != nil {
				checkout = yyDollar[4].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			cc := &ast.DropColumnClause{
				Type: ast.DropColumnTypeDropColumnsContinue,
			}
			var checkout int
			if yyDollar[4].anything != nil {
				checkout = yyDollar[4].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = []*element.Identifier{yyDollar[2].anything.(*element.Identifier)}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].anything
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.DropColumnProp{ast.DropColumnProp(yyDollar[1].i)}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.DropColumnProp), ast.DropColumnProp(yyDollar[2].i))
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.i = int(ast.DropColumnPropCascade)
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.DropColumnPropInvalidate)
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.i = int(ast.DropColumnPropEmpty)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.DropColumnPropOnline)
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].i
		}
	case 305:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.anything = &ast.RenameColumnClause{
				OldName: yyDollar[3].anything.(*element.Identifier),
				NewName: yyDollar[5].anything.(*element.Identifier),
			}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{&ast.AddConstraintClause{
				Constraints: []*ast.OutOfLineConstraint{yyDollar[2].anything.(*ast.OutOfLineConstraint)},
			}}
		}
	case 307:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Name = yyDollar[3].anything.(*element.Identifier)
			yyVAL.anything = []ast.AlterTableClause{&ast.ModifyConstraintClause{
				Constraint: constraint,
			}}
		}
	case 308:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypePK
			yyVAL.anything = []ast.AlterTableClause{&ast.ModifyConstraintClause{
				Constraint: constraint,
			}}
		}
	case 309:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeUnique
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			yyVAL.anything = []ast.AlterTableClause{&ast.ModifyConstraintClause{
				Constraint: constraint,
			}}
		}
	case 310:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{&ast.RenameConstraintClause{
				OldName: yyDollar[3].anything.(*element.Identifier),
				NewName: yyDollar[5].anything.(*element.Identifier),
			}}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{yyDollar[1].anything.(ast.AlterTableClause)}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.AlterTableClause), yyDollar[2].anything.(ast.AlterTableClause))
		}
	case 314:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypePK
			yyVAL.anything = &ast.DropConstraintClause{
				Constraint: constraint,
			}
		}
	case 315:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeUnique
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			yyVAL.anything = &ast.DropConstraintClause{
				Constraint: constraint,
			}
		}
	case 316:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Name = yyDollar[3].anything.(*element.Identifier)
			yyVAL.anything = &ast.DropConstraintClause{
				Constraint: constraint,
			}
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 325:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.node = &ast.CreateTableStmt{
				TableName: yyDollar[4].anything.(*ast.TableName),
				RelTable:  yyDollar[6].anything.(*ast.RelTableDef),
			}
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 342:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			rd := &ast.RelTableDef{}
			if yyDollar[1].anything != nil {
				rd.TableStructs = yyDollar[1].anything.([]ast.TableStructDef)
			}
			yyVAL.anything = rd
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].anything
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].anything
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.TableStructDef{yyDollar[1].anything.(ast.TableStructDef)}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.TableStructDef), yyDollar[3].anything.(ast.TableStructDef))
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 461:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.node = &ast.CreateIndexStmt{
				Type:      yyDollar[2].str,
				IndexName: yyDollar[4].anything.(*ast.IndexName),
				Index:     yyDollar[7].anything.(*ast.TableIndexClause),
			}
		}
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 496:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			alias, _ := yyDollar[2].anything.(*element.Identifier)
			yyVAL.anything = &ast.TableIndexClause{
				TableName:  yyDollar[1].anything.(*ast.TableName),
				Alias:      alias,
				IndexExprs: yyDollar[4].anything.([]ast.IndexExpr),
			}
		}
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.IndexExpr{yyDollar[1].anything.(ast.IndexExpr)}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.IndexExpr), yyDollar[3].anything.(ast.IndexExpr))
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = ast.IndexExpr{
				Column:    yyDollar[1].anything.(*element.Identifier),
				Direction: yyDollar[2].str,
			}
		}
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 513:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.DropIndexStmt{
				IndexName: yyDollar[2].anything.(*ast.IndexName),
			}
		}
	case 514:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.DropTableStmt{
				TableName: yyDollar[3].anything.(*ast.TableName),
			}
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			// empty
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			// empty
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.NumberOrAsterisk{Number: yyDollar[1].i}
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.NumberOrAsterisk{IsAsterisk: true}
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Char{}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Char{Size: &size}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 549:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Char{Size: &size, IsByteSize: true}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 550:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Char{Size: &size, IsCharSize: true}
			d.SetDataDef(element.DataDefChar)
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 552:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Varchar2{}
			d.Size = &size
			d.IsByteSize = true
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 553:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Varchar2{}
			d.Size = &size
			d.IsCharSize = true
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.NChar{}
			d.SetDataDef(element.DataDefNChar)
			yyVAL.anything = d
		}
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNChar)
			yyVAL.anything = d
		}
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNVarChar2)
			yyVAL.anything = d
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 559:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			scale := yyDollar[5].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Float{}
			d.SetDataDef(element.DataDefFloat)
			yyVAL.anything = d
		}
	case 561:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefFloat)
			yyVAL.anything = d
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.BinaryFloat{}
			d.SetDataDef(element.DataDefBinaryFloat)
			yyVAL.anything = d
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.BinaryDouble{}
			d.SetDataDef(element.DataDefBinaryDouble)
			yyVAL.anything = d
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Long{}
			d.SetDataDef(element.DataDefLong)
			yyVAL.anything = d
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			d := &element.LongRaw{}
			d.SetDataDef(element.DataDefLongRaw)
			yyVAL.anything = d
		}
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Raw{Size: &size}
			d.SetDataDef(element.DataDefRaw)
			yyVAL.anything = d
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Date{}
			d.SetDataDef(element.DataDefDate)
			yyVAL.anything = d
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 569:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			d := yyDollar[1].anything.(*element.Timestamp)
			d.WithTimeZone = true
			yyVAL.anything = d
		}
	case 570:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			d := yyDollar[1].anything.(*element.Timestamp)
			d.WithLocalTimeZone = true
			yyVAL.anything = d
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			d := &element.IntervalYear{}
			d.SetDataDef(element.DataDefIntervalYear)
			yyVAL.anything = d
		}
	case 572:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			precision := yyDollar[4].i
			d := &element.IntervalYear{Precision: &precision}
			d.SetDataDef(element.DataDefIntervalYear)
			yyVAL.anything = d
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			d := &element.IntervalDay{}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 574:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			precision := yyDollar[4].i
			d := &element.IntervalDay{Precision: &precision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 575:
		yyDollar = yyS[yypt-10 : yypt+1]
		{
			precision := yyDollar[4].i
			sPrecision := yyDollar[9].i
			d := &element.IntervalDay{Precision: &precision, FractionalSecondsPrecision: &sPrecision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 576:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			sPrecision := yyDollar[6].i
			d := &element.IntervalDay{FractionalSecondsPrecision: &sPrecision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Timestamp{}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].i
			d := &element.Timestamp{FractionalSecondsPrecision: &precision}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Blob{}
			d.SetDataDef(element.DataDefBlob)
			yyVAL.anything = d
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Clob{}
			d.SetDataDef(element.DataDefClob)
			yyVAL.anything = d
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.NClob{}
			d.SetDataDef(element.DataDefNClob)
			yyVAL.anything = d
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.BFile{}
			d.SetDataDef(element.DataDefBFile)
			yyVAL.anything = d
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.RowId{}
			d.SetDataDef(element.DataDefRowId)
			yyVAL.anything = d
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.URowId{}
			d.SetDataDef(element.DataDefURowId)
			yyVAL.anything = d
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.URowId{Size: &size}
			d.SetDataDef(element.DataDefURowId)
			yyVAL.anything = d
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Char{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharacter)
			yyVAL.anything = d
		}
	case 587:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharacterVarying)
			yyVAL.anything = d
		}
	case 588:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharVarying)
			yyVAL.anything = d
		}
	case 589:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNCharVarying)
			yyVAL.anything = d
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefVarchar)
			yyVAL.anything = d
		}
	case 591:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNationalCharacter)
			yyVAL.anything = d
		}
	case 592:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			size := yyDollar[5].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNationalCharacterVarying)
			yyVAL.anything = d
		}
	case 593:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNationalChar)
			yyVAL.anything = d
		}
	case 594:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			size := yyDollar[5].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNationalCharVarying)
			yyVAL.anything = d
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 597:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			scale := yyDollar[5].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 600:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			scale := yyDollar[5].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 602:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 603:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			scale := yyDollar[5].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefInteger)
			yyVAL.anything = d
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefInt)
			yyVAL.anything = d
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefSmallInt)
			yyVAL.anything = d
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 126}
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefDoublePrecision)
			yyVAL.anything = d
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 63}
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefReal)
			yyVAL.anything = d
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.XMLType{}
			d.SetDataDef(element.DataDefXMLType)
			yyVAL.anything = d
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].anything
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			constraint := yyDollar[2].anything.(*ast.InlineConstraint)
			constraint.Name = yyDollar[1].anything.(*element.Identifier)
			yyVAL.anything = constraint
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypeNull,
			}
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypeNotNull,
			}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypeUnique,
			}
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypePK,
			}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypeReferences,
			}
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 628:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 643:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			clause := &ast.ReferenceClause{}
			clause.Columns = yyDollar[4].anything.([]*element.Identifier)
			clause.Table = yyDollar[2].anything.(*ast.TableName)
			yyVAL.anything = clause
		}
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.ReferenceOption{
				Type: yyDollar[2].anything.(ast.ReferenceAction),
			}
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.ReferenceOption{
				Type: yyDollar[2].anything.(ast.ReferenceAction),
			}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = ast.RefOptRestrict
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = ast.RefOptCascade
		}
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = ast.RefOptSetNull
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = ast.RefOptNoAction
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = ast.RefOptSetDefault
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			constraint := yyDollar[2].anything.(*ast.OutOfLineConstraint)
			constraint.Name = yyDollar[1].anything.(*element.Identifier)
			yyVAL.anything = constraint
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 655:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeUnique
			constraint.Columns = yyDollar[3].anything.([]*element.Identifier)
			yyVAL.anything = constraint
		}
	case 656:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypePK
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			yyVAL.anything = constraint
		}
	case 657:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeReferences
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			constraint.Reference = yyDollar[6].anything.(*ast.ReferenceClause)
			yyVAL.anything = constraint
		}
	case 658:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeReferences
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			constraint.Reference = yyDollar[6].anything.(*ast.ReferenceClause)
			constraint.UpdateAction = yyDollar[9].anything.(*ast.ReferenceOption)
			yyVAL.anything = constraint
		}
	case 659:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeReferences
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			constraint.Reference = yyDollar[6].anything.(*ast.ReferenceClause)
			constraint.DeleteAction = yyDollar[9].anything.(*ast.ReferenceOption)
			yyVAL.anything = constraint
		}
	case 660:
		yyDollar = yyS[yypt-11 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeReferences
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			constraint.Reference = yyDollar[6].anything.(*ast.ReferenceClause)
			constraint.UpdateAction = yyDollar[9].anything.(*ast.ReferenceOption)
			constraint.DeleteAction = yyDollar[11].anything.(*ast.ReferenceOption)
			yyVAL.anything = constraint
		}
	case 661:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.anything = &ast.OutOfLineConstraint{}
		}
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 696:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 704:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	}
	goto yystack /* stack new state and value */
}

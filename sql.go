// Code generated by goyacc -o sql.go -l sql.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

import (
	"strings"

	"github.com/codeindex2937/oracle-sql-parser/ast"
	"github.com/codeindex2937/oracle-sql-parser/ast/element"
)

func nextQuery(yylex interface{}) string {
	lex := yylex.(*yyLexImpl)
	tc := lex.scanner.TC
	query := string(lex.scanner.Text[lex.lastPos:tc])
	lex.lastPos = tc
	return strings.TrimSpace(query)
}

type yySymType struct {
	yys      int
	nothing  struct{}
	i        int
	b        bool
	str      string
	node     ast.Node
	anything interface{}
}

const _add = 57346
const _all = 57347
const _alter = 57348
const _as = 57349
const _asc = 57350
const _by = 57351
const _char = 57352
const _cluster = 57353
const _column = 57354
const _compress = 57355
const _create = 57356
const _date = 57357
const _decimal = 57358
const _default = 57359
const _delete = 57360
const _desc = 57361
const _drop = 57362
const _float = 57363
const _for = 57364
const _from = 57365
const _identified = 57366
const _immediate = 57367
const _increment = 57368
const _index = 57369
const _initial = 57370
const _integer = 57371
const _into = 57372
const _is = 57373
const _level = 57374
const _long = 57375
const _maxextents = 57376
const _modify = 57377
const _nocompress = 57378
const _not = 57379
const _null = 57380
const _number = 57381
const _on = 57382
const _online = 57383
const _optimal = 57384
const _order = 57385
const _pctfree = 57386
const _raw = 57387
const _rename = 57388
const _row = 57389
const _rowid = 57390
const _rows = 57391
const _select = 57392
const _set = 57393
const _smallInt = 57394
const _start = 57395
const _table = 57396
const _to = 57397
const _unique = 57398
const _validate = 57399
const _varchar = 57400
const _varchar2 = 57401
const _with = 57402
const _advanced = 57403
const _always = 57404
const _archive = 57405
const _at = 57406
const _attributes = 57407
const _auto = 57408
const _basic = 57409
const _bfile = 57410
const _binaryDouble = 57411
const _binaryFloat = 57412
const _bitmap = 57413
const _blob = 57414
const _blockchain = 57415
const _buffer_pool = 57416
const _byte = 57417
const _cache = 57418
const _capacity = 57419
const _cascade = 57420
const _cell_flash_cache = 57421
const _character = 57422
const _checkpoint = 57423
const _clob = 57424
const _collate = 57425
const _columns = 57426
const _commit = 57427
const _constraint = 57428
const _constraints = 57429
const _continue = 57430
const _creation = 57431
const _critical = 57432
const _cycle = 57433
const _data = 57434
const _day = 57435
const _dec = 57436
const _decrypt = 57437
const _deferrable = 57438
const _deferred = 57439
const _definition = 57440
const _delete_all = 57441
const _disable = 57442
const _disable_all = 57443
const _distribute = 57444
const _dml = 57445
const _double = 57446
const _duplicate = 57447
const _duplicated = 57448
const _E = 57449
const _enable = 57450
const _enable_all = 57451
const _encrypt = 57452
const _exceptions = 57453
const _extended = 57454
const _external = 57455
const _filesystem_like_logging = 57456
const _flash_cache = 57457
const _force = 57458
const _foreign = 57459
const _freelist = 57460
const _freelists = 57461
const _full = 57462
const _G = 57463
const _generated = 57464
const _global = 57465
const _groups = 57466
const _heap = 57467
const _high = 57468
const _identity = 57469
const _ilm = 57470
const _immutable = 57471
const _indexing = 57472
const _initially = 57473
const _initrans = 57474
const _inmemory = 57475
const _int = 57476
const _interval = 57477
const _invalidate = 57478
const _invalidation = 57479
const _invisible = 57480
const _K = 57481
const _keep = 57482
const _key = 57483
const _levels = 57484
const _limit = 57485
const _local = 57486
const _locking = 57487
const _logging = 57488
const _low = 57489
const _M = 57490
const _maxsize = 57491
const _maxtrans = 57492
const _maxvalue = 57493
const _medium = 57494
const _memcompress = 57495
const _memoptimize = 57496
const _metadata = 57497
const _minextents = 57498
const _minvalue = 57499
const _month = 57500
const _multivalue = 57501
const _national = 57502
const _nchar = 57503
const _nclob = 57504
const _next = 57505
const _no = 57506
const _nocache = 57507
const _nocycle = 57508
const _nologging = 57509
const _nomaxvalue = 57510
const _nominvalue = 57511
const _none = 57512
const _noorder = 57513
const _noparallel = 57514
const _norely = 57515
const _nosort = 57516
const _novalidate = 57517
const _numeric = 57518
const _nvarchar2 = 57519
const _organization = 57520
const _P = 57521
const _parallel = 57522
const _parent = 57523
const _partial = 57524
const _partition = 57525
const _pctincrease = 57526
const _pctused = 57527
const _peverse = 57528
const _policy = 57529
const _precision = 57530
const _preserve = 57531
const _primary = 57532
const _priority = 57533
const _private = 57534
const _purge = 57535
const _query = 57536
const _range = 57537
const _read = 57538
const _real = 57539
const _recycle = 57540
const _references = 57541
const _reject = 57542
const _rely = 57543
const _salt = 57544
const _scope = 57545
const _second = 57546
const _segment = 57547
const _service = 57548
const _sharded = 57549
const _sharding = 57550
const _sort = 57551
const _spatial = 57552
const _storage = 57553
const _store = 57554
const _subpartition = 57555
const _substitutable = 57556
const _T = 57557
const _tablespace = 57558
const _temporary = 57559
const _time = 57560
const _timestamp = 57561
const _unlimited = 57562
const _unusable = 57563
const _unused = 57564
const _urowid = 57565
const _usable = 57566
const _using = 57567
const _value = 57568
const _varying = 57569
const _visible = 57570
const _write = 57571
const _XMLType = 57572
const _year = 57573
const _zone = 57574
const _singleQuoteStr = 57575
const _doubleQuoteStr = 57576
const _nonquotedIdentifier = 57577
const _not_deferrable = 57578
const _no_inmemory = 57579
const _no_duplicate = 57580
const _row_level_locking = 57581
const _drop_index = 57582
const _intNumber = 57583

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"_add",
	"_all",
	"_alter",
	"_as",
	"_asc",
	"_by",
	"_char",
	"_cluster",
	"_column",
	"_compress",
	"_create",
	"_date",
	"_decimal",
	"_default",
	"_delete",
	"_desc",
	"_drop",
	"_float",
	"_for",
	"_from",
	"_identified",
	"_immediate",
	"_increment",
	"_index",
	"_initial",
	"_integer",
	"_into",
	"_is",
	"_level",
	"_long",
	"_maxextents",
	"_modify",
	"_nocompress",
	"_not",
	"_null",
	"_number",
	"_on",
	"_online",
	"_optimal",
	"_order",
	"_pctfree",
	"_raw",
	"_rename",
	"_row",
	"_rowid",
	"_rows",
	"_select",
	"_set",
	"_smallInt",
	"_start",
	"_table",
	"_to",
	"_unique",
	"_validate",
	"_varchar",
	"_varchar2",
	"_with",
	"_advanced",
	"_always",
	"_archive",
	"_at",
	"_attributes",
	"_auto",
	"_basic",
	"_bfile",
	"_binaryDouble",
	"_binaryFloat",
	"_bitmap",
	"_blob",
	"_blockchain",
	"_buffer_pool",
	"_byte",
	"_cache",
	"_capacity",
	"_cascade",
	"_cell_flash_cache",
	"_character",
	"_checkpoint",
	"_clob",
	"_collate",
	"_columns",
	"_commit",
	"_constraint",
	"_constraints",
	"_continue",
	"_creation",
	"_critical",
	"_cycle",
	"_data",
	"_day",
	"_dec",
	"_decrypt",
	"_deferrable",
	"_deferred",
	"_definition",
	"_delete_all",
	"_disable",
	"_disable_all",
	"_distribute",
	"_dml",
	"_double",
	"_duplicate",
	"_duplicated",
	"_E",
	"_enable",
	"_enable_all",
	"_encrypt",
	"_exceptions",
	"_extended",
	"_external",
	"_filesystem_like_logging",
	"_flash_cache",
	"_force",
	"_foreign",
	"_freelist",
	"_freelists",
	"_full",
	"_G",
	"_generated",
	"_global",
	"_groups",
	"_heap",
	"_high",
	"_identity",
	"_ilm",
	"_immutable",
	"_indexing",
	"_initially",
	"_initrans",
	"_inmemory",
	"_int",
	"_interval",
	"_invalidate",
	"_invalidation",
	"_invisible",
	"_K",
	"_keep",
	"_key",
	"_levels",
	"_limit",
	"_local",
	"_locking",
	"_logging",
	"_low",
	"_M",
	"_maxsize",
	"_maxtrans",
	"_maxvalue",
	"_medium",
	"_memcompress",
	"_memoptimize",
	"_metadata",
	"_minextents",
	"_minvalue",
	"_month",
	"_multivalue",
	"_national",
	"_nchar",
	"_nclob",
	"_next",
	"_no",
	"_nocache",
	"_nocycle",
	"_nologging",
	"_nomaxvalue",
	"_nominvalue",
	"_none",
	"_noorder",
	"_noparallel",
	"_norely",
	"_nosort",
	"_novalidate",
	"_numeric",
	"_nvarchar2",
	"_organization",
	"_P",
	"_parallel",
	"_parent",
	"_partial",
	"_partition",
	"_pctincrease",
	"_pctused",
	"_peverse",
	"_policy",
	"_precision",
	"_preserve",
	"_primary",
	"_priority",
	"_private",
	"_purge",
	"_query",
	"_range",
	"_read",
	"_real",
	"_recycle",
	"_references",
	"_reject",
	"_rely",
	"_salt",
	"_scope",
	"_second",
	"_segment",
	"_service",
	"_sharded",
	"_sharding",
	"_sort",
	"_spatial",
	"_storage",
	"_store",
	"_subpartition",
	"_substitutable",
	"_T",
	"_tablespace",
	"_temporary",
	"_time",
	"_timestamp",
	"_unlimited",
	"_unusable",
	"_unused",
	"_urowid",
	"_usable",
	"_using",
	"_value",
	"_varying",
	"_visible",
	"_write",
	"_XMLType",
	"_year",
	"_zone",
	"_singleQuoteStr",
	"_doubleQuoteStr",
	"_nonquotedIdentifier",
	"_not_deferrable",
	"_no_inmemory",
	"_no_duplicate",
	"_row_level_locking",
	"_drop_index",
	"_intNumber",
	"';'",
	"'.'",
	"','",
	"'('",
	"')'",
	"'='",
	"'*'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 11,
	54, 323,
	-2, 459,
	-1, 610,
	1, 352,
	154, 352,
	181, 352,
	242, 352,
	-2, 357,
}

const yyPrivate = 57344

const yyLast = 1814

var yyAct = [...]int16{
	29, 837, 341, 911, 773, 925, 847, 532, 340, 531,
	914, 295, 892, 206, 745, 853, 423, 922, 744, 530,
	7, 849, 677, 747, 28, 674, 630, 207, 765, 791,
	702, 923, 227, 597, 612, 513, 752, 420, 466, 440,
	213, 767, 259, 574, 425, 353, 426, 746, 321, 465,
	329, 222, 434, 331, 220, 354, 320, 419, 272, 575,
	285, 444, 274, 1005, 655, 638, 576, 444, 444, 988,
	969, 444, 919, 934, 717, 280, 716, 955, 305, 381,
	291, 658, 996, 657, 402, 386, 652, 650, 651, 649,
	397, 648, 273, 647, 444, 444, 594, 593, 388, 444,
	291, 517, 400, 909, 703, 278, 882, 444, 396, 509,
	706, 444, 821, 492, 401, 820, 894, 409, 711, 819,
	454, 390, 453, 276, 444, 818, 445, 383, 394, 654,
	637, 954, 418, 903, 417, 817, 816, 408, 399, 398,
	416, 405, 415, 893, 289, 369, 740, 368, 738, 380,
	712, 406, 287, 735, 734, 714, 729, 727, 726, 725,
	724, 723, 722, 387, 668, 667, 901, 660, 659, 656,
	642, 640, 287, 391, 290, 634, 920, 838, 954, 588,
	573, 899, 571, 586, 918, 291, 715, 473, 471, 918,
	469, 713, 931, 863, 710, 709, 275, 827, 572, 739,
	570, 646, 644, 389, 404, 472, 470, 421, 468, 279,
	627, 568, 566, 564, 558, 491, 207, 490, 216, 486,
	207, 28, 225, 484, 483, 707, 482, 229, 481, 384,
	382, 407, 705, 479, 478, 477, 255, 474, 414, 704,
	413, 895, 337, 326, 315, 385, 395, 897, 277, 269,
	304, 269, 294, 846, 557, 902, 900, 224, 896, 898,
	708, 904, 678, 215, 277, 974, 392, 680, 797, 894,
	623, 803, 312, 10, 314, 679, 975, 796, 288, 324,
	323, 11, 14, 328, 327, 271, 903, 13, 411, 792,
	286, 338, 410, 970, 339, 515, 893, 422, 795, 393,
	653, 636, 945, 944, 943, 878, 823, 312, 800, 242,
	286, 799, 794, 292, 792, 736, 733, 993, 207, 901,
	367, 732, 789, 731, 412, 310, 730, 728, 666, 850,
	313, 680, 664, 292, 899, 431, 939, 645, 643, 679,
	641, 639, 430, 635, 626, 621, 442, 620, 619, 618,
	591, 590, 271, 350, 342, 583, 349, 314, 580, 579,
	569, 567, 565, 973, 563, 1011, 512, 460, 462, 589,
	370, 427, 312, 587, 1028, 1000, 355, 919, 443, 551,
	860, 427, 32, 31, 436, 241, 1027, 438, 439, 888,
	617, 835, 992, 446, 895, 516, 737, 661, 489, 346,
	897, 451, 552, 299, 421, 347, 429, 533, 902, 900,
	543, 896, 898, 300, 904, 997, 755, 603, 292, 496,
	293, 498, 493, 494, 662, 464, 458, 211, 210, 457,
	219, 585, 347, 851, 511, 510, 300, 448, 862, 344,
	861, 1017, 257, 27, 1021, 561, 877, 519, 1025, 883,
	622, 781, 779, 665, 694, 937, 972, 312, 990, 671,
	874, 806, 207, 500, 524, 263, 987, 497, 562, 499,
	508, 505, 504, 495, 792, 782, 1026, 480, 872, 518,
	550, 920, 503, 543, 858, 788, 780, 873, 788, 890,
	786, 995, 985, 936, 422, 450, 553, 252, 545, 528,
	527, 529, 271, 881, 540, 584, 274, 12, 1001, 592,
	502, 428, 548, 781, 779, 252, 546, 761, 876, 625,
	663, 428, 577, 578, 360, 251, 604, 581, 582, 289,
	223, 812, 915, 549, 296, 616, 488, 782, 555, 1030,
	537, 809, 253, 916, 361, 543, 554, 958, 780, 615,
	283, 544, 538, 550, 875, 605, 1010, 607, 628, 290,
	691, 631, 608, 32, 31, 614, 223, 276, 832, 749,
	748, 545, 850, 749, 748, 536, 221, 556, 24, 1022,
	912, 624, 534, 986, 804, 548, 317, 359, 750, 546,
	316, 1015, 750, 25, 539, 781, 779, 336, 633, 325,
	32, 31, 362, 32, 31, 1013, 549, 32, 31, 1023,
	669, 764, 1014, 1009, 270, 550, 343, 1007, 273, 782,
	332, 265, 994, 308, 544, 307, 1012, 543, 429, 551,
	780, 670, 976, 545, 1008, 762, 984, 700, 1006, 906,
	275, 690, 805, 689, 688, 839, 696, 548, 695, 250,
	556, 546, 552, 226, 810, 776, 866, 533, 699, 787,
	543, 757, 676, 288, 807, 856, 721, 801, 549, 600,
	228, 600, 983, 843, 596, 675, 851, 673, 333, 978,
	949, 26, 951, 207, 811, 742, 544, 741, 766, 869,
	950, 686, 675, 981, 808, 783, 774, 550, 982, 685,
	867, 777, 455, 775, 784, 335, 437, 264, 785, 864,
	261, 698, 556, 334, 507, 545, 980, 776, 281, 467,
	631, 476, 751, 435, 768, 770, 751, 441, 933, 548,
	550, 671, 790, 546, 793, 671, 231, 798, 868, 212,
	1004, 802, 523, 966, 814, 813, 553, 815, 545, 965,
	549, 857, 926, 208, 540, 932, 24, 447, 941, 828,
	956, 771, 548, 855, 830, 681, 546, 683, 544, 487,
	829, 25, 824, 23, 601, 848, 601, 859, 777, 836,
	775, 865, 260, 549, 822, 844, 506, 615, 555, 703,
	537, 475, 282, 204, 556, 706, 554, 1003, 433, 776,
	432, 544, 538, 711, 957, 15, 21, 214, 237, 869,
	485, 870, 840, 521, 826, 697, 249, 613, 306, 971,
	682, 907, 266, 18, 246, 536, 831, 556, 756, 22,
	249, 908, 534, 687, 880, 712, 885, 606, 268, 238,
	714, 905, 209, 834, 539, 841, 886, 910, 1020, 968,
	239, 345, 298, 267, 297, 248, 254, 284, 884, 26,
	759, 927, 526, 777, 777, 775, 775, 719, 921, 248,
	3, 715, 930, 917, 924, 845, 713, 929, 720, 710,
	709, 928, 942, 889, 947, 205, 758, 1018, 609, 522,
	938, 218, 19, 871, 701, 828, 825, 842, 760, 684,
	602, 501, 424, 262, 940, 230, 718, 20, 946, 629,
	707, 461, 542, 541, 535, 365, 364, 705, 456, 363,
	207, 258, 948, 17, 704, 963, 961, 959, 848, 962,
	960, 777, 964, 775, 852, 952, 1019, 1002, 1016, 999,
	977, 953, 913, 991, 967, 708, 547, 778, 772, 854,
	693, 611, 769, 692, 610, 452, 351, 449, 348, 256,
	16, 514, 743, 979, 672, 595, 989, 935, 887, 833,
	754, 753, 891, 599, 598, 559, 463, 217, 998, 763,
	459, 1, 240, 879, 352, 303, 302, 301, 330, 525,
	245, 309, 311, 247, 319, 322, 318, 244, 243, 236,
	235, 234, 233, 232, 373, 372, 379, 378, 403, 377,
	376, 375, 374, 371, 2, 9, 8, 6, 5, 4,
	1024, 30, 274, 520, 632, 560, 1029, 33, 34, 35,
	36, 37, 38, 39, 40, 41, 42, 43, 44, 45,
	46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 356, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
	86, 87, 88, 358, 90, 91, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 138, 139, 140, 141, 142, 143, 144, 145,
	146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
	156, 157, 158, 159, 160, 161, 357, 163, 164, 165,
	166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
	176, 177, 178, 179, 180, 181, 182, 183, 184, 185,
	186, 187, 188, 189, 190, 191, 192, 193, 194, 195,
	196, 197, 198, 199, 200, 201, 366, 202, 203, 0,
	32, 31, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 33, 34, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 81, 82, 83, 84, 85, 86,
	87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
	147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 164, 165, 166,
	167, 168, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 186,
	187, 188, 189, 190, 191, 192, 193, 194, 195, 196,
	197, 198, 199, 200, 201, 0, 202, 203, 0, 32,
	31, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	0, 202, 203, 381, 32, 31, 0, 0, 402, 386,
	0, 0, 0, 0, 397, 0, 0, 0, 0, 0,
	0, 0, 388, 0, 0, 0, 400, 0, 0, 0,
	0, 0, 396, 0, 0, 0, 0, 0, 401, 0,
	0, 409, 0, 0, 0, 390, 0, 0, 0, 0,
	0, 383, 394, 0, 0, 0, 0, 0, 0, 0,
	0, 408, 399, 398, 0, 405, 0, 0, 0, 0,
	0, 0, 0, 380, 0, 406, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 387, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 391, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 389, 404, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 384, 382, 407, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 385,
	395, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	392, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 411, 0, 0, 0, 410, 0, 0, 0,
	0, 0, 0, 393,
}

var yyPact = [...]int16{
	267, -1000, 40, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	751, 700, 1360, 739, 267, 1360, 699, 815, 211, 210,
	-1000, -1000, 666, -1000, -1000, -1000, -1000, 766, 20, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1360, -1000, 412, 14, 1360, 1360,
	-1000, -1000, -1000, 554, -1000, 1360, 658, 804, 361, -1000,
	-1000, 388, -1000, 834, 1360, 234, -1000, 685, -1000, -1000,
	272, 620, -1000, -1000, -1000, 818, -1000, 6, 19, 706,
	837, -1000, -1000, -1000, -1000, -1000, 88, -1000, 198, 1360,
	-1000, 380, 832, 830, 207, -1000, 5, -169, 778, -1000,
	488, 486, -1000, -1000, -1000, -1000, 4, 3, 68, 1360,
	-1000, 450, -1000, 148, -1, 449, 445, 1360, 148, 458,
	-2, 1360, 148, -1000, 473, 542, 629, 617, 456, -3,
	148, 1360, 1360, 173, 402, -1000, 829, 184, 203, -1000,
	-1000, 376, -1000, -1000, 966, 432, 1185, -1000, -1000, -99,
	-1000, -1000, 1583, -1000, -1000, 1360, -5, -7, -104, -112,
	-1000, -1000, -1000, 69, 275, 275, 1360, 745, 743, 642,
	542, -1000, 619, -1000, 642, 642, 649, 1360, 649, -1000,
	-120, -1000, 542, 693, 223, 176, -1000, -1000, 314, 343,
	-1000, -1000, -124, -1000, -1000, -1000, 148, 449, 445, -1000,
	-1000, 610, -1000, 205, -1000, -1000, 148, 148, -1000, 1360,
	636, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-37, -39, -40, -8, 711, -10, -11, -12, -1000, -1000,
	-1000, 289, -1000, -1000, -17, -19, -21, -22, -1000, -1000,
	765, -26, -1000, 709, 305, -1000, -1000, -1000, -1000, -1000,
	-28, -30, -133, 1360, 1360, -1000, 1360, -1000, 1360, 636,
	-1000, -1000, -1000, 649, 309, 497, 285, -1000, -1000, 689,
	649, -137, 1360, 148, -1000, 125, -1000, -1000, -1000, -1000,
	155, -1000, -145, 155, 1360, -1000, 772, 884, 678, -1000,
	1360, -1000, 845, -1000, 966, -1000, 685, -1000, -1000, 616,
	11, -31, -1000, -1000, -1000, 236, -1000, 148, 123, -32,
	121, -33, 120, -34, 119, -45, -47, -182, -182, -182,
	-1000, 118, 117, -182, -182, -1000, 114, 287, 128, 124,
	110, 109, 275, -149, -150, -1000, 1583, -1000, 266, 654,
	-1000, 192, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 275,
	-1000, -1000, -1000, -1000, 766, 810, -1000, 649, -1000, -1000,
	-1000, -1000, 420, 883, -1000, 777, 636, -1000, -1000, 616,
	-1000, -1000, -1000, -1000, 373, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 108, 107, 106, 104, -1000, -1000, -1000,
	-1000, 209, -1000, 399, 103, -1000, -35, 148, 1360, -1000,
	266, -1000, -1000, -71, 102, 55, 100, -75, 99, -76,
	97, -43, 96, -44, -153, -1000, -1000, -157, -158, 54,
	-77, -163, -78, -79, 165, 206, 362, 91, 249, 87,
	-81, -82, -1000, 275, 260, 582, 535, -1000, -1000, -1000,
	98, 758, 591, 806, 649, -1000, -1000, 155, 554, 418,
	443, 775, -1000, 626, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 511, -1000, -1000, -1000, 761, -1000, -170,
	-1000, 859, 652, -1000, -1000, -84, -1000, -85, -86, -87,
	-1000, -88, -1000, -89, 86, -90, 85, -1000, 82, -1000,
	80, -1000, 75, -1000, -92, -93, -1000, -1000, 74, -1000,
	-1000, -1000, 164, -1000, -98, -46, -100, -1000, -1000, -1000,
	275, 1360, 532, -1000, -1000, 191, -1000, -1000, 790, -1000,
	-1000, 534, 879, 843, 460, -1000, -1000, 366, -1000, -1000,
	-1000, 554, -1000, 583, 148, 615, -1000, 623, 470, -1000,
	-1000, 76, -1000, 73, 73, 71, 57, 48, 70, 67,
	543, 233, 444, 524, 514, -1000, 616, 1360, -1000, -1000,
	-1000, 565, -1000, -1000, -1000, -1000, -1000, -1000, -110, -1000,
	-111, -121, -127, -131, -1000, -1000, -134, -1000, 729, 65,
	717, 774, -48, -1000, 532, -1000, 536, 275, -1000, 788,
	-1000, 427, -1000, -1000, 819, 158, 34, -68, 518, 805,
	562, -1000, -1000, -1000, 861, -1000, 10, 616, -1000, -1000,
	439, 638, -1000, -1000, 301, -1000, 329, -1000, -1000, -1000,
	228, 226, -1000, -52, 684, 467, 602, 640, 762, -1000,
	-1000, -1000, 339, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 64, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 532, -1000, -1000, -1000, -1000,
	-1000, -1000, 345, -140, 245, -1000, 840, 1360, -1000, 275,
	-1000, -1000, -1000, 156, 874, -1000, -1000, -1000, 243, -68,
	512, 783, -1000, 801, -143, 522, 148, 452, -1000, -1000,
	379, -61, 244, -1000, -1000, 501, 501, -1000, 687, -1000,
	148, 868, 864, 1360, -1000, -1000, 760, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	532, -1000, -1000, -53, 677, -173, -1000, 291, -1000, 148,
	-1000, 90, -1000, 698, 873, 63, -1000, 62, -1000, -1000,
	-1000, 61, -1000, -1000, -1000, -1000, -68, 877, 1360, -1000,
	-1000, -1000, 581, 244, -114, 738, 394, -1000, 1360, 379,
	-56, -1000, 196, 501, -1000, -1000, -1000, -1000, 682, 827,
	-176, 52, -1000, 781, -1000, -1000, -1000, 254, -1000, -1000,
	-1000, 122, 35, -1000, -1000, -1000, -1000, 505, -1000, -1000,
	-1000, -1000, -1000, 577, 1360, 546, 389, -1000, -1000, -177,
	-67, -1000, 452, -1000, 258, -1000, -1000, 153, 428, -1000,
	-164, -1000, -1000, -1000, 189, -1000, -68, 270, 731, -183,
	-1000, -1000, -1000, -1000, -1000, -1000, 491, 487, -1000, -1000,
	413, -1000, -1000, 126, 479, 465, -1000, -1000, -1000, 231,
	882, -1000, 826, -1000, 396, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1360, -1000, -1000,
	242, 281, -1000, -1000, -1000, 369, -1000, -1000, -1000, -1000,
	-1000,
}

var yyPgo = [...]int16{
	0, 1025, 37, 1024, 53, 1023, 32, 1021, 1019, 870,
	1018, 1017, 20, 1016, 1015, 1014, 13, 443, 0, 11,
	2, 57, 1013, 1012, 1011, 1010, 1009, 1008, 1007, 1006,
	1005, 1004, 1003, 1002, 1001, 1000, 385, 999, 998, 997,
	996, 56, 995, 994, 48, 993, 992, 991, 55, 990,
	43, 49, 38, 989, 8, 60, 52, 988, 50, 987,
	986, 985, 984, 45, 376, 58, 47, 983, 18, 14,
	23, 982, 309, 36, 981, 980, 979, 977, 976, 975,
	33, 25, 974, 973, 22, 1, 972, 12, 971, 970,
	969, 968, 967, 965, 964, 962, 16, 39, 35, 961,
	40, 960, 959, 958, 957, 956, 955, 954, 953, 952,
	951, 34, 950, 31, 6, 3, 949, 948, 17, 4,
	9, 7, 947, 947, 946, 944, 943, 21, 942, 10,
	941, 940, 939, 938, 937, 936, 934, 15, 926, 925,
	5, 923, 921, 919, 918, 42, 916, 915, 41, 19,
	914, 913, 912, 911, 909, 28, 26, 906, 905, 903,
	902, 901, 900, 899, 898, 897, 44, 46, 897, 896,
	894, 30, 29, 893, 891, 430, 54, 51,
}

var yyR1 = [...]uint8{
	0, 74, 15, 15, 9, 9, 9, 9, 9, 9,
	8, 16, 16, 54, 54, 20, 75, 75, 17, 17,
	76, 76, 19, 19, 18, 18, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 10, 32, 32,
	33, 33, 35, 35, 36, 36, 36, 38, 78, 79,
	47, 47, 48, 46, 51, 51, 52, 1, 1, 3,
	3, 2, 2, 80, 80, 80, 82, 82, 83, 83,
	83, 83, 85, 85, 85, 86, 86, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	81, 81, 88, 89, 89, 90, 90, 91, 91, 92,
	92, 92, 67, 67, 68, 68, 39, 39, 39, 40,
	40, 41, 42, 93, 93, 94, 94, 95, 95, 43,
	43, 44, 45, 45, 6, 6, 49, 49, 49, 49,
	55, 55, 58, 58, 57, 57, 4, 4, 5, 5,
	56, 56, 37, 34, 34, 34, 34, 34, 34, 71,
	71, 72, 72, 72, 97, 97, 98, 99, 99, 99,
	100, 100, 11, 101, 101, 101, 101, 101, 101, 101,
	101, 102, 102, 102, 102, 102, 104, 104, 59, 60,
	105, 106, 53, 53, 107, 107, 107, 107, 110, 110,
	111, 111, 108, 108, 108, 108, 108, 112, 112, 112,
	118, 118, 113, 113, 119, 119, 119, 119, 119, 123,
	123, 120, 120, 120, 120, 120, 121, 121, 121, 122,
	122, 122, 122, 122, 122, 122, 125, 125, 125, 125,
	125, 125, 125, 126, 126, 114, 114, 114, 128, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 130,
	130, 130, 130, 130, 130, 131, 131, 134, 134, 134,
	134, 134, 135, 135, 135, 135, 135, 132, 132, 132,
	132, 133, 133, 127, 127, 136, 136, 137, 137, 115,
	115, 115, 115, 116, 116, 116, 138, 139, 140, 117,
	117, 109, 61, 61, 62, 62, 63, 63, 12, 141,
	141, 141, 141, 142, 143, 143, 146, 148, 148, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 150, 150, 150, 150, 150, 150, 151, 151,
	152, 152, 152, 147, 153, 153, 154, 154, 156, 157,
	157, 157, 155, 155, 144, 144, 144, 145, 145, 145,
	13, 14, 158, 158, 159, 159, 21, 21, 21, 50,
	50, 22, 22, 22, 22, 22, 22, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 24, 24, 24,
	24, 24, 24, 24, 25, 25, 25, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 27, 27, 28,
	28, 28, 28, 29, 29, 29, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 31,
	66, 69, 69, 70, 70, 70, 70, 70, 96, 160,
	160, 160, 160, 160, 166, 166, 167, 167, 161, 161,
	161, 162, 162, 162, 162, 163, 163, 163, 164, 164,
	164, 165, 165, 73, 168, 168, 169, 169, 169, 64,
	64, 65, 65, 65, 124, 170, 170, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	172, 173, 173, 173, 173, 173, 173, 173, 77, 77,
	77, 77, 174, 174, 175, 175, 103, 103, 103, 103,
	176, 177, 84, 84,
}

var yyR2 = [...]int8{
	0, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	0, 1, 3, 1, 3, 1, 1, 3, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 5, 1, 1,
	1, 1, 1, 2, 1, 1, 1, 6, 0, 0,
	1, 3, 1, 8, 0, 1, 2, 0, 1, 0,
	1, 1, 1, 0, 1, 1, 2, 4, 4, 5,
	6, 8, 0, 2, 3, 1, 2, 3, 4, 3,
	2, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	0, 2, 4, 0, 2, 0, 3, 0, 1, 0,
	1, 2, 0, 1, 1, 2, 4, 4, 1, 1,
	3, 1, 6, 2, 1, 1, 1, 0, 1, 1,
	3, 2, 7, 8, 0, 1, 5, 4, 4, 4,
	2, 3, 0, 1, 1, 2, 2, 1, 0, 1,
	0, 2, 5, 2, 5, 5, 7, 5, 1, 1,
	2, 5, 7, 5, 0, 1, 2, 0, 2, 1,
	0, 1, 8, 0, 2, 2, 1, 1, 1, 1,
	2, 0, 3, 3, 4, 3, 0, 2, 1, 7,
	0, 0, 0, 2, 0, 1, 1, 2, 4, 4,
	4, 4, 0, 4, 3, 2, 5, 0, 3, 3,
	0, 1, 1, 2, 1, 2, 3, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	3, 4, 4, 5, 4, 1, 0, 2, 3, 3,
	2, 3, 3, 1, 2, 1, 3, 2, 5, 0,
	3, 3, 4, 4, 3, 4, 4, 2, 2, 0,
	2, 2, 2, 2, 2, 0, 3, 0, 1, 3,
	2, 2, 0, 3, 3, 3, 3, 0, 1, 2,
	1, 0, 2, 0, 1, 1, 2, 5, 4, 0,
	2, 2, 2, 3, 3, 2, 2, 0, 0, 4,
	6, 0, 0, 3, 1, 3, 1, 1, 9, 0,
	1, 1, 1, 0, 1, 1, 3, 1, 2, 1,
	1, 1, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 3, 3, 1, 2, 2,
	1, 2, 1, 6, 0, 1, 1, 3, 2, 0,
	1, 1, 0, 1, 0, 1, 1, 0, 2, 2,
	5, 5, 0, 2, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 5,
	5, 4, 5, 5, 1, 4, 4, 1, 4, 6,
	1, 4, 1, 1, 1, 2, 4, 1, 1, 4,
	5, 4, 7, 4, 7, 10, 7, 1, 4, 1,
	1, 1, 1, 1, 1, 4, 4, 5, 5, 5,
	4, 5, 6, 5, 6, 1, 4, 6, 1, 4,
	6, 1, 4, 6, 1, 1, 1, 2, 1, 1,
	2, 3, 2, 1, 2, 1, 2, 1, 6, 0,
	1, 2, 1, 2, 1, 1, 2, 2, 0, 1,
	1, 0, 3, 5, 3, 0, 1, 1, 0, 1,
	1, 0, 3, 5, 0, 3, 0, 3, 4, 2,
	1, 5, 6, 8, 4, 1, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 3, 1, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	2, 0, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 2, 1, 4, 1, 4, 0, 1, 1, 2,
	3, 3, 1, 1,
}

var yyChk = [...]int16{
	-1000, -74, -15, -9, -8, -10, -11, -12, -13, -14,
	6, 14, 240, 20, 242, 54, -101, -141, 123, 192,
	207, 106, 129, 73, 56, 71, 159, -17, -19, -18,
	-7, 235, 234, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 80, 81, 82, 83, 84, 85, 86, 87,
	88, 89, 90, 91, 92, 93, 94, 95, 96, 97,
	98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 141, 142, 143, 144, 145, 146, 147,
	148, 149, 150, 151, 152, 153, 154, 155, 156, 157,
	158, 159, 160, 161, 162, 163, 164, 165, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 176, 177,
	178, 179, 180, 181, 182, 183, 184, 185, 186, 187,
	188, 189, 190, 191, 192, 193, 194, 195, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
	208, 209, 210, 211, 212, 213, 214, 215, 216, 217,
	218, 219, 220, 221, 222, 223, 224, 225, 226, 227,
	228, 229, 231, 232, 54, -9, -16, -19, 54, 27,
	217, 217, 73, -100, 41, 243, -16, -77, -174, -175,
	-176, 164, -177, 154, 243, -16, -17, -6, 116, -19,
	-158, 78, -32, -33, -34, -35, -37, 4, 35, 46,
	-71, -36, -72, -38, -39, -49, 20, -45, 51, 12,
	-175, 164, 154, 154, 22, -19, -102, 208, -142, -145,
	97, 25, -159, 193, 87, -36, 4, 35, 20, 245,
	-64, -66, -65, 86, 56, 190, 117, 245, 86, 190,
	56, 12, 86, -72, 20, -55, 222, 84, 190, 56,
	86, 12, 245, 222, -20, -19, 154, 22, 22, 196,
	229, -59, -60, -61, 245, 247, 40, 137, 137, -47,
	-48, -46, -20, -65, -18, 245, 141, 141, -40, -43,
	-41, -44, -42, -20, -18, 141, 245, -20, -18, -58,
	-57, -4, 78, 136, 84, 88, 141, 245, -18, -20,
	-54, -20, -55, 214, 37, 22, 196, 229, -103, -176,
	-177, -105, -62, -63, -48, -64, 86, 190, 117, 155,
	92, 112, 170, -143, -146, -147, 11, -16, 246, 244,
	-21, -22, -30, -31, -23, -24, -25, -26, -28, -29,
	80, 10, 161, 58, 160, 176, 16, 94, 29, 134,
	52, 104, 197, 230, 59, 177, 39, 21, 70, 69,
	33, 45, 15, -27, 135, 72, 82, 162, 68, 48,
	223, 219, -54, 245, 245, 246, 244, 246, 244, -21,
	-2, 138, 228, -96, -160, -166, -167, 96, 236, 131,
	-96, -54, 55, 55, -56, 81, -4, 87, -56, -56,
	-97, 78, -54, -97, 244, 246, -58, 64, 214, -104,
	181, -177, -106, 246, 244, 92, -144, 224, 221, -75,
	-18, -153, -18, -78, -48, -51, -52, 83, 245, 227,
	245, 227, 245, 227, 245, 80, 10, 245, 245, 245,
	188, 245, 245, 245, 245, 45, 245, 60, 231, 93,
	245, 245, 246, -54, -54, -41, -20, -44, -20, -51,
	-97, -161, 201, 173, -167, -166, 97, 25, -97, 246,
	-20, -18, 241, -98, -99, 140, 240, 246, -98, -20,
	-5, 41, 5, 64, -16, -53, 17, -63, -145, -148,
	-149, -120, -121, 41, 216, -150, 209, 174, 186, 228,
	138, -151, -152, 44, 185, 132, 150, -124, 146, 167,
	114, 13, 36, 130, 180, 172, 211, 243, 245, -79,
	-1, 209, -18, 241, 245, 241, 245, 241, 245, 241,
	245, 227, 245, 227, -50, 241, 248, -50, -50, 241,
	241, -50, -50, 241, 218, 144, 55, 245, 55, 245,
	241, 241, -96, 246, 246, -93, 20, -80, -82, -83,
	17, 122, -162, 225, -96, -100, 27, -97, 142, 5,
	-107, -110, -111, 40, -52, -149, -18, 17, 241, 241,
	241, 241, 241, 61, 182, 120, 241, 245, -18, -154,
	-156, -20, -3, -2, 246, 241, 246, 75, 10, 241,
	246, 241, 246, 241, 245, 241, 245, 246, 244, 246,
	244, 246, 244, 246, 75, 10, 246, 246, 244, 246,
	246, 232, 218, 158, 241, 204, 241, 246, 246, -96,
	-73, 199, -94, 95, -81, 110, 127, -84, 164, 241,
	233, 7, 62, 9, -163, 108, 100, 27, -97, -98,
	-6, 142, -108, -112, 11, 205, -111, 40, 85, 147,
	126, -170, -171, 28, 163, 156, 34, 149, 184, 119,
	118, 42, 74, 115, 79, 110, 246, 244, -157, 8,
	19, -80, 246, 246, 246, 246, 246, 246, 241, 246,
	241, 241, 241, 241, 246, 246, 241, 232, 246, 245,
	246, -96, -16, -95, -68, -69, -66, -70, 38, 37,
	56, 190, -73, -88, -89, 225, 38, 127, 7, 17,
	-164, 57, 175, -76, 245, -155, -18, -148, -6, -109,
	-113, 178, -117, -119, 113, -120, 216, -121, -122, 13,
	47, 12, 36, -18, 89, 85, 20, 189, 18, 246,
	-171, -172, 241, -172, 241, 241, 220, 220, -172, 241,
	241, 124, -172, 38, 140, 198, 17, 140, 170, 17,
	140, 170, 17, -155, -156, -81, 246, 246, 246, 246,
	246, 246, 55, 241, 55, -169, 40, 245, -69, -70,
	-96, 38, 141, -90, 24, 233, -84, -85, 245, 127,
	7, 40, -165, 111, -12, 14, 243, -114, -119, -127,
	133, 237, -136, -137, -116, 125, 27, 113, 183, -18,
	51, 212, 212, 245, 25, 97, 189, 98, 98, 49,
	49, -173, 139, 148, 121, 215, 179, 107, 241, -67,
	-68, 158, 246, 204, 18, -54, -96, -91, 233, 9,
	246, -86, -87, 53, 26, 151, 168, 157, 169, 91,
	166, 76, 165, 43, 171, -85, 127, 38, 30, 246,
	-18, -115, 128, -128, -129, 153, 164, -127, 245, 133,
	237, -137, -118, -113, -118, -140, 65, -18, 13, 13,
	-54, 245, 78, 51, 246, -92, 202, 164, -18, 246,
	-87, 60, 9, 241, 241, 241, -85, 7, -16, 99,
	109, 101, -127, -130, 245, 191, 22, 66, 153, -54,
	-129, -138, -114, -139, -140, 67, 61, -125, 22, 246,
	241, 38, 202, 241, 143, 241, 127, -131, 102, -54,
	170, 147, 152, 126, 90, 103, 194, 77, 246, -115,
	200, -126, 239, 164, 194, 63, 246, 226, -85, -132,
	105, 238, -134, 66, 9, 246, 147, 126, 147, 126,
	143, 239, 147, 126, 147, 126, -133, 210, 5, -135,
	22, 48, 183, 213, -20, 206, 195, 17, 5, -18,
	170,
}

var yyDef = [...]int16{
	10, -2, 1, 2, 4, 5, 6, 7, 8, 9,
	0, -2, 0, 0, 10, 0, 0, 0, 0, 0,
	326, 327, 328, 329, 460, 461, 462, 320, 18, 22,
	23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
	33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
	43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
	83, 84, 85, 86, 87, 88, 89, 90, 91, 92,
	93, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
	143, 144, 145, 146, 147, 148, 149, 150, 151, 152,
	153, 154, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 164, 165, 166, 167, 168, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 178, 179, 180, 181, 182,
	183, 184, 185, 186, 187, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 0, 3, 668, 11, 0, 0,
	324, 325, 330, 284, 321, 0, 512, 0, 669, 670,
	672, 0, 674, 0, 0, 331, 463, 507, 285, 19,
	514, 0, 197, 198, 199, 200, 201, 0, 0, 0,
	308, 202, 309, 204, 205, 206, 0, 268, 0, 0,
	671, 0, 0, 0, 0, 12, 452, 0, 0, 510,
	0, 0, 511, 515, 513, 203, 0, 0, 0, 0,
	303, 0, 630, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 310, 0, 292, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 15, 0, 0, 0, 680,
	681, 676, 338, 340, 0, 0, 0, 508, 509, 0,
	210, 212, 0, 629, 590, 0, 0, 0, 0, 0,
	269, 279, 271, 0, 599, 599, 0, 0, 0, 300,
	293, 294, 0, 297, 300, 300, 314, 0, 314, 290,
	0, 13, 292, 0, 0, 0, 673, 675, 336, 677,
	678, 341, 0, 454, 456, 457, 51, 155, 82, 332,
	333, 0, 335, 504, 464, 465, 0, 494, 208, 0,
	214, 516, 517, 518, 521, 522, 523, 524, 525, 526,
	0, 527, 534, 0, 0, 575, 578, 581, 584, 585,
	586, 0, 588, 589, 0, 0, 537, 540, 542, 543,
	544, 0, 547, 548, 0, 559, 560, 561, 562, 563,
	564, 557, 0, 0, 0, 266, 0, 267, 0, 214,
	281, 221, 222, 314, 608, 600, 602, 604, 605, 0,
	314, 0, 0, 0, 287, 0, 295, 296, 288, 289,
	317, 315, 0, 317, 0, 291, 298, 0, 0, 322,
	0, 679, 342, 453, 0, 334, 507, 505, 506, 0,
	16, 0, 495, 209, 211, 217, 215, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 0, 0, 0, 0, 545, 0, 0, 0, 0,
	0, 0, 599, 0, 0, 270, 0, 280, 0, 223,
	304, 611, 609, 610, 601, 603, 606, 607, 305, 599,
	302, 307, 301, 311, 320, 0, 319, 314, 313, 14,
	286, 299, 0, 0, 337, 344, 0, 455, 458, 466,
	467, 469, 470, 471, 0, 474, 475, 476, 477, 478,
	479, 480, 481, 0, 0, 0, 0, 375, 376, 377,
	378, 482, 487, 0, 490, 492, 0, 0, 0, 207,
	219, 218, 216, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 519, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 631, 599, 0, 250, 0, 274, 224, 225,
	0, 0, 615, 0, 314, 316, 318, 317, 284, 0,
	-2, 345, 346, 0, 343, 468, 472, 473, 371, 372,
	373, 374, 483, 484, 488, 489, 491, 0, 17, 0,
	496, 499, 223, 220, 566, 0, 528, 0, 0, 0,
	535, 0, 570, 0, 0, 0, 0, 576, 0, 579,
	0, 582, 0, 531, 0, 0, 536, 538, 0, 541,
	546, 549, 0, 551, 0, 553, 0, 565, 558, 632,
	599, 0, 277, 275, 276, 253, 273, 226, 0, 682,
	683, 0, 0, 0, 618, 616, 617, 502, 306, 312,
	282, 284, 451, 0, 0, 0, 347, 0, 0, 485,
	486, 0, 635, 0, 0, 0, 0, 0, 0, 0,
	0, 647, 0, 0, 0, 659, 502, 0, 498, 500,
	501, 250, 567, 529, 530, 568, 569, 571, 0, 573,
	0, 0, 0, 0, 532, 533, 0, 550, 0, 0,
	0, 626, 0, 272, 278, 264, 0, 599, 593, 0,
	595, 0, 597, 251, 255, 0, 0, 232, 0, 0,
	621, 619, 620, 612, 0, 614, 20, 503, 283, 339,
	433, 0, 355, 362, 0, 364, 0, 367, 368, 379,
	0, 0, 385, 0, 0, 0, 0, 0, 0, 634,
	636, 637, 661, 638, 639, 640, 641, 642, 643, 644,
	645, 0, 648, 649, 650, 651, 652, 653, 654, 655,
	656, 657, 658, 493, 497, 262, 572, 574, 577, 580,
	583, 539, 0, 0, 0, 633, 0, 0, 265, 599,
	592, 594, 596, 257, 0, 254, 227, 228, 0, 232,
	0, 0, 598, 0, 0, 459, 0, 439, 363, 395,
	399, 433, 434, 435, 354, 360, 360, 448, 0, 365,
	0, 0, 0, 0, 358, 359, 0, 348, 349, 351,
	350, 660, 662, 663, 664, 665, 666, 667, 646, 213,
	263, 552, 556, 554, 0, 0, 591, 259, 258, 0,
	233, 0, 235, 0, 0, 0, 241, 0, 243, 244,
	245, 0, 247, 248, 249, 229, 232, 0, 0, 613,
	21, 353, 0, 433, 409, 0, 0, 397, 0, 399,
	0, 436, 433, 361, 447, 445, 448, 366, 380, 386,
	0, 0, 627, 0, 623, 252, 260, 0, 256, 234,
	236, 0, 0, 240, 242, 246, 230, 0, 622, 440,
	441, 442, 396, 415, 0, 0, 0, 408, 407, 0,
	0, 443, 439, 444, 449, 381, 382, 384, 0, 356,
	0, 628, 261, 237, 0, 239, 232, 427, 417, 0,
	410, 411, 412, 413, 414, 400, 401, 404, 438, 446,
	0, 383, 393, 0, 387, 390, 555, 238, 231, 431,
	428, 430, 422, 418, 0, 437, 402, 403, 405, 406,
	450, 394, 388, 389, 391, 392, 398, 0, 429, 416,
	0, 0, 420, 421, 432, 0, 419, 423, 424, 425,
	426,
}

var yyTok1 = [...]uint8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	245, 246, 248, 3, 244, 3, 243, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 242,
	3, 247,
}

var yyTok2 = [...]uint8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if yyDollar[1].node != nil {
				stmt := yyDollar[1].node
				stmt.SetText(nextQuery(yylex))
				yylex.(*yyLexImpl).result = append(yylex.(*yyLexImpl).result, stmt)
			}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if yyDollar[3].node != nil {
				stmt := yyDollar[3].node
				stmt.SetText(nextQuery(yylex))
				yylex.(*yyLexImpl).result = append(yylex.(*yyLexImpl).result, stmt)
			}
		}
	case 10:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.node = nil
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.TableName{
				Table: yyDollar[1].anything.(*element.Identifier),
			}
		}
	case 12:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = &ast.TableName{
				Schema: yyDollar[1].anything.(*element.Identifier),
				Table:  yyDollar[3].anything.(*element.Identifier),
			}
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*element.Identifier{yyDollar[1].anything.(*element.Identifier)}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*element.Identifier), yyDollar[3].anything.(*element.Identifier))
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.IndexName{
				Index: yyDollar[1].anything.(*element.Identifier),
			}
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = &ast.IndexName{
				Schema: yyDollar[1].anything.(*element.Identifier),
				Index:  yyDollar[3].anything.(*element.Identifier),
			}
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeNonQuoted,
				Value: yyDollar[1].str,
			}
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeNonQuoted,
				Value: yyDollar[1].str,
			}
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeQuoted,
				Value: yyDollar[1].str,
			}
		}
	case 197:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.AlterTableStmt{
				TableName:         yyDollar[3].anything.(*ast.TableName),
				AlterTableClauses: yyDollar[5].anything.([]ast.AlterTableClause),
			}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{yyDollar[1].anything.(ast.AlterTableClause)}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{yyDollar[1].anything.(ast.AlterTableClause)}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.AlterTableClause), yyDollar[2].anything.(ast.AlterTableClause))
		}
	case 207:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.anything = &ast.AddColumnClause{
				Columns: yyDollar[3].anything.([]*ast.ColumnDef),
			}
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// TODO
		}
	case 209:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// TODO
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*ast.ColumnDef{yyDollar[1].anything.(*ast.ColumnDef)}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*ast.ColumnDef), yyDollar[3].anything.(*ast.ColumnDef))
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 213:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			var collation *ast.Collation
			if yyDollar[3].anything != nil {
				collation = yyDollar[3].anything.(*ast.Collation)
			}
			props := []ast.ColumnProp{}
			sort := ast.ColumnProp(yyDollar[4].i)
			if sort != ast.ColumnPropEmpty {
				props = append(props, sort)
			}
			invisible := ast.ColumnProp(yyDollar[5].i)
			if invisible != ast.ColumnPropEmpty {
				props = append(props, invisible)
			}

			var constraints []*ast.InlineConstraint
			if yyDollar[8].anything != nil {
				constraints = yyDollar[8].anything.([]*ast.InlineConstraint)
			}

			yyVAL.anything = &ast.ColumnDef{
				ColumnName:  yyDollar[1].anything.(*element.Identifier),
				Datatype:    yyDollar[2].anything.(element.Datatype),
				Collation:   collation,
				Props:       props,
				Constraints: constraints,
			}
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.Collation{Name: yyDollar[2].anything.(*element.Identifier)}
		}
	case 217:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropEmpty)
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropSort)
		}
	case 219:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropEmpty)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropInvisible)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropVisible)
		}
	case 223:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*ast.InlineConstraint{yyDollar[1].anything.(*ast.InlineConstraint)}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*ast.InlineConstraint), yyDollar[2].anything.(*ast.InlineConstraint))
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyDollar[3].anything.([]*ast.ColumnDef),
			}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyDollar[3].anything.([]*ast.ColumnDef),
			}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyDollar[1].anything.([]*ast.ColumnDef),
			}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*ast.ColumnDef{yyDollar[1].anything.(*ast.ColumnDef)}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*ast.ColumnDef), yyDollar[3].anything.(*ast.ColumnDef))
		}
	case 272:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			var collation *ast.Collation
			if yyDollar[3].anything != nil {
				collation = yyDollar[3].anything.(*ast.Collation)
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyDollar[1].anything.(*element.Identifier),
				Datatype:   yyDollar[2].anything.(element.Datatype),
				Collation:  collation,
				Props:      []ast.ColumnProp{},
			}
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*ast.ColumnDef{yyDollar[1].anything.(*ast.ColumnDef)}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*ast.ColumnDef), yyDollar[3].anything.(*ast.ColumnDef))
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyDollar[1].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{ast.ColumnProp(yyDollar[2].i)},
			}
		}
	case 282:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			prop := ast.ColumnPropSubstitutable
			if yyDollar[7].b {
				prop = ast.ColumnPropSubstitutableForce
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyDollar[2].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{prop},
			}
		}
	case 283:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			prop := ast.ColumnPropNotSubstitutable
			if yyDollar[8].b {
				prop = ast.ColumnPropNotSubstitutableForce
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyDollar[2].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{prop},
			}
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.b = false
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.b = true
		}
	case 286:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			props := []ast.DropColumnProp{}
			if yyDollar[4].anything != nil {
				props = append(props, yyDollar[4].anything.([]ast.DropColumnProp)...)
			}
			online := ast.DropColumnProp(yyDollar[5].i)
			if online != ast.DropColumnPropEmpty {
				props = append(props, online)
			}
			yyVAL.anything = &ast.DropColumnClause{
				Type:    ast.DropColumnTypeSetUnused,
				Columns: yyDollar[3].anything.([]*element.Identifier),
				Props:   props,
			}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			props := []ast.DropColumnProp{}
			if yyDollar[3].anything != nil {
				props = append(props, yyDollar[3].anything.([]ast.DropColumnProp)...)
			}
			cc := &ast.DropColumnClause{
				Type:    ast.DropColumnTypeDrop,
				Columns: yyDollar[2].anything.([]*element.Identifier),
				Props:   props,
			}
			var checkout int
			if yyDollar[4].anything != nil {
				checkout = yyDollar[4].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			cc := &ast.DropColumnClause{
				Type: ast.DropColumnTypeDropUnusedColumns,
			}
			var checkout int
			if yyDollar[4].anything != nil {
				checkout = yyDollar[4].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			cc := &ast.DropColumnClause{
				Type: ast.DropColumnTypeDropColumnsContinue,
			}
			var checkout int
			if yyDollar[4].anything != nil {
				checkout = yyDollar[4].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = []*element.Identifier{yyDollar[2].anything.(*element.Identifier)}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].anything
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.DropColumnProp{ast.DropColumnProp(yyDollar[1].i)}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.DropColumnProp), ast.DropColumnProp(yyDollar[2].i))
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.i = int(ast.DropColumnPropCascade)
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.DropColumnPropInvalidate)
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.i = int(ast.DropColumnPropEmpty)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.DropColumnPropOnline)
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].i
		}
	case 302:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.anything = &ast.RenameColumnClause{
				OldName: yyDollar[3].anything.(*element.Identifier),
				NewName: yyDollar[5].anything.(*element.Identifier),
			}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{&ast.AddConstraintClause{
				Constraints: []*ast.OutOfLineConstraint{yyDollar[2].anything.(*ast.OutOfLineConstraint)},
			}}
		}
	case 304:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Name = yyDollar[3].anything.(*element.Identifier)
			yyVAL.anything = []ast.AlterTableClause{&ast.ModifyConstraintClause{
				Constraint: constraint,
			}}
		}
	case 305:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypePK
			yyVAL.anything = []ast.AlterTableClause{&ast.ModifyConstraintClause{
				Constraint: constraint,
			}}
		}
	case 306:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeUnique
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			yyVAL.anything = []ast.AlterTableClause{&ast.ModifyConstraintClause{
				Constraint: constraint,
			}}
		}
	case 307:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{&ast.RenameConstraintClause{
				OldName: yyDollar[3].anything.(*element.Identifier),
				NewName: yyDollar[5].anything.(*element.Identifier),
			}}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{yyDollar[1].anything.(ast.AlterTableClause)}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.AlterTableClause), yyDollar[2].anything.(ast.AlterTableClause))
		}
	case 311:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypePK
			yyVAL.anything = &ast.DropConstraintClause{
				Constraint: constraint,
			}
		}
	case 312:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeUnique
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			yyVAL.anything = &ast.DropConstraintClause{
				Constraint: constraint,
			}
		}
	case 313:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Name = yyDollar[3].anything.(*element.Identifier)
			yyVAL.anything = &ast.DropConstraintClause{
				Constraint: constraint,
			}
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 322:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.node = &ast.CreateTableStmt{
				TableName: yyDollar[4].anything.(*ast.TableName),
				RelTable:  yyDollar[6].anything.(*ast.RelTableDef),
			}
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 339:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			rd := &ast.RelTableDef{}
			if yyDollar[1].anything != nil {
				rd.TableStructs = yyDollar[1].anything.([]ast.TableStructDef)
			}
			yyVAL.anything = rd
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].anything
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].anything
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.TableStructDef{yyDollar[1].anything.(ast.TableStructDef)}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.TableStructDef), yyDollar[3].anything.(ast.TableStructDef))
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 458:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.node = &ast.CreateIndexStmt{}
		}
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 494:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 510:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.DropIndexStmt{
				IndexName: yyDollar[2].anything.(*ast.IndexName),
			}
		}
	case 511:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.DropTableStmt{
				TableName: yyDollar[3].anything.(*ast.TableName),
			}
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.NumberOrAsterisk{Number: yyDollar[1].i}
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.NumberOrAsterisk{IsAsterisk: true}
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Char{}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Char{Size: &size}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 529:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Char{Size: &size, IsByteSize: true}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 530:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Char{Size: &size, IsCharSize: true}
			d.SetDataDef(element.DataDefChar)
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 532:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Varchar2{}
			d.Size = &size
			d.IsByteSize = true
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 533:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Varchar2{}
			d.Size = &size
			d.IsCharSize = true
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.NChar{}
			d.SetDataDef(element.DataDefNChar)
			yyVAL.anything = d
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNChar)
			yyVAL.anything = d
		}
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNVarChar2)
			yyVAL.anything = d
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 539:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			scale := yyDollar[5].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Float{}
			d.SetDataDef(element.DataDefFloat)
			yyVAL.anything = d
		}
	case 541:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefFloat)
			yyVAL.anything = d
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.BinaryFloat{}
			d.SetDataDef(element.DataDefBinaryFloat)
			yyVAL.anything = d
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.BinaryDouble{}
			d.SetDataDef(element.DataDefBinaryDouble)
			yyVAL.anything = d
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Long{}
			d.SetDataDef(element.DataDefLong)
			yyVAL.anything = d
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			d := &element.LongRaw{}
			d.SetDataDef(element.DataDefLongRaw)
			yyVAL.anything = d
		}
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Raw{Size: &size}
			d.SetDataDef(element.DataDefRaw)
			yyVAL.anything = d
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Date{}
			d.SetDataDef(element.DataDefDate)
			yyVAL.anything = d
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			d := yyDollar[1].anything.(*element.Timestamp)
			d.WithTimeZone = true
			yyVAL.anything = d
		}
	case 550:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			d := yyDollar[1].anything.(*element.Timestamp)
			d.WithLocalTimeZone = true
			yyVAL.anything = d
		}
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			d := &element.IntervalYear{}
			d.SetDataDef(element.DataDefIntervalYear)
			yyVAL.anything = d
		}
	case 552:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			precision := yyDollar[4].i
			d := &element.IntervalYear{Precision: &precision}
			d.SetDataDef(element.DataDefIntervalYear)
			yyVAL.anything = d
		}
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			d := &element.IntervalDay{}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 554:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			precision := yyDollar[4].i
			d := &element.IntervalDay{Precision: &precision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 555:
		yyDollar = yyS[yypt-10 : yypt+1]
		{
			precision := yyDollar[4].i
			sPrecision := yyDollar[9].i
			d := &element.IntervalDay{Precision: &precision, FractionalSecondsPrecision: &sPrecision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 556:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			sPrecision := yyDollar[6].i
			d := &element.IntervalDay{FractionalSecondsPrecision: &sPrecision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Timestamp{}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].i
			d := &element.Timestamp{FractionalSecondsPrecision: &precision}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Blob{}
			d.SetDataDef(element.DataDefBlob)
			yyVAL.anything = d
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Clob{}
			d.SetDataDef(element.DataDefClob)
			yyVAL.anything = d
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.NClob{}
			d.SetDataDef(element.DataDefNClob)
			yyVAL.anything = d
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.BFile{}
			d.SetDataDef(element.DataDefBFile)
			yyVAL.anything = d
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.RowId{}
			d.SetDataDef(element.DataDefRowId)
			yyVAL.anything = d
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.URowId{}
			d.SetDataDef(element.DataDefURowId)
			yyVAL.anything = d
		}
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.URowId{Size: &size}
			d.SetDataDef(element.DataDefURowId)
			yyVAL.anything = d
		}
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Char{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharacter)
			yyVAL.anything = d
		}
	case 567:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharacterVarying)
			yyVAL.anything = d
		}
	case 568:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharVarying)
			yyVAL.anything = d
		}
	case 569:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNCharVarying)
			yyVAL.anything = d
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefVarchar)
			yyVAL.anything = d
		}
	case 571:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNationalCharacter)
			yyVAL.anything = d
		}
	case 572:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			size := yyDollar[5].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNationalCharacterVarying)
			yyVAL.anything = d
		}
	case 573:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNationalChar)
			yyVAL.anything = d
		}
	case 574:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			size := yyDollar[5].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNationalCharVarying)
			yyVAL.anything = d
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 577:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			scale := yyDollar[5].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 580:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			scale := yyDollar[5].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 583:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			scale := yyDollar[5].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefInteger)
			yyVAL.anything = d
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefInt)
			yyVAL.anything = d
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefSmallInt)
			yyVAL.anything = d
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 126}
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefDoublePrecision)
			yyVAL.anything = d
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 63}
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefReal)
			yyVAL.anything = d
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.XMLType{}
			d.SetDataDef(element.DataDefXMLType)
			yyVAL.anything = d
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].anything
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			constraint := yyDollar[2].anything.(*ast.InlineConstraint)
			constraint.Name = yyDollar[1].anything.(*element.Identifier)
			yyVAL.anything = constraint
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypeNull,
			}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypeNotNull,
			}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypeUnique,
			}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypePK,
			}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypeReferences,
			}
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 608:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 623:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			clause := &ast.ReferenceClause{}
			clause.Columns = yyDollar[4].anything.([]*element.Identifier)
			clause.Table = yyDollar[2].anything.(*ast.TableName)
			yyVAL.anything = clause
		}
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 626:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			constraint := yyDollar[2].anything.(*ast.OutOfLineConstraint)
			constraint.Name = yyDollar[1].anything.(*element.Identifier)
			yyVAL.anything = constraint
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 631:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeUnique
			constraint.Columns = yyDollar[3].anything.([]*element.Identifier)
			yyVAL.anything = constraint
		}
	case 632:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypePK
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			yyVAL.anything = constraint
		}
	case 633:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeReferences
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			constraint.Reference = yyDollar[6].anything.(*ast.ReferenceClause)
			yyVAL.anything = constraint
		}
	case 661:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 668:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 676:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	}
	goto yystack /* stack new state and value */
}

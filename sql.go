// Code generated by goyacc - DO NOT EDIT.


package parser

import __yyfmt__ "fmt"


import (
	"strings"

	"github.com/sjjian/oracle-sql-parser/ast"
	"github.com/sjjian/oracle-sql-parser/ast/element"
)

func nextQuery(yylex interface{}) string {
	lex := yylex.(*yyLexImpl)
	tc := lex.scanner.TC
	query := string(lex.scanner.Text[lex.lastPos:tc])
	lex.lastPos = tc
	return strings.TrimSpace(query)
}


type yySymType struct {
	yys    int
    nothing     struct{}
    i           int
    b           bool
    str         string
    node        ast.Node
    anything    interface{}
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault                 = 57577
	yyEofCode                 = 57344
	_E                        = 57506
	_G                        = 57507
	_K                        = 57508
	_M                        = 57509
	_P                        = 57510
	_T                        = 57511
	_add                      = 57350
	_advanced                 = 57515
	_all                      = 57444
	_alter                    = 57348
	_always                   = 57423
	_archive                  = 57521
	_as                       = 57424
	_asc                      = 57568
	_at                       = 57445
	_attributes               = 57552
	_auto                     = 57526
	_basic                    = 57516
	_bfile                    = 57377
	_binaryDouble             = 57359
	_binaryFloat              = 57358
	_bitmap                   = 57559
	_blob                     = 57374
	_blockchain               = 57459
	_buffer_pool              = 57490
	_by                       = 57400
	_byte                     = 57352
	_cache                    = 57427
	_capacity                 = 57527
	_cascade                  = 57410
	_cell_flash_cache         = 57491
	_char                     = 57351
	_character                = 57380
	_checkpoint               = 57456
	_clob                     = 57375
	_cluster                  = 57480
	_collate                  = 57393
	_column                   = 57446
	_columns                  = 57450
	_commit                   = 57472
	_compress                 = 57517
	_constraint               = 57403
	_constraints              = 57453
	_continue                 = 57451
	_create                   = 57458
	_creation                 = 57482
	_critical                 = 57532
	_cycle                    = 57428
	_data                     = 57466
	_date                     = 57362
	_day                      = 57372
	_dec                      = 57386
	_decimal                  = 57385
	_decrypt                  = 57443
	_default                  = 57422
	_deferrable               = 57414
	_deferred                 = 57415
	_definition               = 57473
	_delete                   = 57411
	_delete_all               = 57542
	_desc                     = 57569
	_disable                  = 57543
	_disable_all              = 57544
	_distribute               = 57535
	_dml                      = 57528
	_double                   = 57390
	_doubleQuoteStr           = 57575
	_drop                     = 57442
	_duplicate                = 57540
	_duplicated               = 57460
	_enable                   = 57545
	_enable_all               = 57546
	_encrypt                  = 57397
	_exceptions               = 57557
	_extended                 = 57467
	_external                 = 57549
	_filesystem_like_logging  = 57512
	_flash_cache              = 57492
	_float                    = 57357
	_for                      = 57476
	_force                    = 57449
	_foreign                  = 57554
	_freelist                 = 57493
	_freelists                = 57494
	_from                     = 57347
	_full                     = 57563
	_generated                = 57425
	_global                   = 57461
	_groups                   = 57505
	_heap                     = 57550
	_high                     = 57529
	_identified               = 57399
	_identity                 = 57426
	_ilm                      = 57547
	_immediate                = 57416
	_immutable                = 57462
	_increment                = 57429
	_index                    = 57551
	_indexing                 = 57564
	_initial                  = 57495
	_initially                = 57417
	_initrans                 = 57485
	_inmemory                 = 57525
	_int                      = 57388
	_intNumber                = 57573
	_interger                 = 57387
	_interval                 = 57368
	_into                     = 57558
	_invalidate               = 57454
	_invalidation             = 57572
	_invisible                = 57395
	_is                       = 57420
	_keep                     = 57496
	_key                      = 57404
	_level                    = 57523
	_levels                   = 57447
	_limit                    = 57430
	_local                    = 57365
	_locking                  = 57524
	_logging                  = 57513
	_long                     = 57360
	_low                      = 57530
	_maxextents               = 57497
	_maxsize                  = 57498
	_maxtrans                 = 57486
	_maxvalue                 = 57431
	_medium                   = 57533
	_memcompress              = 57531
	_memoptimize              = 57477
	_metadata                 = 57468
	_minextents               = 57499
	_minvalue                 = 57432
	_modify                   = 57441
	_mouth                    = 57371
	_multivalue               = 57560
	_national                 = 57383
	_nchar                    = 57354
	_nclob                    = 57376
	_next                     = 57500
	_no                       = 57401
	_nocache                  = 57433
	_nocompress               = 57518
	_nocycle                  = 57434
	_nologging                = 57514
	_nomaxvalue               = 57435
	_nominvalue               = 57436
	_none                     = 57469
	_nonquotedIdentifier      = 57576
	_noorder                  = 57437
	_noparallel               = 57566
	_norely                   = 57418
	_nosort                   = 57561
	_not                      = 57405
	_novalidate               = 57555
	_null                     = 57406
	_number                   = 57356
	_numeric                  = 57384
	_nvarchar2                = 57355
	_on                       = 57412
	_online                   = 57455
	_optimal                  = 57501
	_order                    = 57438
	_organization             = 57481
	_parallel                 = 57567
	_parent                   = 57471
	_partial                  = 57565
	_partition                = 57536
	_pctfree                  = 57487
	_pctincrease              = 57502
	_pctused                  = 57488
	_peverse                  = 57562
	_policy                   = 57548
	_precision                = 57391
	_preserve                 = 57474
	_primary                  = 57407
	_priority                 = 57534
	_private                  = 57463
	_query                    = 57522
	_range                    = 57537
	_raw                      = 57361
	_read                     = 57478
	_real                     = 57392
	_recycle                  = 57503
	_references               = 57409
	_reject                   = 57553
	_rely                     = 57419
	_rename                   = 57457
	_row                      = 57519
	_rowid                    = 57378
	_rows                     = 57475
	_salt                     = 57402
	_scope                    = 57421
	_second                   = 57373
	_segment                  = 57483
	_select                   = 57346
	_service                  = 57539
	_set                      = 57413
	_sharded                  = 57464
	_sharding                 = 57470
	_singleQuoteStr           = 57574
	_smallInt                 = 57389
	_sort                     = 57394
	_spatial                  = 57541
	_start                    = 57439
	_storage                  = 57489
	_store                    = 57520
	_subpartition             = 57538
	_substitutable            = 57448
	_table                    = 57349
	_tablespace               = 57484
	_temporary                = 57465
	_time                     = 57366
	_timestamp                = 57363
	_to                       = 57370
	_unique                   = 57408
	_unlimited                = 57504
	_unusable                 = 57571
	_unused                   = 57452
	_urowid                   = 57379
	_usable                   = 57570
	_using                    = 57398
	_validate                 = 57556
	_value                    = 57440
	_varchar                  = 57382
	_varchar2                 = 57353
	_varying                  = 57381
	_visible                  = 57396
	_with                     = 57364
	_write                    = 57479
	_year                     = 57369
	_zone                     = 57367
	yyErrCode                 = 57345

	yyMaxDepth = 200
	yyTabOfs   = -485
)

var (

	yyPrec = map[int]int{
		}

	yyXLAT = map[int]int{
		    41:   0, // ')' (346x)
		 57344:   1, // $end (243x)
		    59:   2, // ';' (242x)
		    44:   3, // ',' (211x)
		 57405:   4, // _not (169x)
		 57406:   5, // _null (169x)
		 57408:   6, // _unique (169x)
		 57407:   7, // _primary (167x)
		 57409:   8, // _references (165x)
		 57403:   9, // _constraint (163x)
		 57477:  10, // _memoptimize (155x)
		 57471:  11, // _parent (152x)
		 57397:  12, // _encrypt (137x)
		 57442:  13, // _drop (125x)
		 57395:  14, // _invisible (121x)
		 57396:  15, // _visible (121x)
		 57446:  16, // _column (117x)
		 57394:  17, // _sort (116x)
		 57364:  18, // _with (110x)
		 57421:  19, // _scope (109x)
		 57401:  20, // _no (104x)
		 57422:  21, // _default (101x)
		 57517:  22, // _compress (99x)
		 57518:  23, // _nocompress (97x)
		 57512:  24, // _filesystem_like_logging (96x)
		 57485:  25, // _initrans (96x)
		 57513:  26, // _logging (96x)
		 57486:  27, // _maxtrans (96x)
		 57514:  28, // _nologging (96x)
		 57487:  29, // _pctfree (96x)
		 57488:  30, // _pctused (96x)
		 57489:  31, // _storage (96x)
		 57484:  32, // _tablespace (96x)
		 57443:  33, // _decrypt (93x)
		 57547:  34, // _ilm (93x)
		 57525:  35, // _inmemory (90x)
		 57425:  36, // _generated (83x)
		 57393:  37, // _collate (72x)
		    40:  38, // '(' (68x)
		 57519:  39, // _row (68x)
		 57575:  40, // _doubleQuoteStr (60x)
		 57576:  41, // _nonquotedIdentifier (58x)
		 57455:  42, // _online (53x)
		 57413:  43, // _set (53x)
		 57350:  44, // _add (52x)
		 57415:  45, // _deferred (52x)
		 57416:  46, // _immediate (52x)
		 57573:  47, // _intNumber (52x)
		 57441:  48, // _modify (51x)
		 57571:  49, // _unusable (47x)
		 57570:  50, // _usable (47x)
		 57635:  51, // Identifier (46x)
		 57414:  52, // _deferrable (43x)
		 57543:  53, // _disable (43x)
		 57545:  54, // _enable (43x)
		 57564:  55, // _indexing (43x)
		 57566:  56, // _noparallel (43x)
		 57561:  57, // _nosort (43x)
		 57567:  58, // _parallel (43x)
		 57562:  59, // _peverse (43x)
		 57398:  60, // _using (43x)
		 57557:  61, // _exceptions (42x)
		 57417:  62, // _initially (42x)
		 57418:  63, // _norely (42x)
		 57555:  64, // _novalidate (42x)
		 57419:  65, // _rely (42x)
		 57556:  66, // _validate (42x)
		 57490:  67, // _buffer_pool (35x)
		 57491:  68, // _cell_flash_cache (35x)
		 57492:  69, // _flash_cache (35x)
		 57493:  70, // _freelist (35x)
		 57494:  71, // _freelists (35x)
		 57495:  72, // _initial (35x)
		 57497:  73, // _maxextents (35x)
		 57498:  74, // _maxsize (35x)
		 57499:  75, // _minextents (35x)
		 57500:  76, // _next (35x)
		 57501:  77, // _optimal (35x)
		 57502:  78, // _pctincrease (35x)
		 57541:  79, // _spatial (35x)
		 57540:  80, // _duplicate (32x)
		 57549:  81, // _external (28x)
		 57412:  82, // _on (28x)
		 57481:  83, // _organization (27x)
		 57480:  84, // _cluster (25x)
		 57483:  85, // _segment (24x)
		 57597:  86, // ColumnName (24x)
		 57427:  87, // _cache (17x)
		 57428:  88, // _cycle (17x)
		 57535:  89, // _distribute (17x)
		 57429:  90, // _increment (17x)
		 57431:  91, // _maxvalue (17x)
		 57432:  92, // _minvalue (17x)
		 57433:  93, // _nocache (17x)
		 57434:  94, // _nocycle (17x)
		 57435:  95, // _nomaxvalue (17x)
		 57436:  96, // _nominvalue (17x)
		 57437:  97, // _noorder (17x)
		 57438:  98, // _order (17x)
		 57439:  99, // _start (17x)
		 57456: 100, // _checkpoint (14x)
		 57457: 101, // _rename (14x)
		 57410: 102, // _cascade (13x)
		 57476: 103, // _for (12x)
		 57454: 104, // _invalidate (12x)
		 57534: 105, // _priority (11x)
		    46: 106, // '.' (10x)
		 57402: 107, // _salt (10x)
		 57351: 108, // _char (9x)
		 57598: 109, // ColumnNameList (9x)
		 57705: 110, // PhysicalAttrClause (9x)
		 57728: 111, // StorageClause (9x)
		 57551: 112, // _index (8x)
		 57378: 113, // _rowid (8x)
		 57574: 114, // _singleQuoteStr (8x)
		 57370: 115, // _to (8x)
		 57380: 116, // _character (7x)
		 57361: 117, // _raw (7x)
		 57604: 118, // ConstraintState (7x)
		 57629: 119, // ExceptionsClause (7x)
		 57678: 120, // LoggingClause (7x)
		 57706: 121, // PhysicalAttrsClause (7x)
		 57736: 122, // TableName (7x)
		 57739: 123, // UsingIndexClause (7x)
		 57377: 124, // _bfile (6x)
		 57359: 125, // _binaryDouble (6x)
		 57358: 126, // _binaryFloat (6x)
		 57374: 127, // _blob (6x)
		 57375: 128, // _clob (6x)
		 57362: 129, // _date (6x)
		 57386: 130, // _dec (6x)
		 57385: 131, // _decimal (6x)
		 57390: 132, // _double (6x)
		 57357: 133, // _float (6x)
		 57554: 134, // _foreign (6x)
		 57529: 135, // _high (6x)
		 57388: 136, // _int (6x)
		 57387: 137, // _interger (6x)
		 57368: 138, // _interval (6x)
		 57360: 139, // _long (6x)
		 57530: 140, // _low (6x)
		 57383: 141, // _national (6x)
		 57354: 142, // _nchar (6x)
		 57376: 143, // _nclob (6x)
		 57356: 144, // _number (6x)
		 57384: 145, // _numeric (6x)
		 57355: 146, // _nvarchar2 (6x)
		 57392: 147, // _real (6x)
		 57389: 148, // _smallInt (6x)
		 57363: 149, // _timestamp (6x)
		 57379: 150, // _urowid (6x)
		 57382: 151, // _varchar (6x)
		 57353: 152, // _varchar2 (6x)
		 57603: 153, // ConstraintNameOrEmpty (6x)
		 57605: 154, // ConstraintStateList (6x)
		 57606: 155, // ConstraintStateOrEmpty (6x)
		 57732: 156, // TableCompression (6x)
		    42: 157, // '*' (5x)
		 57426: 158, // _identity (5x)
		 57469: 159, // _none (5x)
		 57470: 160, // _sharding (5x)
		 57448: 161, // _substitutable (5x)
		 57381: 162, // _varying (5x)
		 57662: 163, // InmemoryColumnClause (5x)
		 57694: 164, // NumberOrAsterisk (5x)
		 57718: 165, // SegmentAttrClause (5x)
		 57444: 166, // _all (4x)
		 57424: 167, // _as (4x)
		 57568: 168, // _asc (4x)
		 57400: 169, // _by (4x)
		 57569: 170, // _desc (4x)
		 57548: 171, // _policy (4x)
		 57594: 172, // ColumnDef (4x)
		 57639: 173, // IdentityOptionsOrEmpty (4x)
		 57641: 174, // IlmCompressionPolicy (4x)
		 57642: 175, // IlmInmemoryPolicy (4x)
		 57643: 176, // IlmPolicyClause (4x)
		 57644: 177, // IlmTieringPolicy (4x)
		 57657: 178, // InlineConstraint (4x)
		 57663: 179, // InmemoryColumnClauses (4x)
		 57664: 180, // InmemoryColumnClausesOrEmpty (4x)
		 57708: 181, // RealColumnDef (4x)
		 57722: 182, // SizeClause (4x)
		 57458: 183, // _create (3x)
		 57411: 184, // _delete (3x)
		 57399: 185, // _identified (3x)
		 57496: 186, // _keep (3x)
		 57404: 187, // _key (3x)
		 57531: 188, // _memcompress (3x)
		 57580: 189, // AnsiSupportDataTypes (3x)
		 57585: 190, // CharacterDataTypes (3x)
		 57588: 191, // CollateClause (3x)
		 57608: 192, // CreateIndexStmt (3x)
		 57611: 193, // Datatype (3x)
		 57612: 194, // DatetimeDataTypes (3x)
		 57618: 195, // DropColumnCheckpoint (3x)
		 57621: 196, // DropColumnProp (3x)
		 57674: 197, // InvisibleProp (3x)
		 57677: 198, // LargeObjectDataTypes (3x)
		 57679: 199, // LongAndRawDataTypes (3x)
		 57693: 200, // NumberDataTypes (3x)
		 57698: 201, // OralceBuiltInDataTypes (3x)
		 57709: 202, // ReferencesClause (3x)
		 57716: 203, // RowIdDataTypes (3x)
		 57719: 204, // SegmentAttrsClause (3x)
		 57515: 205, // _advanced (2x)
		 57348: 206, // _alter (2x)
		 57445: 207, // _at (2x)
		 57526: 208, // _auto (2x)
		 57559: 209, // _bitmap (2x)
		 57459: 210, // _blockchain (2x)
		 57352: 211, // _byte (2x)
		 57450: 212, // _columns (2x)
		 57472: 213, // _commit (2x)
		 57466: 214, // _data (2x)
		 57473: 215, // _definition (2x)
		 57449: 216, // _force (2x)
		 57572: 217, // _invalidation (2x)
		 57523: 218, // _level (2x)
		 57447: 219, // _levels (2x)
		 57430: 220, // _limit (2x)
		 57524: 221, // _locking (2x)
		 57371: 222, // _mouth (2x)
		 57560: 223, // _multivalue (2x)
		 57536: 224, // _partition (2x)
		 57474: 225, // _preserve (2x)
		 57522: 226, // _query (2x)
		 57478: 227, // _read (2x)
		 57553: 228, // _reject (2x)
		 57475: 229, // _rows (2x)
		 57373: 230, // _second (2x)
		 57520: 231, // _store (2x)
		 57349: 232, // _table (2x)
		 57465: 233, // _temporary (2x)
		 57366: 234, // _time (2x)
		 57504: 235, // _unlimited (2x)
		 57452: 236, // _unused (2x)
		 57479: 237, // _write (2x)
		 57367: 238, // _zone (2x)
		 57578: 239, // AddColumnClause (2x)
		 57579: 240, // AlterTableStmt (2x)
		 57583: 241, // ChangeColumnClause (2x)
		 57589: 242, // CollateClauseOrEmpty (2x)
		 57599: 243, // ColumnNameListForDropColumn (2x)
		 57610: 244, // CreateTableStmt (2x)
		 57613: 245, // DefaultClause (2x)
		 57615: 246, // DefaultOrIdentityClause (2x)
		 57619: 247, // DropColumnClause (2x)
		 57622: 248, // DropColumnProps (2x)
		 57623: 249, // DropColumnPropsOrEmpty (2x)
		 57624: 250, // EmptyStmt (2x)
		 57626: 251, // EncryptClause (2x)
		 57630: 252, // Expr (2x)
		 57632: 253, // ExternalTableClause (2x)
		 57636: 254, // IdentityClause (2x)
		 57637: 255, // IdentityOption (2x)
		 57640: 256, // IlmClause (2x)
		 57646: 257, // IndexAttr (2x)
		 57649: 258, // IndexCompression (2x)
		 57650: 259, // IndexExpr (2x)
		 57653: 260, // IndexName (2x)
		 57655: 261, // IndexProps (2x)
		 57656: 262, // IndexType (2x)
		 57658: 263, // InlineConstraintList (2x)
		 57659: 264, // InlineConstraintType (2x)
		 57669: 265, // InmemoryMemCompress (2x)
		 57672: 266, // InmemoryTableClause (2x)
		 57676: 267, // IsForce (2x)
		 57682: 268, // MemoptimizeRead (2x)
		 57684: 269, // MemoptimizeWrite (2x)
		 57686: 270, // ModifyColumnClause (2x)
		 57687: 271, // ModifyColumnProp (2x)
		 57689: 272, // ModifyColumnSubstitutable (2x)
		 57690: 273, // ModifyColumnVisibility (2x)
		 57692: 274, // ModifyRealColumnProp (2x)
		 57700: 275, // OutOfLineConstraint (2x)
		 57702: 276, // ParallelClause (2x)
		 57704: 277, // PartialIndexClause (2x)
		 57712: 278, // RelTableProp (2x)
		 57720: 279, // SegmentAttrsClauseOrEmpty (2x)
		 57726: 280, // Statement (2x)
		 57729: 281, // StorageProp (2x)
		 57733: 282, // TableCompressionOrEmpty (2x)
		    61: 283, // '=' (1x)
		 57423: 284, // _always (1x)
		 57521: 285, // _archive (1x)
		 57552: 286, // _attributes (1x)
		 57516: 287, // _basic (1x)
		 57527: 288, // _capacity (1x)
		 57453: 289, // _constraints (1x)
		 57451: 290, // _continue (1x)
		 57482: 291, // _creation (1x)
		 57532: 292, // _critical (1x)
		 57372: 293, // _day (1x)
		 57542: 294, // _delete_all (1x)
		 57544: 295, // _disable_all (1x)
		 57528: 296, // _dml (1x)
		 57460: 297, // _duplicated (1x)
		 57506: 298, // _E (1x)
		 57546: 299, // _enable_all (1x)
		 57467: 300, // _extended (1x)
		 57563: 301, // _full (1x)
		 57507: 302, // _G (1x)
		 57461: 303, // _global (1x)
		 57505: 304, // _groups (1x)
		 57550: 305, // _heap (1x)
		 57462: 306, // _immutable (1x)
		 57558: 307, // _into (1x)
		 57420: 308, // _is (1x)
		 57508: 309, // _K (1x)
		 57365: 310, // _local (1x)
		 57509: 311, // _M (1x)
		 57533: 312, // _medium (1x)
		 57468: 313, // _metadata (1x)
		 57510: 314, // _P (1x)
		 57565: 315, // _partial (1x)
		 57391: 316, // _precision (1x)
		 57463: 317, // _private (1x)
		 57537: 318, // _range (1x)
		 57503: 319, // _recycle (1x)
		 57539: 320, // _service (1x)
		 57464: 321, // _sharded (1x)
		 57538: 322, // _subpartition (1x)
		 57511: 323, // _T (1x)
		 57440: 324, // _value (1x)
		 57369: 325, // _year (1x)
		 57581: 326, // BitmapJoinIndexClause (1x)
		 57582: 327, // BlockchainTableClauses (1x)
		 57584: 328, // ChangeColumnClauseList (1x)
		 57586: 329, // ClusterIndexClause (1x)
		 57587: 330, // ClusterName (1x)
		 57590: 331, // ColumnClauses (1x)
		 57591: 332, // ColumnCompressLock (1x)
		 57592: 333, // ColumnCompressProp (1x)
		 57593: 334, // ColumnConstraintForModify (1x)
		 57595: 335, // ColumnDefConstraint (1x)
		 57596: 336, // ColumnDefList (1x)
		 57600: 337, // ColumnNameListOrEmpty (1x)
		 57601: 338, // ColumnProps (1x)
		 57602: 339, // ColumnSortClause (1x)
		 57607: 340, // CreateIndexInvalidation (1x)
		 57609: 341, // CreateIndexUsable (1x)
		 57614: 342, // DefaultCollateClauseOrEmpty (1x)
		 57616: 343, // DefaultOrIdentityClauseForModify (1x)
		 57617: 344, // DeferredSegmentCreation (1x)
		 57620: 345, // DropColumnOnline (1x)
		 57625: 346, // EncryptAlgorithm (1x)
		 57627: 347, // EncryptClauseForModify (1x)
		 57628: 348, // EncryptionSpec (1x)
		 57631: 349, // ExternalPartitionClause (1x)
		 57633: 350, // HeapOrgTableClause (1x)
		 57634: 351, // IdentifiedByClause (1x)
		 57638: 352, // IdentityOptions (1x)
		 57645: 353, // ImmutableTableClauses (1x)
		 57647: 354, // IndexAttrs (1x)
		 57648: 355, // IndexClause (1x)
		 57651: 356, // IndexExprs (1x)
		 57652: 357, // IndexIlmClause (1x)
		 57654: 358, // IndexOrgTableClause (1x)
		 57660: 359, // InlineRefConstraint (1x)
		 57661: 360, // InmemoryAttrs (1x)
		 57665: 361, // InmemoryDistribute (1x)
		 57666: 362, // InmemoryDistributeBy (1x)
		 57667: 363, // InmemoryDistributeFor (1x)
		 57668: 364, // InmemoryDuplicate (1x)
		 57670: 365, // InmemoryProp (1x)
		 57671: 366, // InmemorySpatial (1x)
		 57673: 367, // IntergrityAlgorithm (1x)
		 57675: 368, // InvisiblePropOrEmpty (1x)
		 57680: 369, // Memoptimize (1x)
		 57681: 370, // MemoptimizeForAlterTable (1x)
		 57683: 371, // MemoptimizeReadForAlterTable (1x)
		 57685: 372, // MemoptimizeWriteForAlterTable (1x)
		 57688: 373, // ModifyColumnProps (1x)
		 57691: 374, // ModifyColumnVisibilityList (1x)
		 57695: 375, // OnCommitClause (1x)
		 57696: 376, // OnCommitDef (1x)
		 57697: 377, // OnCommitRows (1x)
		 57699: 378, // OrgClause (1x)
		 57701: 379, // OutOfLinePartStorageList (1x)
		 57703: 380, // ParentTable (1x)
		 57707: 381, // PhysicalProps (1x)
		 57710: 382, // ReferencesOnDelete (1x)
		 57711: 383, // RelTableDef (1x)
		 57713: 384, // RelTableProps (1x)
		 57714: 385, // RelTablePropsOrEmpty (1x)
		 57715: 386, // RenameColumnClause (1x)
		 57717: 387, // SaltProp (1x)
		 57721: 388, // ShardingType (1x)
		 57723: 389, // SizeUnit (1x)
		 57724: 390, // SortProp (1x)
		 57725: 391, // Start (1x)
		 57727: 392, // StatementList (1x)
		 57730: 393, // StorageProps (1x)
		 57731: 394, // TableAlias (1x)
		 57734: 395, // TableDef (1x)
		 57735: 396, // TableIndexClause (1x)
		 57737: 397, // TableProps (1x)
		 57738: 398, // TableType (1x)
		 57577: 399, // $default (0x)
		 57347: 400, // _from (0x)
		 57346: 401, // _select (0x)
		 57345: 402, // error (0x)
	}

	yySymNames = []string{
		"')'",
		"$end",
		"';'",
		"','",
		"_not",
		"_null",
		"_unique",
		"_primary",
		"_references",
		"_constraint",
		"_memoptimize",
		"_parent",
		"_encrypt",
		"_drop",
		"_invisible",
		"_visible",
		"_column",
		"_sort",
		"_with",
		"_scope",
		"_no",
		"_default",
		"_compress",
		"_nocompress",
		"_filesystem_like_logging",
		"_initrans",
		"_logging",
		"_maxtrans",
		"_nologging",
		"_pctfree",
		"_pctused",
		"_storage",
		"_tablespace",
		"_decrypt",
		"_ilm",
		"_inmemory",
		"_generated",
		"_collate",
		"'('",
		"_row",
		"_doubleQuoteStr",
		"_nonquotedIdentifier",
		"_online",
		"_set",
		"_add",
		"_deferred",
		"_immediate",
		"_intNumber",
		"_modify",
		"_unusable",
		"_usable",
		"Identifier",
		"_deferrable",
		"_disable",
		"_enable",
		"_indexing",
		"_noparallel",
		"_nosort",
		"_parallel",
		"_peverse",
		"_using",
		"_exceptions",
		"_initially",
		"_norely",
		"_novalidate",
		"_rely",
		"_validate",
		"_buffer_pool",
		"_cell_flash_cache",
		"_flash_cache",
		"_freelist",
		"_freelists",
		"_initial",
		"_maxextents",
		"_maxsize",
		"_minextents",
		"_next",
		"_optimal",
		"_pctincrease",
		"_spatial",
		"_duplicate",
		"_external",
		"_on",
		"_organization",
		"_cluster",
		"_segment",
		"ColumnName",
		"_cache",
		"_cycle",
		"_distribute",
		"_increment",
		"_maxvalue",
		"_minvalue",
		"_nocache",
		"_nocycle",
		"_nomaxvalue",
		"_nominvalue",
		"_noorder",
		"_order",
		"_start",
		"_checkpoint",
		"_rename",
		"_cascade",
		"_for",
		"_invalidate",
		"_priority",
		"'.'",
		"_salt",
		"_char",
		"ColumnNameList",
		"PhysicalAttrClause",
		"StorageClause",
		"_index",
		"_rowid",
		"_singleQuoteStr",
		"_to",
		"_character",
		"_raw",
		"ConstraintState",
		"ExceptionsClause",
		"LoggingClause",
		"PhysicalAttrsClause",
		"TableName",
		"UsingIndexClause",
		"_bfile",
		"_binaryDouble",
		"_binaryFloat",
		"_blob",
		"_clob",
		"_date",
		"_dec",
		"_decimal",
		"_double",
		"_float",
		"_foreign",
		"_high",
		"_int",
		"_interger",
		"_interval",
		"_long",
		"_low",
		"_national",
		"_nchar",
		"_nclob",
		"_number",
		"_numeric",
		"_nvarchar2",
		"_real",
		"_smallInt",
		"_timestamp",
		"_urowid",
		"_varchar",
		"_varchar2",
		"ConstraintNameOrEmpty",
		"ConstraintStateList",
		"ConstraintStateOrEmpty",
		"TableCompression",
		"'*'",
		"_identity",
		"_none",
		"_sharding",
		"_substitutable",
		"_varying",
		"InmemoryColumnClause",
		"NumberOrAsterisk",
		"SegmentAttrClause",
		"_all",
		"_as",
		"_asc",
		"_by",
		"_desc",
		"_policy",
		"ColumnDef",
		"IdentityOptionsOrEmpty",
		"IlmCompressionPolicy",
		"IlmInmemoryPolicy",
		"IlmPolicyClause",
		"IlmTieringPolicy",
		"InlineConstraint",
		"InmemoryColumnClauses",
		"InmemoryColumnClausesOrEmpty",
		"RealColumnDef",
		"SizeClause",
		"_create",
		"_delete",
		"_identified",
		"_keep",
		"_key",
		"_memcompress",
		"AnsiSupportDataTypes",
		"CharacterDataTypes",
		"CollateClause",
		"CreateIndexStmt",
		"Datatype",
		"DatetimeDataTypes",
		"DropColumnCheckpoint",
		"DropColumnProp",
		"InvisibleProp",
		"LargeObjectDataTypes",
		"LongAndRawDataTypes",
		"NumberDataTypes",
		"OralceBuiltInDataTypes",
		"ReferencesClause",
		"RowIdDataTypes",
		"SegmentAttrsClause",
		"_advanced",
		"_alter",
		"_at",
		"_auto",
		"_bitmap",
		"_blockchain",
		"_byte",
		"_columns",
		"_commit",
		"_data",
		"_definition",
		"_force",
		"_invalidation",
		"_level",
		"_levels",
		"_limit",
		"_locking",
		"_mouth",
		"_multivalue",
		"_partition",
		"_preserve",
		"_query",
		"_read",
		"_reject",
		"_rows",
		"_second",
		"_store",
		"_table",
		"_temporary",
		"_time",
		"_unlimited",
		"_unused",
		"_write",
		"_zone",
		"AddColumnClause",
		"AlterTableStmt",
		"ChangeColumnClause",
		"CollateClauseOrEmpty",
		"ColumnNameListForDropColumn",
		"CreateTableStmt",
		"DefaultClause",
		"DefaultOrIdentityClause",
		"DropColumnClause",
		"DropColumnProps",
		"DropColumnPropsOrEmpty",
		"EmptyStmt",
		"EncryptClause",
		"Expr",
		"ExternalTableClause",
		"IdentityClause",
		"IdentityOption",
		"IlmClause",
		"IndexAttr",
		"IndexCompression",
		"IndexExpr",
		"IndexName",
		"IndexProps",
		"IndexType",
		"InlineConstraintList",
		"InlineConstraintType",
		"InmemoryMemCompress",
		"InmemoryTableClause",
		"IsForce",
		"MemoptimizeRead",
		"MemoptimizeWrite",
		"ModifyColumnClause",
		"ModifyColumnProp",
		"ModifyColumnSubstitutable",
		"ModifyColumnVisibility",
		"ModifyRealColumnProp",
		"OutOfLineConstraint",
		"ParallelClause",
		"PartialIndexClause",
		"RelTableProp",
		"SegmentAttrsClauseOrEmpty",
		"Statement",
		"StorageProp",
		"TableCompressionOrEmpty",
		"'='",
		"_always",
		"_archive",
		"_attributes",
		"_basic",
		"_capacity",
		"_constraints",
		"_continue",
		"_creation",
		"_critical",
		"_day",
		"_delete_all",
		"_disable_all",
		"_dml",
		"_duplicated",
		"_E",
		"_enable_all",
		"_extended",
		"_full",
		"_G",
		"_global",
		"_groups",
		"_heap",
		"_immutable",
		"_into",
		"_is",
		"_K",
		"_local",
		"_M",
		"_medium",
		"_metadata",
		"_P",
		"_partial",
		"_precision",
		"_private",
		"_range",
		"_recycle",
		"_service",
		"_sharded",
		"_subpartition",
		"_T",
		"_value",
		"_year",
		"BitmapJoinIndexClause",
		"BlockchainTableClauses",
		"ChangeColumnClauseList",
		"ClusterIndexClause",
		"ClusterName",
		"ColumnClauses",
		"ColumnCompressLock",
		"ColumnCompressProp",
		"ColumnConstraintForModify",
		"ColumnDefConstraint",
		"ColumnDefList",
		"ColumnNameListOrEmpty",
		"ColumnProps",
		"ColumnSortClause",
		"CreateIndexInvalidation",
		"CreateIndexUsable",
		"DefaultCollateClauseOrEmpty",
		"DefaultOrIdentityClauseForModify",
		"DeferredSegmentCreation",
		"DropColumnOnline",
		"EncryptAlgorithm",
		"EncryptClauseForModify",
		"EncryptionSpec",
		"ExternalPartitionClause",
		"HeapOrgTableClause",
		"IdentifiedByClause",
		"IdentityOptions",
		"ImmutableTableClauses",
		"IndexAttrs",
		"IndexClause",
		"IndexExprs",
		"IndexIlmClause",
		"IndexOrgTableClause",
		"InlineRefConstraint",
		"InmemoryAttrs",
		"InmemoryDistribute",
		"InmemoryDistributeBy",
		"InmemoryDistributeFor",
		"InmemoryDuplicate",
		"InmemoryProp",
		"InmemorySpatial",
		"IntergrityAlgorithm",
		"InvisiblePropOrEmpty",
		"Memoptimize",
		"MemoptimizeForAlterTable",
		"MemoptimizeReadForAlterTable",
		"MemoptimizeWriteForAlterTable",
		"ModifyColumnProps",
		"ModifyColumnVisibilityList",
		"OnCommitClause",
		"OnCommitDef",
		"OnCommitRows",
		"OrgClause",
		"OutOfLinePartStorageList",
		"ParentTable",
		"PhysicalProps",
		"ReferencesOnDelete",
		"RelTableDef",
		"RelTableProps",
		"RelTablePropsOrEmpty",
		"RenameColumnClause",
		"SaltProp",
		"ShardingType",
		"SizeUnit",
		"SortProp",
		"Start",
		"StatementList",
		"StorageProps",
		"TableAlias",
		"TableDef",
		"TableIndexClause",
		"TableProps",
		"TableType",
		"$default",
		"_from",
		"_select",
		"error",
	}

	yyTokenLiteralStrings = map[int]string{
		57575: "double quotes string",
		57576: "nonquoted identifier",
		57573: "int number",
		57574: "single quotes string",
	}

	yyReductions = map[int]struct{xsym, components int}{
		0: {0, 1},
		1: {391, 1},
		2: {392, 1},
		3: {392, 3},
		4: {280, 1},
		5: {280, 1},
		6: {280, 1},
		7: {280, 1},
		8: {250, 0},
		9: {122, 1},
		10: {122, 3},
		11: {109, 1},
		12: {109, 3},
		13: {86, 1},
		14: {51, 1},
		15: {51, 1},
		16: {330, 1},
		17: {330, 3},
		18: {240, 5},
		19: {331, 1},
		20: {331, 1},
		21: {328, 1},
		22: {328, 2},
		23: {241, 1},
		24: {241, 1},
		25: {241, 1},
		26: {239, 6},
		27: {338, 0},
		28: {379, 0},
		29: {336, 1},
		30: {336, 3},
		31: {172, 1},
		32: {181, 8},
		33: {242, 0},
		34: {242, 1},
		35: {191, 2},
		36: {390, 0},
		37: {390, 1},
		38: {368, 0},
		39: {368, 1},
		40: {197, 1},
		41: {197, 1},
		42: {246, 0},
		43: {246, 1},
		44: {246, 1},
		45: {245, 2},
		46: {245, 4},
		47: {254, 4},
		48: {254, 5},
		49: {254, 5},
		50: {254, 6},
		51: {254, 8},
		52: {173, 0},
		53: {173, 3},
		54: {352, 0},
		55: {352, 1},
		56: {352, 2},
		57: {255, 3},
		58: {255, 4},
		59: {255, 3},
		60: {255, 2},
		61: {255, 1},
		62: {255, 2},
		63: {255, 1},
		64: {255, 1},
		65: {255, 1},
		66: {255, 2},
		67: {255, 1},
		68: {255, 1},
		69: {255, 1},
		70: {251, 0},
		71: {251, 2},
		72: {348, 4},
		73: {346, 0},
		74: {346, 2},
		75: {351, 0},
		76: {351, 3},
		77: {367, 0},
		78: {367, 1},
		79: {387, 0},
		80: {387, 1},
		81: {387, 2},
		82: {335, 0},
		83: {335, 1},
		84: {335, 1},
		85: {263, 1},
		86: {263, 2},
		87: {270, 4},
		88: {270, 4},
		89: {270, 1},
		90: {373, 1},
		91: {373, 3},
		92: {271, 1},
		93: {274, 6},
		94: {343, 2},
		95: {343, 1},
		96: {347, 1},
		97: {347, 1},
		98: {334, 0},
		99: {334, 1},
		100: {374, 1},
		101: {374, 3},
		102: {273, 2},
		103: {272, 7},
		104: {272, 8},
		105: {267, 0},
		106: {267, 1},
		107: {247, 5},
		108: {247, 4},
		109: {247, 4},
		110: {247, 4},
		111: {243, 2},
		112: {243, 3},
		113: {249, 0},
		114: {249, 1},
		115: {248, 1},
		116: {248, 2},
		117: {196, 2},
		118: {196, 1},
		119: {345, 0},
		120: {345, 1},
		121: {195, 0},
		122: {195, 2},
		123: {386, 5},
		124: {244, 8},
		125: {398, 0},
		126: {398, 2},
		127: {398, 2},
		128: {398, 1},
		129: {398, 1},
		130: {398, 1},
		131: {398, 1},
		132: {398, 2},
		133: {388, 0},
		134: {388, 3},
		135: {388, 3},
		136: {388, 4},
		137: {388, 3},
		138: {380, 0},
		139: {380, 2},
		140: {395, 1},
		141: {383, 7},
		142: {353, 0},
		143: {327, 0},
		144: {342, 0},
		145: {342, 2},
		146: {375, 2},
		147: {376, 0},
		148: {376, 4},
		149: {376, 4},
		150: {377, 0},
		151: {377, 4},
		152: {377, 4},
		153: {381, 0},
		154: {381, 5},
		155: {381, 3},
		156: {381, 2},
		157: {381, 5},
		158: {344, 0},
		159: {344, 3},
		160: {344, 3},
		161: {279, 0},
		162: {279, 1},
		163: {204, 1},
		164: {204, 2},
		165: {165, 1},
		166: {165, 2},
		167: {165, 3},
		168: {165, 1},
		169: {165, 1},
		170: {121, 1},
		171: {121, 2},
		172: {110, 2},
		173: {110, 2},
		174: {110, 2},
		175: {110, 2},
		176: {110, 1},
		177: {120, 1},
		178: {120, 1},
		179: {120, 1},
		180: {282, 0},
		181: {282, 1},
		182: {156, 1},
		183: {156, 3},
		184: {156, 4},
		185: {156, 4},
		186: {156, 5},
		187: {156, 1},
		188: {333, 0},
		189: {333, 2},
		190: {333, 3},
		191: {333, 3},
		192: {333, 2},
		193: {333, 3},
		194: {333, 3},
		195: {332, 0},
		196: {332, 3},
		197: {332, 4},
		198: {266, 0},
		199: {266, 3},
		200: {266, 3},
		201: {266, 1},
		202: {360, 5},
		203: {265, 0},
		204: {265, 3},
		205: {265, 3},
		206: {265, 4},
		207: {265, 4},
		208: {265, 3},
		209: {265, 4},
		210: {265, 4},
		211: {265, 2},
		212: {265, 2},
		213: {365, 0},
		214: {365, 2},
		215: {365, 2},
		216: {365, 2},
		217: {365, 2},
		218: {365, 2},
		219: {361, 0},
		220: {361, 3},
		221: {362, 0},
		222: {362, 1},
		223: {362, 3},
		224: {362, 2},
		225: {362, 2},
		226: {363, 0},
		227: {363, 3},
		228: {363, 3},
		229: {363, 3},
		230: {363, 3},
		231: {364, 0},
		232: {364, 1},
		233: {364, 2},
		234: {364, 2},
		235: {366, 0},
		236: {366, 2},
		237: {180, 0},
		238: {180, 1},
		239: {179, 1},
		240: {179, 2},
		241: {163, 4},
		242: {163, 5},
		243: {163, 5},
		244: {256, 0},
		245: {256, 4},
		246: {256, 4},
		247: {256, 4},
		248: {256, 4},
		249: {256, 2},
		250: {256, 2},
		251: {256, 2},
		252: {176, 1},
		253: {176, 1},
		254: {176, 1},
		255: {174, 0},
		256: {177, 0},
		257: {175, 0},
		258: {378, 3},
		259: {378, 3},
		260: {378, 2},
		261: {350, 3},
		262: {358, 0},
		263: {253, 0},
		264: {349, 4},
		265: {349, 6},
		266: {397, 0},
		267: {385, 0},
		268: {385, 3},
		269: {384, 1},
		270: {384, 3},
		271: {278, 1},
		272: {278, 1},
		273: {192, 9},
		274: {262, 0},
		275: {262, 1},
		276: {262, 1},
		277: {262, 1},
		278: {260, 1},
		279: {260, 3},
		280: {357, 0},
		281: {355, 1},
		282: {355, 1},
		283: {355, 1},
		284: {329, 3},
		285: {354, 1},
		286: {354, 2},
		287: {257, 1},
		288: {257, 1},
		289: {257, 1},
		290: {257, 2},
		291: {257, 2},
		292: {257, 1},
		293: {257, 1},
		294: {257, 1},
		295: {257, 1},
		296: {257, 1},
		297: {257, 1},
		298: {257, 1},
		299: {257, 1},
		300: {258, 1},
		301: {258, 2},
		302: {258, 2},
		303: {258, 3},
		304: {258, 3},
		305: {258, 1},
		306: {277, 2},
		307: {277, 2},
		308: {276, 1},
		309: {276, 2},
		310: {276, 1},
		311: {396, 6},
		312: {394, 0},
		313: {394, 1},
		314: {356, 1},
		315: {356, 3},
		316: {259, 2},
		317: {339, 0},
		318: {339, 1},
		319: {339, 1},
		320: {261, 0},
		321: {326, 0},
		322: {341, 0},
		323: {341, 1},
		324: {341, 1},
		325: {340, 0},
		326: {340, 2},
		327: {340, 2},
		328: {193, 1},
		329: {193, 1},
		330: {164, 1},
		331: {164, 1},
		332: {201, 1},
		333: {201, 1},
		334: {201, 1},
		335: {201, 1},
		336: {201, 1},
		337: {201, 1},
		338: {190, 1},
		339: {190, 4},
		340: {190, 5},
		341: {190, 5},
		342: {190, 4},
		343: {190, 5},
		344: {190, 5},
		345: {190, 1},
		346: {190, 4},
		347: {190, 4},
		348: {200, 1},
		349: {200, 4},
		350: {200, 6},
		351: {200, 1},
		352: {200, 4},
		353: {200, 1},
		354: {200, 1},
		355: {199, 1},
		356: {199, 2},
		357: {199, 4},
		358: {194, 1},
		359: {194, 1},
		360: {194, 4},
		361: {194, 7},
		362: {194, 8},
		363: {194, 4},
		364: {194, 7},
		365: {194, 4},
		366: {194, 7},
		367: {194, 10},
		368: {194, 7},
		369: {198, 1},
		370: {198, 1},
		371: {198, 1},
		372: {198, 1},
		373: {203, 1},
		374: {203, 1},
		375: {203, 4},
		376: {189, 4},
		377: {189, 5},
		378: {189, 5},
		379: {189, 5},
		380: {189, 4},
		381: {189, 5},
		382: {189, 6},
		383: {189, 5},
		384: {189, 6},
		385: {189, 1},
		386: {189, 4},
		387: {189, 6},
		388: {189, 1},
		389: {189, 4},
		390: {189, 6},
		391: {189, 1},
		392: {189, 4},
		393: {189, 6},
		394: {189, 1},
		395: {189, 1},
		396: {189, 1},
		397: {189, 2},
		398: {189, 1},
		399: {153, 0},
		400: {153, 2},
		401: {178, 3},
		402: {178, 3},
		403: {264, 1},
		404: {264, 2},
		405: {264, 1},
		406: {264, 2},
		407: {202, 4},
		408: {337, 0},
		409: {337, 3},
		410: {382, 0},
		411: {382, 3},
		412: {382, 4},
		413: {155, 0},
		414: {155, 1},
		415: {154, 1},
		416: {154, 2},
		417: {118, 1},
		418: {118, 2},
		419: {118, 2},
		420: {118, 2},
		421: {118, 1},
		422: {118, 1},
		423: {118, 1},
		424: {118, 1},
		425: {118, 1},
		426: {118, 1},
		427: {118, 1},
		428: {118, 1},
		429: {123, 3},
		430: {123, 5},
		431: {123, 3},
		432: {119, 3},
		433: {359, 3},
		434: {359, 2},
		435: {359, 3},
		436: {275, 6},
		437: {275, 7},
		438: {275, 8},
		439: {111, 4},
		440: {393, 1},
		441: {393, 2},
		442: {281, 2},
		443: {281, 2},
		444: {281, 2},
		445: {281, 2},
		446: {281, 2},
		447: {281, 2},
		448: {281, 2},
		449: {281, 2},
		450: {281, 2},
		451: {281, 3},
		452: {281, 1},
		453: {281, 2},
		454: {281, 2},
		455: {281, 2},
		456: {281, 2},
		457: {281, 2},
		458: {281, 2},
		459: {281, 2},
		460: {281, 2},
		461: {281, 2},
		462: {281, 2},
		463: {281, 2},
		464: {281, 1},
		465: {182, 2},
		466: {389, 0},
		467: {389, 1},
		468: {389, 1},
		469: {389, 1},
		470: {389, 1},
		471: {389, 1},
		472: {389, 1},
		473: {370, 2},
		474: {371, 1},
		475: {371, 4},
		476: {372, 1},
		477: {372, 4},
		478: {369, 2},
		479: {268, 0},
		480: {268, 3},
		481: {269, 0},
		482: {269, 3},
		483: {252, 1},
		484: {252, 1},
	}

	yyXErrors = map[yyXError]string{
	}

	yyParseTab = [815][]uint16{
		// 0
		{1: 477, 477, 183: 494, 192: 492, 206: 493, 240: 490, 244: 491, 250: 489, 280: 488, 391: 486, 487},
		{1: 485},
		{1: 484, 1298},
		{1: 483, 483},
		{1: 481, 481},
		// 5
		{1: 480, 480},
		{1: 479, 479},
		{1: 478, 478},
		{232: 1189},
		{6: 497, 112: 211, 209: 498, 223: 499, 232: 495, 262: 496},
		// 10
		{40: 360, 360, 210: 642, 297: 640, 303: 637, 306: 641, 317: 638, 321: 639, 398: 636},
		{112: 500},
		{112: 210},
		{112: 209},
		{112: 208},
		// 15
		{40: 502, 501, 51: 504, 260: 503},
		{471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 38: 471, 471, 471, 471, 471, 471, 471, 471, 471, 48: 471, 471, 471, 52: 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 79: 471, 471, 471, 471, 471, 471, 471, 100: 471, 471, 471, 104: 471, 106: 471, 471, 471, 113: 471, 471, 471, 471, 471, 124: 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 136: 471, 471, 471, 471, 141: 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 160: 471, 471, 168: 471, 170: 471},
		{470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 38: 470, 470, 470, 470, 470, 470, 470, 470, 470, 48: 470, 470, 470, 52: 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 79: 470, 470, 470, 470, 470, 470, 470, 100: 470, 470, 470, 104: 470, 106: 470, 470, 470, 113: 470, 470, 470, 470, 470, 124: 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 136: 470, 470, 470, 470, 141: 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 160: 470, 470, 168: 470, 170: 470},
		{82: 205, 357: 507},
		{207, 3: 207, 207, 207, 207, 207, 207, 207, 52: 207, 207, 207, 60: 207, 207, 207, 207, 207, 207, 207, 82: 207, 106: 505},
		// 20
		{40: 502, 501, 51: 506},
		{206, 3: 206, 206, 206, 206, 206, 206, 206, 52: 206, 206, 206, 60: 206, 206, 206, 206, 206, 206, 206, 82: 206},
		{82: 508},
		{164, 164, 164, 40: 502, 501, 45: 164, 164, 49: 164, 164, 509, 84: 514, 122: 515, 326: 513, 329: 511, 355: 510, 396: 512},
		{476, 476, 476, 476, 476, 476, 476, 476, 476, 476, 476, 476, 13: 476, 16: 476, 20: 476, 476, 476, 476, 476, 476, 476, 476, 476, 476, 476, 476, 476, 38: 476, 476, 476, 476, 43: 476, 476, 48: 476, 52: 476, 476, 476, 60: 476, 476, 476, 476, 476, 476, 476, 81: 476, 476, 476, 476, 476, 101: 476, 106: 634, 160: 476},
		// 25
		{163, 163, 163, 45: 163, 163, 49: 628, 627, 341: 626},
		{204, 204, 204, 45: 204, 204, 49: 204, 204},
		{203, 203, 203, 45: 203, 203, 49: 203, 203},
		{202, 202, 202, 45: 202, 202, 49: 202, 202},
		{40: 502, 501, 51: 530, 330: 531},
		// 30
		{38: 173, 40: 502, 501, 51: 517, 394: 516},
		{38: 518},
		{38: 172},
		{40: 502, 501, 51: 519, 86: 522, 259: 521, 356: 520},
		{472, 472, 472, 472, 472, 10: 472, 472, 13: 472, 472, 472, 472, 20: 472, 34: 472, 472, 42: 472, 472, 472, 48: 472, 100: 472, 102: 472, 104: 472, 108: 472, 113: 472, 115: 472, 472, 472, 124: 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 136: 472, 472, 472, 472, 141: 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 161: 472, 168: 472, 170: 472},
		// 35
		{526, 3: 527},
		{171, 3: 171},
		{168, 3: 168, 168: 524, 170: 525, 339: 523},
		{169, 3: 169},
		{167, 3: 167},
		// 40
		{166, 3: 166},
		{165, 165, 165, 45: 165, 165, 49: 165, 165, 261: 529},
		{40: 502, 501, 51: 519, 86: 522, 259: 528},
		{170, 3: 170},
		{174, 174, 174, 45: 174, 174, 49: 174, 174},
		// 45
		{14: 469, 469, 17: 469, 22: 469, 469, 469, 469, 469, 469, 469, 469, 469, 469, 469, 42: 469, 55: 469, 469, 469, 469, 469, 106: 624},
		{14: 552, 551, 17: 548, 22: 555, 556, 541, 536, 539, 537, 540, 534, 535, 560, 546, 42: 545, 55: 557, 559, 549, 558, 550, 110: 532, 538, 120: 544, 533, 257: 543, 547, 276: 554, 553, 354: 542},
		{315, 315, 315, 10: 315, 315, 14: 315, 315, 315, 315, 20: 315, 22: 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 34: 315, 315, 39: 315, 42: 315, 45: 315, 315, 49: 315, 315, 55: 315, 315, 315, 315, 315},
		{198, 198, 198, 14: 198, 198, 17: 198, 22: 198, 198, 198, 536, 198, 537, 198, 534, 535, 560, 198, 42: 198, 45: 198, 198, 49: 198, 198, 55: 198, 198, 198, 198, 198, 110: 623, 538},
		{47: 622},
		// 50
		{47: 621},
		{47: 620},
		{47: 619},
		{309, 309, 309, 10: 309, 309, 14: 309, 309, 309, 309, 20: 309, 22: 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 34: 309, 309, 39: 309, 42: 309, 45: 309, 309, 49: 309, 309, 55: 309, 309, 309, 309, 309},
		{308, 308, 308, 10: 308, 308, 14: 308, 308, 308, 308, 20: 308, 22: 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 34: 308, 308, 39: 308, 42: 308, 45: 308, 308, 49: 308, 308, 55: 308, 308, 308, 308, 308},
		// 55
		{307, 307, 307, 10: 307, 307, 14: 307, 307, 307, 307, 20: 307, 22: 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 34: 307, 307, 39: 307, 42: 307, 45: 307, 307, 49: 307, 307, 55: 307, 307, 307, 307, 307},
		{306, 306, 306, 10: 306, 306, 14: 306, 306, 306, 306, 20: 306, 22: 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 34: 306, 306, 39: 306, 42: 306, 45: 306, 306, 49: 306, 306, 55: 306, 306, 306, 306, 306},
		{201, 201, 201, 14: 552, 551, 17: 548, 22: 555, 556, 541, 536, 539, 537, 540, 534, 535, 560, 546, 42: 545, 45: 201, 201, 49: 201, 201, 55: 557, 559, 549, 558, 550, 110: 532, 538, 120: 544, 533, 257: 618, 547, 276: 554, 553},
		{200, 200, 200, 14: 200, 200, 17: 200, 22: 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 42: 200, 45: 200, 200, 49: 200, 200, 55: 200, 200, 200, 200, 200},
		{197, 197, 197, 14: 197, 197, 17: 197, 22: 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 42: 197, 45: 197, 197, 49: 197, 197, 55: 197, 197, 197, 197, 197},
		// 60
		{196, 196, 196, 14: 196, 196, 17: 196, 22: 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 42: 196, 45: 196, 196, 49: 196, 196, 55: 196, 196, 196, 196, 196},
		{21: 617, 40: 502, 501, 51: 616},
		{193, 193, 193, 14: 193, 193, 17: 193, 22: 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 42: 193, 45: 193, 193, 49: 193, 193, 55: 193, 193, 193, 193, 193},
		{192, 192, 192, 14: 192, 192, 17: 192, 22: 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 42: 192, 45: 192, 192, 49: 192, 192, 55: 192, 192, 192, 192, 192},
		{191, 191, 191, 14: 191, 191, 17: 191, 22: 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 42: 191, 45: 191, 191, 49: 191, 191, 55: 191, 191, 191, 191, 191},
		// 65
		{190, 190, 190, 14: 190, 190, 17: 190, 22: 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 42: 190, 45: 190, 190, 49: 190, 190, 55: 190, 190, 190, 190, 190},
		{189, 189, 189, 14: 189, 189, 17: 189, 22: 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 42: 189, 45: 189, 189, 49: 189, 189, 55: 189, 189, 189, 189, 189},
		{188, 188, 188, 14: 188, 188, 17: 188, 22: 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 42: 188, 45: 188, 188, 49: 188, 188, 55: 188, 188, 188, 188, 188},
		{187, 187, 187, 14: 187, 187, 17: 187, 22: 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 42: 187, 45: 187, 187, 49: 187, 187, 55: 187, 187, 187, 187, 187},
		{186, 186, 186, 14: 186, 186, 17: 186, 22: 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 42: 186, 45: 186, 186, 49: 186, 186, 55: 186, 186, 186, 186, 186},
		// 70
		{185, 185, 185, 14: 185, 185, 17: 185, 22: 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 42: 185, 45: 185, 185, 612, 49: 185, 185, 55: 185, 185, 185, 185, 185, 205: 613},
		{180, 180, 180, 14: 180, 180, 17: 180, 22: 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 42: 180, 45: 180, 180, 49: 180, 180, 55: 180, 180, 180, 180, 180},
		{301: 611, 315: 610},
		{177, 177, 177, 14: 177, 177, 17: 177, 22: 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 42: 177, 45: 177, 177, 609, 49: 177, 177, 55: 177, 177, 177, 177, 177},
		{175, 175, 175, 14: 175, 175, 17: 175, 22: 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 42: 175, 45: 175, 175, 49: 175, 175, 55: 175, 175, 175, 175, 175},
		// 75
		{38: 561},
		{12: 576, 67: 573, 575, 574, 571, 570, 564, 567, 568, 566, 565, 572, 569, 281: 563, 393: 562},
		{607, 12: 576, 67: 573, 575, 574, 571, 570, 564, 567, 568, 566, 565, 572, 569, 281: 608},
		{45, 12: 45, 67: 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45},
		{47: 588, 182: 606},
		// 80
		{47: 588, 182: 605},
		{47: 604},
		{47: 602, 235: 603},
		{47: 588, 182: 601, 235: 600},
		{47: 599},
		// 85
		{47: 598},
		{304: 596},
		{33, 5: 587, 12: 33, 47: 588, 67: 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 182: 586},
		{21: 585, 186: 583, 319: 584},
		{21: 582, 159: 581, 186: 580},
		// 90
		{21: 579, 159: 578, 186: 577},
		{21, 12: 21, 67: 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21},
		{24, 12: 24, 67: 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24},
		{23, 12: 23, 67: 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23},
		{22, 12: 22, 67: 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22},
		// 95
		{27, 12: 27, 67: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27},
		{26, 12: 26, 67: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26},
		{25, 12: 25, 67: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25},
		{30, 12: 30, 67: 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30},
		{29, 12: 29, 67: 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29},
		// 100
		{28, 12: 28, 67: 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
		{32, 12: 32, 67: 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32},
		{31, 12: 31, 67: 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31},
		{19, 12: 19, 67: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 298: 595, 302: 592, 309: 590, 311: 591, 314: 594, 323: 593, 389: 589},
		{20, 12: 20, 67: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
		// 105
		{18, 12: 18, 67: 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18},
		{17, 12: 17, 67: 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17},
		{16, 12: 16, 67: 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
		{15, 12: 15, 67: 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
		{14, 12: 14, 67: 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
		// 110
		{13, 12: 13, 67: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13},
		{47: 597},
		{34, 12: 34, 67: 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34},
		{35, 12: 35, 67: 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35},
		{36, 12: 36, 67: 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36},
		// 115
		{38, 12: 38, 67: 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38},
		{37, 12: 37, 67: 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
		{40, 12: 40, 67: 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{39, 12: 39, 67: 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{41, 12: 41, 67: 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41},
		// 120
		{42, 12: 42, 67: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42},
		{43, 12: 43, 67: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43},
		{46, 46, 46, 10: 46, 46, 14: 46, 46, 46, 46, 20: 46, 22: 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 34: 46, 46, 39: 46, 42: 46, 45: 46, 46, 49: 46, 46, 55: 46, 46, 46, 46, 46},
		{44, 12: 44, 67: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
		{176, 176, 176, 14: 176, 176, 17: 176, 22: 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 42: 176, 45: 176, 176, 49: 176, 176, 55: 176, 176, 176, 176, 176},
		// 125
		{179, 179, 179, 14: 179, 179, 17: 179, 22: 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 42: 179, 45: 179, 179, 49: 179, 179, 55: 179, 179, 179, 179, 179},
		{178, 178, 178, 14: 178, 178, 17: 178, 22: 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 42: 178, 45: 178, 178, 49: 178, 178, 55: 178, 178, 178, 178, 178},
		{184, 184, 184, 14: 184, 184, 17: 184, 22: 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 42: 184, 45: 184, 184, 49: 184, 184, 55: 184, 184, 184, 184, 184},
		{183, 183, 183, 14: 183, 183, 17: 183, 22: 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 42: 183, 45: 183, 183, 49: 183, 183, 55: 183, 183, 183, 183, 183, 135: 615, 140: 614},
		{182, 182, 182, 14: 182, 182, 17: 182, 22: 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 42: 182, 45: 182, 182, 49: 182, 182, 55: 182, 182, 182, 182, 182},
		// 130
		{181, 181, 181, 14: 181, 181, 17: 181, 22: 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 42: 181, 45: 181, 181, 49: 181, 181, 55: 181, 181, 181, 181, 181},
		{195, 195, 195, 14: 195, 195, 17: 195, 22: 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 42: 195, 45: 195, 195, 49: 195, 195, 55: 195, 195, 195, 195, 195},
		{194, 194, 194, 14: 194, 194, 17: 194, 22: 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 42: 194, 45: 194, 194, 49: 194, 194, 55: 194, 194, 194, 194, 194},
		{199, 199, 199, 14: 199, 199, 17: 199, 22: 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 42: 199, 45: 199, 199, 49: 199, 199, 55: 199, 199, 199, 199, 199},
		{310, 310, 310, 10: 310, 310, 14: 310, 310, 310, 310, 20: 310, 22: 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 34: 310, 310, 39: 310, 42: 310, 45: 310, 310, 49: 310, 310, 55: 310, 310, 310, 310, 310},
		// 135
		{311, 311, 311, 10: 311, 311, 14: 311, 311, 311, 311, 20: 311, 22: 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 34: 311, 311, 39: 311, 42: 311, 45: 311, 311, 49: 311, 311, 55: 311, 311, 311, 311, 311},
		{312, 312, 312, 10: 312, 312, 14: 312, 312, 312, 312, 20: 312, 22: 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 34: 312, 312, 39: 312, 42: 312, 45: 312, 312, 49: 312, 312, 55: 312, 312, 312, 312, 312},
		{313, 313, 313, 10: 313, 313, 14: 313, 313, 313, 313, 20: 313, 22: 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 34: 313, 313, 39: 313, 42: 313, 45: 313, 313, 49: 313, 313, 55: 313, 313, 313, 313, 313},
		{314, 314, 314, 10: 314, 314, 14: 314, 314, 314, 314, 20: 314, 22: 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 34: 314, 314, 39: 314, 42: 314, 45: 314, 314, 49: 314, 314, 55: 314, 314, 314, 314, 314},
		{40: 502, 501, 51: 625},
		// 140
		{14: 468, 468, 17: 468, 22: 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 42: 468, 55: 468, 468, 468, 468, 468},
		{160, 160, 160, 45: 630, 631, 340: 629},
		{162, 162, 162, 45: 162, 162},
		{161, 161, 161, 45: 161, 161},
		{212, 212, 212},
		// 145
		{217: 633},
		{217: 632},
		{158, 158, 158},
		{159, 159, 159},
		{40: 502, 501, 51: 635},
		// 150
		{475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 13: 475, 16: 475, 20: 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 38: 475, 475, 475, 475, 43: 475, 475, 48: 475, 52: 475, 475, 475, 60: 475, 475, 475, 475, 475, 475, 475, 81: 475, 475, 475, 475, 475, 101: 475, 160: 475},
		{40: 502, 501, 51: 509, 122: 646},
		{233: 645},
		{233: 644},
		{40: 357, 357},
		// 155
		{40: 356, 356},
		{40: 355, 355, 210: 643},
		{40: 354, 354},
		{40: 353, 353},
		{40: 358, 358},
		// 160
		{40: 359, 359},
		{1: 352, 352, 10: 352, 352, 16: 352, 21: 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 38: 352, 352, 81: 352, 352, 352, 352, 352, 160: 648, 388: 647},
		{1: 218, 218, 10: 218, 218, 16: 218, 21: 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 38: 658, 218, 81: 218, 218, 218, 218, 218, 383: 656, 385: 657, 395: 655},
		{283: 649},
		{159: 653, 214: 651, 300: 652, 313: 650},
		// 165
		{1: 351, 351, 10: 351, 351, 16: 351, 21: 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 38: 351, 351, 81: 351, 351, 351, 351, 351},
		{1: 350, 350, 10: 350, 350, 16: 350, 21: 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 38: 350, 350, 81: 350, 350, 350, 350, 350},
		{214: 654},
		{1: 348, 348, 10: 348, 348, 16: 348, 21: 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 38: 348, 348, 81: 348, 348, 348, 348, 348},
		{1: 349, 349, 10: 349, 349, 16: 349, 21: 349, 349, 349, 349, 349, 349, 349, 349, 349, 349, 349, 349, 38: 349, 349, 81: 349, 349, 349, 349, 349},
		// 170
		{1: 6, 6, 10: 1179, 6, 268: 1178, 369: 1177},
		{1: 345, 345, 10: 345, 345},
		{1: 343, 343, 10: 343, 343, 16: 343, 21: 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 39: 343, 81: 343, 343, 343, 343, 343, 353: 997},
		{6: 86, 86, 9: 665, 40: 502, 501, 51: 519, 86: 660, 134: 86, 153: 666, 172: 663, 181: 659, 275: 664, 278: 662, 384: 661},
		{454, 3: 454},
		// 175
		{108: 741, 113: 758, 116: 760, 750, 124: 757, 748, 747, 754, 755, 751, 765, 764, 769, 746, 136: 767, 766, 753, 749, 141: 762, 743, 756, 745, 763, 744, 770, 768, 752, 759, 761, 742, 189: 734, 735, 193: 732, 738, 198: 739, 737, 736, 733, 203: 740},
		{729, 3: 730},
		{216, 3: 216},
		{214, 3: 214},
		{213, 3: 213},
		// 180
		{40: 502, 501, 51: 728},
		{6: 667, 668, 134: 669},
		{38: 724},
		{187: 719},
		{187: 670},
		// 185
		{38: 671},
		{40: 502, 501, 51: 519, 86: 672, 109: 673},
		{474, 3: 474},
		{675, 3: 674},
		{40: 502, 501, 51: 519, 86: 718},
		// 190
		{8: 676, 202: 677},
		{40: 502, 501, 51: 509, 122: 707},
		{72, 3: 72, 681, 52: 680, 687, 686, 60: 691, 692, 682, 684, 689, 683, 688, 118: 679, 690, 123: 685, 154: 678, 693},
		{71, 3: 71, 681, 71, 71, 71, 71, 71, 52: 680, 687, 686, 60: 691, 692, 682, 684, 689, 683, 688, 118: 706, 690, 123: 685},
		{70, 3: 70, 70, 70, 70, 70, 70, 70, 52: 70, 70, 70, 60: 70, 70, 70, 70, 70, 70, 70},
		// 195
		{68, 3: 68, 68, 68, 68, 68, 68, 68, 52: 68, 68, 68, 60: 68, 68, 68, 68, 68, 68, 68},
		{52: 705},
		{45: 703, 704},
		{64, 3: 64, 64, 64, 64, 64, 64, 64, 52: 64, 64, 64, 60: 64, 64, 64, 64, 64, 64, 64},
		{63, 3: 63, 63, 63, 63, 63, 63, 63, 52: 63, 63, 63, 60: 63, 63, 63, 63, 63, 63, 63},
		// 200
		{62, 3: 62, 62, 62, 62, 62, 62, 62, 52: 62, 62, 62, 60: 62, 62, 62, 62, 62, 62, 62},
		{61, 3: 61, 61, 61, 61, 61, 61, 61, 52: 61, 61, 61, 60: 61, 61, 61, 61, 61, 61, 61},
		{60, 3: 60, 60, 60, 60, 60, 60, 60, 52: 60, 60, 60, 60: 60, 60, 60, 60, 60, 60, 60},
		{59, 3: 59, 59, 59, 59, 59, 59, 59, 52: 59, 59, 59, 60: 59, 59, 59, 59, 59, 59, 59},
		{58, 3: 58, 58, 58, 58, 58, 58, 58, 52: 58, 58, 58, 60: 58, 58, 58, 58, 58, 58, 58},
		// 205
		{57, 3: 57, 57, 57, 57, 57, 57, 57, 52: 57, 57, 57, 60: 57, 57, 57, 57, 57, 57, 57},
		{112: 696},
		{307: 694},
		{47, 3: 47},
		{40: 502, 501, 51: 509, 122: 695},
		// 210
		{53, 3: 53, 53, 53, 53, 53, 53, 53, 52: 53, 53, 53, 60: 53, 53, 53, 53, 53, 53, 53},
		{165, 3: 165, 165, 165, 165, 165, 165, 165, 38: 698, 40: 502, 501, 51: 504, 165, 165, 165, 60: 165, 165, 165, 165, 165, 165, 165, 260: 697, 699},
		{56, 3: 56, 56, 56, 56, 56, 56, 56, 52: 56, 56, 56, 60: 56, 56, 56, 56, 56, 56, 56},
		{183: 700, 192: 701},
		{54, 3: 54, 54, 54, 54, 54, 54, 54, 52: 54, 54, 54, 60: 54, 54, 54, 54, 54, 54, 54},
		// 215
		{6: 497, 112: 211, 209: 498, 223: 499, 262: 496},
		{702},
		{55, 3: 55, 55, 55, 55, 55, 55, 55, 52: 55, 55, 55, 60: 55, 55, 55, 55, 55, 55, 55},
		{66, 3: 66, 66, 66, 66, 66, 66, 66, 52: 66, 66, 66, 60: 66, 66, 66, 66, 66, 66, 66},
		{65, 3: 65, 65, 65, 65, 65, 65, 65, 52: 65, 65, 65, 60: 65, 65, 65, 65, 65, 65, 65},
		// 220
		{67, 3: 67, 67, 67, 67, 67, 67, 67, 52: 67, 67, 67, 60: 67, 67, 67, 67, 67, 67, 67},
		{69, 3: 69, 69, 69, 69, 69, 69, 69, 52: 69, 69, 69, 60: 69, 69, 69, 69, 69, 69, 69},
		{77, 3: 77, 77, 77, 77, 77, 77, 77, 38: 709, 52: 77, 77, 77, 60: 77, 77, 77, 77, 77, 77, 77, 82: 77, 337: 708},
		{75, 3: 75, 75, 75, 75, 75, 75, 75, 52: 75, 75, 75, 60: 75, 75, 75, 75, 75, 75, 75, 82: 713, 382: 712},
		{40: 502, 501, 51: 519, 86: 672, 109: 710},
		// 225
		{711, 3: 674},
		{76, 3: 76, 76, 76, 76, 76, 76, 76, 52: 76, 76, 76, 60: 76, 76, 76, 76, 76, 76, 76, 82: 76},
		{78, 3: 78, 78, 78, 78, 78, 78, 78, 52: 78, 78, 78, 60: 78, 78, 78, 78, 78, 78, 78},
		{184: 714},
		{43: 716, 102: 715},
		// 230
		{74, 3: 74, 74, 74, 74, 74, 74, 74, 52: 74, 74, 74, 60: 74, 74, 74, 74, 74, 74, 74},
		{5: 717},
		{73, 3: 73, 73, 73, 73, 73, 73, 73, 52: 73, 73, 73, 60: 73, 73, 73, 73, 73, 73, 73},
		{473, 3: 473},
		{38: 720},
		// 235
		{40: 502, 501, 51: 519, 86: 672, 109: 721},
		{722, 3: 674},
		{72, 3: 72, 681, 52: 680, 687, 686, 60: 691, 692, 682, 684, 689, 683, 688, 118: 679, 690, 123: 685, 154: 678, 723},
		{48, 3: 48},
		{40: 502, 501, 51: 519, 86: 672, 109: 725},
		// 240
		{726, 3: 674},
		{72, 3: 72, 681, 52: 680, 687, 686, 60: 691, 692, 682, 684, 689, 683, 688, 118: 679, 690, 123: 685, 154: 678, 727},
		{49, 3: 49},
		{4: 85, 85, 85, 85, 85, 134: 85},
		{1: 217, 217, 10: 217, 217, 16: 217, 21: 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 39: 217, 81: 217, 217, 217, 217, 217},
		// 245
		{6: 86, 86, 9: 665, 40: 502, 501, 51: 519, 86: 660, 134: 86, 153: 666, 172: 663, 181: 659, 275: 664, 278: 731},
		{215, 3: 215},
		{452, 3: 452, 452, 452, 452, 452, 452, 452, 12: 452, 14: 452, 452, 17: 452, 452, 452, 21: 452, 36: 452, 895, 191: 894, 242: 893},
		{157, 3: 157, 157, 157, 157, 157, 157, 157, 12: 157, 157, 157, 157, 17: 157, 157, 157, 21: 157, 33: 157, 36: 157, 157},
		{156, 3: 156, 156, 156, 156, 156, 156, 156, 12: 156, 156, 156, 156, 17: 156, 156, 156, 21: 156, 33: 156, 36: 156, 156},
		// 250
		{153, 3: 153, 153, 153, 153, 153, 153, 153, 12: 153, 153, 153, 153, 17: 153, 153, 153, 21: 153, 33: 153, 36: 153, 153},
		{152, 3: 152, 152, 152, 152, 152, 152, 152, 12: 152, 152, 152, 152, 17: 152, 152, 152, 21: 152, 33: 152, 36: 152, 152},
		{151, 3: 151, 151, 151, 151, 151, 151, 151, 12: 151, 151, 151, 151, 17: 151, 151, 151, 21: 151, 33: 151, 36: 151, 151},
		{150, 3: 150, 150, 150, 150, 150, 150, 150, 12: 150, 150, 150, 150, 17: 150, 150, 150, 21: 150, 33: 150, 36: 150, 150},
		{149, 3: 149, 149, 149, 149, 149, 149, 149, 12: 149, 149, 149, 149, 17: 149, 149, 149, 21: 149, 33: 149, 36: 149, 149},
		// 255
		{148, 3: 148, 148, 148, 148, 148, 148, 148, 12: 148, 148, 148, 148, 17: 148, 148, 148, 21: 148, 33: 148, 36: 148, 148},
		{147, 3: 147, 147, 147, 147, 147, 147, 147, 12: 147, 147, 147, 147, 17: 147, 147, 147, 21: 147, 33: 147, 36: 147, 147, 882, 162: 883},
		{38: 875},
		{140, 3: 140, 140, 140, 140, 140, 140, 140, 12: 140, 140, 140, 140, 17: 140, 140, 140, 21: 140, 33: 140, 36: 140, 140, 868, 162: 869},
		{38: 865},
		// 260
		{137, 3: 137, 137, 137, 137, 137, 137, 137, 12: 137, 137, 137, 137, 17: 137, 137, 137, 21: 137, 33: 137, 36: 137, 137, 859},
		{134, 3: 134, 134, 134, 134, 134, 134, 134, 12: 134, 134, 134, 134, 17: 134, 134, 134, 21: 134, 33: 134, 36: 134, 134, 856},
		{132, 3: 132, 132, 132, 132, 132, 132, 132, 12: 132, 132, 132, 132, 17: 132, 132, 132, 21: 132, 33: 132, 36: 132, 132},
		{131, 3: 131, 131, 131, 131, 131, 131, 131, 12: 131, 131, 131, 131, 17: 131, 131, 131, 21: 131, 33: 131, 36: 131, 131},
		{130, 3: 130, 130, 130, 130, 130, 130, 130, 12: 130, 130, 130, 130, 17: 130, 130, 130, 21: 130, 33: 130, 36: 130, 130, 117: 855},
		// 265
		{38: 852},
		{127, 3: 127, 127, 127, 127, 127, 127, 127, 12: 127, 127, 127, 127, 17: 127, 127, 127, 21: 127, 33: 127, 36: 127, 127},
		{126, 3: 126, 126, 126, 126, 126, 126, 126, 12: 126, 126, 126, 126, 17: 126, 126, 126, 21: 126, 33: 126, 36: 126, 126, 843},
		{293: 822, 325: 821},
		{116, 3: 116, 116, 116, 116, 116, 116, 116, 12: 116, 116, 116, 116, 17: 116, 116, 116, 21: 116, 33: 116, 36: 116, 116},
		// 270
		{115, 3: 115, 115, 115, 115, 115, 115, 115, 12: 115, 115, 115, 115, 17: 115, 115, 115, 21: 115, 33: 115, 36: 115, 115},
		{114, 3: 114, 114, 114, 114, 114, 114, 114, 12: 114, 114, 114, 114, 17: 114, 114, 114, 21: 114, 33: 114, 36: 114, 114},
		{113, 3: 113, 113, 113, 113, 113, 113, 113, 12: 113, 113, 113, 113, 17: 113, 113, 113, 21: 113, 33: 113, 36: 113, 113},
		{112, 3: 112, 112, 112, 112, 112, 112, 112, 12: 112, 112, 112, 112, 17: 112, 112, 112, 21: 112, 33: 112, 36: 112, 112},
		{111, 3: 111, 111, 111, 111, 111, 111, 111, 12: 111, 111, 111, 111, 17: 111, 111, 111, 21: 111, 33: 111, 36: 111, 111, 818},
		// 275
		{38: 811, 162: 812},
		{38: 808},
		{108: 793, 116: 792},
		{100, 3: 100, 100, 100, 100, 100, 100, 100, 12: 100, 100, 100, 100, 17: 100, 100, 100, 21: 100, 33: 100, 36: 100, 100, 786},
		{97, 3: 97, 97, 97, 97, 97, 97, 97, 12: 97, 97, 97, 97, 17: 97, 97, 97, 21: 97, 33: 97, 36: 97, 97, 780},
		// 280
		{94, 3: 94, 94, 94, 94, 94, 94, 94, 12: 94, 94, 94, 94, 17: 94, 94, 94, 21: 94, 33: 94, 36: 94, 94, 772},
		{91, 3: 91, 91, 91, 91, 91, 91, 91, 12: 91, 91, 91, 91, 17: 91, 91, 91, 21: 91, 33: 91, 36: 91, 91},
		{90, 3: 90, 90, 90, 90, 90, 90, 90, 12: 90, 90, 90, 90, 17: 90, 90, 90, 21: 90, 33: 90, 36: 90, 90},
		{89, 3: 89, 89, 89, 89, 89, 89, 89, 12: 89, 89, 89, 89, 17: 89, 89, 89, 21: 89, 33: 89, 36: 89, 89},
		{316: 771},
		// 285
		{87, 3: 87, 87, 87, 87, 87, 87, 87, 12: 87, 87, 87, 87, 17: 87, 87, 87, 21: 87, 33: 87, 36: 87, 87},
		{88, 3: 88, 88, 88, 88, 88, 88, 88, 12: 88, 88, 88, 88, 17: 88, 88, 88, 21: 88, 33: 88, 36: 88, 88},
		{47: 773, 157: 774, 164: 775},
		{155, 3: 155, 106: 155},
		{154, 3: 154, 106: 154},
		// 290
		{776, 106: 777},
		{93, 3: 93, 93, 93, 93, 93, 93, 93, 12: 93, 93, 93, 93, 17: 93, 93, 93, 21: 93, 33: 93, 36: 93, 93},
		{47: 778},
		{779},
		{92, 3: 92, 92, 92, 92, 92, 92, 92, 12: 92, 92, 92, 92, 17: 92, 92, 92, 21: 92, 33: 92, 36: 92, 92},
		// 295
		{47: 773, 157: 774, 164: 781},
		{782, 106: 783},
		{96, 3: 96, 96, 96, 96, 96, 96, 96, 12: 96, 96, 96, 96, 17: 96, 96, 96, 21: 96, 33: 96, 36: 96, 96},
		{47: 784},
		{785},
		// 300
		{95, 3: 95, 95, 95, 95, 95, 95, 95, 12: 95, 95, 95, 95, 17: 95, 95, 95, 21: 95, 33: 95, 36: 95, 95},
		{47: 773, 157: 774, 164: 787},
		{788, 106: 789},
		{99, 3: 99, 99, 99, 99, 99, 99, 99, 12: 99, 99, 99, 99, 17: 99, 99, 99, 21: 99, 33: 99, 36: 99, 99},
		{47: 790},
		// 305
		{791},
		{98, 3: 98, 98, 98, 98, 98, 98, 98, 12: 98, 98, 98, 98, 17: 98, 98, 98, 21: 98, 33: 98, 36: 98, 98},
		{38: 801, 162: 802},
		{38: 794, 162: 795},
		{47: 799},
		// 310
		{38: 796},
		{47: 797},
		{798},
		{101, 3: 101, 101, 101, 101, 101, 101, 101, 12: 101, 101, 101, 101, 17: 101, 101, 101, 21: 101, 33: 101, 36: 101, 101},
		{800},
		// 315
		{102, 3: 102, 102, 102, 102, 102, 102, 102, 12: 102, 102, 102, 102, 17: 102, 102, 102, 21: 102, 33: 102, 36: 102, 102},
		{47: 806},
		{38: 803},
		{47: 804},
		{805},
		// 320
		{103, 3: 103, 103, 103, 103, 103, 103, 103, 12: 103, 103, 103, 103, 17: 103, 103, 103, 21: 103, 33: 103, 36: 103, 103},
		{807},
		{104, 3: 104, 104, 104, 104, 104, 104, 104, 12: 104, 104, 104, 104, 17: 104, 104, 104, 21: 104, 33: 104, 36: 104, 104},
		{47: 809},
		{810},
		// 325
		{105, 3: 105, 105, 105, 105, 105, 105, 105, 12: 105, 105, 105, 105, 17: 105, 105, 105, 21: 105, 33: 105, 36: 105, 105},
		{47: 816},
		{38: 813},
		{47: 814},
		{815},
		// 330
		{108, 3: 108, 108, 108, 108, 108, 108, 108, 12: 108, 108, 108, 108, 17: 108, 108, 108, 21: 108, 33: 108, 36: 108, 108},
		{817},
		{109, 3: 109, 109, 109, 109, 109, 109, 109, 12: 109, 109, 109, 109, 17: 109, 109, 109, 21: 109, 33: 109, 36: 109, 109},
		{47: 819},
		{820},
		// 335
		{110, 3: 110, 110, 110, 110, 110, 110, 110, 12: 110, 110, 110, 110, 17: 110, 110, 110, 21: 110, 33: 110, 36: 110, 110},
		{38: 837, 115: 836},
		{38: 824, 115: 823},
		{230: 832},
		{47: 825},
		// 340
		{826},
		{115: 827},
		{230: 828},
		{119, 3: 119, 119, 119, 119, 119, 119, 119, 12: 119, 119, 119, 119, 17: 119, 119, 119, 21: 119, 33: 119, 36: 119, 119, 829},
		{47: 830},
		// 345
		{831},
		{118, 3: 118, 118, 118, 118, 118, 118, 118, 12: 118, 118, 118, 118, 17: 118, 118, 118, 21: 118, 33: 118, 36: 118, 118},
		{120, 3: 120, 120, 120, 120, 120, 120, 120, 12: 120, 120, 120, 120, 17: 120, 120, 120, 21: 120, 33: 120, 36: 120, 120, 833},
		{47: 834},
		{835},
		// 350
		{117, 3: 117, 117, 117, 117, 117, 117, 117, 12: 117, 117, 117, 117, 17: 117, 117, 117, 21: 117, 33: 117, 36: 117, 117},
		{222: 842},
		{47: 838},
		{839},
		{115: 840},
		// 355
		{222: 841},
		{121, 3: 121, 121, 121, 121, 121, 121, 121, 12: 121, 121, 121, 121, 17: 121, 121, 121, 21: 121, 33: 121, 36: 121, 121},
		{122, 3: 122, 122, 122, 122, 122, 122, 122, 12: 122, 122, 122, 122, 17: 122, 122, 122, 21: 122, 33: 122, 36: 122, 122},
		{47: 844},
		{845},
		// 360
		{125, 3: 125, 125, 125, 125, 125, 125, 125, 12: 125, 125, 125, 125, 17: 125, 846, 125, 21: 125, 33: 125, 36: 125, 125},
		{234: 847, 310: 848},
		{238: 851},
		{234: 849},
		{238: 850},
		// 365
		{123, 3: 123, 123, 123, 123, 123, 123, 123, 12: 123, 123, 123, 123, 17: 123, 123, 123, 21: 123, 33: 123, 36: 123, 123},
		{124, 3: 124, 124, 124, 124, 124, 124, 124, 12: 124, 124, 124, 124, 17: 124, 124, 124, 21: 124, 33: 124, 36: 124, 124},
		{47: 853},
		{854},
		{128, 3: 128, 128, 128, 128, 128, 128, 128, 12: 128, 128, 128, 128, 17: 128, 128, 128, 21: 128, 33: 128, 36: 128, 128},
		// 370
		{129, 3: 129, 129, 129, 129, 129, 129, 129, 12: 129, 129, 129, 129, 17: 129, 129, 129, 21: 129, 33: 129, 36: 129, 129},
		{47: 773, 157: 774, 164: 857},
		{858},
		{133, 3: 133, 133, 133, 133, 133, 133, 133, 12: 133, 133, 133, 133, 17: 133, 133, 133, 21: 133, 33: 133, 36: 133, 133},
		{47: 773, 157: 774, 164: 860},
		// 375
		{861, 3: 862},
		{136, 3: 136, 136, 136, 136, 136, 136, 136, 12: 136, 136, 136, 136, 17: 136, 136, 136, 21: 136, 33: 136, 36: 136, 136},
		{47: 863},
		{864},
		{135, 3: 135, 135, 135, 135, 135, 135, 135, 12: 135, 135, 135, 135, 17: 135, 135, 135, 21: 135, 33: 135, 36: 135, 135},
		// 380
		{47: 866},
		{867},
		{138, 3: 138, 138, 138, 138, 138, 138, 138, 12: 138, 138, 138, 138, 17: 138, 138, 138, 21: 138, 33: 138, 36: 138, 138},
		{47: 873},
		{38: 870},
		// 385
		{47: 871},
		{872},
		{106, 3: 106, 106, 106, 106, 106, 106, 106, 12: 106, 106, 106, 106, 17: 106, 106, 106, 21: 106, 33: 106, 36: 106, 106},
		{874},
		{139, 3: 139, 139, 139, 139, 139, 139, 139, 12: 139, 139, 139, 139, 17: 139, 139, 139, 21: 139, 33: 139, 36: 139, 139},
		// 390
		{47: 876},
		{877, 108: 879, 211: 878},
		{143, 3: 143, 143, 143, 143, 143, 143, 143, 12: 143, 143, 143, 143, 17: 143, 143, 143, 21: 143, 33: 143, 36: 143, 143},
		{881},
		{880},
		// 395
		{141, 3: 141, 141, 141, 141, 141, 141, 141, 12: 141, 141, 141, 141, 17: 141, 141, 141, 21: 141, 33: 141, 36: 141, 141},
		{142, 3: 142, 142, 142, 142, 142, 142, 142, 12: 142, 142, 142, 142, 17: 142, 142, 142, 21: 142, 33: 142, 36: 142, 142},
		{47: 887},
		{38: 884},
		{47: 885},
		// 400
		{886},
		{107, 3: 107, 107, 107, 107, 107, 107, 107, 12: 107, 107, 107, 107, 17: 107, 107, 107, 21: 107, 33: 107, 36: 107, 107},
		{888, 108: 890, 211: 889},
		{146, 3: 146, 146, 146, 146, 146, 146, 146, 12: 146, 146, 146, 146, 17: 146, 146, 146, 21: 146, 33: 146, 36: 146, 146},
		{892},
		// 405
		{891},
		{144, 3: 144, 144, 144, 144, 144, 144, 144, 12: 144, 144, 144, 144, 17: 144, 144, 144, 21: 144, 33: 144, 36: 144, 144},
		{145, 3: 145, 145, 145, 145, 145, 145, 145, 12: 145, 145, 145, 145, 17: 145, 145, 145, 21: 145, 33: 145, 36: 145, 145},
		{449, 3: 449, 449, 449, 449, 449, 449, 449, 12: 449, 14: 449, 449, 17: 898, 449, 449, 21: 449, 36: 449, 390: 897},
		{451, 3: 451, 451, 451, 451, 451, 451, 451, 12: 451, 451, 451, 451, 17: 451, 451, 451, 21: 451, 33: 451, 36: 451},
		// 410
		{40: 502, 501, 51: 896},
		{450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 21: 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 36: 450, 39: 450, 81: 450, 450, 450, 450, 450},
		{447, 3: 447, 447, 447, 447, 447, 447, 447, 12: 447, 14: 901, 902, 18: 447, 447, 21: 447, 36: 447, 197: 900, 368: 899},
		{448, 3: 448, 448, 448, 448, 448, 448, 448, 12: 448, 14: 448, 448, 18: 448, 448, 21: 448, 36: 448},
		{443, 3: 443, 443, 443, 443, 443, 443, 443, 12: 443, 18: 443, 443, 21: 906, 36: 907, 245: 904, 903, 254: 905},
		// 415
		{446, 3: 446, 446, 446, 446, 446, 446, 446, 12: 446, 18: 446, 446, 21: 446, 36: 446},
		{445, 3: 445, 445, 445, 445, 445, 445, 445, 12: 445, 18: 445, 445, 21: 445, 36: 445},
		{444, 3: 444, 444, 444, 444, 444, 444, 444, 12: 444, 18: 444, 444, 21: 444, 36: 444},
		{415, 3: 415, 415, 415, 415, 415, 415, 415, 12: 958, 18: 415, 415, 251: 957},
		{442, 3: 442, 442, 442, 442, 442, 442, 442, 12: 442, 18: 442, 442, 33: 442},
		// 420
		{441, 3: 441, 441, 441, 441, 441, 441, 441, 12: 441, 18: 441, 441, 33: 441},
		{20: 952, 40: 954, 47: 953, 252: 951},
		{167: 908, 169: 910, 284: 909},
		{158: 949},
		{167: 946},
		// 425
		{21: 911},
		{82: 913, 167: 912},
		{158: 944},
		{5: 914},
		{167: 915},
		// 430
		{158: 916},
		{433, 3: 433, 433, 433, 433, 433, 433, 433, 12: 433, 18: 433, 433, 33: 433, 38: 918, 173: 917},
		{434, 3: 434, 434, 434, 434, 434, 434, 434, 12: 434, 18: 434, 434, 33: 434},
		{431, 87: 929, 927, 90: 922, 923, 925, 930, 928, 924, 926, 932, 931, 921, 255: 920, 352: 919},
		{942, 87: 929, 927, 90: 922, 923, 925, 930, 928, 924, 926, 932, 931, 921, 255: 943},
		// 435
		{430, 87: 430, 430, 90: 430, 430, 430, 430, 430, 430, 430, 430, 430, 430},
		{18: 938},
		{169: 936},
		{47: 935},
		{424, 87: 424, 424, 90: 424, 424, 424, 424, 424, 424, 424, 424, 424, 424},
		// 440
		{47: 934},
		{422, 87: 422, 422, 90: 422, 422, 422, 422, 422, 422, 422, 422, 422, 422},
		{421, 87: 421, 421, 90: 421, 421, 421, 421, 421, 421, 421, 421, 421, 421},
		{420, 87: 420, 420, 90: 420, 420, 420, 420, 420, 420, 420, 420, 420, 420},
		{47: 933},
		// 445
		{418, 87: 418, 418, 90: 418, 418, 418, 418, 418, 418, 418, 418, 418, 418},
		{417, 87: 417, 417, 90: 417, 417, 417, 417, 417, 417, 417, 417, 417, 417},
		{416, 87: 416, 416, 90: 416, 416, 416, 416, 416, 416, 416, 416, 416, 416},
		{419, 87: 419, 419, 90: 419, 419, 419, 419, 419, 419, 419, 419, 419, 419},
		{423, 87: 423, 423, 90: 423, 423, 423, 423, 423, 423, 423, 423, 423, 423},
		// 450
		{425, 87: 425, 425, 90: 425, 425, 425, 425, 425, 425, 425, 425, 425, 425},
		{47: 937},
		{426, 87: 426, 426, 90: 426, 426, 426, 426, 426, 426, 426, 426, 426, 426},
		{47: 939, 220: 940},
		{428, 87: 428, 428, 90: 428, 428, 428, 428, 428, 428, 428, 428, 428, 428},
		// 455
		{324: 941},
		{427, 87: 427, 427, 90: 427, 427, 427, 427, 427, 427, 427, 427, 427, 427},
		{432, 3: 432, 432, 432, 432, 432, 432, 432, 12: 432, 18: 432, 432, 33: 432},
		{429, 87: 429, 429, 90: 429, 429, 429, 429, 429, 429, 429, 429, 429, 429},
		{433, 3: 433, 433, 433, 433, 433, 433, 433, 12: 433, 18: 433, 433, 33: 433, 38: 918, 173: 945},
		// 460
		{435, 3: 435, 435, 435, 435, 435, 435, 435, 12: 435, 18: 435, 435, 33: 435},
		{158: 947},
		{433, 3: 433, 433, 433, 433, 433, 433, 433, 12: 433, 18: 433, 433, 33: 433, 38: 918, 173: 948},
		{437, 3: 437, 437, 437, 437, 437, 437, 437, 12: 437, 18: 437, 437, 33: 437},
		{433, 3: 433, 433, 433, 433, 433, 433, 433, 12: 433, 18: 433, 433, 33: 433, 38: 918, 173: 950},
		// 465
		{438, 3: 438, 438, 438, 438, 438, 438, 438, 12: 438, 18: 438, 438, 33: 438},
		{440, 3: 440, 440, 440, 440, 440, 440, 440, 12: 440, 18: 440, 440, 33: 440},
		{5: 955},
		{2, 3: 2, 2, 2, 2, 2, 2, 2, 12: 2, 18: 2, 2, 33: 2},
		{1, 3: 1, 1, 1, 1, 1, 1, 1, 12: 1, 18: 1, 1, 33: 1},
		// 470
		{40: 954, 47: 953, 252: 956},
		{439, 3: 439, 439, 439, 439, 439, 439, 439, 12: 439, 18: 439, 439, 33: 439},
		{403, 3: 403, 86, 86, 86, 86, 86, 665, 18: 979, 978, 153: 977, 178: 976, 263: 975, 335: 973, 359: 974},
		{412, 3: 412, 412, 412, 412, 412, 412, 412, 18: 412, 412, 412, 60: 961, 107: 412, 114: 412, 185: 412, 346: 960, 348: 959},
		{414, 3: 414, 414, 414, 414, 414, 414, 414, 18: 414, 414},
		// 475
		{410, 3: 410, 410, 410, 410, 410, 410, 410, 18: 410, 410, 410, 107: 410, 114: 410, 185: 964, 351: 963},
		{114: 962},
		{411, 3: 411, 411, 411, 411, 411, 411, 411, 18: 411, 411, 411, 107: 411, 114: 411, 185: 411},
		{408, 3: 408, 408, 408, 408, 408, 408, 408, 18: 408, 408, 408, 107: 408, 114: 968, 367: 967},
		{169: 965},
		// 480
		{40: 502, 501, 51: 966},
		{409, 3: 409, 409, 409, 409, 409, 409, 409, 18: 409, 409, 409, 107: 409, 114: 409},
		{406, 3: 406, 406, 406, 406, 406, 406, 406, 18: 406, 406, 971, 107: 970, 387: 969},
		{407, 3: 407, 407, 407, 407, 407, 407, 407, 18: 407, 407, 407, 107: 407},
		{413, 3: 413, 413, 413, 413, 413, 413, 413, 18: 413, 413},
		// 485
		{405, 3: 405, 405, 405, 405, 405, 405, 405, 18: 405, 405},
		{107: 972},
		{404, 3: 404, 404, 404, 404, 404, 404, 404, 18: 404, 404},
		{453, 3: 453},
		{402, 3: 402},
		// 490
		{401, 3: 401, 86, 86, 86, 86, 86, 665, 153: 994, 178: 993},
		{400, 3: 400, 400, 400, 400, 400, 400, 400},
		{4: 986, 985, 987, 988, 676, 202: 984, 264: 983},
		{308: 981},
		{113: 980},
		// 495
		{51, 3: 51},
		{40: 502, 501, 51: 509, 122: 982},
		{52, 3: 52},
		{72, 3: 72, 681, 72, 72, 72, 72, 72, 52: 680, 687, 686, 60: 691, 692, 682, 684, 689, 683, 688, 118: 679, 690, 123: 685, 154: 678, 992},
		{72, 3: 72, 681, 72, 72, 72, 72, 72, 52: 680, 687, 686, 60: 691, 692, 682, 684, 689, 683, 688, 118: 679, 690, 123: 685, 154: 678, 991},
		// 500
		{82, 3: 82, 82, 82, 82, 82, 82, 82, 52: 82, 82, 82, 60: 82, 82, 82, 82, 82, 82, 82},
		{5: 990},
		{80, 3: 80, 80, 80, 80, 80, 80, 80, 52: 80, 80, 80, 60: 80, 80, 80, 80, 80, 80, 80},
		{187: 989},
		{79, 3: 79, 79, 79, 79, 79, 79, 79, 52: 79, 79, 79, 60: 79, 79, 79, 79, 79, 79, 79},
		// 505
		{81, 3: 81, 81, 81, 81, 81, 81, 81, 52: 81, 81, 81, 60: 81, 81, 81, 81, 81, 81, 81},
		{83, 3: 83, 83, 83, 83, 83, 83, 83},
		{84, 3: 84, 84, 84, 84, 84, 84, 84},
		{399, 3: 399, 399, 399, 399, 399, 399, 399},
		{4: 986, 985, 987, 988, 676, 202: 995, 264: 983},
		// 510
		{72, 3: 72, 681, 72, 72, 72, 72, 72, 52: 680, 687, 686, 60: 691, 692, 682, 684, 689, 683, 688, 118: 679, 690, 123: 685, 154: 678, 996},
		{83, 3: 83, 83, 83, 83, 83, 83, 83},
		{1: 342, 342, 10: 342, 342, 16: 342, 21: 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 39: 342, 81: 342, 342, 342, 342, 342, 327: 998},
		{1: 341, 341, 10: 341, 341, 16: 341, 21: 1000, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 39: 341, 81: 341, 341, 341, 341, 341, 342: 999},
		{1: 338, 338, 10: 338, 338, 16: 338, 22: 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 39: 338, 81: 338, 1004, 338, 338, 338, 375: 1002, 1003},
		// 515
		{37: 895, 191: 1001},
		{1: 340, 340, 10: 340, 340, 16: 340, 22: 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 39: 340, 81: 340, 340, 340, 340, 340},
		{1: 332, 332, 10: 332, 332, 16: 327, 22: 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 39: 327, 81: 327, 83: 327, 1019, 1020, 344: 1018, 381: 1017},
		{1: 335, 335, 10: 335, 335, 16: 335, 22: 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 39: 335, 81: 335, 1011, 335, 335, 335, 377: 1010},
		{213: 1005},
		// 520
		{13: 1006, 225: 1007},
		{215: 1009},
		{215: 1008},
		{1: 336, 336, 10: 336, 336, 16: 336, 22: 336, 336, 336, 336, 336, 336, 336, 336, 336, 336, 336, 39: 336, 81: 336, 336, 336, 336, 336},
		{1: 337, 337, 10: 337, 337, 16: 337, 22: 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 39: 337, 81: 337, 337, 337, 337, 337},
		// 525
		{1: 339, 339, 10: 339, 339, 16: 339, 22: 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 39: 339, 81: 339, 83: 339, 339, 339},
		{213: 1012},
		{184: 1013, 225: 1014},
		{229: 1016},
		{229: 1015},
		// 530
		{1: 333, 333, 10: 333, 333, 16: 333, 22: 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 39: 333, 81: 333, 83: 333, 333, 333},
		{1: 334, 334, 10: 334, 334, 16: 334, 22: 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 39: 334, 81: 334, 83: 334, 334, 334},
		{1: 219, 219, 10: 219, 219, 397: 1176},
		{16: 1038, 22: 1036, 1039, 541, 536, 539, 537, 540, 534, 535, 560, 1033, 39: 1037, 81: 1040, 83: 1029, 110: 532, 538, 120: 1034, 1032, 156: 1035, 165: 1031, 204: 1028, 349: 1030},
		{40: 502, 501, 51: 1024},
		// 535
		{291: 1021},
		{45: 1023, 1022},
		{16: 326, 22: 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 39: 326, 81: 326, 83: 326},
		{16: 325, 22: 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 39: 325, 81: 325, 83: 325},
		{38: 1025},
		// 540
		{40: 502, 501, 51: 519, 86: 672, 109: 1026},
		{1027, 3: 674},
		{1: 328, 328, 10: 328, 328},
		{1: 305, 305, 10: 305, 305, 16: 1038, 20: 305, 22: 1036, 1039, 541, 536, 539, 537, 540, 534, 535, 560, 1033, 34: 305, 305, 39: 1037, 110: 532, 538, 120: 1034, 1032, 156: 1173, 165: 1079, 282: 1172},
		{81: 1074, 112: 1073, 305: 1072, 378: 1071},
		// 545
		{1: 329, 329, 10: 329, 329},
		{1: 322, 322, 10: 322, 322, 16: 322, 20: 322, 22: 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 34: 322, 322, 39: 322},
		{1: 320, 320, 10: 320, 320, 16: 320, 20: 320, 22: 320, 320, 320, 536, 320, 537, 320, 534, 535, 560, 320, 34: 320, 320, 39: 320, 110: 623, 538},
		{40: 502, 501, 43: 1069, 51: 1068},
		{1: 317, 317, 10: 317, 317, 16: 317, 20: 317, 22: 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 34: 317, 317, 39: 317},
		// 550
		{1: 316, 316, 10: 316, 316, 16: 316, 20: 316, 22: 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 34: 316, 316, 39: 316},
		{1: 303, 303, 10: 303, 303, 16: 303, 20: 303, 22: 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 34: 303, 303, 39: 303},
		{231: 1064},
		{231: 1046},
		{1: 298, 298, 10: 298, 298, 16: 298, 20: 298, 22: 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 34: 298, 298, 39: 298},
		// 555
		{224: 1041},
		{286: 1042},
		{1: 222, 222, 10: 222, 222, 228: 222, 253: 1043},
		{1: 221, 221, 10: 221, 221, 228: 1044},
		{220: 1045},
		// 560
		{1: 220, 220, 10: 220, 220},
		{22: 1047},
		{1: 297, 297, 10: 297, 297, 16: 297, 20: 297, 22: 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 34: 297, 297, 39: 297, 103: 1049, 333: 1048},
		{1: 290, 290, 10: 290, 290, 16: 290, 20: 1058, 22: 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 34: 290, 290, 39: 1057, 332: 1056},
		{226: 1050, 285: 1051},
		// 565
		{1: 296, 296, 10: 296, 296, 16: 296, 20: 296, 22: 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 34: 296, 296, 39: 296, 135: 1055, 140: 1054},
		{1: 293, 293, 10: 293, 293, 16: 293, 20: 293, 22: 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 34: 293, 293, 39: 293, 135: 1053, 140: 1052},
		{1: 292, 292, 10: 292, 292, 16: 292, 20: 292, 22: 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 34: 292, 292, 39: 292},
		{1: 291, 291, 10: 291, 291, 16: 291, 20: 291, 22: 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 34: 291, 291, 39: 291},
		{1: 295, 295, 10: 295, 295, 16: 295, 20: 295, 22: 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 34: 295, 295, 39: 295},
		// 570
		{1: 294, 294, 10: 294, 294, 16: 294, 20: 294, 22: 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 34: 294, 294, 39: 294},
		{1: 299, 299, 10: 299, 299, 16: 299, 20: 299, 22: 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 34: 299, 299, 39: 299},
		{218: 1062},
		{39: 1059},
		{218: 1060},
		// 575
		{221: 1061},
		{1: 288, 288, 10: 288, 288, 16: 288, 20: 288, 22: 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 34: 288, 288, 39: 288},
		{221: 1063},
		{1: 289, 289, 10: 289, 289, 16: 289, 20: 289, 22: 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 34: 289, 289, 39: 289},
		{22: 1065},
		// 580
		{1: 302, 302, 10: 302, 302, 16: 302, 20: 302, 22: 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 34: 302, 302, 39: 302, 205: 1067, 287: 1066},
		{1: 301, 301, 10: 301, 301, 16: 301, 20: 301, 22: 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 34: 301, 301, 39: 301},
		{1: 300, 300, 10: 300, 300, 16: 300, 20: 300, 22: 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 34: 300, 300, 39: 300},
		{1: 319, 319, 10: 319, 319, 16: 319, 20: 319, 22: 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 34: 319, 319, 39: 319},
		{40: 502, 501, 51: 1070},
		// 585
		{1: 318, 318, 10: 318, 318, 16: 318, 20: 318, 22: 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 34: 318, 318, 39: 318},
		{1: 330, 330, 10: 330, 330},
		{1: 324, 324, 10: 324, 324, 16: 1038, 20: 324, 22: 1036, 1039, 541, 536, 539, 537, 540, 534, 535, 560, 1033, 34: 324, 324, 39: 1037, 110: 532, 538, 120: 1034, 1032, 156: 1035, 165: 1031, 204: 1076, 279: 1080},
		{1: 324, 324, 10: 324, 324, 16: 1038, 22: 1036, 1039, 541, 536, 539, 537, 540, 534, 535, 560, 1033, 39: 1037, 110: 532, 538, 120: 1034, 1032, 156: 1035, 165: 1031, 204: 1076, 279: 1077},
		{1: 222, 222, 10: 222, 222, 253: 1075},
		// 590
		{1: 225, 225, 10: 225, 225},
		{1: 323, 323, 10: 323, 323, 16: 1038, 20: 323, 22: 1036, 1039, 541, 536, 539, 537, 540, 534, 535, 560, 1033, 34: 323, 323, 39: 1037, 110: 532, 538, 120: 1034, 1032, 156: 1035, 165: 1079},
		{1: 223, 223, 10: 223, 223, 358: 1078},
		{1: 226, 226, 10: 226, 226},
		{1: 321, 321, 10: 321, 321, 16: 321, 20: 321, 22: 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 34: 321, 321, 39: 321},
		// 595
		{1: 305, 305, 10: 305, 305, 16: 1038, 20: 305, 22: 1036, 1039, 34: 305, 305, 39: 1037, 156: 1081, 282: 1083, 350: 1082},
		{1: 304, 304, 10: 304, 304, 20: 304, 34: 304, 304},
		{1: 227, 227, 10: 227, 227},
		{1: 287, 287, 10: 287, 287, 20: 1085, 34: 287, 1084, 163: 1088, 179: 1087, 1086, 266: 1089},
		{1: 282, 282, 10: 282, 282, 20: 1118, 34: 282, 282, 38: 1119, 79: 282, 282, 89: 282, 105: 282, 188: 1117, 265: 1139, 360: 1138},
		// 600
		{35: 1136},
		{1: 284, 284, 10: 284, 284, 34: 284},
		{1: 247, 247, 10: 247, 247, 20: 1112, 34: 247, 1111, 163: 1110},
		{1: 246, 246, 10: 246, 246, 20: 246, 34: 246, 246},
		{1: 241, 241, 10: 241, 241, 34: 1090, 256: 1091},
		// 605
		{44: 1092, 53: 1095, 1094, 184: 1093, 294: 1096, 1098, 299: 1097},
		{1: 224, 224, 10: 224, 224},
		{171: 1108},
		{171: 1106},
		{171: 1104},
		// 610
		{171: 1099},
		{1: 236, 236, 10: 236, 236},
		{1: 235, 235, 10: 235, 235},
		{1: 234, 234, 10: 234, 234},
		{1: 230, 230, 10: 230, 230, 174: 1101, 1103, 1100, 1102},
		// 615
		{1: 237, 237, 10: 237, 237},
		{1: 233, 233, 10: 233, 233},
		{1: 232, 232, 10: 232, 232},
		{1: 231, 231, 10: 231, 231},
		{1: 230, 230, 10: 230, 230, 174: 1101, 1103, 1105, 1102},
		// 620
		{1: 238, 238, 10: 238, 238},
		{1: 230, 230, 10: 230, 230, 174: 1101, 1103, 1107, 1102},
		{1: 239, 239, 10: 239, 239},
		{1: 230, 230, 10: 230, 230, 174: 1101, 1103, 1109, 1102},
		{1: 240, 240, 10: 240, 240},
		// 625
		{1: 245, 245, 10: 245, 245, 20: 245, 34: 245, 245},
		{20: 1118, 38: 1119, 188: 1117, 265: 1120},
		{35: 1113},
		{38: 1114},
		{40: 502, 501, 51: 519, 86: 672, 109: 1115},
		// 630
		{1116, 3: 674},
		{1: 242, 242, 10: 242, 242, 20: 242, 34: 242, 242},
		{103: 1127, 208: 1128},
		{188: 1126},
		{40: 502, 501, 51: 519, 86: 672, 109: 1124},
		// 635
		{38: 1121},
		{40: 502, 501, 51: 519, 86: 672, 109: 1122},
		{1123, 3: 674},
		{1: 243, 243, 10: 243, 243, 20: 243, 34: 243, 243},
		{1125, 3: 674},
		// 640
		{1: 244, 244, 10: 244, 244, 20: 244, 34: 244, 244},
		{1: 274, 274, 10: 274, 274, 20: 274, 34: 274, 274, 38: 274, 79: 274, 274, 89: 274, 105: 274},
		{226: 1130, 288: 1131, 296: 1129},
		{1: 273, 273, 10: 273, 273, 20: 273, 34: 273, 273, 38: 273, 79: 273, 273, 89: 273, 105: 273},
		{1: 281, 281, 10: 281, 281, 20: 281, 34: 281, 281, 38: 281, 79: 281, 281, 89: 281, 105: 281},
		// 645
		{1: 280, 280, 10: 280, 280, 20: 280, 34: 280, 280, 38: 280, 79: 280, 280, 89: 280, 105: 280, 135: 1135, 140: 1134},
		{1: 277, 277, 10: 277, 277, 20: 277, 34: 277, 277, 38: 277, 79: 277, 277, 89: 277, 105: 277, 135: 1133, 140: 1132},
		{1: 276, 276, 10: 276, 276, 20: 276, 34: 276, 276, 38: 276, 79: 276, 276, 89: 276, 105: 276},
		{1: 275, 275, 10: 275, 275, 20: 275, 34: 275, 275, 38: 275, 79: 275, 275, 89: 275, 105: 275},
		{1: 279, 279, 10: 279, 279, 20: 279, 34: 279, 279, 38: 279, 79: 279, 279, 89: 279, 105: 279},
		// 650
		{1: 278, 278, 10: 278, 278, 20: 278, 34: 278, 278, 38: 278, 79: 278, 278, 89: 278, 105: 278},
		{1: 248, 248, 10: 248, 248, 20: 1112, 34: 248, 1111, 38: 1114, 163: 1088, 179: 1087, 1137},
		{1: 285, 285, 10: 285, 285, 34: 285},
		{1: 248, 248, 10: 248, 248, 20: 1112, 34: 248, 1111, 163: 1088, 179: 1087, 1171},
		{1: 272, 272, 10: 272, 272, 20: 272, 34: 272, 272, 38: 1121, 79: 272, 272, 89: 272, 105: 1141, 365: 1140},
		// 655
		{1: 266, 266, 10: 266, 266, 20: 266, 34: 266, 266, 79: 266, 266, 89: 1148, 361: 1147},
		{135: 1145, 140: 1143, 159: 1142, 292: 1146, 312: 1144},
		{1: 271, 271, 10: 271, 271, 20: 271, 34: 271, 271, 79: 271, 271, 89: 271},
		{1: 270, 270, 10: 270, 270, 20: 270, 34: 270, 270, 79: 270, 270, 89: 270},
		{1: 269, 269, 10: 269, 269, 20: 269, 34: 269, 269, 79: 269, 269, 89: 269},
		// 660
		{1: 268, 268, 10: 268, 268, 20: 268, 34: 268, 268, 79: 268, 268, 89: 268},
		{1: 267, 267, 10: 267, 267, 20: 267, 34: 267, 267, 79: 267, 267, 89: 267},
		{1: 254, 254, 10: 254, 254, 20: 1165, 34: 254, 254, 79: 254, 1164, 364: 1163},
		{1: 264, 264, 10: 264, 264, 20: 264, 34: 264, 264, 79: 264, 264, 103: 264, 169: 1151, 208: 1150, 362: 1149},
		{1: 259, 259, 10: 259, 259, 20: 259, 34: 259, 259, 79: 259, 259, 103: 1157, 363: 1156},
		// 665
		{1: 263, 263, 10: 263, 263, 20: 263, 34: 263, 263, 79: 263, 263, 103: 263},
		{113: 1152, 224: 1153, 322: 1154},
		{318: 1155},
		{1: 261, 261, 10: 261, 261, 20: 261, 34: 261, 261, 79: 261, 261, 103: 261},
		{1: 260, 260, 10: 260, 260, 20: 260, 34: 260, 260, 79: 260, 260, 103: 260},
		// 670
		{1: 262, 262, 10: 262, 262, 20: 262, 34: 262, 262, 79: 262, 262, 103: 262},
		{1: 265, 265, 10: 265, 265, 20: 265, 34: 265, 265, 79: 265, 265},
		{320: 1158},
		{21: 1159, 40: 502, 501, 51: 1161, 159: 1162, 166: 1160},
		{1: 258, 258, 10: 258, 258, 20: 258, 34: 258, 258, 79: 258, 258},
		// 675
		{1: 257, 257, 10: 257, 257, 20: 257, 34: 257, 257, 79: 257, 257},
		{1: 256, 256, 10: 256, 256, 20: 256, 34: 256, 256, 79: 256, 256},
		{1: 255, 255, 10: 255, 255, 20: 255, 34: 255, 255, 79: 255, 255},
		{1: 250, 250, 10: 250, 250, 20: 250, 34: 250, 250, 79: 1169, 366: 1168},
		{1: 253, 253, 10: 253, 253, 20: 253, 34: 253, 253, 79: 253, 166: 1167},
		// 680
		{80: 1166},
		{1: 251, 251, 10: 251, 251, 20: 251, 34: 251, 251, 79: 251},
		{1: 252, 252, 10: 252, 252, 20: 252, 34: 252, 252, 79: 252},
		{1: 283, 283, 10: 283, 283, 20: 283, 34: 283, 283},
		{40: 502, 501, 51: 519, 86: 1170},
		// 685
		{1: 249, 249, 10: 249, 249, 20: 249, 34: 249, 249},
		{1: 286, 286, 10: 286, 286, 34: 286},
		{1: 287, 287, 10: 287, 287, 20: 1085, 34: 287, 1084, 163: 1088, 179: 1087, 1086, 266: 1174},
		{1: 316, 316, 10: 316, 316, 16: 316, 20: 316, 22: 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 34: 316, 316, 39: 316},
		{1: 241, 241, 10: 241, 241, 34: 1090, 256: 1175},
		// 690
		{1: 331, 331, 10: 331, 331},
		{1: 344, 344, 10: 344, 344},
		{1: 347, 347, 11: 1187, 380: 1186},
		{1: 4, 4, 10: 1183, 4, 269: 1182},
		{103: 1180},
		// 695
		{227: 1181},
		{1: 5, 5, 10: 5, 5, 13: 5, 16: 5, 20: 5, 43: 5, 5, 48: 5, 101: 5},
		{1: 7, 7, 11: 7},
		{103: 1184},
		{237: 1185},
		// 700
		{1: 3, 3, 11: 3, 13: 3, 16: 3, 43: 3, 3, 48: 3, 101: 3},
		{1: 361, 361},
		{40: 502, 501, 51: 509, 122: 1188},
		{1: 346, 346},
		{40: 502, 501, 51: 509, 122: 1190},
		// 705
		{10: 1179, 13: 6, 16: 6, 20: 1194, 43: 6, 6, 48: 6, 101: 6, 268: 1193, 370: 1191, 1192},
		{13: 1216, 16: 1214, 43: 1215, 1211, 48: 1212, 101: 1217, 239: 1208, 241: 1207, 247: 1210, 270: 1209, 272: 1213, 328: 1205, 331: 1204, 386: 1206},
		{10: 1183, 13: 4, 16: 4, 20: 1200, 43: 4, 4, 48: 4, 101: 4, 269: 1199, 372: 1198},
		{10: 11, 13: 11, 16: 11, 20: 11, 43: 11, 11, 48: 11, 101: 11},
		{10: 1195},
		// 710
		{103: 1196},
		{227: 1197},
		{10: 10, 13: 10, 16: 10, 20: 10, 43: 10, 10, 48: 10, 101: 10},
		{13: 12, 16: 12, 43: 12, 12, 48: 12, 101: 12},
		{13: 9, 16: 9, 43: 9, 9, 48: 9, 101: 9},
		// 715
		{10: 1201},
		{103: 1202},
		{237: 1203},
		{13: 8, 16: 8, 43: 8, 8, 48: 8, 101: 8},
		{1: 467, 467},
		// 720
		{1: 466, 466, 13: 1216, 16: 1214, 43: 1215, 1211, 48: 1212, 239: 1208, 241: 1297, 247: 1210, 270: 1209, 272: 1213},
		{1: 465, 465},
		{1: 464, 464, 13: 464, 16: 464, 43: 464, 464, 48: 464},
		{1: 462, 462, 13: 462, 16: 462, 43: 462, 462, 48: 462},
		{1: 461, 461, 13: 461, 16: 461, 43: 461, 461, 48: 461},
		// 725
		{1: 460, 460, 13: 460, 16: 460, 43: 460, 460, 48: 460},
		{38: 1289},
		{38: 1262},
		{1: 396, 396, 13: 396, 16: 396, 43: 396, 396, 48: 396},
		{40: 502, 501, 51: 519, 86: 1249},
		// 730
		{236: 1244},
		{16: 1225, 38: 1226, 212: 1224, 236: 1223, 243: 1222},
		{16: 1218},
		{40: 502, 501, 51: 519, 86: 1219},
		{115: 1220},
		// 735
		{40: 502, 501, 51: 519, 86: 1221},
		{1: 362, 362},
		{1: 372, 372, 13: 372, 16: 372, 43: 372, 372, 48: 372, 100: 372, 102: 1239, 104: 1240, 196: 1238, 248: 1237, 1236},
		{212: 1234},
		{290: 1230},
		// 740
		{40: 502, 501, 51: 519, 86: 1229},
		{40: 502, 501, 51: 519, 86: 672, 109: 1227},
		{1228, 3: 674},
		{1: 373, 373, 13: 373, 16: 373, 42: 373, 373, 373, 48: 373, 100: 373, 102: 373, 104: 373},
		{1: 374, 374, 13: 374, 16: 374, 42: 374, 374, 374, 48: 374, 100: 374, 102: 374, 104: 374},
		// 745
		{1: 364, 364, 13: 364, 16: 364, 43: 364, 364, 48: 364, 100: 1232, 195: 1231},
		{1: 375, 375, 13: 375, 16: 375, 43: 375, 375, 48: 375},
		{47: 1233},
		{1: 363, 363, 13: 363, 16: 363, 43: 363, 363, 48: 363},
		{1: 364, 364, 13: 364, 16: 364, 43: 364, 364, 48: 364, 100: 1232, 195: 1235},
		// 750
		{1: 376, 376, 13: 376, 16: 376, 43: 376, 376, 48: 376},
		{1: 364, 364, 13: 364, 16: 364, 43: 364, 364, 48: 364, 100: 1232, 195: 1243},
		{1: 371, 371, 13: 371, 16: 371, 42: 371, 371, 371, 48: 371, 100: 371, 102: 1239, 104: 1240, 196: 1242},
		{1: 370, 370, 13: 370, 16: 370, 42: 370, 370, 370, 48: 370, 100: 370, 102: 370, 104: 370},
		{289: 1241},
		// 755
		{1: 367, 367, 13: 367, 16: 367, 42: 367, 367, 367, 48: 367, 100: 367, 102: 367, 104: 367},
		{1: 368, 368, 13: 368, 16: 368, 42: 368, 368, 368, 48: 368, 100: 368, 102: 368, 104: 368},
		{1: 369, 369, 13: 369, 16: 369, 42: 369, 369, 369, 48: 369, 100: 369, 102: 369, 104: 369},
		{1: 377, 377, 13: 377, 16: 377, 43: 377, 377, 48: 377},
		{16: 1225, 38: 1226, 243: 1245},
		// 760
		{1: 372, 372, 13: 372, 16: 372, 42: 372, 372, 372, 48: 372, 102: 1239, 104: 1240, 196: 1238, 248: 1237, 1246},
		{1: 366, 366, 13: 366, 16: 366, 42: 1248, 366, 366, 48: 366, 345: 1247},
		{1: 378, 378, 13: 378, 16: 378, 43: 378, 378, 48: 378},
		{1: 365, 365, 13: 365, 16: 365, 43: 365, 365, 48: 365},
		{4: 1251, 161: 1250},
		// 765
		{207: 1258},
		{161: 1252},
		{207: 1253},
		{166: 1254},
		{219: 1255},
		// 770
		{1: 380, 380, 13: 380, 16: 380, 43: 380, 380, 48: 380, 216: 1257, 267: 1256},
		{1: 381, 381, 13: 381, 16: 381, 43: 381, 381, 48: 381},
		{1: 379, 379, 13: 379, 16: 379, 43: 379, 379, 48: 379},
		{166: 1259},
		{219: 1260},
		// 775
		{1: 380, 380, 13: 380, 16: 380, 43: 380, 380, 48: 380, 216: 1257, 267: 1261},
		{1: 382, 382, 13: 382, 16: 382, 43: 382, 382, 48: 382},
		{40: 502, 501, 51: 519, 86: 1267, 271: 1265, 273: 1268, 1266, 373: 1263, 1264},
		{1285, 3: 1286},
		{1281, 3: 1282},
		// 780
		{395, 3: 395},
		{393, 3: 393},
		{14: 901, 902, 108: 741, 113: 758, 116: 760, 750, 124: 757, 748, 747, 754, 755, 751, 765, 764, 769, 746, 136: 767, 766, 753, 749, 141: 762, 743, 756, 745, 763, 744, 770, 768, 752, 759, 761, 742, 189: 734, 735, 193: 1269, 738, 197: 1270, 739, 737, 736, 733, 203: 740},
		{385, 3: 385},
		{452, 3: 452, 452, 452, 452, 452, 452, 452, 12: 452, 452, 21: 452, 33: 452, 36: 452, 895, 191: 894, 242: 1271},
		// 785
		{383, 3: 383},
		{443, 3: 443, 443, 443, 443, 443, 443, 443, 12: 443, 1273, 21: 906, 33: 443, 36: 907, 245: 904, 1274, 254: 905, 343: 1272},
		{415, 3: 415, 415, 415, 415, 415, 415, 415, 12: 958, 33: 1277, 251: 1278, 347: 1276},
		{158: 1275},
		{390, 3: 390, 390, 390, 390, 390, 390, 390, 12: 390, 33: 390},
		// 790
		{391, 3: 391, 391, 391, 391, 391, 391, 391, 12: 391, 33: 391},
		{387, 3: 387, 86, 86, 86, 86, 86, 665, 153: 994, 178: 976, 263: 1279, 334: 1280},
		{389, 3: 389, 389, 389, 389, 389, 389, 389},
		{388, 3: 388, 388, 388, 388, 388, 388, 388},
		{386, 3: 386, 86, 86, 86, 86, 86, 665, 153: 994, 178: 993},
		// 795
		{392, 3: 392},
		{1: 397, 397, 13: 397, 16: 397, 43: 397, 397, 48: 397},
		{40: 502, 501, 51: 519, 86: 1284, 273: 1283},
		{384, 3: 384},
		{14: 901, 902, 197: 1270},
		// 800
		{1: 398, 398, 13: 398, 16: 398, 43: 398, 398, 48: 398},
		{40: 502, 501, 51: 519, 86: 1288, 271: 1287, 274: 1266},
		{394, 3: 394},
		{108: 741, 113: 758, 116: 760, 750, 124: 757, 748, 747, 754, 755, 751, 765, 764, 769, 746, 136: 767, 766, 753, 749, 141: 762, 743, 756, 745, 763, 744, 770, 768, 752, 759, 761, 742, 189: 734, 735, 193: 1269, 738, 198: 739, 737, 736, 733, 203: 740},
		{40: 502, 501, 51: 519, 86: 660, 172: 1291, 181: 659, 336: 1290},
		// 805
		{1292, 3: 1293},
		{456, 3: 456},
		{1: 458, 458, 13: 458, 16: 458, 43: 458, 458, 48: 458, 338: 1295},
		{40: 502, 501, 51: 519, 86: 660, 172: 1294, 181: 659},
		{455, 3: 455},
		// 810
		{1: 457, 457, 13: 457, 16: 457, 43: 457, 457, 48: 457, 379: 1296},
		{1: 459, 459, 13: 459, 16: 459, 43: 459, 459, 48: 459},
		{1: 463, 463, 13: 463, 16: 463, 43: 463, 463, 48: 463},
		{1: 477, 477, 183: 494, 192: 492, 206: 493, 240: 490, 244: 491, 250: 489, 280: 1299},
		{1: 482, 482},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}
	
func yyParse(yylex yyLexer) int {
	const yyError = 402

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)


	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() { 
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError])+yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x])+yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2: {
        if yyS[yypt-0].node != nil {
            stmt := yyS[yypt-0].node
            stmt.SetText(nextQuery(yylex))
            yylex.(*yyLexImpl).result = append(yylex.(*yyLexImpl).result, stmt)
        }
    }
	case 3: {
        if yyS[yypt-0].node != nil {
            stmt := yyS[yypt-0].node
            stmt.SetText(nextQuery(yylex))
            yylex.(*yyLexImpl).result = append(yylex.(*yyLexImpl).result, stmt)
        }
    }
	case 8: {
        yyVAL.node = nil
    }
	case 9: {
    	yyVAL.anything = &ast.TableName{
	    Table: yyS[yypt-0].anything.(*element.Identifier),
	}
    }
	case 10: {
    	yyVAL.anything = &ast.TableName{
	    Schema:	yyS[yypt-2].anything.(*element.Identifier),
	    Table: 	yyS[yypt-0].anything.(*element.Identifier),
	}
    }
	case 11: {
        yyVAL.anything = []*element.Identifier{yyS[yypt-0].anything.(*element.Identifier)}
    }
	case 12: {
        yyVAL.anything = append(yyS[yypt-2].anything.([]*element.Identifier), yyS[yypt-0].anything.(*element.Identifier))
    }
	case 13: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 14: {
        yyVAL.anything = &element.Identifier{
            Typ: element.IdentifierTypeNonQuoted,
            Value: yyS[yypt-0].str,
        }
    }
	case 15: {
        yyVAL.anything = &element.Identifier{
            Typ: element.IdentifierTypeQuoted,
            Value: yyS[yypt-0].str,
        }
    }
	case 18: {
        yyVAL.node = &ast.AlterTableStmt{
            TableName:      yyS[yypt-2].anything.(*ast.TableName),
            ColumnClauses:  yyS[yypt-0].anything.([]ast.AlterTableClause),
        }
    }
	case 19: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 20: {
        yyVAL.anything = []ast.AlterTableClause{yyS[yypt-0].anything.(ast.AlterTableClause)}
    }
	case 21: {
        yyVAL.anything = []ast.AlterTableClause{yyS[yypt-0].anything.(ast.AlterTableClause)}
    }
	case 22: {
        yyVAL.anything = append(yyS[yypt-1].anything.([]ast.AlterTableClause), yyS[yypt-0].anything.(ast.AlterTableClause))
    }
	case 26: {
        yyVAL.anything = &ast.AddColumnClause{
	        Columns: yyS[yypt-3].anything.([]*ast.ColumnDef),
        }
    }
	case 27: {
        // TODO
    }
	case 28: {
        // TODO
    }
	case 29: {
        yyVAL.anything = []*ast.ColumnDef{yyS[yypt-0].anything.(*ast.ColumnDef)}
    }
	case 30: {
        yyVAL.anything = append(yyS[yypt-2].anything.([]*ast.ColumnDef), yyS[yypt-0].anything.(*ast.ColumnDef))
    }
	case 31: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 32: {
        var collation *ast.Collation
        if yyS[yypt-5].anything != nil {
            collation = yyS[yypt-5].anything.(*ast.Collation)
	    }
        props := []ast.ColumnProp{}
        sort := ast.ColumnProp(yyS[yypt-4].i)
        if sort != ast.ColumnPropEmpty {
            props = append(props, sort)
        }
        invisible := ast.ColumnProp(yyS[yypt-3].i)
        if invisible != ast.ColumnPropEmpty {
            props = append(props, invisible)
        }

        var constraints []*ast.InlineConstraint
        if yyS[yypt-0].anything != nil {
            constraints = yyS[yypt-0].anything.([]*ast.InlineConstraint)
        }

        yyVAL.anything = &ast.ColumnDef{
            ColumnName:         yyS[yypt-7].anything.(*element.Identifier),
            Datatype:           yyS[yypt-6].anything.(element.Datatype),
            Collation:          collation,
            Props:              props,
            Constraints: 	constraints,
        }
    }
	case 33: {
        yyVAL.anything = nil
    }
	case 34: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 35: {
        yyVAL.anything = &ast.Collation{Name: yyS[yypt-0].anything.(*element.Identifier)}
    }
	case 36: {
        yyVAL.i = int(ast.ColumnPropEmpty)
    }
	case 37: {
        yyVAL.i = int(ast.ColumnPropSort)
    }
	case 38: {
        yyVAL.i = int(ast.ColumnPropEmpty)
    }
	case 40: {
        yyVAL.i = int(ast.ColumnPropInvisible)
    }
	case 41: {
        yyVAL.i = int(ast.ColumnPropVisible)
    }
	case 42: {
        // empty
    }
	case 52: {
        // empty
    }
	case 54: {
        // empty
    }
	case 70: {
        // empty
    }
	case 73: {
        // empty
    }
	case 75: {
        // empty
    }
	case 77: {
        // empty
    }
	case 79: {
        // empty
    }
	case 82: {
        yyVAL.anything = nil
    }
	case 83: {
        yyVAL.anything = nil
    }
	case 84: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 85: {
        yyVAL.anything = []*ast.InlineConstraint{yyS[yypt-0].anything.(*ast.InlineConstraint)}
    }
	case 86: {
        yyVAL.anything = append(yyS[yypt-1].anything.([]*ast.InlineConstraint), yyS[yypt-0].anything.(*ast.InlineConstraint))
    }
	case 87: {
        yyVAL.anything = &ast.ModifyColumnClause{
	        Columns: yyS[yypt-1].anything.([]*ast.ColumnDef),
        }
    }
	case 88: {
        yyVAL.anything = &ast.ModifyColumnClause{
	        Columns: yyS[yypt-1].anything.([]*ast.ColumnDef),
        }
    }
	case 89: {
        yyVAL.anything = &ast.ModifyColumnClause{
	        Columns: yyS[yypt-0].anything.([]*ast.ColumnDef),
        }
    }
	case 90: {
        yyVAL.anything = []*ast.ColumnDef{yyS[yypt-0].anything.(*ast.ColumnDef)}
    }
	case 91: {
        yyVAL.anything = append(yyS[yypt-2].anything.([]*ast.ColumnDef), yyS[yypt-0].anything.(*ast.ColumnDef))
    }
	case 93: {
        var collation *ast.Collation
        if yyS[yypt-3].anything != nil {
            collation = yyS[yypt-3].anything.(*ast.Collation)
	    }
        yyVAL.anything = &ast.ColumnDef{
            ColumnName:         yyS[yypt-5].anything.(*element.Identifier),
            Datatype:           yyS[yypt-4].anything.(element.Datatype),
            Collation:          collation,
            Props:              []ast.ColumnProp{},
        }
    }
	case 98: {
        // empty
    }
	case 100: {
        yyVAL.anything = []*ast.ColumnDef{yyS[yypt-0].anything.(*ast.ColumnDef)}
    }
	case 101: {
        yyVAL.anything = append(yyS[yypt-2].anything.([]*ast.ColumnDef), yyS[yypt-0].anything.(*ast.ColumnDef))
    }
	case 102: {
        yyVAL.anything = &ast.ColumnDef{
            ColumnName: yyS[yypt-1].anything.(*element.Identifier),
            Props:      []ast.ColumnProp{ast.ColumnProp(yyS[yypt-0].i)},
        }
    }
	case 103: {
        prop := ast.ColumnPropSubstitutable
        if yyS[yypt-0].b {
            prop = ast.ColumnPropSubstitutableForce
        }
        yyVAL.anything = &ast.ColumnDef{
            ColumnName: yyS[yypt-5].anything.(*element.Identifier),
            Props:      []ast.ColumnProp{prop},
        }
    }
	case 104: {
        prop := ast.ColumnPropNotSubstitutable
        if yyS[yypt-0].b {
            prop = ast.ColumnPropNotSubstitutableForce
        }
        yyVAL.anything = &ast.ColumnDef{
            ColumnName: yyS[yypt-6].anything.(*element.Identifier),
            Props:      []ast.ColumnProp{prop},
        }
    }
	case 105: {
        yyVAL.b = false
    }
	case 106: {
        yyVAL.b = true
    }
	case 107: {
        props := []ast.DropColumnProp{}
        if yyS[yypt-1].anything != nil {
            props = append(props, yyS[yypt-1].anything.([]ast.DropColumnProp)...)
        }
        online := ast.DropColumnProp(yyS[yypt-0].i)
        if online != ast.DropColumnPropEmpty {
            props = append(props, online)
        }
    	yyVAL.anything = &ast.DropColumnClause{
            Type:    ast.DropColumnTypeSetUnused,
            Columns: yyS[yypt-2].anything.([]*element.Identifier),
            Props:   props,
    	}
    }
	case 108: {
        props := []ast.DropColumnProp{}
        if yyS[yypt-1].anything != nil {
            props = append(props, yyS[yypt-1].anything.([]ast.DropColumnProp)...)
        }
    	cc := &ast.DropColumnClause{
            Type:    ast.DropColumnTypeDrop,
            Columns: yyS[yypt-2].anything.([]*element.Identifier),
            Props:   props,
    	}
    	var checkout int
        if yyS[yypt-0].anything != nil {
            checkout = yyS[yypt-0].anything.(int)
            cc.CheckPoint = &checkout
        }
        yyVAL.anything = cc
    }
	case 109: {
    	cc := &ast.DropColumnClause{
            Type: ast.DropColumnTypeDropUnusedColumns,
    	}
    	var checkout int
        if yyS[yypt-0].anything != nil {
            checkout = yyS[yypt-0].anything.(int)
            cc.CheckPoint = &checkout
        }
        yyVAL.anything = cc
    }
	case 110: {
    	cc := &ast.DropColumnClause{
            Type: ast.DropColumnTypeDropColumnsContinue,
    	}
    	var checkout int
        if yyS[yypt-0].anything != nil {
            checkout = yyS[yypt-0].anything.(int)
            cc.CheckPoint = &checkout
        }
        yyVAL.anything = cc
    }
	case 111: {
        yyVAL.anything = []*element.Identifier{yyS[yypt-0].anything.(*element.Identifier)}
    }
	case 112: {
        yyVAL.anything = yyS[yypt-1].anything
    }
	case 113: {
        yyVAL.anything = nil
    }
	case 115: {
        yyVAL.anything = []ast.DropColumnProp{ast.DropColumnProp(yyS[yypt-0].i)}
    }
	case 116: {
        yyVAL.anything = append(yyS[yypt-1].anything.([]ast.DropColumnProp), ast.DropColumnProp(yyS[yypt-0].i))
    }
	case 117: {
        yyVAL.i = int(ast.DropColumnPropCascade)
    }
	case 118: {
        yyVAL.i = int(ast.DropColumnPropInvalidate)
    }
	case 119: {
        yyVAL.i = int(ast.DropColumnPropEmpty)
    }
	case 120: {
        yyVAL.i = int(ast.DropColumnPropOnline)
    }
	case 121: {
        yyVAL.anything = nil
    }
	case 122: {
        yyVAL.anything = yyS[yypt-0].i
    }
	case 123: {
    	yyVAL.anything = &ast.RenameColumnClause{
    	    OldName: yyS[yypt-2].anything.(*element.Identifier),
    	    NewName: yyS[yypt-0].anything.(*element.Identifier),
    	}
    }
	case 124: {
    	yyVAL.node = &ast.CreateTableStmt{
            TableName:  yyS[yypt-4].anything.(*ast.TableName),
            RelTable:   yyS[yypt-2].anything.(*ast.RelTableDef),
    	}
    }
	case 125: {
        // empty
    }
	case 133: {
        // empty
    }
	case 138: {
        // empty
    }
	case 141: {
        rd := &ast.RelTableDef{}
        if yyS[yypt-6].anything != nil {
            rd.TableStructs = yyS[yypt-6].anything.([]ast.TableStructDef)
        }
        yyVAL.anything = rd
    }
	case 144: {
        yyVAL.anything = nil
    }
	case 145: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 147: {
        // empty
    }
	case 150: {
        // empty
    }
	case 153: {
        // empty
    }
	case 158: {
        // empty
    }
	case 161: {
        // empty
    }
	case 180: {
        // empty
    }
	case 188: {
        // empty
    }
	case 195: {
        // empty
    }
	case 198: {
        // empty
    }
	case 203: {
        // empty
    }
	case 213: {
        // empty
    }
	case 219: {
        // empty
    }
	case 221: {
        // empty
    }
	case 226: {
        // empty
    }
	case 231: {
        // empty
    }
	case 235: {
        // empty
    }
	case 237: {
        // empty
    }
	case 244: {
        // empty
    }
	case 267: {
        yyVAL.anything = nil
    }
	case 268: {
        yyVAL.anything = yyS[yypt-1].anything
    }
	case 269: {
        yyVAL.anything = []ast.TableStructDef{yyS[yypt-0].anything.(ast.TableStructDef)}
    }
	case 270: {
        yyVAL.anything = append(yyS[yypt-2].anything.([]ast.TableStructDef), yyS[yypt-0].anything.(ast.TableStructDef))
    }
	case 271: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 272: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 273: {
        yyVAL.node = &ast.CreateIndexStmt{}
    }
	case 274: {
        // empty
    }
	case 312: {
        // empty
    }
	case 317: {
        // empty
    }
	case 322: {
        // empty
    }
	case 325: {
        // empty
    }
	case 328: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 329: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 330: {
        yyVAL.anything = &element.NumberOrAsterisk{Number: yyS[yypt-0].i}
    }
	case 331: {
        yyVAL.anything = &element.NumberOrAsterisk{IsAsterisk: true}
    }
	case 332: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 333: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 334: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 335: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 336: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 337: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 338: {
        d := &element.Char{}
        d.SetDataDef(element.DataDefChar)
        yyVAL.anything = d
    }
	case 339: {
        size := yyS[yypt-1].i
        d := &element.Char{Size: &size}
        d.SetDataDef(element.DataDefChar)
        yyVAL.anything = d
    }
	case 340: {
        size := yyS[yypt-2].i
        d := &element.Char{Size: &size, IsByteSize: true}
        d.SetDataDef(element.DataDefChar)
        yyVAL.anything = d
    }
	case 341: {
        size := yyS[yypt-2].i
        d := &element.Char{Size: &size, IsCharSize: true}
        d.SetDataDef(element.DataDefChar)
        d.SetDataDef(element.DataDefChar)
        yyVAL.anything = d
    }
	case 342: {
        size := yyS[yypt-1].i
        d := &element.Varchar2{}
        d.Size = &size
        d.SetDataDef(element.DataDefVarchar2)
        yyVAL.anything = d
    }
	case 343: {
        size := yyS[yypt-2].i
        d := &element.Varchar2{}
        d.Size = &size
        d.IsByteSize = true
        d.SetDataDef(element.DataDefVarchar2)
        yyVAL.anything = d
    }
	case 344: {
        size := yyS[yypt-2].i
        d := &element.Varchar2{}
        d.Size = &size
        d.IsCharSize = true
        d.SetDataDef(element.DataDefVarchar2)
        yyVAL.anything = d
    }
	case 345: {
        d := &element.NChar{}
        d.SetDataDef(element.DataDefNChar)
        yyVAL.anything = d
    }
	case 346: {
        size := yyS[yypt-1].i
        d := &element.NChar{Size: &size}
        d.SetDataDef(element.DataDefNChar)
        yyVAL.anything = d
    }
	case 347: {
        size := yyS[yypt-1].i
        d := &element.NVarchar2{}
        d.Size = &size
        d.SetDataDef(element.DataDefNVarChar2)
        yyVAL.anything = d
    }
	case 348: {
        d := &element.Number{}
        d.SetDataDef(element.DataDefNumber)
        yyVAL.anything = d
    }
	case 349: {
        precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
        d := &element.Number{Precision: precision}
        d.SetDataDef(element.DataDefNumber)
        yyVAL.anything = d
    }
	case 350: {
        precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
        scale := yyS[yypt-1].i
        d := &element.Number{Precision: precision, Scale: &scale}
        d.SetDataDef(element.DataDefNumber)
        yyVAL.anything = d
    }
	case 351: {
        d := &element.Float{}
        d.SetDataDef(element.DataDefFloat)
        yyVAL.anything = d
    }
	case 352: {
        precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
        d := &element.Float{Precision: precision}
        d.SetDataDef(element.DataDefFloat)
        yyVAL.anything = d
    }
	case 353: {
        d := &element.BinaryFloat{}
        d.SetDataDef(element.DataDefBinaryFloat)
        yyVAL.anything = d
    }
	case 354: {
        d := &element.BinaryDouble{}
        d.SetDataDef(element.DataDefBinaryDouble)
        yyVAL.anything = d
    }
	case 355: {
        d := &element.Long{}
        d.SetDataDef(element.DataDefLong)
        yyVAL.anything = d
    }
	case 356: {
        d := &element.LongRaw{}
        d.SetDataDef(element.DataDefLongRaw)
        yyVAL.anything = d
    }
	case 357: {
        size := yyS[yypt-1].i
        d := &element.Raw{Size: &size}
        d.SetDataDef(element.DataDefRaw)
        yyVAL.anything = d
    }
	case 358: {
        d := &element.Date{}
        d.SetDataDef(element.DataDefDate)
        yyVAL.anything = d
    }
	case 359: {
        d := &element.Timestamp{}
        d.SetDataDef(element.DataDefTimestamp)
        yyVAL.anything = d
    }
	case 360: {
        precision := yyS[yypt-1].i
        d := &element.Timestamp{FractionalSecondsPrecision: &precision}
        d.SetDataDef(element.DataDefTimestamp)
        yyVAL.anything = d
    }
	case 361: {
        precision := yyS[yypt-4].i
        d := &element.Timestamp{FractionalSecondsPrecision: &precision, WithTimeZone: true}
        d.SetDataDef(element.DataDefTimestamp)
        yyVAL.anything = d
    }
	case 362: {
        precision := yyS[yypt-5].i
        d := &element.Timestamp{FractionalSecondsPrecision: &precision, WithLocalTimeZone: true}
        d.SetDataDef(element.DataDefTimestamp)
        yyVAL.anything = d
    }
	case 363: {
        d := &element.IntervalYear{}
        d.SetDataDef(element.DataDefIntervalYear)
        yyVAL.anything = d
    }
	case 364: {
        precision := yyS[yypt-3].i
        d := &element.IntervalYear{Precision: &precision}
        d.SetDataDef(element.DataDefIntervalYear)
        yyVAL.anything = d
    }
	case 365: {
        d := &element.IntervalDay{}
        d.SetDataDef(element.DataDefIntervalDay)
        yyVAL.anything = d
    }
	case 366: {
        precision := yyS[yypt-3].i
        d := &element.IntervalDay{Precision: &precision}
        d.SetDataDef(element.DataDefIntervalDay)
        yyVAL.anything = d
    }
	case 367: {
        precision := yyS[yypt-6].i
        sPrecision := yyS[yypt-1].i
        d := &element.IntervalDay{Precision: &precision, FractionalSecondsPrecision: &sPrecision}
        d.SetDataDef(element.DataDefIntervalDay)
        yyVAL.anything = d
    }
	case 368: {
        sPrecision := yyS[yypt-1].i
        d := &element.IntervalDay{FractionalSecondsPrecision: &sPrecision}
        d.SetDataDef(element.DataDefIntervalDay)
        yyVAL.anything = d
    }
	case 369: {
        d := &element.Blob{}
        d.SetDataDef(element.DataDefBlob)
        yyVAL.anything = d
    }
	case 370: {
        d := &element.Clob{}
        d.SetDataDef(element.DataDefClob)
        yyVAL.anything = d
    }
	case 371: {
        d := &element.NClob{}
        d.SetDataDef(element.DataDefNClob)
        yyVAL.anything = d
    }
	case 372: {
        d := &element.BFile{}
        d.SetDataDef(element.DataDefBFile)
        yyVAL.anything = d
    }
	case 373: {
        d := &element.RowId{}
        d.SetDataDef(element.DataDefRowId)
        yyVAL.anything = d
    }
	case 374: {
        d := &element.URowId{}
        d.SetDataDef(element.DataDefURowId)
        yyVAL.anything = d
    }
	case 375: {
        size := yyS[yypt-1].i
        d := &element.URowId{Size: &size}
        d.SetDataDef(element.DataDefURowId)
        yyVAL.anything = d
    }
	case 376: {
        d := &element.Char{}
        d.SetDataDef(element.DataDefCharacter)
        yyVAL.anything = d
    }
	case 377: {
        size := yyS[yypt-1].i
        d := &element.Varchar2{}
        d.Size = &size
        d.SetDataDef(element.DataDefCharacterVarying)
        yyVAL.anything = d
    }
	case 378: {
        size := yyS[yypt-1].i
        d := &element.Varchar2{}
        d.Size = &size
        d.SetDataDef(element.DataDefCharVarying)
        yyVAL.anything = d
    }
	case 379: {
        size := yyS[yypt-1].i
        d := &element.NVarchar2{}
        d.Size = &size
        d.SetDataDef(element.DataDefNCharVarying)
        yyVAL.anything = d
    }
	case 380: {
        size := yyS[yypt-1].i
        d := &element.Varchar2{}
        d.Size = &size
        d.SetDataDef(element.DataDefVarchar)
        yyVAL.anything = d
    }
	case 381: {
        size := yyS[yypt-1].i
        d := &element.NChar{Size: &size}
        d.SetDataDef(element.DataDefNationalCharacter)
        yyVAL.anything = d
    }
	case 382: {
        size := yyS[yypt-1].i
        d := &element.NVarchar2{}
        d.Size = &size
        d.SetDataDef(element.DataDefNationalCharacterVarying)
        yyVAL.anything = d
    }
	case 383: {
        size := yyS[yypt-1].i
        d := &element.NChar{Size: &size}
        d.SetDataDef(element.DataDefNationalChar)
        yyVAL.anything = d
    }
	case 384: {
        size := yyS[yypt-1].i
        d := &element.NVarchar2{}
        d.Size = &size
        d.SetDataDef(element.DataDefNationalCharVarying)
        yyVAL.anything = d
    }
	case 385: {
        d := &element.Number{}
        d.SetDataDef(element.DataDefNumeric)
        yyVAL.anything = d
    }
	case 386: {
        precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
        d := &element.Number{Precision: precision}
        d.SetDataDef(element.DataDefNumeric)
        yyVAL.anything = d
    }
	case 387: {
        precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
        scale := yyS[yypt-1].i
        d := &element.Number{Precision: precision, Scale: &scale}
        d.SetDataDef(element.DataDefNumeric)
        yyVAL.anything = d
    }
	case 388: {
        d := &element.Number{}
        d.SetDataDef(element.DataDefDecimal)
        yyVAL.anything = d
    }
	case 389: {
        precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
        d := &element.Number{Precision: precision}
        d.SetDataDef(element.DataDefDecimal)
        yyVAL.anything = d
    }
	case 390: {
        precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
        scale := yyS[yypt-1].i
        d := &element.Number{Precision: precision, Scale: &scale}
        d.SetDataDef(element.DataDefDecimal)
        yyVAL.anything = d
    }
	case 391: {
        d := &element.Number{}
        d.SetDataDef(element.DataDefDec)
        yyVAL.anything = d
    }
	case 392: {
        precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
        d := &element.Number{Precision: precision}
        d.SetDataDef(element.DataDefDec)
        yyVAL.anything = d
    }
	case 393: {
        precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
        scale := yyS[yypt-1].i
        d := &element.Number{Precision: precision, Scale: &scale}
        d.SetDataDef(element.DataDefDec)
        yyVAL.anything = d
    }
	case 394: {
        precision := &element.NumberOrAsterisk{Number: 38}
        d := &element.Number{Precision: precision}
        d.SetDataDef(element.DataDefInteger)
        yyVAL.anything = d
    }
	case 395: {
        precision := &element.NumberOrAsterisk{Number: 38}
        d := &element.Number{Precision: precision}
        d.SetDataDef(element.DataDefInt)
        yyVAL.anything = d
    }
	case 396: {
        precision := &element.NumberOrAsterisk{Number: 38}
        d := &element.Number{Precision: precision}
        d.SetDataDef(element.DataDefSmallInt)
        yyVAL.anything = d
    }
	case 397: {
        precision := &element.NumberOrAsterisk{Number: 126}
        d := &element.Float{Precision: precision}
        d.SetDataDef(element.DataDefDoublePrecision)
        yyVAL.anything = d
    }
	case 398: {
        precision := &element.NumberOrAsterisk{Number: 63}
        d := &element.Float{Precision: precision}
        d.SetDataDef(element.DataDefReal)
        yyVAL.anything = d
    }
	case 399: {
        yyVAL.anything = nil
    }
	case 400: {
        yyVAL.anything = yyS[yypt-0].anything
    }
	case 401: {
        constraint := &ast.InlineConstraint{}
        if yyS[yypt-2].anything != nil {
            constraint.Name = yyS[yypt-2].anything.(*element.Identifier)
        }
	constraint.Type = ast.ConstraintType(yyS[yypt-1].i)
	yyVAL.anything = constraint
    }
	case 402: {
        constraint := &ast.InlineConstraint{}
        if yyS[yypt-2].anything != nil {
            constraint.Name = yyS[yypt-2].anything.(*element.Identifier)
        }
	constraint.Type = ast.ConstraintTypeReferences
	yyVAL.anything = constraint
    }
	case 403: {
        yyVAL.i = int(ast.ConstraintTypeNull)
    }
	case 404: {
        yyVAL.i = int(ast.ConstraintTypeNotNull)
    }
	case 405: {
        yyVAL.i = int(ast.ConstraintTypeUnique)
    }
	case 406: {
        yyVAL.i = int(ast.ConstraintTypePK)
    }
	case 408: {
        // empty
    }
	case 410: {
        // empty
    }
	case 413: {
        // empty
    }
	case 436: {
        constraint := &ast.OutOfLineConstraint{}
        if yyS[yypt-5].anything != nil {
            constraint.Name = yyS[yypt-5].anything.(*element.Identifier)
        }
	constraint.Type = ast.ConstraintTypeUnique
	constraint.Columns = yyS[yypt-2].anything.([]*element.Identifier)
	yyVAL.anything = constraint
    }
	case 437: {
        constraint := &ast.OutOfLineConstraint{}
        if yyS[yypt-6].anything != nil {
            constraint.Name = yyS[yypt-6].anything.(*element.Identifier)
        }
	constraint.Type = ast.ConstraintTypePK
	constraint.Columns = yyS[yypt-2].anything.([]*element.Identifier)
	yyVAL.anything = constraint
    }
	case 438: {
        constraint := &ast.OutOfLineConstraint{}
        if yyS[yypt-7].anything != nil {
            constraint.Name = yyS[yypt-7].anything.(*element.Identifier)
        }
	constraint.Type = ast.ConstraintTypeReferences
	constraint.Columns = yyS[yypt-3].anything.([]*element.Identifier)
	yyVAL.anything = constraint
    }
	case 466: {
        // empty
    }
	case 479: {
        // empty
    }
	case 481: {
        // empty
    }

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

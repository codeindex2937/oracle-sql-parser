// Code generated by goyacc -o sql.go -l sql.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

import (
	"strings"

	"github.com/codeindex2937/oracle-sql-parser/ast"
	"github.com/codeindex2937/oracle-sql-parser/ast/element"
)

func nextQuery(yylex interface{}) string {
	lex := yylex.(*yyLexImpl)
	tc := lex.scanner.TC
	query := string(lex.scanner.Text[lex.lastPos:tc])
	lex.lastPos = tc
	return strings.TrimSpace(query)
}

type yySymType struct {
	yys      int
	nothing  struct{}
	i        int
	b        bool
	str      string
	node     ast.Node
	anything interface{}
}

const _action = 57346
const _add = 57347
const _all = 57348
const _alter = 57349
const _as = 57350
const _asc = 57351
const _by = 57352
const _char = 57353
const _cluster = 57354
const _column = 57355
const _compress = 57356
const _create = 57357
const _date = 57358
const _decimal = 57359
const _default = 57360
const _delete = 57361
const _desc = 57362
const _drop = 57363
const _float = 57364
const _for = 57365
const _from = 57366
const _identified = 57367
const _immediate = 57368
const _increment = 57369
const _index = 57370
const _initial = 57371
const _integer = 57372
const _into = 57373
const _is = 57374
const _level = 57375
const _long = 57376
const _maxextents = 57377
const _modify = 57378
const _nocompress = 57379
const _not = 57380
const _null = 57381
const _number = 57382
const _on = 57383
const _online = 57384
const _optimal = 57385
const _order = 57386
const _pctfree = 57387
const _raw = 57388
const _rename = 57389
const _restrict = 57390
const _row = 57391
const _rowid = 57392
const _rows = 57393
const _select = 57394
const _set = 57395
const _smallInt = 57396
const _start = 57397
const _table = 57398
const _to = 57399
const _unique = 57400
const _update = 57401
const _validate = 57402
const _varchar = 57403
const _varchar2 = 57404
const _with = 57405
const _sequence = 57406
const _advanced = 57407
const _always = 57408
const _archive = 57409
const _at = 57410
const _attributes = 57411
const _auto = 57412
const _basic = 57413
const _bfile = 57414
const _binaryDouble = 57415
const _binaryFloat = 57416
const _bitmap = 57417
const _blob = 57418
const _blockchain = 57419
const _buffer_pool = 57420
const _byte = 57421
const _cache = 57422
const _capacity = 57423
const _cascade = 57424
const _cell_flash_cache = 57425
const _character = 57426
const _check = 57427
const _checkpoint = 57428
const _clob = 57429
const _collate = 57430
const _columns = 57431
const _commit = 57432
const _constraint = 57433
const _constraints = 57434
const _continue = 57435
const _creation = 57436
const _critical = 57437
const _cycle = 57438
const _data = 57439
const _day = 57440
const _dec = 57441
const _decrypt = 57442
const _deferrable = 57443
const _deferred = 57444
const _definition = 57445
const _delete_all = 57446
const _disable = 57447
const _disable_all = 57448
const _distribute = 57449
const _dml = 57450
const _double = 57451
const _duplicate = 57452
const _duplicated = 57453
const _E = 57454
const _enable = 57455
const _enable_all = 57456
const _encrypt = 57457
const _exceptions = 57458
const _extended = 57459
const _external = 57460
const _filesystem_like_logging = 57461
const _flash_cache = 57462
const _force = 57463
const _foreign = 57464
const _freelist = 57465
const _freelists = 57466
const _full = 57467
const _G = 57468
const _generated = 57469
const _global = 57470
const _groups = 57471
const _heap = 57472
const _high = 57473
const _identity = 57474
const _ilm = 57475
const _immutable = 57476
const _indexing = 57477
const _initially = 57478
const _initrans = 57479
const _inmemory = 57480
const _int = 57481
const _interval = 57482
const _invalidate = 57483
const _invalidation = 57484
const _invisible = 57485
const _K = 57486
const _keep = 57487
const _key = 57488
const _levels = 57489
const _limit = 57490
const _local = 57491
const _locking = 57492
const _logging = 57493
const _low = 57494
const _M = 57495
const _maxsize = 57496
const _maxtrans = 57497
const _maxvalue = 57498
const _medium = 57499
const _memcompress = 57500
const _memoptimize = 57501
const _metadata = 57502
const _minextents = 57503
const _minvalue = 57504
const _month = 57505
const _multivalue = 57506
const _national = 57507
const _nchar = 57508
const _nclob = 57509
const _next = 57510
const _no = 57511
const _nocache = 57512
const _nocycle = 57513
const _nologging = 57514
const _nomaxvalue = 57515
const _nominvalue = 57516
const _none = 57517
const _noorder = 57518
const _noparallel = 57519
const _norely = 57520
const _nosort = 57521
const _novalidate = 57522
const _numeric = 57523
const _nvarchar2 = 57524
const _organization = 57525
const _P = 57526
const _parallel = 57527
const _parent = 57528
const _partial = 57529
const _partition = 57530
const _pctincrease = 57531
const _pctused = 57532
const _peverse = 57533
const _policy = 57534
const _precision = 57535
const _preserve = 57536
const _primary = 57537
const _priority = 57538
const _private = 57539
const _purge = 57540
const _query = 57541
const _range = 57542
const _read = 57543
const _real = 57544
const _recycle = 57545
const _references = 57546
const _reject = 57547
const _rely = 57548
const _salt = 57549
const _scope = 57550
const _second = 57551
const _segment = 57552
const _service = 57553
const _sharded = 57554
const _sharding = 57555
const _sort = 57556
const _spatial = 57557
const _storage = 57558
const _store = 57559
const _subpartition = 57560
const _substitutable = 57561
const _T = 57562
const _tablespace = 57563
const _temporary = 57564
const _time = 57565
const _timestamp = 57566
const _unlimited = 57567
const _unusable = 57568
const _unused = 57569
const _urowid = 57570
const _usable = 57571
const _using = 57572
const _value = 57573
const _varying = 57574
const _visible = 57575
const _write = 57576
const _XMLType = 57577
const _year = 57578
const _zone = 57579
const _singleQuoteStr = 57580
const _doubleQuoteStr = 57581
const _nonquotedIdentifier = 57582
const _not_deferrable = 57583
const _no_inmemory = 57584
const _no_duplicate = 57585
const _row_level_locking = 57586
const _drop_index = 57587
const _intNumber = 57588

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"_action",
	"_add",
	"_all",
	"_alter",
	"_as",
	"_asc",
	"_by",
	"_char",
	"_cluster",
	"_column",
	"_compress",
	"_create",
	"_date",
	"_decimal",
	"_default",
	"_delete",
	"_desc",
	"_drop",
	"_float",
	"_for",
	"_from",
	"_identified",
	"_immediate",
	"_increment",
	"_index",
	"_initial",
	"_integer",
	"_into",
	"_is",
	"_level",
	"_long",
	"_maxextents",
	"_modify",
	"_nocompress",
	"_not",
	"_null",
	"_number",
	"_on",
	"_online",
	"_optimal",
	"_order",
	"_pctfree",
	"_raw",
	"_rename",
	"_restrict",
	"_row",
	"_rowid",
	"_rows",
	"_select",
	"_set",
	"_smallInt",
	"_start",
	"_table",
	"_to",
	"_unique",
	"_update",
	"_validate",
	"_varchar",
	"_varchar2",
	"_with",
	"_sequence",
	"_advanced",
	"_always",
	"_archive",
	"_at",
	"_attributes",
	"_auto",
	"_basic",
	"_bfile",
	"_binaryDouble",
	"_binaryFloat",
	"_bitmap",
	"_blob",
	"_blockchain",
	"_buffer_pool",
	"_byte",
	"_cache",
	"_capacity",
	"_cascade",
	"_cell_flash_cache",
	"_character",
	"_check",
	"_checkpoint",
	"_clob",
	"_collate",
	"_columns",
	"_commit",
	"_constraint",
	"_constraints",
	"_continue",
	"_creation",
	"_critical",
	"_cycle",
	"_data",
	"_day",
	"_dec",
	"_decrypt",
	"_deferrable",
	"_deferred",
	"_definition",
	"_delete_all",
	"_disable",
	"_disable_all",
	"_distribute",
	"_dml",
	"_double",
	"_duplicate",
	"_duplicated",
	"_E",
	"_enable",
	"_enable_all",
	"_encrypt",
	"_exceptions",
	"_extended",
	"_external",
	"_filesystem_like_logging",
	"_flash_cache",
	"_force",
	"_foreign",
	"_freelist",
	"_freelists",
	"_full",
	"_G",
	"_generated",
	"_global",
	"_groups",
	"_heap",
	"_high",
	"_identity",
	"_ilm",
	"_immutable",
	"_indexing",
	"_initially",
	"_initrans",
	"_inmemory",
	"_int",
	"_interval",
	"_invalidate",
	"_invalidation",
	"_invisible",
	"_K",
	"_keep",
	"_key",
	"_levels",
	"_limit",
	"_local",
	"_locking",
	"_logging",
	"_low",
	"_M",
	"_maxsize",
	"_maxtrans",
	"_maxvalue",
	"_medium",
	"_memcompress",
	"_memoptimize",
	"_metadata",
	"_minextents",
	"_minvalue",
	"_month",
	"_multivalue",
	"_national",
	"_nchar",
	"_nclob",
	"_next",
	"_no",
	"_nocache",
	"_nocycle",
	"_nologging",
	"_nomaxvalue",
	"_nominvalue",
	"_none",
	"_noorder",
	"_noparallel",
	"_norely",
	"_nosort",
	"_novalidate",
	"_numeric",
	"_nvarchar2",
	"_organization",
	"_P",
	"_parallel",
	"_parent",
	"_partial",
	"_partition",
	"_pctincrease",
	"_pctused",
	"_peverse",
	"_policy",
	"_precision",
	"_preserve",
	"_primary",
	"_priority",
	"_private",
	"_purge",
	"_query",
	"_range",
	"_read",
	"_real",
	"_recycle",
	"_references",
	"_reject",
	"_rely",
	"_salt",
	"_scope",
	"_second",
	"_segment",
	"_service",
	"_sharded",
	"_sharding",
	"_sort",
	"_spatial",
	"_storage",
	"_store",
	"_subpartition",
	"_substitutable",
	"_T",
	"_tablespace",
	"_temporary",
	"_time",
	"_timestamp",
	"_unlimited",
	"_unusable",
	"_unused",
	"_urowid",
	"_usable",
	"_using",
	"_value",
	"_varying",
	"_visible",
	"_write",
	"_XMLType",
	"_year",
	"_zone",
	"_singleQuoteStr",
	"_doubleQuoteStr",
	"_nonquotedIdentifier",
	"_not_deferrable",
	"_no_inmemory",
	"_no_duplicate",
	"_row_level_locking",
	"_drop_index",
	"_intNumber",
	"';'",
	"'.'",
	"','",
	"'('",
	"')'",
	"'='",
	"'*'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 12,
	56, 328,
	-2, 464,
	-1, 350,
	251, 714,
	-2, 717,
	-1, 651,
	1, 357,
	159, 357,
	186, 357,
	247, 357,
	-2, 362,
}

const yyPrivate = 57344

const yyLast = 1944

var yyAct = [...]int16{
	31, 878, 374, 955, 373, 926, 888, 571, 969, 570,
	815, 325, 958, 210, 936, 977, 787, 894, 966, 460,
	786, 569, 890, 7, 789, 30, 719, 716, 211, 671,
	833, 215, 744, 807, 967, 249, 638, 653, 552, 794,
	457, 503, 477, 613, 219, 809, 288, 788, 462, 386,
	463, 502, 353, 354, 228, 387, 362, 471, 364, 456,
	226, 315, 301, 264, 263, 388, 614, 335, 745, 590,
	823, 821, 696, 615, 748, 481, 679, 1057, 303, 481,
	310, 1040, 753, 481, 481, 1018, 983, 963, 1048, 759,
	321, 758, 591, 699, 824, 698, 693, 572, 692, 691,
	582, 690, 582, 321, 1004, 306, 822, 689, 938, 688,
	481, 302, 633, 308, 481, 938, 632, 754, 481, 481,
	556, 548, 756, 953, 481, 947, 529, 491, 481, 490,
	482, 455, 947, 454, 923, 453, 937, 452, 863, 403,
	695, 402, 305, 937, 678, 862, 861, 860, 319, 859,
	858, 782, 780, 777, 757, 776, 771, 769, 1003, 755,
	768, 945, 752, 751, 767, 766, 317, 765, 945, 764,
	709, 708, 701, 700, 589, 697, 589, 943, 683, 317,
	681, 320, 675, 627, 943, 612, 625, 610, 532, 879,
	592, 964, 584, 749, 584, 891, 510, 321, 579, 962,
	747, 508, 1003, 611, 962, 609, 587, 746, 587, 975,
	585, 904, 585, 506, 509, 304, 868, 309, 781, 507,
	211, 687, 222, 685, 211, 30, 231, 588, 750, 588,
	668, 505, 594, 251, 576, 607, 605, 939, 603, 597,
	593, 528, 277, 941, 939, 583, 577, 583, 527, 523,
	941, 946, 944, 521, 940, 942, 520, 948, 946, 944,
	287, 940, 942, 519, 948, 518, 516, 515, 514, 575,
	298, 595, 307, 595, 324, 511, 573, 350, 818, 448,
	447, 370, 359, 347, 307, 318, 298, 334, 578, 887,
	831, 720, 596, 248, 34, 33, 230, 221, 1026, 892,
	722, 344, 664, 346, 316, 806, 15, 300, 721, 357,
	356, 845, 694, 361, 360, 11, 677, 316, 1027, 1019,
	839, 371, 294, 12, 372, 299, 313, 322, 838, 14,
	994, 993, 988, 992, 1045, 919, 554, 344, 865, 934,
	322, 834, 842, 841, 836, 834, 778, 775, 211, 837,
	401, 774, 446, 451, 342, 773, 772, 770, 707, 705,
	722, 686, 684, 345, 468, 682, 680, 676, 721, 667,
	662, 661, 891, 660, 659, 479, 628, 630, 467, 626,
	629, 622, 300, 619, 618, 375, 383, 608, 606, 604,
	346, 602, 382, 551, 338, 337, 1025, 286, 285, 284,
	1063, 497, 499, 1080, 404, 1052, 344, 963, 464, 1044,
	658, 464, 34, 33, 480, 1079, 901, 932, 876, 779,
	702, 379, 473, 526, 329, 475, 476, 235, 380, 330,
	458, 1049, 483, 797, 322, 644, 555, 488, 495, 225,
	323, 494, 624, 466, 703, 377, 217, 216, 1073, 918,
	485, 1069, 530, 531, 380, 903, 535, 330, 537, 501,
	902, 600, 29, 915, 279, 1077, 924, 706, 1024, 986,
	736, 550, 549, 1042, 26, 712, 892, 1039, 791, 790,
	19, 913, 1078, 663, 558, 848, 1047, 542, 292, 517,
	914, 27, 319, 25, 344, 922, 830, 487, 792, 211,
	830, 563, 828, 539, 1037, 601, 534, 985, 538, 536,
	547, 964, 544, 543, 899, 541, 623, 959, 834, 557,
	459, 917, 803, 704, 854, 320, 666, 23, 960, 851,
	274, 302, 791, 790, 1036, 274, 229, 229, 1053, 300,
	567, 566, 568, 394, 20, 273, 227, 326, 465, 631,
	24, 465, 792, 13, 275, 733, 303, 916, 1007, 616,
	617, 525, 1062, 395, 620, 621, 1067, 649, 645, 873,
	1035, 349, 1082, 1065, 657, 348, 26, 369, 358, 340,
	28, 466, 365, 306, 1061, 339, 1074, 1066, 665, 956,
	656, 1033, 1028, 27, 1064, 1038, 1034, 669, 646, 648,
	672, 1059, 34, 33, 415, 1060, 393, 655, 950, 436,
	420, 897, 846, 21, 1032, 431, 1075, 742, 1046, 978,
	305, 396, 1058, 422, 980, 880, 376, 434, 22, 318,
	843, 34, 33, 430, 799, 793, 34, 33, 741, 435,
	674, 366, 804, 443, 712, 718, 641, 424, 641, 637,
	250, 852, 710, 979, 417, 428, 849, 884, 717, 823,
	821, 1030, 281, 715, 272, 442, 433, 432, 737, 439,
	847, 907, 908, 711, 492, 829, 232, 414, 717, 826,
	440, 853, 28, 824, 368, 732, 850, 731, 730, 793,
	738, 582, 421, 304, 998, 822, 1000, 728, 712, 910,
	474, 898, 425, 905, 999, 727, 290, 293, 311, 546,
	763, 827, 740, 896, 367, 504, 478, 472, 823, 821,
	513, 253, 218, 1015, 211, 1005, 784, 1056, 970, 1014,
	808, 783, 423, 438, 562, 484, 458, 825, 990, 524,
	981, 282, 824, 819, 723, 817, 725, 866, 928, 864,
	582, 909, 910, 470, 822, 642, 469, 642, 418, 416,
	441, 522, 672, 212, 816, 589, 208, 16, 220, 810,
	812, 911, 1006, 881, 419, 429, 832, 835, 976, 906,
	840, 560, 289, 584, 844, 545, 312, 1055, 927, 856,
	867, 857, 855, 512, 739, 426, 654, 587, 745, 336,
	951, 585, 724, 869, 748, 872, 882, 798, 729, 871,
	237, 1022, 753, 870, 635, 634, 713, 445, 588, 900,
	819, 444, 817, 889, 589, 877, 459, 246, 427, 813,
	885, 656, 1021, 259, 533, 295, 583, 952, 236, 647,
	213, 271, 584, 271, 875, 1072, 1017, 754, 378, 268,
	328, 297, 756, 928, 327, 276, 587, 761, 314, 801,
	585, 565, 595, 244, 260, 886, 296, 818, 762, 3,
	973, 972, 991, 929, 933, 261, 283, 588, 921, 242,
	996, 270, 949, 270, 757, 209, 800, 1070, 954, 755,
	930, 650, 752, 751, 561, 583, 1023, 450, 224, 912,
	743, 449, 971, 883, 819, 819, 817, 817, 802, 974,
	726, 965, 643, 540, 461, 961, 968, 291, 252, 581,
	580, 595, 574, 749, 398, 493, 818, 280, 1012, 1010,
	747, 893, 1071, 1054, 987, 1068, 1051, 746, 869, 238,
	1029, 1002, 957, 1043, 982, 240, 1016, 586, 820, 814,
	989, 895, 995, 245, 243, 735, 239, 241, 750, 247,
	652, 811, 734, 651, 211, 489, 997, 1008, 384, 486,
	381, 278, 17, 1011, 553, 819, 1009, 817, 889, 1013,
	1001, 785, 1020, 714, 636, 984, 931, 874, 796, 795,
	935, 640, 639, 598, 500, 223, 805, 496, 1, 234,
	233, 670, 498, 399, 397, 925, 262, 920, 1031, 385,
	333, 332, 331, 363, 564, 1041, 267, 341, 343, 35,
	269, 352, 355, 351, 266, 265, 258, 257, 256, 255,
	1050, 254, 407, 406, 413, 412, 437, 411, 410, 409,
	408, 405, 214, 2, 10, 9, 8, 6, 5, 4,
	760, 18, 32, 559, 673, 599, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1076, 303, 0, 0, 0, 0, 1081, 0,
	36, 37, 38, 39, 40, 41, 42, 43, 44, 45,
	46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	392, 57, 58, 59, 60, 61, 389, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
	86, 87, 88, 89, 90, 91, 92, 391, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 138, 139, 140, 141, 142, 143, 144, 145,
	146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
	156, 157, 158, 159, 160, 161, 162, 163, 164, 165,
	390, 167, 168, 169, 170, 171, 172, 173, 174, 175,
	176, 177, 178, 179, 180, 181, 182, 183, 184, 185,
	186, 187, 188, 189, 190, 191, 192, 193, 194, 195,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	35, 206, 207, 0, 34, 33, 0, 0, 400, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 36, 37, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 138, 139, 140, 141, 142, 143, 144,
	145, 146, 147, 148, 149, 150, 151, 152, 153, 154,
	155, 156, 157, 158, 159, 160, 161, 162, 163, 164,
	165, 166, 167, 168, 169, 170, 171, 172, 173, 174,
	175, 176, 177, 178, 179, 180, 181, 182, 183, 184,
	185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
	195, 196, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 35, 206, 207, 0, 34, 33, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 81, 82, 83,
	84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
	144, 145, 146, 147, 148, 149, 150, 151, 152, 153,
	154, 155, 156, 157, 158, 159, 160, 161, 162, 163,
	164, 165, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 0, 206, 207, 415, 34, 33, 0, 0,
	436, 420, 0, 0, 590, 0, 431, 0, 0, 0,
	0, 0, 0, 0, 422, 0, 0, 0, 434, 0,
	0, 0, 0, 0, 430, 0, 0, 591, 0, 0,
	435, 0, 572, 0, 443, 582, 0, 0, 424, 0,
	0, 0, 0, 0, 0, 417, 428, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 442, 433, 432, 0,
	439, 0, 0, 0, 0, 0, 0, 0, 414, 0,
	0, 440, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 421, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 425, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 589,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 423, 438, 592, 0, 584, 0, 0,
	0, 0, 0, 579, 0, 0, 0, 0, 0, 0,
	0, 587, 0, 0, 0, 585, 0, 0, 0, 418,
	416, 441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 588, 0, 0, 419, 429, 594, 0, 576,
	0, 0, 0, 0, 0, 593, 0, 0, 0, 0,
	583, 577, 0, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 575, 0, 595, 0, 445, 0,
	0, 573, 444, 0, 0, 0, 0, 0, 0, 427,
	0, 0, 0, 578,
}

var yyPact = [...]int16{
	308, -1000, 59, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 711, 416, 1477, 710, 308, 1477, 707, 812, 1477,
	225, 224, -1000, -1000, 645, -1000, -1000, -1000, -1000, 726,
	49, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1477, -1000,
	377, 48, 1477, 1477, 783, 45, -1000, -1000, -1000, 529,
	-1000, 1477, 639, 828, 376, -1000, -1000, 395, -1000, 832,
	1477, 251, -1000, -1000, 783, -1000, 678, 866, 153, -1000,
	152, -1000, -1000, -1000, 151, -1000, -1000, -1000, 1477, 680,
	-1000, -1000, 290, 615, -1000, -1000, -1000, 830, -1000, 20,
	22, 695, 837, -1000, -1000, -1000, -1000, -1000, 90, -1000,
	213, 1477, -1000, 388, 831, 827, 223, -1000, 37, -185,
	758, -1000, 149, 148, -1000, -1000, -1000, -1000, -1000, 443,
	437, -1000, -1000, -1000, -1000, 36, 34, 77, 1477, -1000,
	498, -1000, 173, 33, 429, 425, 27, 1477, 173, 432,
	32, 1477, 173, -1000, 434, 500, 625, 591, 431, 31,
	173, 1477, 1477, 184, 407, -1000, 825, 195, 220, -1000,
	-1000, 378, -1000, -1000, 1015, 446, 1246, -1000, -1000, -1000,
	-1000, -110, -1000, -1000, 1704, -1000, -1000, 1477, 30, 29,
	1477, -114, -118, -1000, -1000, -1000, 593, 307, 307, 1477,
	699, 696, 631, 500, -1000, 608, -1000, 631, 631, 634,
	1477, 634, -1000, -121, -1000, 500, 667, 231, 194, -1000,
	-1000, 311, 371, -1000, -1000, -122, -1000, -1000, -1000, 173,
	429, 425, 27, -1000, -1000, 577, -1000, 212, -1000, -1000,
	173, 173, -1000, 1477, 627, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -19, -31, -36, 25, 709, 18,
	17, 16, -1000, -1000, -1000, 296, -1000, -1000, 15, 13,
	6, 3, -1000, -1000, 715, -1, -1000, 676, 325, -1000,
	-1000, -1000, -1000, -1000, -2, -9, -125, 1477, 1477, -63,
	802, -1000, -1000, 1477, -1000, 1477, 627, -1000, -1000, -1000,
	634, 309, 445, 310, -1000, -1000, 683, 634, -130, 1477,
	173, -1000, 147, -1000, -1000, -1000, -1000, 191, -1000, -131,
	191, 1477, -1000, 739, 888, 666, -1000, 1477, -1000, 843,
	-1000, 1015, -1000, 680, -1000, -1000, 1710, 44, -11, -1000,
	-1000, -1000, 247, -1000, 173, 145, -12, 143, -14, 142,
	-15, 141, -45, -47, -180, -180, -180, -1000, 138, 137,
	-180, -180, -1000, 135, 293, 129, 126, 134, 131, 307,
	-135, -139, -1000, 776, -1000, 1704, -1000, 287, 628, -1000,
	205, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 307, -1000,
	-1000, -1000, -1000, 726, 811, -1000, 634, -1000, -1000, -1000,
	-1000, 420, 885, -1000, 755, 627, -1000, -1000, 1710, -1000,
	-1000, -1000, -1000, 392, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 128, 127, 125, 124, -1000, -1000, -1000, -1000,
	237, -1000, 401, 123, -1000, -20, 173, 1477, -1000, 287,
	-1000, -1000, -69, 121, 65, 120, -71, 119, -73, 116,
	-27, 115, -29, -142, -1000, -1000, -150, -153, 61, -76,
	-156, -78, -79, 183, 221, 360, 113, 258, 112, -80,
	-81, -1000, 307, 271, -1000, 777, 563, 513, -1000, -1000,
	-1000, 122, 736, 592, 780, 634, -1000, -1000, 191, 529,
	408, 458, 753, -1000, 622, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 486, -1000, -1000, -1000, 769, -1000,
	-160, -1000, 848, 630, -1000, -1000, -82, -1000, -84, -86,
	-87, -1000, -91, -1000, -94, 111, -95, 110, -1000, 109,
	-1000, 105, -1000, 101, -1000, -96, -98, -1000, -1000, 100,
	-1000, -1000, -1000, 182, -1000, -99, -32, -100, -1000, -1000,
	-1000, 307, 1477, -1000, 440, -1000, -1000, 203, -1000, -1000,
	768, -1000, -1000, 502, 878, 841, 462, -1000, -1000, 55,
	-1000, -1000, -1000, 529, -1000, 646, 173, 585, -1000, 621,
	481, -1000, -1000, 39, -1000, 99, 99, 98, 103, 95,
	97, 96, 501, 272, 467, 511, 506, -1000, 1710, 1477,
	-1000, -1000, -1000, 543, -1000, -1000, -1000, -1000, -1000, -1000,
	-101, -1000, -102, -104, -105, -106, -1000, -1000, -113, -1000,
	692, 92, 690, 749, -34, -1000, 440, -1000, 494, 307,
	-1000, 766, -1000, 423, -1000, -1000, 819, 180, 62, -61,
	493, 765, 541, -1000, -1000, -1000, 850, -1000, 41, 1710,
	-1000, -1000, 57, 583, -1000, -1000, 326, -1000, 363, -1000,
	-1000, -1000, 243, 238, -1000, -39, 677, 477, 569, 648,
	720, -1000, -1000, -1000, 337, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 89, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 440, -1000, -1000,
	-1000, -1000, -1000, -1000, 332, -117, 257, 729, 1477, -1000,
	307, -1000, -1000, -1000, 179, 864, -1000, -1000, -1000, 88,
	-61, 476, 761, -1000, 806, -128, 518, 173, 456, -1000,
	-1000, 359, -51, 269, -1000, -1000, 705, 705, -1000, 659,
	-1000, 173, 857, 856, 1477, -1000, -1000, 701, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 440, -1000, -1000, -41, 737, -1000, 571, 571, -165,
	-1000, 300, -1000, 173, -1000, 81, -1000, 675, 862, 87,
	-1000, 85, -1000, -1000, -1000, 84, -1000, -1000, -1000, -1000,
	-61, 872, 1477, -1000, -1000, -1000, 590, 269, -92, 702,
	400, -1000, 1477, 359, -46, -1000, 234, 705, -1000, -1000,
	-1000, -1000, 658, 823, -166, 73, 834, -1000, -1000, -1000,
	793, 892, -1000, -1000, -1000, -1000, 261, -1000, -1000, -1000,
	150, 72, -1000, -1000, -1000, -1000, 460, -1000, -1000, -1000,
	-1000, -1000, 554, 1477, 439, 396, -1000, -1000, -170, -48,
	-1000, 456, -1000, 268, -1000, -1000, 165, 419, -1000, -163,
	-1000, -1000, -1000, -1000, -1000, -1000, 200, -1000, -61, 295,
	717, -174, -1000, -1000, -1000, -1000, -1000, -1000, 470, 453,
	-1000, -1000, 414, -1000, -1000, 156, 442, 435, -1000, -1000,
	-1000, 236, 881, -1000, 822, -1000, 398, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1477,
	-1000, -1000, 254, 282, -1000, -1000, -1000, 397, -1000, -1000,
	-1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1055, 40, 1054, 58, 1053, 35, 1052, 1051, 1050,
	1049, 869, 1048, 1047, 23, 1046, 1045, 1044, 1043, 13,
	462, 1042, 0, 11, 2, 59, 1041, 1040, 1039, 1038,
	1037, 1036, 1035, 1034, 1033, 1032, 1031, 1029, 1028, 1027,
	64, 1026, 1025, 1024, 1023, 52, 1022, 1021, 53, 1020,
	1018, 1017, 55, 1016, 43, 51, 41, 1014, 4, 61,
	57, 1013, 56, 1012, 1011, 1010, 1009, 49, 65, 62,
	47, 1007, 20, 16, 24, 1006, 63, 39, 1005, 5,
	15, 1004, 1003, 1002, 1001, 29, 1000, 999, 998, 997,
	996, 995, 994, 993, 36, 27, 992, 991, 26, 1,
	990, 14, 989, 988, 987, 986, 985, 984, 983, 981,
	19, 42, 38, 974, 44, 972, 971, 970, 969, 968,
	965, 963, 962, 961, 960, 37, 955, 34, 6, 3,
	951, 949, 18, 10, 9, 7, 948, 948, 947, 946,
	943, 22, 942, 12, 941, 940, 936, 935, 933, 932,
	931, 17, 929, 928, 8, 927, 925, 46, 924, 45,
	21, 922, 920, 919, 33, 918, 917, 427, 914, 913,
	912, 910, 908, 903, 48, 50, 903, 901, 900, 32,
	30, 899, 898, 439, 60, 54, 897,
}

var yyR1 = [...]uint8{
	0, 88, 18, 18, 11, 11, 11, 11, 11, 11,
	11, 10, 19, 19, 58, 58, 24, 89, 89, 20,
	20, 90, 90, 21, 21, 23, 23, 22, 22, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 12, 36, 36, 37, 37, 39, 39, 40,
	40, 40, 42, 92, 93, 51, 51, 52, 50, 55,
	55, 56, 1, 1, 3, 3, 2, 2, 94, 94,
	94, 96, 96, 97, 97, 97, 97, 99, 99, 99,
	100, 100, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 95, 95, 102, 103, 103,
	104, 104, 105, 105, 106, 106, 106, 71, 71, 72,
	72, 43, 43, 43, 44, 44, 45, 46, 107, 107,
	108, 108, 109, 109, 47, 47, 48, 49, 49, 6,
	6, 53, 53, 53, 53, 59, 59, 62, 62, 61,
	61, 4, 4, 5, 5, 60, 60, 41, 38, 38,
	38, 38, 38, 38, 75, 75, 76, 76, 76, 111,
	111, 112, 113, 113, 113, 114, 114, 13, 115, 115,
	115, 115, 115, 115, 115, 115, 116, 116, 116, 116,
	116, 118, 118, 63, 64, 119, 120, 57, 57, 121,
	121, 121, 121, 124, 124, 125, 125, 122, 122, 122,
	122, 122, 126, 126, 126, 132, 132, 127, 127, 133,
	133, 133, 133, 133, 137, 137, 134, 134, 134, 134,
	134, 135, 135, 135, 136, 136, 136, 136, 136, 136,
	136, 139, 139, 139, 139, 139, 139, 139, 140, 140,
	128, 128, 128, 142, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 144, 144, 144, 144, 144, 144,
	145, 145, 148, 148, 148, 148, 148, 149, 149, 149,
	149, 149, 146, 146, 146, 146, 147, 147, 141, 141,
	150, 150, 151, 151, 129, 129, 129, 129, 130, 130,
	130, 152, 153, 154, 131, 131, 123, 65, 65, 66,
	66, 67, 67, 14, 8, 8, 8, 8, 155, 81,
	81, 158, 159, 159, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 161, 161, 161,
	161, 161, 161, 162, 162, 163, 163, 163, 82, 83,
	83, 84, 84, 85, 9, 9, 9, 164, 164, 156,
	156, 156, 157, 157, 157, 15, 16, 17, 86, 86,
	87, 87, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 165, 165, 166, 166, 25, 25,
	25, 54, 54, 26, 26, 26, 26, 26, 26, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 28,
	28, 28, 28, 28, 28, 28, 29, 29, 29, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 31,
	31, 32, 32, 32, 32, 33, 33, 33, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 35, 70, 73, 73, 74, 74, 74, 74, 74,
	110, 168, 168, 168, 168, 168, 174, 174, 175, 175,
	169, 169, 169, 170, 170, 170, 170, 171, 171, 171,
	172, 172, 172, 173, 173, 77, 176, 176, 78, 79,
	80, 80, 80, 80, 80, 68, 68, 69, 69, 69,
	69, 69, 69, 69, 138, 178, 178, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	180, 181, 181, 181, 181, 181, 181, 181, 91, 91,
	91, 91, 182, 182, 183, 183, 117, 117, 117, 117,
	184, 185, 98, 98, 177, 177, 177, 186, 186,
}

var yyR2 = [...]int8{
	0, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 3, 1, 3, 1, 1, 3, 1,
	3, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 5, 1, 1, 1, 1, 1, 2, 1,
	1, 1, 6, 0, 0, 1, 3, 1, 8, 0,
	1, 2, 0, 1, 0, 1, 1, 1, 0, 1,
	1, 2, 4, 4, 5, 6, 8, 0, 2, 3,
	1, 2, 3, 4, 3, 2, 1, 2, 1, 1,
	1, 2, 1, 1, 1, 0, 2, 4, 0, 2,
	0, 3, 0, 1, 0, 1, 2, 0, 1, 1,
	2, 4, 4, 1, 1, 3, 1, 6, 2, 1,
	1, 1, 0, 1, 1, 3, 2, 7, 8, 0,
	1, 5, 4, 4, 4, 2, 3, 0, 1, 1,
	2, 2, 1, 0, 1, 0, 2, 5, 2, 5,
	5, 7, 5, 1, 1, 2, 5, 7, 5, 0,
	1, 2, 0, 2, 1, 0, 1, 8, 0, 2,
	2, 1, 1, 1, 1, 2, 0, 3, 3, 4,
	3, 0, 2, 1, 7, 0, 0, 0, 2, 0,
	1, 1, 2, 4, 4, 4, 4, 0, 4, 3,
	2, 5, 0, 3, 3, 0, 1, 1, 2, 1,
	2, 3, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 3, 4, 4, 5, 4,
	1, 0, 2, 3, 3, 2, 3, 3, 1, 2,
	1, 3, 2, 5, 0, 3, 3, 4, 4, 3,
	4, 4, 2, 2, 0, 2, 2, 2, 2, 2,
	0, 3, 0, 1, 3, 2, 2, 0, 3, 3,
	3, 3, 0, 1, 2, 1, 0, 2, 0, 1,
	1, 2, 5, 4, 0, 2, 2, 2, 3, 3,
	2, 2, 0, 0, 4, 6, 0, 0, 3, 1,
	3, 1, 1, 9, 0, 1, 1, 1, 0, 1,
	1, 3, 1, 2, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 6, 0,
	1, 1, 3, 2, 0, 1, 1, 0, 1, 0,
	1, 1, 0, 2, 2, 5, 5, 4, 0, 1,
	1, 2, 3, 3, 2, 1, 2, 1, 1, 1,
	2, 1, 1, 1, 0, 2, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 5, 5, 4, 5, 5, 1, 4, 4, 1,
	4, 6, 1, 4, 1, 1, 1, 2, 4, 1,
	1, 4, 5, 4, 7, 4, 7, 10, 7, 1,
	4, 1, 1, 1, 1, 1, 1, 4, 4, 5,
	5, 5, 4, 5, 6, 5, 6, 1, 4, 6,
	1, 4, 6, 1, 4, 6, 1, 1, 1, 2,
	1, 1, 2, 3, 2, 1, 2, 1, 2, 1,
	6, 0, 1, 2, 1, 2, 1, 1, 2, 2,
	0, 1, 1, 0, 3, 5, 3, 0, 1, 1,
	0, 1, 1, 0, 3, 5, 0, 3, 2, 2,
	1, 1, 2, 2, 2, 2, 1, 5, 6, 7,
	9, 9, 11, 4, 4, 1, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 3, 1, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	2, 0, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 2, 1, 4, 1, 4, 0, 1, 1, 2,
	3, 3, 1, 1, 0, 3, 4, 0, 1,
}

var yyChk = [...]int16{
	-1000, -88, -18, -11, -10, -12, -13, -14, -15, -16,
	-17, 7, 15, 245, 21, 247, 56, -115, -8, 64,
	128, 197, 212, 111, 134, 77, 58, 75, 164, -20,
	-23, -22, -7, 240, 239, 4, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 80, 81, 82, 83, 84, 85, 86, 87, 88,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 236, 237, 56, -11,
	-19, -23, 56, 28, -21, -23, 222, 222, 77, -114,
	42, 248, -19, -91, -182, -183, -184, 169, -185, 159,
	248, -19, -20, -86, -87, -167, 55, 27, 156, 173,
	162, 174, 96, 171, 80, 170, 44, 176, 248, -6,
	121, -23, -165, 82, -36, -37, -38, -39, -41, 5,
	36, 47, -75, -40, -76, -42, -43, -53, 21, -49,
	53, 13, -183, 169, 159, 159, 23, -23, -116, 213,
	-155, -167, 63, 10, 246, 246, 246, -23, -157, 102,
	26, -166, 198, 92, -40, 5, 36, 21, 250, -68,
	-70, -69, 91, 58, 195, 122, 85, 250, 91, 195,
	58, 13, 91, -76, 21, -59, 227, 89, 195, 58,
	91, 13, 250, 227, -24, -23, 159, 23, 23, 201,
	234, -63, -64, -65, 250, 252, 41, 246, 246, 142,
	142, -51, -52, -50, -24, -69, -22, 250, 146, 146,
	250, -44, -47, -45, -48, -46, -24, -22, 146, 250,
	-24, -22, -62, -61, -4, 82, 141, 89, 93, 146,
	250, -22, -24, -58, -24, -59, 219, 38, 23, 201,
	234, -117, -184, -185, -119, -66, -67, -52, -68, 91,
	195, 122, 85, 160, 97, 117, 175, -81, -158, -82,
	12, -19, 251, 249, -25, -26, -34, -35, -27, -28,
	-29, -30, -32, -33, 84, 11, 166, 61, 165, 181,
	17, 99, 30, 139, 54, 109, 202, 235, 62, 182,
	40, 22, 74, 73, 34, 46, 16, -31, 140, 76,
	87, 167, 72, 50, 228, 224, -58, 250, 250, -177,
	-186, -24, 251, 249, 251, 249, -25, -2, 143, 233,
	-110, -168, -174, -175, 101, 241, 136, -110, -58, 57,
	57, -60, 86, -4, 92, -60, -60, -111, 82, -58,
	-111, 249, 251, -62, 68, 219, -118, 186, -185, -120,
	251, 249, 97, -156, 229, 226, -89, -22, -83, -22,
	-92, -52, -55, -56, 88, 250, 232, 250, 232, 250,
	232, 250, 84, 11, 250, 250, 250, 193, 250, 250,
	250, 250, 46, 250, 63, 236, 98, 250, 250, 251,
	-58, -58, 251, 32, -45, -24, -48, -24, -55, -111,
	-169, 206, 178, -175, -174, 102, 26, -111, 251, -24,
	-22, 246, -112, -113, 145, 245, 251, -112, -24, -5,
	42, 6, 68, -19, -57, 18, -67, -157, -159, -160,
	-134, -135, 42, 221, -161, 214, 179, 191, 233, 143,
	-162, -163, 45, 190, 137, 155, -138, 151, 172, 119,
	14, 37, 135, 185, 177, 216, 248, 250, -93, -1,
	214, -22, 246, 250, 246, 250, 246, 250, 246, 250,
	232, 250, 232, -54, 246, 253, -54, -54, 246, 246,
	-54, -54, 246, 223, 149, 57, 250, 57, 250, 246,
	246, -110, 251, 251, 39, 38, -107, 21, -94, -96,
	-97, 18, 127, -170, 230, -110, -114, 28, -111, 147,
	6, -121, -124, -125, 41, -56, -160, -22, 18, 246,
	246, 246, 246, 246, 65, 187, 125, 246, 250, -22,
	-84, -85, -24, -3, -2, 251, 246, 251, 79, 11,
	246, 251, 246, 251, 246, 250, 246, 250, 251, 249,
	251, 249, 251, 249, 251, 79, 11, 251, 251, 249,
	251, 251, 237, 223, 163, 246, 209, 246, 251, 251,
	-110, -77, 204, 39, -108, 100, -95, 115, 132, -98,
	169, 246, 238, 8, 66, 10, -171, 113, 105, 28,
	-111, -112, -6, 147, -122, -126, 12, 210, -125, 41,
	90, 152, 131, -178, -179, 29, 168, 161, 35, 154,
	189, 124, 123, 43, 78, 120, 83, 115, 251, 249,
	-9, 9, 20, -94, 251, 251, 251, 251, 251, 251,
	246, 251, 246, 246, 246, 246, 251, 251, 246, 237,
	251, 250, 251, -110, -19, -109, -72, -73, -70, -74,
	39, 38, 58, 195, -77, -102, -103, 230, 39, 132,
	8, 18, -172, 60, 180, -90, 250, -164, -22, -159,
	-6, -123, -127, 183, -131, -133, 118, -134, 221, -135,
	-136, 14, 49, 13, 37, -22, 94, 90, 21, 194,
	19, 251, -179, -180, 246, -180, 246, 246, 225, 225,
	-180, 246, 246, 129, -180, 39, 145, 203, 18, 145,
	175, 18, 145, 175, 18, -164, -85, -95, 251, 251,
	251, 251, 251, 251, 57, 246, 57, 41, 250, -73,
	-74, -110, 39, 146, -104, 25, 238, -98, -99, 250,
	132, 8, 41, -173, 116, -14, 15, 248, -128, -133,
	-141, 138, 242, -150, -151, -130, 130, 28, 118, 188,
	-22, 53, 217, 217, 250, 26, 102, 194, 103, 103,
	51, 51, -181, 144, 153, 126, 220, 184, 112, 246,
	-71, -72, 163, 251, 209, -78, -79, 59, 19, -58,
	-110, -105, 238, 10, 251, -100, -101, 55, 27, 156,
	173, 162, 174, 96, 171, 80, 170, 44, 176, -99,
	132, 39, 31, 251, -22, -129, 133, -142, -143, 158,
	169, -141, 250, 138, 242, -151, -132, -127, -132, -154,
	69, -22, 14, 14, -58, 250, 41, -80, 48, 82,
	53, 169, -80, 251, -106, 207, 169, -22, 251, -101,
	63, 10, 246, 246, 246, -99, 8, -19, 104, 114,
	106, -141, -144, 250, 196, 23, 70, 158, -58, -143,
	-152, -128, -153, -154, 71, 65, -139, 23, 251, 246,
	-79, 39, 18, 4, 207, 246, 148, 246, 132, -145,
	107, -58, 175, 152, 157, 131, 95, 108, 199, 81,
	251, -129, 205, -140, 244, 169, 199, 67, 251, 231,
	-99, -146, 110, 243, -148, 70, 10, 251, 152, 131,
	152, 131, 148, 244, 152, 131, 152, 131, -147, 215,
	6, -149, 23, 50, 188, 218, -24, 211, 200, 18,
	6, -22, 175,
}

var yyDef = [...]int16{
	11, -2, 1, 2, 4, 5, 6, 7, 8, 9,
	10, 0, -2, 0, 0, 11, 0, 0, 0, 0,
	0, 0, 331, 332, 333, 334, 465, 466, 467, 325,
	19, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 81, 82, 83,
	84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
	144, 145, 146, 147, 148, 149, 150, 151, 152, 153,
	154, 155, 156, 157, 158, 159, 160, 161, 162, 163,
	164, 165, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 199, 200, 201, 0, 3,
	698, 12, 0, 0, 518, 23, 329, 330, 335, 289,
	326, 0, 534, 0, 699, 700, 702, 0, 704, 0,
	0, 336, 468, 517, 519, 520, 0, 0, 0, 525,
	0, 527, 528, 529, 0, 531, 532, 533, 0, 512,
	290, 20, 536, 0, 202, 203, 204, 205, 206, 0,
	0, 0, 313, 207, 314, 209, 210, 211, 0, 273,
	0, 0, 701, 0, 0, 0, 0, 13, 457, 0,
	0, 521, 0, 0, 524, 526, 530, 24, 515, 0,
	0, 516, 537, 535, 208, 0, 0, 0, 0, 308,
	0, 656, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 16, 0, 0, 0, 710,
	711, 706, 343, 345, 0, 0, 0, 522, 523, 513,
	514, 0, 215, 217, 0, 655, 612, 0, 0, 0,
	-2, 0, 0, 274, 284, 276, 0, 621, 621, 0,
	0, 0, 305, 298, 299, 0, 302, 305, 305, 319,
	0, 319, 295, 0, 14, 297, 0, 0, 0, 703,
	705, 341, 707, 708, 346, 0, 459, 461, 462, 56,
	160, 87, 50, 337, 338, 0, 340, 509, 469, 470,
	0, 499, 213, 0, 219, 538, 539, 540, 543, 544,
	545, 546, 547, 548, 0, 549, 556, 0, 0, 597,
	600, 603, 606, 607, 608, 0, 610, 611, 0, 0,
	559, 562, 564, 565, 566, 0, 569, 570, 0, 581,
	582, 583, 584, 585, 586, 579, 0, 0, 0, 0,
	0, 718, 271, 0, 272, 0, 219, 286, 226, 227,
	319, 630, 622, 624, 626, 627, 0, 319, 0, 0,
	0, 292, 0, 300, 301, 293, 294, 322, 320, 0,
	322, 0, 296, 303, 0, 0, 327, 0, 709, 347,
	458, 0, 339, 512, 510, 511, 0, 17, 0, 500,
	214, 216, 222, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 609, 0, 0,
	0, 0, 567, 0, 0, 0, 0, 0, 0, 621,
	0, 0, 663, 0, 275, 0, 285, 0, 228, 309,
	633, 631, 632, 623, 625, 628, 629, 310, 621, 307,
	312, 306, 316, 325, 0, 324, 319, 318, 15, 291,
	304, 0, 0, 342, 349, 0, 460, 463, 471, 472,
	474, 475, 476, 0, 479, 480, 481, 482, 483, 484,
	485, 486, 0, 0, 0, 0, 380, 381, 382, 383,
	487, 492, 0, 495, 497, 0, 0, 0, 212, 224,
	223, 221, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 541, 542, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 657, 621, 0, 715, 0, 255, 0, 279, 229,
	230, 0, 0, 637, 0, 319, 321, 323, 322, 289,
	0, -2, 350, 351, 0, 348, 473, 477, 478, 376,
	377, 378, 379, 488, 489, 493, 494, 496, 0, 18,
	0, 501, 504, 228, 225, 588, 0, 550, 0, 0,
	0, 557, 0, 592, 0, 0, 0, 0, 598, 0,
	601, 0, 604, 0, 553, 0, 0, 558, 560, 0,
	563, 568, 571, 0, 573, 0, 575, 0, 587, 580,
	658, 621, 0, 716, 282, 280, 281, 258, 278, 231,
	0, 712, 713, 0, 0, 0, 640, 638, 639, 507,
	311, 317, 287, 289, 456, 0, 0, 0, 352, 0,
	0, 490, 491, 0, 665, 0, 0, 0, 0, 0,
	0, 0, 0, 677, 0, 0, 0, 689, 507, 0,
	503, 505, 506, 255, 589, 551, 552, 590, 591, 593,
	0, 595, 0, 0, 0, 0, 554, 555, 0, 572,
	0, 0, 0, 659, 0, 277, 283, 269, 0, 621,
	615, 0, 617, 0, 619, 256, 260, 0, 0, 237,
	0, 0, 643, 641, 642, 634, 0, 636, 21, 508,
	288, 344, 438, 0, 360, 367, 0, 369, 0, 372,
	373, 384, 0, 0, 390, 0, 0, 0, 0, 0,
	0, 664, 666, 667, 691, 668, 669, 670, 671, 672,
	673, 674, 675, 0, 678, 679, 680, 681, 682, 683,
	684, 685, 686, 687, 688, 498, 502, 267, 594, 596,
	599, 602, 605, 561, 0, 0, 0, 0, 0, 270,
	621, 614, 616, 618, 262, 0, 259, 232, 233, 0,
	237, 0, 0, 620, 0, 0, 464, 0, 444, 368,
	400, 404, 438, 439, 440, 359, 365, 365, 453, 0,
	370, 0, 0, 0, 0, 363, 364, 0, 353, 354,
	356, 355, 690, 692, 693, 694, 695, 696, 697, 676,
	218, 268, 574, 578, 576, 660, 661, 0, 0, 0,
	613, 264, 263, 0, 238, 0, 240, 0, 0, 0,
	246, 0, 248, 249, 250, 0, 252, 253, 254, 234,
	237, 0, 0, 635, 22, 358, 0, 438, 414, 0,
	0, 402, 0, 404, 0, 441, 438, 366, 452, 450,
	453, 371, 385, 391, 0, 0, 0, 648, 650, 651,
	0, 0, 649, 645, 257, 265, 0, 261, 239, 241,
	0, 0, 245, 247, 251, 235, 0, 644, 445, 446,
	447, 401, 420, 0, 0, 0, 413, 412, 0, 0,
	448, 444, 449, 454, 386, 387, 389, 0, 361, 0,
	662, 652, 654, 653, 266, 242, 0, 244, 237, 432,
	422, 0, 415, 416, 417, 418, 419, 405, 406, 409,
	443, 451, 0, 388, 398, 0, 392, 395, 577, 243,
	236, 436, 433, 435, 427, 423, 0, 442, 407, 408,
	410, 411, 455, 399, 393, 394, 396, 397, 403, 0,
	434, 421, 0, 0, 425, 426, 437, 0, 424, 428,
	429, 430, 431,
}

var yyTok1 = [...]uint8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	250, 251, 253, 3, 249, 3, 248, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 247,
	3, 252,
}

var yyTok2 = [...]uint8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if yyDollar[1].node != nil {
				stmt := yyDollar[1].node
				stmt.SetText(nextQuery(yylex))
				yylex.(*yyLexImpl).result = append(yylex.(*yyLexImpl).result, stmt)
			}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if yyDollar[3].node != nil {
				stmt := yyDollar[3].node
				stmt.SetText(nextQuery(yylex))
				yylex.(*yyLexImpl).result = append(yylex.(*yyLexImpl).result, stmt)
			}
		}
	case 11:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.node = nil
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.TableName{
				Table: yyDollar[1].anything.(*element.Identifier),
			}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = &ast.TableName{
				Schema: yyDollar[1].anything.(*element.Identifier),
				Table:  yyDollar[3].anything.(*element.Identifier),
			}
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*element.Identifier{yyDollar[1].anything.(*element.Identifier)}
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*element.Identifier), yyDollar[3].anything.(*element.Identifier))
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.IndexName{
				Index: yyDollar[1].anything.(*element.Identifier),
			}
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = &ast.IndexName{
				Schema: yyDollar[1].anything.(*element.Identifier),
				Index:  yyDollar[3].anything.(*element.Identifier),
			}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.SequenceName{
				Sequence: yyDollar[1].anything.(*element.Identifier),
			}
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = &ast.SequenceName{
				Schema:   yyDollar[1].anything.(*element.Identifier),
				Sequence: yyDollar[3].anything.(*element.Identifier),
			}
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeNonQuoted,
				Value: yyDollar[1].str,
			}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeNonQuoted,
				Value: yyDollar[1].str,
			}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeQuoted,
				Value: yyDollar[1].str,
			}
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.AlterTableStmt{
				TableName:         yyDollar[3].anything.(*ast.TableName),
				AlterTableClauses: yyDollar[5].anything.([]ast.AlterTableClause),
			}
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{yyDollar[1].anything.(ast.AlterTableClause)}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{yyDollar[1].anything.(ast.AlterTableClause)}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.AlterTableClause), yyDollar[2].anything.(ast.AlterTableClause))
		}
	case 212:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.anything = &ast.AddColumnClause{
				Columns: yyDollar[3].anything.([]*ast.ColumnDef),
			}
		}
	case 213:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// TODO
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// TODO
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*ast.ColumnDef{yyDollar[1].anything.(*ast.ColumnDef)}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*ast.ColumnDef), yyDollar[3].anything.(*ast.ColumnDef))
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 218:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			var collation *ast.Collation
			if yyDollar[3].anything != nil {
				collation = yyDollar[3].anything.(*ast.Collation)
			}
			props := []ast.ColumnProp{}
			sort := ast.ColumnProp(yyDollar[4].i)
			if sort != ast.ColumnPropEmpty {
				props = append(props, sort)
			}
			invisible := ast.ColumnProp(yyDollar[5].i)
			if invisible != ast.ColumnPropEmpty {
				props = append(props, invisible)
			}

			var constraints []*ast.InlineConstraint
			if yyDollar[8].anything != nil {
				constraints = yyDollar[8].anything.([]*ast.InlineConstraint)
			}

			yyVAL.anything = &ast.ColumnDef{
				ColumnName:  yyDollar[1].anything.(*element.Identifier),
				Datatype:    yyDollar[2].anything.(element.Datatype),
				Collation:   collation,
				Props:       props,
				Constraints: constraints,
			}
		}
	case 219:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.Collation{Name: yyDollar[2].anything.(*element.Identifier)}
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropEmpty)
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropSort)
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropEmpty)
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropInvisible)
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropVisible)
		}
	case 228:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*ast.InlineConstraint{yyDollar[1].anything.(*ast.InlineConstraint)}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*ast.InlineConstraint), yyDollar[2].anything.(*ast.InlineConstraint))
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyDollar[3].anything.([]*ast.ColumnDef),
			}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyDollar[3].anything.([]*ast.ColumnDef),
			}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyDollar[1].anything.([]*ast.ColumnDef),
			}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*ast.ColumnDef{yyDollar[1].anything.(*ast.ColumnDef)}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*ast.ColumnDef), yyDollar[3].anything.(*ast.ColumnDef))
		}
	case 277:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			var collation *ast.Collation
			if yyDollar[3].anything != nil {
				collation = yyDollar[3].anything.(*ast.Collation)
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyDollar[1].anything.(*element.Identifier),
				Datatype:   yyDollar[2].anything.(element.Datatype),
				Collation:  collation,
				Props:      []ast.ColumnProp{},
			}
		}
	case 282:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*ast.ColumnDef{yyDollar[1].anything.(*ast.ColumnDef)}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*ast.ColumnDef), yyDollar[3].anything.(*ast.ColumnDef))
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyDollar[1].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{ast.ColumnProp(yyDollar[2].i)},
			}
		}
	case 287:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			prop := ast.ColumnPropSubstitutable
			if yyDollar[7].b {
				prop = ast.ColumnPropSubstitutableForce
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyDollar[2].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{prop},
			}
		}
	case 288:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			prop := ast.ColumnPropNotSubstitutable
			if yyDollar[8].b {
				prop = ast.ColumnPropNotSubstitutableForce
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyDollar[2].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{prop},
			}
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.b = false
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.b = true
		}
	case 291:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			props := []ast.DropColumnProp{}
			if yyDollar[4].anything != nil {
				props = append(props, yyDollar[4].anything.([]ast.DropColumnProp)...)
			}
			online := ast.DropColumnProp(yyDollar[5].i)
			if online != ast.DropColumnPropEmpty {
				props = append(props, online)
			}
			yyVAL.anything = &ast.DropColumnClause{
				Type:    ast.DropColumnTypeSetUnused,
				Columns: yyDollar[3].anything.([]*element.Identifier),
				Props:   props,
			}
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			props := []ast.DropColumnProp{}
			if yyDollar[3].anything != nil {
				props = append(props, yyDollar[3].anything.([]ast.DropColumnProp)...)
			}
			cc := &ast.DropColumnClause{
				Type:    ast.DropColumnTypeDrop,
				Columns: yyDollar[2].anything.([]*element.Identifier),
				Props:   props,
			}
			var checkout int
			if yyDollar[4].anything != nil {
				checkout = yyDollar[4].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			cc := &ast.DropColumnClause{
				Type: ast.DropColumnTypeDropUnusedColumns,
			}
			var checkout int
			if yyDollar[4].anything != nil {
				checkout = yyDollar[4].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			cc := &ast.DropColumnClause{
				Type: ast.DropColumnTypeDropColumnsContinue,
			}
			var checkout int
			if yyDollar[4].anything != nil {
				checkout = yyDollar[4].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = []*element.Identifier{yyDollar[2].anything.(*element.Identifier)}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].anything
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.DropColumnProp{ast.DropColumnProp(yyDollar[1].i)}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.DropColumnProp), ast.DropColumnProp(yyDollar[2].i))
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.i = int(ast.DropColumnPropCascade)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.DropColumnPropInvalidate)
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.i = int(ast.DropColumnPropEmpty)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.DropColumnPropOnline)
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].i
		}
	case 307:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.anything = &ast.RenameColumnClause{
				OldName: yyDollar[3].anything.(*element.Identifier),
				NewName: yyDollar[5].anything.(*element.Identifier),
			}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{&ast.AddConstraintClause{
				Constraints: []*ast.OutOfLineConstraint{yyDollar[2].anything.(*ast.OutOfLineConstraint)},
			}}
		}
	case 309:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Name = yyDollar[3].anything.(*element.Identifier)
			yyVAL.anything = []ast.AlterTableClause{&ast.ModifyConstraintClause{
				Constraint: constraint,
			}}
		}
	case 310:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypePK
			yyVAL.anything = []ast.AlterTableClause{&ast.ModifyConstraintClause{
				Constraint: constraint,
			}}
		}
	case 311:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeUnique
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			yyVAL.anything = []ast.AlterTableClause{&ast.ModifyConstraintClause{
				Constraint: constraint,
			}}
		}
	case 312:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{&ast.RenameConstraintClause{
				OldName: yyDollar[3].anything.(*element.Identifier),
				NewName: yyDollar[5].anything.(*element.Identifier),
			}}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{yyDollar[1].anything.(ast.AlterTableClause)}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.AlterTableClause), yyDollar[2].anything.(ast.AlterTableClause))
		}
	case 316:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypePK
			yyVAL.anything = &ast.DropConstraintClause{
				Constraint: constraint,
			}
		}
	case 317:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeUnique
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			yyVAL.anything = &ast.DropConstraintClause{
				Constraint: constraint,
			}
		}
	case 318:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Name = yyDollar[3].anything.(*element.Identifier)
			yyVAL.anything = &ast.DropConstraintClause{
				Constraint: constraint,
			}
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 327:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.node = &ast.CreateTableStmt{
				TableName: yyDollar[4].anything.(*ast.TableName),
				RelTable:  yyDollar[6].anything.(*ast.RelTableDef),
			}
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 344:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			rd := &ast.RelTableDef{}
			if yyDollar[1].anything != nil {
				rd.TableStructs = yyDollar[1].anything.([]ast.TableStructDef)
			}
			yyVAL.anything = rd
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].anything
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].anything
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.TableStructDef{yyDollar[1].anything.(ast.TableStructDef)}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.TableStructDef), yyDollar[3].anything.(ast.TableStructDef))
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 463:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.node = &ast.CreateIndexStmt{
				Type:      yyDollar[2].str,
				IndexName: yyDollar[4].anything.(*ast.IndexName),
				Index:     yyDollar[7].anything.(*ast.TableIndexClause),
			}
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 498:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			alias, _ := yyDollar[2].anything.(*element.Identifier)
			yyVAL.anything = &ast.TableIndexClause{
				TableName:  yyDollar[1].anything.(*ast.TableName),
				Alias:      alias,
				IndexExprs: yyDollar[4].anything.([]ast.IndexExpr),
			}
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.IndexExpr{yyDollar[1].anything.(ast.IndexExpr)}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.IndexExpr), yyDollar[3].anything.(ast.IndexExpr))
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = ast.IndexExpr{
				Column:    yyDollar[1].anything.(*element.Identifier),
				Direction: yyDollar[2].str,
			}
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 515:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.DropIndexStmt{
				IndexName: yyDollar[2].anything.(*ast.IndexName),
			}
		}
	case 516:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.DropTableStmt{
				TableName: yyDollar[3].anything.(*ast.TableName),
			}
		}
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			// empty
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			// empty
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.NumberOrAsterisk{Number: yyDollar[1].i}
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.NumberOrAsterisk{IsAsterisk: true}
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Char{}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Char{Size: &size}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 551:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Char{Size: &size, IsByteSize: true}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 552:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Char{Size: &size, IsCharSize: true}
			d.SetDataDef(element.DataDefChar)
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 554:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Varchar2{}
			d.Size = &size
			d.IsByteSize = true
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 555:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Varchar2{}
			d.Size = &size
			d.IsCharSize = true
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.NChar{}
			d.SetDataDef(element.DataDefNChar)
			yyVAL.anything = d
		}
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNChar)
			yyVAL.anything = d
		}
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNVarChar2)
			yyVAL.anything = d
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 560:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 561:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			scale := yyDollar[5].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Float{}
			d.SetDataDef(element.DataDefFloat)
			yyVAL.anything = d
		}
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefFloat)
			yyVAL.anything = d
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.BinaryFloat{}
			d.SetDataDef(element.DataDefBinaryFloat)
			yyVAL.anything = d
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.BinaryDouble{}
			d.SetDataDef(element.DataDefBinaryDouble)
			yyVAL.anything = d
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Long{}
			d.SetDataDef(element.DataDefLong)
			yyVAL.anything = d
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			d := &element.LongRaw{}
			d.SetDataDef(element.DataDefLongRaw)
			yyVAL.anything = d
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Raw{Size: &size}
			d.SetDataDef(element.DataDefRaw)
			yyVAL.anything = d
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Date{}
			d.SetDataDef(element.DataDefDate)
			yyVAL.anything = d
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			d := yyDollar[1].anything.(*element.Timestamp)
			d.WithTimeZone = true
			yyVAL.anything = d
		}
	case 572:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			d := yyDollar[1].anything.(*element.Timestamp)
			d.WithLocalTimeZone = true
			yyVAL.anything = d
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			d := &element.IntervalYear{}
			d.SetDataDef(element.DataDefIntervalYear)
			yyVAL.anything = d
		}
	case 574:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			precision := yyDollar[4].i
			d := &element.IntervalYear{Precision: &precision}
			d.SetDataDef(element.DataDefIntervalYear)
			yyVAL.anything = d
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			d := &element.IntervalDay{}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 576:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			precision := yyDollar[4].i
			d := &element.IntervalDay{Precision: &precision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 577:
		yyDollar = yyS[yypt-10 : yypt+1]
		{
			precision := yyDollar[4].i
			sPrecision := yyDollar[9].i
			d := &element.IntervalDay{Precision: &precision, FractionalSecondsPrecision: &sPrecision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 578:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			sPrecision := yyDollar[6].i
			d := &element.IntervalDay{FractionalSecondsPrecision: &sPrecision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Timestamp{}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 580:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].i
			d := &element.Timestamp{FractionalSecondsPrecision: &precision}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Blob{}
			d.SetDataDef(element.DataDefBlob)
			yyVAL.anything = d
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Clob{}
			d.SetDataDef(element.DataDefClob)
			yyVAL.anything = d
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.NClob{}
			d.SetDataDef(element.DataDefNClob)
			yyVAL.anything = d
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.BFile{}
			d.SetDataDef(element.DataDefBFile)
			yyVAL.anything = d
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.RowId{}
			d.SetDataDef(element.DataDefRowId)
			yyVAL.anything = d
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.URowId{}
			d.SetDataDef(element.DataDefURowId)
			yyVAL.anything = d
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.URowId{Size: &size}
			d.SetDataDef(element.DataDefURowId)
			yyVAL.anything = d
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Char{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharacter)
			yyVAL.anything = d
		}
	case 589:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharacterVarying)
			yyVAL.anything = d
		}
	case 590:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharVarying)
			yyVAL.anything = d
		}
	case 591:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNCharVarying)
			yyVAL.anything = d
		}
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefVarchar)
			yyVAL.anything = d
		}
	case 593:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNationalCharacter)
			yyVAL.anything = d
		}
	case 594:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			size := yyDollar[5].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNationalCharacterVarying)
			yyVAL.anything = d
		}
	case 595:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNationalChar)
			yyVAL.anything = d
		}
	case 596:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			size := yyDollar[5].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNationalCharVarying)
			yyVAL.anything = d
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 598:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 599:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			scale := yyDollar[5].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 601:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 602:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			scale := yyDollar[5].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 604:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 605:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			scale := yyDollar[5].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefInteger)
			yyVAL.anything = d
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefInt)
			yyVAL.anything = d
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefSmallInt)
			yyVAL.anything = d
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 126}
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefDoublePrecision)
			yyVAL.anything = d
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 63}
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefReal)
			yyVAL.anything = d
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.XMLType{}
			d.SetDataDef(element.DataDefXMLType)
			yyVAL.anything = d
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].anything
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			constraint := yyDollar[2].anything.(*ast.InlineConstraint)
			constraint.Name = yyDollar[1].anything.(*element.Identifier)
			yyVAL.anything = constraint
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypeNull,
			}
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypeNotNull,
			}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypeUnique,
			}
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypePK,
			}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypeReferences,
			}
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 645:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			clause := &ast.ReferenceClause{}
			clause.Columns = yyDollar[4].anything.([]*element.Identifier)
			clause.Table = yyDollar[2].anything.(*ast.TableName)
			yyVAL.anything = clause
		}
	case 646:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.ReferenceOption{
				Type: yyDollar[2].anything.(ast.ReferenceAction),
			}
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.ReferenceOption{
				Type: yyDollar[2].anything.(ast.ReferenceAction),
			}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = ast.RefOptRestrict
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = ast.RefOptCascade
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = ast.RefOptSetNull
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = ast.RefOptNoAction
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = ast.RefOptSetDefault
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			constraint := yyDollar[2].anything.(*ast.OutOfLineConstraint)
			constraint.Name = yyDollar[1].anything.(*element.Identifier)
			yyVAL.anything = constraint
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 657:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeUnique
			constraint.Columns = yyDollar[3].anything.([]*element.Identifier)
			yyVAL.anything = constraint
		}
	case 658:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypePK
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			yyVAL.anything = constraint
		}
	case 659:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeReferences
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			constraint.Reference = yyDollar[6].anything.(*ast.ReferenceClause)
			yyVAL.anything = constraint
		}
	case 660:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeReferences
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			constraint.Reference = yyDollar[6].anything.(*ast.ReferenceClause)
			constraint.UpdateAction = yyDollar[9].anything.(*ast.ReferenceOption)
			yyVAL.anything = constraint
		}
	case 661:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeReferences
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			constraint.Reference = yyDollar[6].anything.(*ast.ReferenceClause)
			constraint.DeleteAction = yyDollar[9].anything.(*ast.ReferenceOption)
			yyVAL.anything = constraint
		}
	case 662:
		yyDollar = yyS[yypt-11 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeReferences
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			constraint.Reference = yyDollar[6].anything.(*ast.ReferenceClause)
			constraint.UpdateAction = yyDollar[9].anything.(*ast.ReferenceOption)
			constraint.DeleteAction = yyDollar[11].anything.(*ast.ReferenceOption)
			yyVAL.anything = constraint
		}
	case 663:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.anything = &ast.OutOfLineConstraint{}
		}
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 698:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 706:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	}
	goto yystack /* stack new state and value */
}

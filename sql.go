// Code generated by goyacc -o sql.go -l sql.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

import (
	"strings"

	"github.com/codeindex2937/oracle-sql-parser/ast"
	"github.com/codeindex2937/oracle-sql-parser/ast/element"
)

func nextQuery(yylex interface{}) string {
	lex := yylex.(*yyLexImpl)
	tc := lex.scanner.TC
	query := string(lex.scanner.Text[lex.lastPos:tc])
	lex.lastPos = tc
	return strings.TrimSpace(query)
}

type yySymType struct {
	yys      int
	nothing  struct{}
	i        int
	b        bool
	str      string
	node     ast.Node
	anything interface{}
}

const _action = 57346
const _add = 57347
const _all = 57348
const _alter = 57349
const _as = 57350
const _asc = 57351
const _by = 57352
const _char = 57353
const _cluster = 57354
const _column = 57355
const _compress = 57356
const _create = 57357
const _date = 57358
const _decimal = 57359
const _default = 57360
const _delete = 57361
const _desc = 57362
const _drop = 57363
const _float = 57364
const _for = 57365
const _from = 57366
const _grant = 57367
const _identified = 57368
const _immediate = 57369
const _increment = 57370
const _index = 57371
const _initial = 57372
const _insert = 57373
const _integer = 57374
const _into = 57375
const _is = 57376
const _level = 57377
const _long = 57378
const _maxextents = 57379
const _modify = 57380
const _nocompress = 57381
const _not = 57382
const _null = 57383
const _number = 57384
const _on = 57385
const _online = 57386
const _optimal = 57387
const _order = 57388
const _pctfree = 57389
const _raw = 57390
const _rename = 57391
const _restrict = 57392
const _row = 57393
const _rowid = 57394
const _rows = 57395
const _select = 57396
const _sequence = 57397
const _set = 57398
const _smallInt = 57399
const _start = 57400
const _table = 57401
const _to = 57402
const _unique = 57403
const _update = 57404
const _validate = 57405
const _varchar = 57406
const _varchar2 = 57407
const _with = 57408
const _advanced = 57409
const _always = 57410
const _archive = 57411
const _at = 57412
const _attributes = 57413
const _auto = 57414
const _basic = 57415
const _bfile = 57416
const _binaryDouble = 57417
const _binaryFloat = 57418
const _bitmap = 57419
const _blob = 57420
const _blockchain = 57421
const _buffer_pool = 57422
const _byte = 57423
const _cache = 57424
const _capacity = 57425
const _cascade = 57426
const _cell_flash_cache = 57427
const _character = 57428
const _check = 57429
const _checkpoint = 57430
const _clob = 57431
const _collate = 57432
const _columns = 57433
const _commit = 57434
const _constraint = 57435
const _constraints = 57436
const _continue = 57437
const _creation = 57438
const _critical = 57439
const _cycle = 57440
const _data = 57441
const _day = 57442
const _dec = 57443
const _decrypt = 57444
const _deferrable = 57445
const _deferred = 57446
const _definition = 57447
const _delete_all = 57448
const _disable = 57449
const _disable_all = 57450
const _distribute = 57451
const _dml = 57452
const _double = 57453
const _duplicate = 57454
const _duplicated = 57455
const _E = 57456
const _enable = 57457
const _enable_all = 57458
const _encrypt = 57459
const _exceptions = 57460
const _extended = 57461
const _external = 57462
const _filesystem_like_logging = 57463
const _flash_cache = 57464
const _force = 57465
const _foreign = 57466
const _freelist = 57467
const _freelists = 57468
const _full = 57469
const _G = 57470
const _generated = 57471
const _global = 57472
const _groups = 57473
const _heap = 57474
const _high = 57475
const _identity = 57476
const _ilm = 57477
const _immutable = 57478
const _indexing = 57479
const _initially = 57480
const _initrans = 57481
const _inmemory = 57482
const _int = 57483
const _interval = 57484
const _invalidate = 57485
const _invalidation = 57486
const _invisible = 57487
const _K = 57488
const _keep = 57489
const _key = 57490
const _levels = 57491
const _limit = 57492
const _local = 57493
const _locking = 57494
const _logging = 57495
const _low = 57496
const _M = 57497
const _maxsize = 57498
const _maxtrans = 57499
const _maxvalue = 57500
const _medium = 57501
const _memcompress = 57502
const _memoptimize = 57503
const _metadata = 57504
const _minextents = 57505
const _minvalue = 57506
const _month = 57507
const _multivalue = 57508
const _national = 57509
const _nchar = 57510
const _nclob = 57511
const _next = 57512
const _no = 57513
const _nocache = 57514
const _nocycle = 57515
const _nologging = 57516
const _nomaxvalue = 57517
const _nominvalue = 57518
const _none = 57519
const _noorder = 57520
const _noparallel = 57521
const _norely = 57522
const _nosort = 57523
const _novalidate = 57524
const _numeric = 57525
const _nvarchar2 = 57526
const _organization = 57527
const _P = 57528
const _parallel = 57529
const _parent = 57530
const _partial = 57531
const _partition = 57532
const _pctincrease = 57533
const _pctused = 57534
const _peverse = 57535
const _policy = 57536
const _precision = 57537
const _preserve = 57538
const _primary = 57539
const _priority = 57540
const _private = 57541
const _purge = 57542
const _query = 57543
const _range = 57544
const _read = 57545
const _real = 57546
const _recycle = 57547
const _references = 57548
const _reject = 57549
const _rely = 57550
const _salt = 57551
const _scope = 57552
const _second = 57553
const _segment = 57554
const _service = 57555
const _sharded = 57556
const _sharding = 57557
const _sort = 57558
const _spatial = 57559
const _storage = 57560
const _store = 57561
const _subpartition = 57562
const _substitutable = 57563
const _T = 57564
const _tablespace = 57565
const _temporary = 57566
const _time = 57567
const _timestamp = 57568
const _unlimited = 57569
const _unusable = 57570
const _unused = 57571
const _urowid = 57572
const _usable = 57573
const _using = 57574
const _value = 57575
const _varying = 57576
const _visible = 57577
const _write = 57578
const _XMLType = 57579
const _year = 57580
const _zone = 57581
const _singleQuoteStr = 57582
const _doubleQuoteStr = 57583
const _nonquotedIdentifier = 57584
const _not_deferrable = 57585
const _no_inmemory = 57586
const _no_duplicate = 57587
const _row_level_locking = 57588
const _drop_index = 57589
const _intNumber = 57590

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"_action",
	"_add",
	"_all",
	"_alter",
	"_as",
	"_asc",
	"_by",
	"_char",
	"_cluster",
	"_column",
	"_compress",
	"_create",
	"_date",
	"_decimal",
	"_default",
	"_delete",
	"_desc",
	"_drop",
	"_float",
	"_for",
	"_from",
	"_grant",
	"_identified",
	"_immediate",
	"_increment",
	"_index",
	"_initial",
	"_insert",
	"_integer",
	"_into",
	"_is",
	"_level",
	"_long",
	"_maxextents",
	"_modify",
	"_nocompress",
	"_not",
	"_null",
	"_number",
	"_on",
	"_online",
	"_optimal",
	"_order",
	"_pctfree",
	"_raw",
	"_rename",
	"_restrict",
	"_row",
	"_rowid",
	"_rows",
	"_select",
	"_sequence",
	"_set",
	"_smallInt",
	"_start",
	"_table",
	"_to",
	"_unique",
	"_update",
	"_validate",
	"_varchar",
	"_varchar2",
	"_with",
	"_advanced",
	"_always",
	"_archive",
	"_at",
	"_attributes",
	"_auto",
	"_basic",
	"_bfile",
	"_binaryDouble",
	"_binaryFloat",
	"_bitmap",
	"_blob",
	"_blockchain",
	"_buffer_pool",
	"_byte",
	"_cache",
	"_capacity",
	"_cascade",
	"_cell_flash_cache",
	"_character",
	"_check",
	"_checkpoint",
	"_clob",
	"_collate",
	"_columns",
	"_commit",
	"_constraint",
	"_constraints",
	"_continue",
	"_creation",
	"_critical",
	"_cycle",
	"_data",
	"_day",
	"_dec",
	"_decrypt",
	"_deferrable",
	"_deferred",
	"_definition",
	"_delete_all",
	"_disable",
	"_disable_all",
	"_distribute",
	"_dml",
	"_double",
	"_duplicate",
	"_duplicated",
	"_E",
	"_enable",
	"_enable_all",
	"_encrypt",
	"_exceptions",
	"_extended",
	"_external",
	"_filesystem_like_logging",
	"_flash_cache",
	"_force",
	"_foreign",
	"_freelist",
	"_freelists",
	"_full",
	"_G",
	"_generated",
	"_global",
	"_groups",
	"_heap",
	"_high",
	"_identity",
	"_ilm",
	"_immutable",
	"_indexing",
	"_initially",
	"_initrans",
	"_inmemory",
	"_int",
	"_interval",
	"_invalidate",
	"_invalidation",
	"_invisible",
	"_K",
	"_keep",
	"_key",
	"_levels",
	"_limit",
	"_local",
	"_locking",
	"_logging",
	"_low",
	"_M",
	"_maxsize",
	"_maxtrans",
	"_maxvalue",
	"_medium",
	"_memcompress",
	"_memoptimize",
	"_metadata",
	"_minextents",
	"_minvalue",
	"_month",
	"_multivalue",
	"_national",
	"_nchar",
	"_nclob",
	"_next",
	"_no",
	"_nocache",
	"_nocycle",
	"_nologging",
	"_nomaxvalue",
	"_nominvalue",
	"_none",
	"_noorder",
	"_noparallel",
	"_norely",
	"_nosort",
	"_novalidate",
	"_numeric",
	"_nvarchar2",
	"_organization",
	"_P",
	"_parallel",
	"_parent",
	"_partial",
	"_partition",
	"_pctincrease",
	"_pctused",
	"_peverse",
	"_policy",
	"_precision",
	"_preserve",
	"_primary",
	"_priority",
	"_private",
	"_purge",
	"_query",
	"_range",
	"_read",
	"_real",
	"_recycle",
	"_references",
	"_reject",
	"_rely",
	"_salt",
	"_scope",
	"_second",
	"_segment",
	"_service",
	"_sharded",
	"_sharding",
	"_sort",
	"_spatial",
	"_storage",
	"_store",
	"_subpartition",
	"_substitutable",
	"_T",
	"_tablespace",
	"_temporary",
	"_time",
	"_timestamp",
	"_unlimited",
	"_unusable",
	"_unused",
	"_urowid",
	"_usable",
	"_using",
	"_value",
	"_varying",
	"_visible",
	"_write",
	"_XMLType",
	"_year",
	"_zone",
	"_singleQuoteStr",
	"_doubleQuoteStr",
	"_nonquotedIdentifier",
	"_not_deferrable",
	"_no_inmemory",
	"_no_duplicate",
	"_row_level_locking",
	"_drop_index",
	"_intNumber",
	"';'",
	"'.'",
	"','",
	"'('",
	"')'",
	"'='",
	"'*'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 13,
	59, 329,
	-2, 465,
	-1, 365,
	253, 724,
	-2, 727,
	-1, 668,
	1, 358,
	161, 358,
	188, 358,
	249, 358,
	-2, 363,
}

const yyPrivate = 57344

const yyLast = 1962

var yyAct = [...]int16{
	33, 895, 389, 972, 388, 943, 905, 588, 986, 587,
	832, 338, 975, 218, 953, 994, 804, 911, 983, 476,
	803, 586, 907, 7, 806, 736, 32, 733, 688, 850,
	219, 824, 984, 223, 761, 259, 655, 670, 569, 811,
	473, 520, 493, 630, 227, 826, 300, 805, 478, 401,
	479, 519, 238, 369, 377, 487, 379, 368, 402, 472,
	314, 236, 328, 276, 403, 275, 762, 631, 955, 980,
	713, 607, 348, 765, 632, 696, 497, 1065, 1074, 334,
	497, 770, 1057, 316, 970, 334, 964, 323, 497, 497,
	1035, 1000, 776, 716, 775, 715, 608, 710, 954, 709,
	708, 589, 707, 706, 599, 705, 497, 940, 650, 319,
	497, 497, 649, 573, 1021, 315, 771, 955, 497, 321,
	565, 773, 962, 497, 507, 546, 506, 332, 497, 471,
	498, 470, 469, 880, 468, 964, 879, 419, 960, 418,
	712, 878, 877, 876, 875, 695, 318, 954, 799, 797,
	840, 838, 794, 774, 793, 788, 786, 330, 772, 333,
	785, 769, 768, 330, 784, 783, 782, 781, 1020, 334,
	726, 962, 725, 981, 718, 717, 841, 714, 606, 700,
	698, 979, 629, 692, 599, 644, 642, 960, 839, 627,
	549, 527, 766, 525, 609, 896, 601, 1020, 956, 764,
	628, 979, 596, 523, 958, 992, 763, 626, 921, 526,
	604, 524, 963, 961, 602, 957, 959, 885, 965, 317,
	798, 522, 219, 322, 230, 704, 702, 767, 685, 624,
	622, 605, 219, 32, 241, 620, 611, 614, 593, 545,
	544, 261, 540, 219, 610, 264, 538, 956, 537, 600,
	594, 536, 289, 958, 535, 533, 532, 531, 606, 528,
	365, 963, 961, 331, 957, 959, 464, 965, 463, 385,
	299, 374, 362, 592, 311, 612, 601, 908, 320, 320,
	590, 311, 347, 417, 231, 904, 337, 737, 613, 848,
	604, 258, 595, 1005, 602, 329, 240, 229, 36, 35,
	1043, 329, 739, 681, 862, 17, 1044, 355, 1036, 823,
	738, 605, 711, 1011, 359, 1010, 361, 694, 335, 313,
	856, 1009, 372, 371, 335, 12, 376, 375, 855, 600,
	936, 882, 859, 13, 386, 307, 312, 387, 326, 15,
	858, 851, 951, 16, 853, 851, 795, 792, 791, 854,
	359, 790, 789, 787, 571, 612, 739, 724, 722, 703,
	835, 219, 701, 416, 738, 699, 697, 462, 467, 693,
	357, 684, 679, 1062, 360, 678, 677, 645, 643, 484,
	676, 909, 647, 646, 639, 1069, 636, 635, 625, 623,
	495, 621, 619, 483, 568, 313, 351, 398, 1042, 390,
	350, 298, 297, 296, 1080, 361, 397, 480, 335, 1097,
	908, 245, 980, 918, 675, 949, 513, 515, 516, 420,
	480, 1096, 359, 36, 35, 893, 796, 719, 395, 496,
	394, 543, 342, 474, 343, 489, 235, 1066, 491, 492,
	212, 814, 482, 661, 511, 499, 336, 510, 1061, 720,
	504, 1090, 225, 31, 572, 224, 641, 920, 501, 919,
	392, 607, 1086, 395, 617, 343, 935, 291, 547, 548,
	1094, 941, 552, 723, 554, 1041, 753, 559, 518, 865,
	932, 1059, 729, 1095, 680, 1056, 608, 567, 566, 304,
	1064, 589, 232, 1003, 599, 847, 534, 845, 930, 916,
	575, 683, 503, 847, 820, 558, 939, 931, 721, 286,
	359, 851, 1054, 332, 909, 219, 981, 580, 1070, 556,
	808, 807, 618, 475, 555, 553, 564, 551, 561, 560,
	640, 1002, 808, 807, 286, 574, 239, 21, 934, 976,
	1024, 809, 239, 28, 285, 333, 237, 481, 339, 287,
	977, 1079, 890, 809, 28, 313, 584, 583, 585, 29,
	481, 27, 871, 682, 316, 14, 648, 1084, 606, 542,
	29, 840, 838, 315, 933, 750, 633, 634, 666, 364,
	1099, 637, 638, 868, 609, 662, 601, 363, 1083, 1091,
	319, 674, 596, 384, 373, 25, 995, 841, 36, 35,
	604, 380, 997, 1055, 602, 599, 353, 673, 863, 839,
	1082, 352, 22, 482, 686, 663, 665, 689, 26, 1092,
	973, 605, 1063, 821, 672, 1045, 611, 318, 593, 1078,
	996, 1081, 409, 1076, 610, 967, 897, 36, 35, 600,
	594, 391, 816, 759, 36, 35, 735, 860, 30, 331,
	1077, 1053, 410, 914, 1075, 658, 293, 691, 654, 30,
	381, 658, 260, 592, 758, 612, 864, 901, 734, 727,
	590, 284, 846, 265, 927, 242, 754, 810, 1047, 606,
	924, 23, 595, 1015, 732, 1017, 729, 1052, 925, 810,
	728, 869, 922, 1016, 302, 408, 24, 601, 729, 734,
	317, 745, 749, 563, 748, 747, 508, 755, 1050, 744,
	411, 604, 866, 1051, 843, 602, 490, 998, 383, 305,
	844, 870, 757, 324, 431, 382, 926, 780, 521, 452,
	436, 1049, 605, 488, 530, 447, 494, 263, 226, 1073,
	1032, 219, 867, 801, 915, 438, 1031, 825, 800, 450,
	600, 987, 579, 500, 842, 446, 913, 1022, 1007, 541,
	836, 451, 834, 294, 247, 459, 659, 945, 883, 923,
	440, 301, 659, 740, 881, 742, 612, 433, 444, 689,
	562, 835, 256, 539, 486, 829, 827, 458, 449, 448,
	485, 455, 216, 852, 246, 849, 857, 306, 220, 430,
	861, 1072, 456, 325, 214, 873, 1023, 872, 874, 529,
	944, 210, 18, 927, 437, 928, 898, 993, 254, 228,
	886, 577, 884, 756, 441, 671, 888, 213, 349, 1039,
	887, 652, 651, 741, 252, 215, 917, 836, 968, 834,
	906, 894, 889, 815, 730, 840, 838, 902, 673, 550,
	969, 899, 1038, 308, 439, 454, 746, 664, 474, 271,
	221, 283, 892, 1089, 1034, 393, 341, 283, 340, 310,
	288, 841, 327, 778, 945, 280, 818, 582, 903, 599,
	434, 432, 457, 839, 779, 990, 309, 989, 3, 1008,
	946, 950, 272, 295, 248, 938, 435, 445, 1087, 966,
	250, 1013, 817, 273, 282, 971, 217, 947, 255, 253,
	282, 249, 251, 667, 257, 578, 1040, 442, 466, 988,
	762, 836, 836, 834, 834, 234, 991, 765, 982, 929,
	760, 465, 978, 985, 900, 770, 819, 743, 660, 461,
	557, 477, 354, 460, 303, 262, 598, 597, 475, 591,
	443, 1004, 833, 606, 413, 886, 509, 292, 1029, 1027,
	910, 999, 1088, 1071, 1085, 1068, 1046, 1006, 1019, 1012,
	771, 601, 974, 1060, 1033, 773, 603, 837, 831, 912,
	752, 219, 669, 1014, 1025, 604, 828, 751, 668, 602,
	1028, 505, 836, 1026, 834, 906, 1030, 1018, 399, 1037,
	502, 396, 290, 19, 570, 802, 605, 774, 731, 653,
	1001, 948, 772, 891, 813, 769, 768, 830, 812, 952,
	657, 656, 615, 517, 600, 1048, 233, 822, 512, 1,
	211, 244, 1058, 37, 243, 687, 514, 414, 412, 942,
	274, 937, 400, 346, 345, 344, 766, 1067, 378, 581,
	612, 279, 356, 764, 358, 835, 281, 367, 370, 366,
	763, 278, 277, 270, 269, 268, 267, 266, 423, 422,
	429, 428, 453, 427, 426, 425, 424, 421, 222, 2,
	11, 767, 10, 9, 8, 6, 5, 4, 777, 1093,
	316, 20, 34, 576, 690, 1098, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 407, 59, 60, 61,
	62, 63, 404, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 406, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 405, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 37, 208, 209, 616,
	36, 35, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 38,
	39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 80, 81, 82, 83, 84, 85, 86, 87, 88,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 37,
	208, 209, 0, 36, 35, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 38, 39, 40, 41, 42, 43, 44, 45,
	46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
	86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 138, 139, 140, 141, 142, 143, 144, 145,
	146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
	156, 157, 158, 159, 160, 161, 162, 163, 164, 165,
	166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
	176, 177, 178, 179, 180, 181, 182, 183, 184, 185,
	186, 187, 188, 189, 190, 191, 192, 193, 194, 195,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 207, 0, 208, 209, 431, 36, 35, 0, 0,
	452, 436, 0, 0, 0, 0, 447, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 438, 0, 0, 0,
	450, 0, 0, 0, 0, 0, 446, 0, 0, 0,
	0, 0, 451, 0, 0, 0, 459, 0, 0, 0,
	0, 440, 0, 0, 0, 0, 0, 0, 433, 444,
	0, 0, 0, 0, 0, 0, 0, 0, 458, 449,
	448, 0, 455, 0, 0, 0, 0, 0, 0, 0,
	430, 0, 0, 456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 437, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 439, 454, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 434, 432, 457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 435, 445, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 442, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	461, 0, 0, 0, 460, 0, 0, 0, 0, 0,
	0, 443,
}

var yyPact = [...]int16{
	318, -1000, 56, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 753, 482, 1495, 752, 773, 318, 1495, 739,
	831, 1495, 231, 228, -1000, -1000, 659, -1000, -1000, -1000,
	-1000, 775, 47, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1495, 241, -1000, -1000, -1000, -1000, -1000, -1000, 375, 46,
	1495, 1495, 736, 41, -1000, -1000, -1000, 539, -1000, 1495,
	653, 1495, 773, 854, 373, -1000, -1000, 388, -1000, 847,
	1495, 252, -1000, -1000, 736, -1000, 697, 883, 155, -1000,
	154, -1000, -1000, -1000, 153, -1000, -1000, -1000, 1495, 667,
	-1000, -1000, 289, 625, 737, -1000, -1000, -1000, -1000, 848,
	-1000, 22, 26, 710, 851, -1000, -1000, -1000, -1000, -1000,
	66, -1000, 217, 1495, -1000, 387, 845, 843, 229, -1000,
	30, -182, 785, -1000, 152, 148, -1000, -1000, -1000, -1000,
	-1000, 467, 462, -1000, -1000, -1000, 182, -1000, 29, 27,
	72, 1495, -1000, 503, -1000, 182, 20, 439, 431, 8,
	1495, 182, 446, 19, 1495, 182, -1000, 452, 517, 634,
	623, 445, 17, 182, 1495, 1495, 156, 420, -1000, 842,
	198, 227, -1000, -1000, 381, -1000, -1000, 1029, 533, 1262,
	-1000, -1000, -1000, -1000, 32, -1000, -114, -1000, -1000, 1724,
	-1000, -1000, 1495, 16, 14, 1495, -119, -122, -1000, -1000,
	-1000, 713, 304, 304, 1495, 730, 724, 645, 517, -1000,
	622, -1000, 645, 645, 652, 1495, 652, -1000, -123, -1000,
	517, 683, 237, 192, -1000, -1000, 314, 348, -1000, -1000,
	-127, -1000, -1000, -1000, 182, 439, 431, 8, -1000, -1000,
	607, -1000, 216, -1000, -1000, 182, 182, 182, -1000, 1495,
	638, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-31, -41, -43, 7, 723, 5, 4, 3, -1000, -1000,
	-1000, 301, -1000, -1000, 2, -1, -4, -6, -1000, -1000,
	735, -10, -1000, 693, 331, -1000, -1000, -1000, -1000, -1000,
	-12, -13, -128, 1495, 1495, -63, 815, -1000, -1000, 1495,
	-1000, 1495, 638, -1000, -1000, -1000, 652, 297, 475, 317,
	-1000, -1000, 676, 652, -133, 1495, 182, -1000, 146, -1000,
	-1000, -1000, -1000, 207, -1000, -140, 207, 1495, -1000, 777,
	909, 682, -1000, 1495, -1000, 859, -1000, 1029, -1000, 667,
	-1000, -1000, 447, 38, -15, -1000, -1000, -1000, -1000, 248,
	-1000, 182, 144, -17, 143, -22, 141, -23, 140, -45,
	-52, -181, -181, -181, -1000, 139, 138, -181, -181, -1000,
	136, 305, 126, 125, 135, 134, 304, -141, -145, -1000,
	791, -1000, 1724, -1000, 288, 637, -1000, 211, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 304, -1000, -1000, -1000, -1000,
	775, 828, -1000, 652, -1000, -1000, -1000, -1000, 429, 907,
	-1000, 782, 638, -1000, -1000, 447, -1000, -1000, -1000, -1000,
	396, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 132,
	128, 127, 124, -1000, -1000, -1000, -1000, 236, -1000, 374,
	123, -1000, -24, 182, 1495, -1000, 288, -1000, -1000, -70,
	121, 64, 118, -73, 117, -74, 114, -26, 111, -27,
	-148, -1000, -1000, -151, -154, 59, -76, -158, -78, -79,
	188, 224, 343, 110, 262, 109, -81, -83, -1000, 304,
	276, -1000, 803, 582, 512, -1000, -1000, -1000, 116, 765,
	594, 827, 652, -1000, -1000, 207, 539, 426, 464, 780,
	-1000, 630, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 510, -1000, -1000, -1000, 890, -1000, -159, -1000, 864,
	643, -1000, -1000, -86, -1000, -87, -88, -89, -1000, -93,
	-1000, -97, 105, -98, 104, -1000, 103, -1000, 100, -1000,
	99, -1000, -99, -101, -1000, -1000, 98, -1000, -1000, -1000,
	187, -1000, -104, -32, -105, -1000, -1000, -1000, 304, 1495,
	-1000, 480, -1000, -1000, 209, -1000, -1000, 802, -1000, -1000,
	508, 894, 858, 441, -1000, -1000, 57, -1000, -1000, -1000,
	539, -1000, 832, 182, 618, -1000, 628, 476, -1000, -1000,
	36, -1000, 97, 97, 96, 101, 93, 92, 84, 516,
	263, 461, 565, 544, -1000, 447, 1495, -1000, -1000, -1000,
	551, -1000, -1000, -1000, -1000, -1000, -1000, -109, -1000, -110,
	-111, -112, -117, -1000, -1000, -120, -1000, 714, 83, 708,
	779, -35, -1000, 480, -1000, 492, 304, -1000, 801, -1000,
	404, -1000, -1000, 836, 185, 62, -57, 502, 808, 549,
	-1000, -1000, -1000, 863, -1000, 35, 447, -1000, -1000, 137,
	624, -1000, -1000, 309, -1000, 357, -1000, -1000, -1000, 240,
	238, -1000, -44, 665, 484, 583, 621, 762, -1000, -1000,
	-1000, 352, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	82, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 480, -1000, -1000, -1000, -1000, -1000,
	-1000, 341, -146, 260, 748, 1495, -1000, 304, -1000, -1000,
	-1000, 175, 881, -1000, -1000, -1000, 89, -57, 501, 797,
	-1000, 817, -169, 493, 182, 485, -1000, -1000, 379, -71,
	272, -1000, -1000, 558, 558, -1000, 680, -1000, 182, 873,
	871, 1495, -1000, -1000, 760, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 480, -1000,
	-1000, -47, 774, -1000, 546, 546, -162, -1000, 322, -1000,
	182, -1000, 40, -1000, 692, 879, 73, -1000, 67, -1000,
	-1000, -1000, 65, -1000, -1000, -1000, -1000, -57, 893, 1495,
	-1000, -1000, -1000, 577, 272, -84, 734, 380, -1000, 1495,
	379, -51, -1000, 270, 558, -1000, -1000, -1000, -1000, 673,
	841, -163, 60, 855, -1000, -1000, -1000, 811, 912, -1000,
	-1000, -1000, -1000, 266, -1000, -1000, -1000, 150, 58, -1000,
	-1000, -1000, -1000, 491, -1000, -1000, -1000, -1000, -1000, 569,
	1495, 554, 402, -1000, -1000, -171, -55, -1000, 485, -1000,
	274, -1000, -1000, 202, 421, -1000, -176, -1000, -1000, -1000,
	-1000, -1000, -1000, 204, -1000, -57, 273, 729, -175, -1000,
	-1000, -1000, -1000, -1000, -1000, 500, 496, -1000, -1000, 401,
	-1000, -1000, 158, 477, 434, -1000, -1000, -1000, 245, 892,
	-1000, 840, -1000, 399, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1495, -1000, -1000, 257,
	281, -1000, -1000, -1000, 403, -1000, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1269, 40, 1094, 56, 1093, 35, 1092, 1091, 1088,
	440, 1087, 888, 1086, 1085, 23, 1084, 1083, 1082, 1080,
	1079, 13, 453, 1078, 0, 11, 2, 59, 1077, 1076,
	1075, 1074, 1073, 1072, 1071, 1070, 1069, 1068, 1067, 1066,
	1065, 1064, 65, 1063, 1062, 1061, 1059, 57, 1058, 1057,
	53, 1056, 1054, 1052, 58, 1051, 43, 51, 41, 1049,
	4, 62, 55, 1048, 54, 1045, 1044, 1043, 1042, 49,
	64, 60, 47, 1041, 20, 16, 24, 1040, 63, 39,
	1039, 5, 15, 1038, 1037, 1036, 1035, 28, 1034, 1031,
	1030, 1029, 1028, 1027, 1026, 1023, 1022, 36, 27, 1021,
	1020, 25, 1, 1019, 14, 1018, 1014, 1013, 1011, 1010,
	1009, 1008, 1005, 19, 42, 38, 1004, 44, 1003, 1002,
	1001, 1000, 998, 991, 988, 987, 986, 982, 37, 980,
	32, 6, 3, 979, 978, 18, 10, 9, 7, 977,
	977, 976, 974, 973, 22, 972, 12, 968, 966, 965,
	964, 963, 962, 960, 17, 959, 958, 8, 957, 956,
	46, 954, 45, 21, 949, 947, 946, 31, 945, 944,
	411, 942, 941, 940, 938, 937, 936, 934, 48, 50,
	934, 931, 930, 34, 29, 929, 925, 436, 61, 52,
	918,
}

var yyR1 = [...]uint8{
	0, 91, 20, 20, 12, 12, 12, 12, 12, 12,
	12, 12, 11, 21, 21, 60, 60, 26, 92, 92,
	22, 22, 93, 93, 23, 23, 25, 25, 24, 24,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 13, 38, 38, 39, 39, 41, 41,
	42, 42, 42, 44, 95, 96, 53, 53, 54, 52,
	57, 57, 58, 1, 1, 3, 3, 2, 2, 97,
	97, 97, 99, 99, 100, 100, 100, 100, 102, 102,
	102, 103, 103, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 98, 98, 105, 106,
	106, 107, 107, 108, 108, 109, 109, 109, 73, 73,
	74, 74, 45, 45, 45, 46, 46, 47, 48, 110,
	110, 111, 111, 112, 112, 49, 49, 50, 51, 51,
	6, 6, 55, 55, 55, 55, 61, 61, 64, 64,
	63, 63, 4, 4, 5, 5, 62, 62, 43, 40,
	40, 40, 40, 40, 40, 77, 77, 78, 78, 78,
	114, 114, 115, 116, 116, 116, 117, 117, 14, 118,
	118, 118, 118, 118, 118, 118, 118, 119, 119, 119,
	119, 119, 121, 121, 65, 66, 122, 123, 59, 59,
	124, 124, 124, 124, 127, 127, 128, 128, 125, 125,
	125, 125, 125, 129, 129, 129, 135, 135, 130, 130,
	136, 136, 136, 136, 136, 140, 140, 137, 137, 137,
	137, 137, 138, 138, 138, 139, 139, 139, 139, 139,
	139, 139, 142, 142, 142, 142, 142, 142, 142, 143,
	143, 131, 131, 131, 145, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 147, 147, 147, 147, 147,
	147, 148, 148, 151, 151, 151, 151, 151, 152, 152,
	152, 152, 152, 149, 149, 149, 149, 150, 150, 144,
	144, 153, 153, 154, 154, 132, 132, 132, 132, 133,
	133, 133, 155, 156, 157, 134, 134, 126, 67, 67,
	68, 68, 69, 69, 15, 8, 8, 8, 8, 158,
	83, 83, 161, 162, 162, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 164, 164,
	164, 164, 164, 164, 165, 165, 166, 166, 166, 84,
	85, 85, 86, 86, 87, 9, 9, 9, 167, 167,
	159, 159, 159, 160, 160, 160, 16, 17, 18, 88,
	88, 89, 89, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 19, 90, 90, 10, 10,
	10, 10, 171, 171, 168, 168, 169, 169, 27, 27,
	27, 56, 56, 28, 28, 28, 28, 28, 28, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 30,
	30, 30, 30, 30, 30, 30, 31, 31, 31, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 33,
	33, 34, 34, 34, 34, 35, 35, 35, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 37, 72, 75, 75, 76, 76, 76, 76, 76,
	113, 172, 172, 172, 172, 172, 178, 178, 179, 179,
	173, 173, 173, 174, 174, 174, 174, 175, 175, 175,
	176, 176, 176, 177, 177, 79, 180, 180, 80, 81,
	82, 82, 82, 82, 82, 70, 70, 71, 71, 71,
	71, 71, 71, 71, 141, 182, 182, 183, 183, 183,
	183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
	183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
	184, 185, 185, 185, 185, 185, 185, 185, 94, 94,
	94, 94, 186, 186, 187, 187, 120, 120, 120, 120,
	188, 189, 101, 101, 181, 181, 181, 190, 190,
}

var yyR2 = [...]int8{
	0, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 3, 1, 3, 1, 1, 3,
	1, 3, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 5, 1, 1, 1, 1, 1, 2,
	1, 1, 1, 6, 0, 0, 1, 3, 1, 8,
	0, 1, 2, 0, 1, 0, 1, 1, 1, 0,
	1, 1, 2, 4, 4, 5, 6, 8, 0, 2,
	3, 1, 2, 3, 4, 3, 2, 1, 2, 1,
	1, 1, 2, 1, 1, 1, 0, 2, 4, 0,
	2, 0, 3, 0, 1, 0, 1, 2, 0, 1,
	1, 2, 4, 4, 1, 1, 3, 1, 6, 2,
	1, 1, 1, 0, 1, 1, 3, 2, 7, 8,
	0, 1, 5, 4, 4, 4, 2, 3, 0, 1,
	1, 2, 2, 1, 0, 1, 0, 2, 5, 2,
	5, 5, 7, 5, 1, 1, 2, 5, 7, 5,
	0, 1, 2, 0, 2, 1, 0, 1, 8, 0,
	2, 2, 1, 1, 1, 1, 2, 0, 3, 3,
	4, 3, 0, 2, 1, 7, 0, 0, 0, 2,
	0, 1, 1, 2, 4, 4, 4, 4, 0, 4,
	3, 2, 5, 0, 3, 3, 0, 1, 1, 2,
	1, 2, 3, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 3, 4, 4, 5,
	4, 1, 0, 2, 3, 3, 2, 3, 3, 1,
	2, 1, 3, 2, 5, 0, 3, 3, 4, 4,
	3, 4, 4, 2, 2, 0, 2, 2, 2, 2,
	2, 0, 3, 0, 1, 3, 2, 2, 0, 3,
	3, 3, 3, 0, 1, 2, 1, 0, 2, 0,
	1, 1, 2, 5, 4, 0, 2, 2, 2, 3,
	3, 2, 2, 0, 0, 4, 6, 0, 0, 3,
	1, 3, 1, 1, 9, 0, 1, 1, 1, 0,
	1, 1, 3, 1, 2, 1, 1, 1, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 3, 3, 1, 2, 2, 1, 2, 1, 6,
	0, 1, 1, 3, 2, 0, 1, 1, 0, 1,
	0, 1, 1, 0, 2, 2, 5, 5, 4, 0,
	1, 1, 2, 3, 3, 2, 1, 2, 1, 1,
	1, 2, 1, 1, 1, 6, 1, 3, 1, 1,
	1, 1, 1, 3, 0, 2, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 5, 5, 4, 5, 5, 1, 4, 4, 1,
	4, 6, 1, 4, 1, 1, 1, 2, 4, 1,
	1, 4, 5, 4, 7, 4, 7, 10, 7, 1,
	4, 1, 1, 1, 1, 1, 1, 4, 4, 5,
	5, 5, 4, 5, 6, 5, 6, 1, 4, 6,
	1, 4, 6, 1, 4, 6, 1, 1, 1, 2,
	1, 1, 2, 3, 2, 1, 2, 1, 2, 1,
	6, 0, 1, 2, 1, 2, 1, 1, 2, 2,
	0, 1, 1, 0, 3, 5, 3, 0, 1, 1,
	0, 1, 1, 0, 3, 5, 0, 3, 2, 2,
	1, 1, 2, 2, 2, 2, 1, 5, 6, 7,
	9, 9, 11, 4, 4, 1, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 3, 1, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	2, 0, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 2, 1, 4, 1, 4, 0, 1, 1, 2,
	3, 3, 1, 1, 0, 3, 4, 0, 1,
}

var yyChk = [...]int16{
	-1000, -91, -20, -12, -11, -13, -14, -15, -16, -17,
	-18, -19, 7, 15, 247, 21, 25, 249, 59, -118,
	-8, 55, 130, 199, 214, 113, 136, 79, 61, 77,
	166, -22, -25, -24, -7, 242, 241, 4, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 80, 81, 82, 83, 84, 85, 86, 87, 88,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 238, 239,
	59, -90, -10, 54, 31, 62, 19, -12, -21, -25,
	59, 29, -23, -25, 224, 224, 79, -117, 44, 250,
	-21, 43, 251, -94, -186, -187, -188, 171, -189, 161,
	250, -21, -22, -88, -89, -170, 58, 28, 158, 175,
	164, 176, 98, 173, 82, 172, 46, 178, 250, -6,
	123, -25, -168, 84, -21, -10, -38, -39, -40, -41,
	-43, 5, 38, 49, -77, -42, -78, -44, -45, -55,
	21, -51, 56, 13, -187, 171, 161, 161, 23, -25,
	-119, 215, -158, -170, 66, 10, 248, 248, 248, -25,
	-160, 104, 27, -169, 200, 94, 60, -42, 5, 38,
	21, 252, -70, -72, -71, 93, 61, 197, 124, 87,
	252, 93, 197, 61, 13, 93, -78, 21, -61, 229,
	91, 197, 61, 93, 13, 252, 229, -26, -25, 161,
	23, 23, 203, 236, -65, -66, -67, 252, 254, 43,
	248, 248, 144, 144, -171, -24, -53, -54, -52, -26,
	-71, -24, 252, 148, 148, 252, -46, -49, -47, -50,
	-48, -26, -24, 148, 252, -26, -24, -64, -63, -4,
	84, 143, 91, 95, 148, 252, -24, -26, -60, -26,
	-61, 221, 40, 23, 203, 236, -120, -188, -189, -122,
	-68, -69, -54, -70, 93, 197, 124, 87, 162, 99,
	119, 177, -83, -161, -84, 12, -21, 251, 253, 251,
	-27, -28, -36, -37, -29, -30, -31, -32, -34, -35,
	86, 11, 168, 64, 167, 183, 17, 101, 32, 141,
	57, 111, 204, 237, 65, 184, 42, 22, 76, 75,
	36, 48, 16, -33, 142, 78, 89, 169, 74, 52,
	230, 226, -60, 252, 252, -181, -190, -26, 253, 251,
	253, 251, -27, -2, 145, 235, -113, -172, -178, -179,
	103, 243, 138, -113, -60, 60, 60, -62, 88, -4,
	94, -62, -62, -114, 84, -60, -114, 251, 253, -64,
	70, 221, -121, 188, -189, -123, 253, 251, 99, -159,
	231, 228, -92, -24, -85, -24, -24, -95, -54, -57,
	-58, 90, 252, 234, 252, 234, 252, 234, 252, 86,
	11, 252, 252, 252, 195, 252, 252, 252, 252, 48,
	252, 66, 238, 100, 252, 252, 253, -60, -60, 253,
	34, -47, -26, -50, -26, -57, -114, -173, 208, 180,
	-179, -178, 104, 27, -114, 253, -26, -24, 248, -115,
	-116, 147, 247, 253, -115, -26, -5, 44, 6, 70,
	-21, -59, 18, -69, -160, -162, -163, -137, -138, 44,
	223, -164, 216, 181, 193, 235, 145, -165, -166, 47,
	192, 139, 157, -141, 153, 174, 121, 14, 39, 137,
	187, 179, 218, 250, 252, -96, -1, 216, -24, 248,
	252, 248, 252, 248, 252, 248, 252, 234, 252, 234,
	-56, 248, 255, -56, -56, 248, 248, -56, -56, 248,
	225, 151, 60, 252, 60, 252, 248, 248, -113, 253,
	253, 41, 40, -110, 21, -97, -99, -100, 18, 129,
	-174, 232, -113, -117, 29, -114, 149, 6, -124, -127,
	-128, 43, -58, -163, -24, 18, 248, 248, 248, 248,
	248, 67, 189, 127, 248, 252, -24, -86, -87, -26,
	-3, -2, 253, 248, 253, 81, 11, 248, 253, 248,
	253, 248, 252, 248, 252, 253, 251, 253, 251, 253,
	251, 253, 81, 11, 253, 253, 251, 253, 253, 239,
	225, 165, 248, 211, 248, 253, 253, -113, -79, 206,
	41, -111, 102, -98, 117, 134, -101, 171, 248, 240,
	8, 68, 10, -175, 115, 107, 29, -114, -115, -6,
	149, -125, -129, 12, 212, -128, 43, 92, 154, 133,
	-182, -183, 30, 170, 163, 37, 156, 191, 126, 125,
	45, 80, 122, 85, 117, 253, 251, -9, 9, 20,
	-97, 253, 253, 253, 253, 253, 253, 248, 253, 248,
	248, 248, 248, 253, 253, 248, 239, 253, 252, 253,
	-113, -21, -112, -74, -75, -72, -76, 41, 40, 61,
	197, -79, -105, -106, 232, 41, 134, 8, 18, -176,
	63, 182, -93, 252, -167, -24, -162, -6, -126, -130,
	185, -134, -136, 120, -137, 223, -138, -139, 14, 51,
	13, 39, -24, 96, 92, 21, 196, 19, 253, -183,
	-184, 248, -184, 248, 248, 227, 227, -184, 248, 248,
	131, -184, 41, 147, 205, 18, 147, 177, 18, 147,
	177, 18, -167, -87, -98, 253, 253, 253, 253, 253,
	253, 60, 248, 60, 43, 252, -75, -76, -113, 41,
	148, -107, 26, 240, -101, -102, 252, 134, 8, 43,
	-177, 118, -15, 15, 250, -131, -136, -144, 140, 244,
	-153, -154, -133, 132, 29, 120, 190, -24, 56, 219,
	219, 252, 27, 104, 196, 105, 105, 53, 53, -185,
	146, 155, 128, 222, 186, 114, 248, -73, -74, 165,
	253, 211, -80, -81, 62, 19, -60, -113, -108, 240,
	10, 253, -103, -104, 58, 28, 158, 175, 164, 176,
	98, 173, 82, 172, 46, 178, -102, 134, 41, 33,
	253, -24, -132, 135, -145, -146, 160, 171, -144, 252,
	140, 244, -154, -135, -130, -135, -157, 71, -24, 14,
	14, -60, 252, 43, -82, 50, 84, 56, 171, -82,
	253, -109, 209, 171, -24, 253, -104, 66, 10, 248,
	248, 248, -102, 8, -21, 106, 116, 108, -144, -147,
	252, 198, 23, 72, 160, -60, -146, -155, -131, -156,
	-157, 73, 67, -142, 23, 253, 248, -81, 41, 18,
	4, 209, 248, 150, 248, 134, -148, 109, -60, 177,
	154, 159, 133, 97, 110, 201, 83, 253, -132, 207,
	-143, 246, 171, 201, 69, 253, 233, -102, -149, 112,
	245, -151, 72, 10, 253, 154, 133, 154, 133, 150,
	246, 154, 133, 154, 133, -150, 217, 6, -152, 23,
	52, 190, 220, -26, 213, 202, 18, 6, -24, 177,
}

var yyDef = [...]int16{
	12, -2, 1, 2, 4, 5, 6, 7, 8, 9,
	10, 11, 0, -2, 0, 0, 0, 12, 0, 0,
	0, 0, 0, 0, 332, 333, 334, 335, 466, 467,
	468, 326, 20, 26, 27, 28, 29, 30, 31, 32,
	33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
	43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
	83, 84, 85, 86, 87, 88, 89, 90, 91, 92,
	93, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
	143, 144, 145, 146, 147, 148, 149, 150, 151, 152,
	153, 154, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 164, 165, 166, 167, 168, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 178, 179, 180, 181, 182,
	183, 184, 185, 186, 187, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 199, 200, 201, 202,
	0, 0, 536, 538, 539, 540, 541, 3, 708, 13,
	0, 0, 519, 24, 330, 331, 336, 290, 327, 0,
	544, 0, 0, 0, 709, 710, 712, 0, 714, 0,
	0, 337, 469, 518, 520, 521, 0, 0, 0, 526,
	0, 528, 529, 530, 0, 532, 533, 534, 0, 513,
	291, 21, 546, 0, 0, 537, 203, 204, 205, 206,
	207, 0, 0, 0, 314, 208, 315, 210, 211, 212,
	0, 274, 0, 0, 711, 0, 0, 0, 0, 14,
	458, 0, 0, 522, 0, 0, 525, 527, 531, 25,
	516, 0, 0, 517, 547, 545, 0, 209, 0, 0,
	0, 0, 309, 0, 666, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 316, 0, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 17, 0,
	0, 0, 720, 721, 716, 344, 346, 0, 0, 0,
	523, 524, 514, 515, 535, 542, 0, 216, 218, 0,
	665, 622, 0, 0, 0, -2, 0, 0, 275, 285,
	277, 0, 631, 631, 0, 0, 0, 306, 299, 300,
	0, 303, 306, 306, 320, 0, 320, 296, 0, 15,
	298, 0, 0, 0, 713, 715, 342, 717, 718, 347,
	0, 460, 462, 463, 57, 161, 88, 51, 338, 339,
	0, 341, 510, 470, 471, 0, 500, 0, 214, 0,
	220, 548, 549, 550, 553, 554, 555, 556, 557, 558,
	0, 559, 566, 0, 0, 607, 610, 613, 616, 617,
	618, 0, 620, 621, 0, 0, 569, 572, 574, 575,
	576, 0, 579, 580, 0, 591, 592, 593, 594, 595,
	596, 589, 0, 0, 0, 0, 0, 728, 272, 0,
	273, 0, 220, 287, 227, 228, 320, 640, 632, 634,
	636, 637, 0, 320, 0, 0, 0, 293, 0, 301,
	302, 294, 295, 323, 321, 0, 323, 0, 297, 304,
	0, 0, 328, 0, 719, 348, 459, 0, 340, 513,
	511, 512, 0, 18, 0, 501, 543, 215, 217, 223,
	221, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 619, 0, 0, 0, 0, 577,
	0, 0, 0, 0, 0, 0, 631, 0, 0, 673,
	0, 276, 0, 286, 0, 229, 310, 643, 641, 642,
	633, 635, 638, 639, 311, 631, 308, 313, 307, 317,
	326, 0, 325, 320, 319, 16, 292, 305, 0, 0,
	343, 350, 0, 461, 464, 472, 473, 475, 476, 477,
	0, 480, 481, 482, 483, 484, 485, 486, 487, 0,
	0, 0, 0, 381, 382, 383, 384, 488, 493, 0,
	496, 498, 0, 0, 0, 213, 225, 224, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 551, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 667, 631,
	0, 725, 0, 256, 0, 280, 230, 231, 0, 0,
	647, 0, 320, 322, 324, 323, 290, 0, -2, 351,
	352, 0, 349, 474, 478, 479, 377, 378, 379, 380,
	489, 490, 494, 495, 497, 0, 19, 0, 502, 505,
	229, 226, 598, 0, 560, 0, 0, 0, 567, 0,
	602, 0, 0, 0, 0, 608, 0, 611, 0, 614,
	0, 563, 0, 0, 568, 570, 0, 573, 578, 581,
	0, 583, 0, 585, 0, 597, 590, 668, 631, 0,
	726, 283, 281, 282, 259, 279, 232, 0, 722, 723,
	0, 0, 0, 650, 648, 649, 508, 312, 318, 288,
	290, 457, 0, 0, 0, 353, 0, 0, 491, 492,
	0, 675, 0, 0, 0, 0, 0, 0, 0, 0,
	687, 0, 0, 0, 699, 508, 0, 504, 506, 507,
	256, 599, 561, 562, 600, 601, 603, 0, 605, 0,
	0, 0, 0, 564, 565, 0, 582, 0, 0, 0,
	669, 0, 278, 284, 270, 0, 631, 625, 0, 627,
	0, 629, 257, 261, 0, 0, 238, 0, 0, 653,
	651, 652, 644, 0, 646, 22, 509, 289, 345, 439,
	0, 361, 368, 0, 370, 0, 373, 374, 385, 0,
	0, 391, 0, 0, 0, 0, 0, 0, 674, 676,
	677, 701, 678, 679, 680, 681, 682, 683, 684, 685,
	0, 688, 689, 690, 691, 692, 693, 694, 695, 696,
	697, 698, 499, 503, 268, 604, 606, 609, 612, 615,
	571, 0, 0, 0, 0, 0, 271, 631, 624, 626,
	628, 263, 0, 260, 233, 234, 0, 238, 0, 0,
	630, 0, 0, 465, 0, 445, 369, 401, 405, 439,
	440, 441, 360, 366, 366, 454, 0, 371, 0, 0,
	0, 0, 364, 365, 0, 354, 355, 357, 356, 700,
	702, 703, 704, 705, 706, 707, 686, 219, 269, 584,
	588, 586, 670, 671, 0, 0, 0, 623, 265, 264,
	0, 239, 0, 241, 0, 0, 0, 247, 0, 249,
	250, 251, 0, 253, 254, 255, 235, 238, 0, 0,
	645, 23, 359, 0, 439, 415, 0, 0, 403, 0,
	405, 0, 442, 439, 367, 453, 451, 454, 372, 386,
	392, 0, 0, 0, 658, 660, 661, 0, 0, 659,
	655, 258, 266, 0, 262, 240, 242, 0, 0, 246,
	248, 252, 236, 0, 654, 446, 447, 448, 402, 421,
	0, 0, 0, 414, 413, 0, 0, 449, 445, 450,
	455, 387, 388, 390, 0, 362, 0, 672, 662, 664,
	663, 267, 243, 0, 245, 238, 433, 423, 0, 416,
	417, 418, 419, 420, 406, 407, 410, 444, 452, 0,
	389, 399, 0, 393, 396, 587, 244, 237, 437, 434,
	436, 428, 424, 0, 443, 408, 409, 411, 412, 456,
	400, 394, 395, 397, 398, 404, 0, 435, 422, 0,
	0, 426, 427, 438, 0, 425, 429, 430, 431, 432,
}

var yyTok1 = [...]uint8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	252, 253, 255, 3, 251, 3, 250, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 249,
	3, 254,
}

var yyTok2 = [...]uint8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if yyDollar[1].node != nil {
				stmt := yyDollar[1].node
				stmt.SetText(nextQuery(yylex))
				yylex.(*yyLexImpl).result = append(yylex.(*yyLexImpl).result, stmt)
			}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if yyDollar[3].node != nil {
				stmt := yyDollar[3].node
				stmt.SetText(nextQuery(yylex))
				yylex.(*yyLexImpl).result = append(yylex.(*yyLexImpl).result, stmt)
			}
		}
	case 12:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.node = nil
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.TableName{
				Table: yyDollar[1].anything.(*element.Identifier),
			}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = &ast.TableName{
				Schema: yyDollar[1].anything.(*element.Identifier),
				Table:  yyDollar[3].anything.(*element.Identifier),
			}
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*element.Identifier{yyDollar[1].anything.(*element.Identifier)}
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*element.Identifier), yyDollar[3].anything.(*element.Identifier))
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.IndexName{
				Index: yyDollar[1].anything.(*element.Identifier),
			}
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = &ast.IndexName{
				Schema: yyDollar[1].anything.(*element.Identifier),
				Index:  yyDollar[3].anything.(*element.Identifier),
			}
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.SequenceName{
				Sequence: yyDollar[1].anything.(*element.Identifier),
			}
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = &ast.SequenceName{
				Schema:   yyDollar[1].anything.(*element.Identifier),
				Sequence: yyDollar[3].anything.(*element.Identifier),
			}
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeNonQuoted,
				Value: yyDollar[1].str,
			}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeNonQuoted,
				Value: yyDollar[1].str,
			}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeQuoted,
				Value: yyDollar[1].str,
			}
		}
	case 203:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.AlterTableStmt{
				TableName:         yyDollar[3].anything.(*ast.TableName),
				AlterTableClauses: yyDollar[5].anything.([]ast.AlterTableClause),
			}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{yyDollar[1].anything.(ast.AlterTableClause)}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{yyDollar[1].anything.(ast.AlterTableClause)}
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.AlterTableClause), yyDollar[2].anything.(ast.AlterTableClause))
		}
	case 213:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.anything = &ast.AddColumnClause{
				Columns: yyDollar[3].anything.([]*ast.ColumnDef),
			}
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// TODO
		}
	case 215:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// TODO
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*ast.ColumnDef{yyDollar[1].anything.(*ast.ColumnDef)}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*ast.ColumnDef), yyDollar[3].anything.(*ast.ColumnDef))
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 219:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			var collation *ast.Collation
			if yyDollar[3].anything != nil {
				collation = yyDollar[3].anything.(*ast.Collation)
			}
			props := []ast.ColumnProp{}
			sort := ast.ColumnProp(yyDollar[4].i)
			if sort != ast.ColumnPropEmpty {
				props = append(props, sort)
			}
			invisible := ast.ColumnProp(yyDollar[5].i)
			if invisible != ast.ColumnPropEmpty {
				props = append(props, invisible)
			}

			var constraints []*ast.InlineConstraint
			if yyDollar[8].anything != nil {
				constraints = yyDollar[8].anything.([]*ast.InlineConstraint)
			}

			yyVAL.anything = &ast.ColumnDef{
				ColumnName:  yyDollar[1].anything.(*element.Identifier),
				Datatype:    yyDollar[2].anything.(element.Datatype),
				Collation:   collation,
				Props:       props,
				Constraints: constraints,
			}
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.Collation{Name: yyDollar[2].anything.(*element.Identifier)}
		}
	case 223:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropEmpty)
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropSort)
		}
	case 225:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropEmpty)
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropInvisible)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropVisible)
		}
	case 229:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*ast.InlineConstraint{yyDollar[1].anything.(*ast.InlineConstraint)}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*ast.InlineConstraint), yyDollar[2].anything.(*ast.InlineConstraint))
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyDollar[3].anything.([]*ast.ColumnDef),
			}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyDollar[3].anything.([]*ast.ColumnDef),
			}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyDollar[1].anything.([]*ast.ColumnDef),
			}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*ast.ColumnDef{yyDollar[1].anything.(*ast.ColumnDef)}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*ast.ColumnDef), yyDollar[3].anything.(*ast.ColumnDef))
		}
	case 278:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			var collation *ast.Collation
			if yyDollar[3].anything != nil {
				collation = yyDollar[3].anything.(*ast.Collation)
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyDollar[1].anything.(*element.Identifier),
				Datatype:   yyDollar[2].anything.(element.Datatype),
				Collation:  collation,
				Props:      []ast.ColumnProp{},
			}
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*ast.ColumnDef{yyDollar[1].anything.(*ast.ColumnDef)}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*ast.ColumnDef), yyDollar[3].anything.(*ast.ColumnDef))
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyDollar[1].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{ast.ColumnProp(yyDollar[2].i)},
			}
		}
	case 288:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			prop := ast.ColumnPropSubstitutable
			if yyDollar[7].b {
				prop = ast.ColumnPropSubstitutableForce
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyDollar[2].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{prop},
			}
		}
	case 289:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			prop := ast.ColumnPropNotSubstitutable
			if yyDollar[8].b {
				prop = ast.ColumnPropNotSubstitutableForce
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyDollar[2].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{prop},
			}
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.b = false
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.b = true
		}
	case 292:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			props := []ast.DropColumnProp{}
			if yyDollar[4].anything != nil {
				props = append(props, yyDollar[4].anything.([]ast.DropColumnProp)...)
			}
			online := ast.DropColumnProp(yyDollar[5].i)
			if online != ast.DropColumnPropEmpty {
				props = append(props, online)
			}
			yyVAL.anything = &ast.DropColumnClause{
				Type:    ast.DropColumnTypeSetUnused,
				Columns: yyDollar[3].anything.([]*element.Identifier),
				Props:   props,
			}
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			props := []ast.DropColumnProp{}
			if yyDollar[3].anything != nil {
				props = append(props, yyDollar[3].anything.([]ast.DropColumnProp)...)
			}
			cc := &ast.DropColumnClause{
				Type:    ast.DropColumnTypeDrop,
				Columns: yyDollar[2].anything.([]*element.Identifier),
				Props:   props,
			}
			var checkout int
			if yyDollar[4].anything != nil {
				checkout = yyDollar[4].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			cc := &ast.DropColumnClause{
				Type: ast.DropColumnTypeDropUnusedColumns,
			}
			var checkout int
			if yyDollar[4].anything != nil {
				checkout = yyDollar[4].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			cc := &ast.DropColumnClause{
				Type: ast.DropColumnTypeDropColumnsContinue,
			}
			var checkout int
			if yyDollar[4].anything != nil {
				checkout = yyDollar[4].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = []*element.Identifier{yyDollar[2].anything.(*element.Identifier)}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].anything
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.DropColumnProp{ast.DropColumnProp(yyDollar[1].i)}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.DropColumnProp), ast.DropColumnProp(yyDollar[2].i))
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.i = int(ast.DropColumnPropCascade)
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.DropColumnPropInvalidate)
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.i = int(ast.DropColumnPropEmpty)
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.DropColumnPropOnline)
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].i
		}
	case 308:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.anything = &ast.RenameColumnClause{
				OldName: yyDollar[3].anything.(*element.Identifier),
				NewName: yyDollar[5].anything.(*element.Identifier),
			}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{&ast.AddConstraintClause{
				Constraints: []*ast.OutOfLineConstraint{yyDollar[2].anything.(*ast.OutOfLineConstraint)},
			}}
		}
	case 310:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Name = yyDollar[3].anything.(*element.Identifier)
			yyVAL.anything = []ast.AlterTableClause{&ast.ModifyConstraintClause{
				Constraint: constraint,
			}}
		}
	case 311:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypePK
			yyVAL.anything = []ast.AlterTableClause{&ast.ModifyConstraintClause{
				Constraint: constraint,
			}}
		}
	case 312:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeUnique
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			yyVAL.anything = []ast.AlterTableClause{&ast.ModifyConstraintClause{
				Constraint: constraint,
			}}
		}
	case 313:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{&ast.RenameConstraintClause{
				OldName: yyDollar[3].anything.(*element.Identifier),
				NewName: yyDollar[5].anything.(*element.Identifier),
			}}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{yyDollar[1].anything.(ast.AlterTableClause)}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.AlterTableClause), yyDollar[2].anything.(ast.AlterTableClause))
		}
	case 317:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypePK
			yyVAL.anything = &ast.DropConstraintClause{
				Constraint: constraint,
			}
		}
	case 318:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeUnique
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			yyVAL.anything = &ast.DropConstraintClause{
				Constraint: constraint,
			}
		}
	case 319:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Name = yyDollar[3].anything.(*element.Identifier)
			yyVAL.anything = &ast.DropConstraintClause{
				Constraint: constraint,
			}
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 328:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.node = &ast.CreateTableStmt{
				TableName: yyDollar[4].anything.(*ast.TableName),
				RelTable:  yyDollar[6].anything.(*ast.RelTableDef),
			}
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 345:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			rd := &ast.RelTableDef{}
			if yyDollar[1].anything != nil {
				rd.TableStructs = yyDollar[1].anything.([]ast.TableStructDef)
			}
			yyVAL.anything = rd
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].anything
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 421:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 458:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].anything
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.TableStructDef{yyDollar[1].anything.(ast.TableStructDef)}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.TableStructDef), yyDollar[3].anything.(ast.TableStructDef))
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 464:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.node = &ast.CreateIndexStmt{
				Type:      yyDollar[2].str,
				IndexName: yyDollar[4].anything.(*ast.IndexName),
				Index:     yyDollar[7].anything.(*ast.TableIndexClause),
			}
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 499:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			alias, _ := yyDollar[2].anything.(*element.Identifier)
			yyVAL.anything = &ast.TableIndexClause{
				TableName:  yyDollar[1].anything.(*ast.TableName),
				Alias:      alias,
				IndexExprs: yyDollar[4].anything.([]ast.IndexExpr),
			}
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.IndexExpr{yyDollar[1].anything.(ast.IndexExpr)}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.IndexExpr), yyDollar[3].anything.(ast.IndexExpr))
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = ast.IndexExpr{
				Column:    yyDollar[1].anything.(*element.Identifier),
				Direction: yyDollar[2].str,
			}
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 516:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.DropIndexStmt{
				IndexName: yyDollar[2].anything.(*ast.IndexName),
			}
		}
	case 517:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.DropTableStmt{
				TableName: yyDollar[3].anything.(*ast.TableName),
			}
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			// empty
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			// empty
		}
	case 535:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			// empty
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			// empty
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.NumberOrAsterisk{Number: yyDollar[1].i}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.NumberOrAsterisk{IsAsterisk: true}
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Char{}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 560:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Char{Size: &size}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 561:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Char{Size: &size, IsByteSize: true}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 562:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Char{Size: &size, IsCharSize: true}
			d.SetDataDef(element.DataDefChar)
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 564:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Varchar2{}
			d.Size = &size
			d.IsByteSize = true
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 565:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Varchar2{}
			d.Size = &size
			d.IsCharSize = true
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.NChar{}
			d.SetDataDef(element.DataDefNChar)
			yyVAL.anything = d
		}
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNChar)
			yyVAL.anything = d
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNVarChar2)
			yyVAL.anything = d
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 571:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			scale := yyDollar[5].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Float{}
			d.SetDataDef(element.DataDefFloat)
			yyVAL.anything = d
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefFloat)
			yyVAL.anything = d
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.BinaryFloat{}
			d.SetDataDef(element.DataDefBinaryFloat)
			yyVAL.anything = d
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.BinaryDouble{}
			d.SetDataDef(element.DataDefBinaryDouble)
			yyVAL.anything = d
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Long{}
			d.SetDataDef(element.DataDefLong)
			yyVAL.anything = d
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			d := &element.LongRaw{}
			d.SetDataDef(element.DataDefLongRaw)
			yyVAL.anything = d
		}
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Raw{Size: &size}
			d.SetDataDef(element.DataDefRaw)
			yyVAL.anything = d
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Date{}
			d.SetDataDef(element.DataDefDate)
			yyVAL.anything = d
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			d := yyDollar[1].anything.(*element.Timestamp)
			d.WithTimeZone = true
			yyVAL.anything = d
		}
	case 582:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			d := yyDollar[1].anything.(*element.Timestamp)
			d.WithLocalTimeZone = true
			yyVAL.anything = d
		}
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			d := &element.IntervalYear{}
			d.SetDataDef(element.DataDefIntervalYear)
			yyVAL.anything = d
		}
	case 584:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			precision := yyDollar[4].i
			d := &element.IntervalYear{Precision: &precision}
			d.SetDataDef(element.DataDefIntervalYear)
			yyVAL.anything = d
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			d := &element.IntervalDay{}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 586:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			precision := yyDollar[4].i
			d := &element.IntervalDay{Precision: &precision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 587:
		yyDollar = yyS[yypt-10 : yypt+1]
		{
			precision := yyDollar[4].i
			sPrecision := yyDollar[9].i
			d := &element.IntervalDay{Precision: &precision, FractionalSecondsPrecision: &sPrecision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 588:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			sPrecision := yyDollar[6].i
			d := &element.IntervalDay{FractionalSecondsPrecision: &sPrecision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Timestamp{}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].i
			d := &element.Timestamp{FractionalSecondsPrecision: &precision}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Blob{}
			d.SetDataDef(element.DataDefBlob)
			yyVAL.anything = d
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Clob{}
			d.SetDataDef(element.DataDefClob)
			yyVAL.anything = d
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.NClob{}
			d.SetDataDef(element.DataDefNClob)
			yyVAL.anything = d
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.BFile{}
			d.SetDataDef(element.DataDefBFile)
			yyVAL.anything = d
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.RowId{}
			d.SetDataDef(element.DataDefRowId)
			yyVAL.anything = d
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.URowId{}
			d.SetDataDef(element.DataDefURowId)
			yyVAL.anything = d
		}
	case 597:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.URowId{Size: &size}
			d.SetDataDef(element.DataDefURowId)
			yyVAL.anything = d
		}
	case 598:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Char{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharacter)
			yyVAL.anything = d
		}
	case 599:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharacterVarying)
			yyVAL.anything = d
		}
	case 600:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharVarying)
			yyVAL.anything = d
		}
	case 601:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNCharVarying)
			yyVAL.anything = d
		}
	case 602:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefVarchar)
			yyVAL.anything = d
		}
	case 603:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNationalCharacter)
			yyVAL.anything = d
		}
	case 604:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			size := yyDollar[5].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNationalCharacterVarying)
			yyVAL.anything = d
		}
	case 605:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNationalChar)
			yyVAL.anything = d
		}
	case 606:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			size := yyDollar[5].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNationalCharVarying)
			yyVAL.anything = d
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 608:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 609:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			scale := yyDollar[5].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 611:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 612:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			scale := yyDollar[5].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 615:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			scale := yyDollar[5].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefInteger)
			yyVAL.anything = d
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefInt)
			yyVAL.anything = d
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefSmallInt)
			yyVAL.anything = d
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 126}
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefDoublePrecision)
			yyVAL.anything = d
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 63}
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefReal)
			yyVAL.anything = d
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.XMLType{}
			d.SetDataDef(element.DataDefXMLType)
			yyVAL.anything = d
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].anything
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			constraint := yyDollar[2].anything.(*ast.InlineConstraint)
			constraint.Name = yyDollar[1].anything.(*element.Identifier)
			yyVAL.anything = constraint
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypeNull,
			}
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypeNotNull,
			}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypeUnique,
			}
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypePK,
			}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypeReferences,
			}
		}
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 647:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 650:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 653:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 655:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			clause := &ast.ReferenceClause{}
			clause.Columns = yyDollar[4].anything.([]*element.Identifier)
			clause.Table = yyDollar[2].anything.(*ast.TableName)
			yyVAL.anything = clause
		}
	case 656:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.ReferenceOption{
				Type: yyDollar[2].anything.(ast.ReferenceAction),
			}
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.ReferenceOption{
				Type: yyDollar[2].anything.(ast.ReferenceAction),
			}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = ast.RefOptRestrict
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = ast.RefOptCascade
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = ast.RefOptSetNull
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = ast.RefOptNoAction
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = ast.RefOptSetDefault
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			constraint := yyDollar[2].anything.(*ast.OutOfLineConstraint)
			constraint.Name = yyDollar[1].anything.(*element.Identifier)
			yyVAL.anything = constraint
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 667:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeUnique
			constraint.Columns = yyDollar[3].anything.([]*element.Identifier)
			yyVAL.anything = constraint
		}
	case 668:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypePK
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			yyVAL.anything = constraint
		}
	case 669:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeReferences
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			constraint.Reference = yyDollar[6].anything.(*ast.ReferenceClause)
			yyVAL.anything = constraint
		}
	case 670:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeReferences
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			constraint.Reference = yyDollar[6].anything.(*ast.ReferenceClause)
			constraint.UpdateAction = yyDollar[9].anything.(*ast.ReferenceOption)
			yyVAL.anything = constraint
		}
	case 671:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeReferences
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			constraint.Reference = yyDollar[6].anything.(*ast.ReferenceClause)
			constraint.DeleteAction = yyDollar[9].anything.(*ast.ReferenceOption)
			yyVAL.anything = constraint
		}
	case 672:
		yyDollar = yyS[yypt-11 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeReferences
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			constraint.Reference = yyDollar[6].anything.(*ast.ReferenceClause)
			constraint.UpdateAction = yyDollar[9].anything.(*ast.ReferenceOption)
			constraint.DeleteAction = yyDollar[11].anything.(*ast.ReferenceOption)
			yyVAL.anything = constraint
		}
	case 673:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.anything = &ast.OutOfLineConstraint{}
		}
	case 701:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 708:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 716:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	}
	goto yystack /* stack new state and value */
}

// Code generated by goyacc - DO NOT EDIT.

package oralce_sql_parser

import __yyfmt__ "fmt"

import (
	"github.com/sjjian/oralce_sql_parser/ast"
	"github.com/sjjian/oralce_sql_parser/ast/element"
)

type yySymType struct {
	yys      int
	nothing  struct{}
	i        int
	b        bool
	str      string
	node     ast.Node
	anything interface{}
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault            = 57426
	yyEofCode            = 57344
	_add                 = 57350
	_alter               = 57348
	_bfile               = 57377
	_binaryDouble        = 57359
	_binaryFloat         = 57358
	_blob                = 57374
	_by                  = 57400
	_byte                = 57352
	_cascade             = 57410
	_char                = 57351
	_character           = 57380
	_clob                = 57375
	_collate             = 57393
	_constraint          = 57403
	_date                = 57362
	_day                 = 57372
	_dec                 = 57386
	_decimal             = 57385
	_deferrable          = 57414
	_deferred            = 57415
	_delete              = 57411
	_double              = 57390
	_doubleQuoteStr      = 57424
	_encrypt             = 57397
	_float               = 57357
	_from                = 57347
	_identified          = 57399
	_immediate           = 57416
	_initially           = 57417
	_int                 = 57388
	_intNumber           = 57422
	_interger            = 57387
	_interval            = 57368
	_invisible           = 57395
	_is                  = 57420
	_key                 = 57404
	_local               = 57365
	_long                = 57360
	_mouth               = 57371
	_national            = 57383
	_nchar               = 57354
	_nclob               = 57376
	_no                  = 57401
	_nonquotedIdentifier = 57425
	_norely              = 57418
	_not                 = 57405
	_null                = 57406
	_number              = 57356
	_numeric             = 57384
	_nvarchar2           = 57355
	_on                  = 57412
	_precision           = 57391
	_primary             = 57407
	_raw                 = 57361
	_real                = 57392
	_references          = 57409
	_rely                = 57419
	_rowid               = 57378
	_salt                = 57402
	_scope               = 57421
	_second              = 57373
	_select              = 57346
	_set                 = 57413
	_singleQuoteStr      = 57423
	_smallInt            = 57389
	_sort                = 57394
	_table               = 57349
	_time                = 57366
	_timestamp           = 57363
	_to                  = 57370
	_unique              = 57408
	_urowid              = 57379
	_using               = 57398
	_varchar             = 57382
	_varchar2            = 57353
	_varying             = 57381
	_visible             = 57396
	_with                = 57364
	_year                = 57369
	_zone                = 57367
	yyErrCode            = 57345

	yyMaxDepth = 200
	yyTabOfs   = -157
)

var (
	yyPrec = map[int]int{}

	yyXLAT = map[int]int{
		41:    0,   // ')' (174x)
		44:    1,   // ',' (142x)
		57406: 2,   // _null (131x)
		57405: 3,   // _not (129x)
		57407: 4,   // _primary (129x)
		57409: 5,   // _references (129x)
		57408: 6,   // _unique (129x)
		57403: 7,   // _constraint (126x)
		57421: 8,   // _scope (92x)
		57364: 9,   // _with (92x)
		57397: 10,  // _encrypt (80x)
		57395: 11,  // _invisible (76x)
		57396: 12,  // _visible (76x)
		57394: 13,  // _sort (74x)
		57393: 14,  // _collate (70x)
		40:    15,  // '(' (31x)
		57422: 16,  // _intNumber (29x)
		57344: 17,  // $end (22x)
		57414: 18,  // _deferrable (21x)
		57417: 19,  // _initially (20x)
		59:    20,  // ';' (19x)
		57350: 21,  // _add (16x)
		57424: 22,  // _doubleQuoteStr (11x)
		57425: 23,  // _nonquotedIdentifier (11x)
		57456: 24,  // Identifier (11x)
		57402: 25,  // _salt (10x)
		57401: 26,  // _no (9x)
		46:    27,  // '.' (8x)
		57418: 28,  // _norely (8x)
		57419: 29,  // _rely (8x)
		57423: 30,  // _singleQuoteStr (8x)
		57351: 31,  // _char (7x)
		57412: 32,  // _on (7x)
		42:    33,  // '*' (5x)
		57380: 34,  // _character (5x)
		57361: 35,  // _raw (5x)
		57378: 36,  // _rowid (5x)
		57381: 37,  // _varying (5x)
		57469: 38,  // NumberOrAsterisk (5x)
		57377: 39,  // _bfile (4x)
		57359: 40,  // _binaryDouble (4x)
		57358: 41,  // _binaryFloat (4x)
		57374: 42,  // _blob (4x)
		57375: 43,  // _clob (4x)
		57362: 44,  // _date (4x)
		57386: 45,  // _dec (4x)
		57385: 46,  // _decimal (4x)
		57390: 47,  // _double (4x)
		57357: 48,  // _float (4x)
		57388: 49,  // _int (4x)
		57387: 50,  // _interger (4x)
		57368: 51,  // _interval (4x)
		57360: 52,  // _long (4x)
		57383: 53,  // _national (4x)
		57354: 54,  // _nchar (4x)
		57376: 55,  // _nclob (4x)
		57356: 56,  // _number (4x)
		57384: 57,  // _numeric (4x)
		57355: 58,  // _nvarchar2 (4x)
		57392: 59,  // _real (4x)
		57389: 60,  // _smallInt (4x)
		57363: 61,  // _timestamp (4x)
		57370: 62,  // _to (4x)
		57379: 63,  // _urowid (4x)
		57382: 64,  // _varchar (4x)
		57353: 65,  // _varchar2 (4x)
		57438: 66,  // ColumnName (4x)
		57447: 67,  // ConstraintStateRely (4x)
		57399: 68,  // _identified (3x)
		57444: 69,  // ConstraintStateDeferrable (3x)
		57445: 70,  // ConstraintStateDeferredOrImmediate (3x)
		57481: 71,  // TableName (3x)
		57352: 72,  // _byte (2x)
		57371: 73,  // _mouth (2x)
		57373: 74,  // _second (2x)
		57366: 75,  // _time (2x)
		57367: 76,  // _zone (2x)
		57427: 77,  // AddColumnClause (2x)
		57430: 78,  // ChangeColumnClause (2x)
		57435: 79,  // ColumnDefinition (2x)
		57442: 80,  // ConstraintNameOrEmpty (2x)
		57443: 81,  // ConstraintState (2x)
		57446: 82,  // ConstraintStateOrEmpty (2x)
		57451: 83,  // DropColumnClause (2x)
		57457: 84,  // InlineConstraint (2x)
		57459: 85,  // InlineConstraintProperty (2x)
		57467: 86,  // ModidyColumnClause (2x)
		57472: 87,  // RealColumnDefinition (2x)
		57473: 88,  // ReferencesClause (2x)
		57348: 89,  // _alter (1x)
		57400: 90,  // _by (1x)
		57410: 91,  // _cascade (1x)
		57372: 92,  // _day (1x)
		57415: 93,  // _deferred (1x)
		57411: 94,  // _delete (1x)
		57416: 95,  // _immediate (1x)
		57420: 96,  // _is (1x)
		57404: 97,  // _key (1x)
		57365: 98,  // _local (1x)
		57391: 99,  // _precision (1x)
		57413: 100, // _set (1x)
		57349: 101, // _table (1x)
		57398: 102, // _using (1x)
		57369: 103, // _year (1x)
		57428: 104, // AlterTableStmt (1x)
		57429: 105, // AnsiSupportDataTypes (1x)
		57431: 106, // ChangeColumnClauseList (1x)
		57432: 107, // CharacterDataTypes (1x)
		57433: 108, // CollateClause (1x)
		57434: 109, // ColumnClauses (1x)
		57436: 110, // ColumnDefinitionConstraint (1x)
		57437: 111, // ColumnDefinitionList (1x)
		57439: 112, // ColumnNameList (1x)
		57440: 113, // ColumnNameListOrEmpty (1x)
		57441: 114, // ColumnProperties (1x)
		57448: 115, // Datatype (1x)
		57449: 116, // DatetimeDataTypes (1x)
		57450: 117, // DefaultProperties (1x)
		57452: 118, // EncryptAlgorithm (1x)
		57453: 119, // EncryptClause (1x)
		57454: 120, // EncryptionSpec (1x)
		57455: 121, // IdentifiedByClause (1x)
		57458: 122, // InlineConstraintList (1x)
		57460: 123, // InlineRefConstraint (1x)
		57461: 124, // IntergrityAlgorithm (1x)
		57462: 125, // InvisibleProperty (1x)
		57463: 126, // LargeObjectDataTypes (1x)
		57464: 127, // LongAndRawDataTypes (1x)
		57465: 128, // MemoptimizeReadClause (1x)
		57466: 129, // MemoptimizeWriteClause (1x)
		57468: 130, // NumberDataTypes (1x)
		57470: 131, // OralceBuiltInDataTypes (1x)
		57471: 132, // OutOfLinePartStorageList (1x)
		57474: 133, // ReferencesOnDelete (1x)
		57475: 134, // RenameColumnClause (1x)
		57476: 135, // RowIdDataTypes (1x)
		57477: 136, // SaltProperty (1x)
		57478: 137, // SortProperty (1x)
		57479: 138, // Start (1x)
		57480: 139, // Statement (1x)
		57426: 140, // $default (0x)
		57347: 141, // _from (0x)
		57346: 142, // _select (0x)
		57345: 143, // error (0x)
	}

	yySymNames = []string{
		"')'",
		"','",
		"_null",
		"_not",
		"_primary",
		"_references",
		"_unique",
		"_constraint",
		"_scope",
		"_with",
		"_encrypt",
		"_invisible",
		"_visible",
		"_sort",
		"_collate",
		"'('",
		"_intNumber",
		"$end",
		"_deferrable",
		"_initially",
		"';'",
		"_add",
		"_doubleQuoteStr",
		"_nonquotedIdentifier",
		"Identifier",
		"_salt",
		"_no",
		"'.'",
		"_norely",
		"_rely",
		"_singleQuoteStr",
		"_char",
		"_on",
		"'*'",
		"_character",
		"_raw",
		"_rowid",
		"_varying",
		"NumberOrAsterisk",
		"_bfile",
		"_binaryDouble",
		"_binaryFloat",
		"_blob",
		"_clob",
		"_date",
		"_dec",
		"_decimal",
		"_double",
		"_float",
		"_int",
		"_interger",
		"_interval",
		"_long",
		"_national",
		"_nchar",
		"_nclob",
		"_number",
		"_numeric",
		"_nvarchar2",
		"_real",
		"_smallInt",
		"_timestamp",
		"_to",
		"_urowid",
		"_varchar",
		"_varchar2",
		"ColumnName",
		"ConstraintStateRely",
		"_identified",
		"ConstraintStateDeferrable",
		"ConstraintStateDeferredOrImmediate",
		"TableName",
		"_byte",
		"_mouth",
		"_second",
		"_time",
		"_zone",
		"AddColumnClause",
		"ChangeColumnClause",
		"ColumnDefinition",
		"ConstraintNameOrEmpty",
		"ConstraintState",
		"ConstraintStateOrEmpty",
		"DropColumnClause",
		"InlineConstraint",
		"InlineConstraintProperty",
		"ModidyColumnClause",
		"RealColumnDefinition",
		"ReferencesClause",
		"_alter",
		"_by",
		"_cascade",
		"_day",
		"_deferred",
		"_delete",
		"_immediate",
		"_is",
		"_key",
		"_local",
		"_precision",
		"_set",
		"_table",
		"_using",
		"_year",
		"AlterTableStmt",
		"AnsiSupportDataTypes",
		"ChangeColumnClauseList",
		"CharacterDataTypes",
		"CollateClause",
		"ColumnClauses",
		"ColumnDefinitionConstraint",
		"ColumnDefinitionList",
		"ColumnNameList",
		"ColumnNameListOrEmpty",
		"ColumnProperties",
		"Datatype",
		"DatetimeDataTypes",
		"DefaultProperties",
		"EncryptAlgorithm",
		"EncryptClause",
		"EncryptionSpec",
		"IdentifiedByClause",
		"InlineConstraintList",
		"InlineRefConstraint",
		"IntergrityAlgorithm",
		"InvisibleProperty",
		"LargeObjectDataTypes",
		"LongAndRawDataTypes",
		"MemoptimizeReadClause",
		"MemoptimizeWriteClause",
		"NumberDataTypes",
		"OralceBuiltInDataTypes",
		"OutOfLinePartStorageList",
		"ReferencesOnDelete",
		"RenameColumnClause",
		"RowIdDataTypes",
		"SaltProperty",
		"SortProperty",
		"Start",
		"Statement",
		"$default",
		"_from",
		"_select",
		"error",
	}

	yyTokenLiteralStrings = map[int]string{
		57422: "int number",
		57424: "double quotes string",
		57425: "nonquoted identifier",
		57423: "single quotes string",
	}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {138, 1},
		2:   {139, 1},
		3:   {139, 2},
		4:   {71, 1},
		5:   {71, 3},
		6:   {112, 1},
		7:   {112, 3},
		8:   {66, 1},
		9:   {24, 1},
		10:  {24, 1},
		11:  {104, 6},
		12:  {128, 0},
		13:  {129, 0},
		14:  {109, 1},
		15:  {109, 1},
		16:  {134, 0},
		17:  {106, 1},
		18:  {106, 2},
		19:  {78, 1},
		20:  {78, 1},
		21:  {78, 1},
		22:  {77, 6},
		23:  {86, 0},
		24:  {83, 0},
		25:  {114, 0},
		26:  {132, 0},
		27:  {111, 1},
		28:  {111, 3},
		29:  {79, 1},
		30:  {87, 8},
		31:  {108, 0},
		32:  {108, 2},
		33:  {137, 0},
		34:  {137, 1},
		35:  {125, 0},
		36:  {125, 1},
		37:  {125, 1},
		38:  {117, 0},
		39:  {119, 0},
		40:  {119, 2},
		41:  {120, 4},
		42:  {118, 0},
		43:  {118, 2},
		44:  {121, 0},
		45:  {121, 3},
		46:  {124, 0},
		47:  {124, 1},
		48:  {136, 0},
		49:  {136, 1},
		50:  {136, 2},
		51:  {110, 0},
		52:  {110, 1},
		53:  {110, 1},
		54:  {122, 1},
		55:  {122, 2},
		56:  {115, 1},
		57:  {115, 1},
		58:  {38, 1},
		59:  {38, 1},
		60:  {131, 1},
		61:  {131, 1},
		62:  {131, 1},
		63:  {131, 1},
		64:  {131, 1},
		65:  {131, 1},
		66:  {107, 1},
		67:  {107, 4},
		68:  {107, 5},
		69:  {107, 5},
		70:  {107, 4},
		71:  {107, 5},
		72:  {107, 5},
		73:  {107, 1},
		74:  {107, 4},
		75:  {107, 4},
		76:  {130, 1},
		77:  {130, 4},
		78:  {130, 6},
		79:  {130, 1},
		80:  {130, 4},
		81:  {130, 1},
		82:  {130, 1},
		83:  {127, 1},
		84:  {127, 2},
		85:  {127, 4},
		86:  {116, 1},
		87:  {116, 1},
		88:  {116, 4},
		89:  {116, 7},
		90:  {116, 8},
		91:  {116, 4},
		92:  {116, 7},
		93:  {116, 4},
		94:  {116, 7},
		95:  {116, 10},
		96:  {116, 7},
		97:  {126, 1},
		98:  {126, 1},
		99:  {126, 1},
		100: {126, 1},
		101: {135, 1},
		102: {135, 1},
		103: {135, 4},
		104: {105, 4},
		105: {105, 5},
		106: {105, 5},
		107: {105, 5},
		108: {105, 4},
		109: {105, 5},
		110: {105, 6},
		111: {105, 5},
		112: {105, 6},
		113: {105, 1},
		114: {105, 4},
		115: {105, 6},
		116: {105, 1},
		117: {105, 4},
		118: {105, 6},
		119: {105, 1},
		120: {105, 4},
		121: {105, 6},
		122: {105, 1},
		123: {105, 1},
		124: {105, 1},
		125: {105, 2},
		126: {105, 1},
		127: {80, 0},
		128: {80, 2},
		129: {84, 3},
		130: {85, 1},
		131: {85, 2},
		132: {85, 1},
		133: {85, 2},
		134: {85, 1},
		135: {88, 4},
		136: {113, 0},
		137: {113, 3},
		138: {133, 0},
		139: {133, 3},
		140: {133, 4},
		141: {82, 0},
		142: {82, 1},
		143: {81, 2},
		144: {81, 3},
		145: {81, 2},
		146: {81, 3},
		147: {69, 1},
		148: {69, 2},
		149: {70, 2},
		150: {70, 2},
		151: {67, 0},
		152: {67, 1},
		153: {67, 1},
		154: {123, 3},
		155: {123, 2},
		156: {123, 3},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [278][]uint16{
		// 0
		{89: 161, 104: 160, 138: 158, 159},
		{17: 157},
		{17: 156},
		{17: 155, 20: 434},
		{101: 162},
		// 5
		{22: 165, 164, 163, 71: 166},
		{153, 153, 153, 153, 153, 153, 153, 153, 15: 153, 17: 153, 153, 153, 153, 153, 27: 432, 32: 153},
		{148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 15: 148, 17: 148, 148, 148, 148, 148, 25: 148, 148, 148, 30: 148, 148, 148, 34: 148, 148, 148, 39: 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 63: 148, 148, 148},
		{147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 15: 147, 17: 147, 147, 147, 147, 147, 25: 147, 147, 147, 30: 147, 147, 147, 34: 147, 147, 147, 39: 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 63: 147, 147, 147},
		{17: 145, 20: 145, 145, 128: 167},
		// 10
		{17: 144, 20: 144, 144, 129: 168},
		{17: 141, 20: 141, 176, 77: 173, 172, 83: 175, 86: 174, 106: 170, 109: 169, 134: 171},
		{17: 146, 20: 146},
		{17: 143, 20: 143, 176, 77: 173, 431, 83: 175, 86: 174},
		{17: 142, 20: 142},
		// 15
		{17: 140, 20: 140, 140},
		{17: 138, 20: 138, 138},
		{17: 137, 20: 137, 137},
		{17: 136, 20: 136, 136},
		{15: 177},
		// 20
		{22: 165, 164, 178, 66: 182, 79: 180, 87: 181, 111: 179},
		{149, 149, 31: 149, 34: 149, 149, 149, 39: 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 63: 149, 149, 149},
		{426, 427},
		{130, 130},
		{128, 128},
		// 25
		{31: 192, 34: 211, 201, 209, 39: 208, 199, 198, 205, 206, 202, 216, 215, 220, 197, 218, 217, 204, 200, 213, 194, 207, 196, 214, 195, 221, 219, 203, 63: 210, 212, 193, 105: 185, 107: 186, 115: 183, 189, 126: 190, 188, 130: 187, 184, 135: 191},
		{126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 345, 108: 344},
		{101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101},
		{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
		{97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97},
		// 30
		{96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96},
		{95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95},
		{94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94},
		{93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93},
		{92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92},
		// 35
		{91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 333, 37: 334},
		{15: 326},
		{84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 319, 37: 320},
		{15: 316},
		{81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 310},
		// 40
		{78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 307},
		{76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76},
		{75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75},
		{74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 35: 306},
		{15: 303},
		// 45
		{71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71},
		{70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 294},
		{92: 273, 103: 272},
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60},
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59},
		// 50
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58},
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56},
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 269},
		{15: 262, 37: 263},
		// 55
		{15: 259},
		{31: 244, 34: 243},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 237},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 231},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 223},
		// 60
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33},
		{99: 222},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31},
		// 65
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32},
		{16: 224, 33: 225, 38: 226},
		{99, 99, 27: 99},
		{98, 98, 27: 98},
		{227, 27: 228},
		// 70
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
		{16: 229},
		{230},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36},
		{16: 224, 33: 225, 38: 232},
		// 75
		{233, 27: 234},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{16: 235},
		{236},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39},
		// 80
		{16: 224, 33: 225, 38: 238},
		{239, 27: 240},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43},
		{16: 241},
		{242},
		// 85
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42},
		{15: 252, 37: 253},
		{15: 245, 37: 246},
		{16: 250},
		{15: 247},
		// 90
		{16: 248},
		{249},
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45},
		{251},
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46},
		// 95
		{16: 257},
		{15: 254},
		{16: 255},
		{256},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47},
		// 100
		{258},
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48},
		{16: 260},
		{261},
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49},
		// 105
		{16: 267},
		{15: 264},
		{16: 265},
		{266},
		{52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52},
		// 110
		{268},
		{53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53},
		{16: 270},
		{271},
		{54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54},
		// 115
		{15: 288, 62: 287},
		{15: 275, 62: 274},
		{74: 283},
		{16: 276},
		{277},
		// 120
		{62: 278},
		{74: 279},
		{63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 280},
		{16: 281},
		{282},
		// 125
		{62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62},
		{64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 284},
		{16: 285},
		{286},
		{61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61},
		// 130
		{73: 293},
		{16: 289},
		{290},
		{62: 291},
		{73: 292},
		// 135
		{65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65},
		{66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66},
		{16: 295},
		{296},
		{69, 69, 69, 69, 69, 69, 69, 69, 69, 297, 69, 69, 69, 69, 69},
		// 140
		{75: 298, 98: 299},
		{76: 302},
		{75: 300},
		{76: 301},
		{67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67},
		// 145
		{68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68},
		{16: 304},
		{305},
		{72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72},
		{73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73},
		// 150
		{16: 224, 33: 225, 38: 308},
		{309},
		{77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77},
		{16: 224, 33: 225, 38: 311},
		{312, 313},
		// 155
		{80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80},
		{16: 314},
		{315},
		{79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79},
		{16: 317},
		// 160
		{318},
		{82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82},
		{16: 324},
		{15: 321},
		{16: 322},
		// 165
		{323},
		{50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50},
		{325},
		{83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83},
		{16: 327},
		// 170
		{328, 31: 330, 72: 329},
		{87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87},
		{332},
		{331},
		{85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85},
		// 175
		{86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86},
		{16: 338},
		{15: 335},
		{16: 336},
		{337},
		// 180
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51},
		{339, 31: 341, 72: 340},
		{90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90},
		{343},
		{342},
		// 185
		{88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88},
		{89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89},
		{124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 348, 137: 347},
		{22: 165, 164, 346},
		{125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125},
		// 190
		{122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 350, 351, 125: 349},
		{123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123},
		{119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 117: 352},
		{121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121},
		{120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120},
		// 195
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 354, 119: 353},
		{106, 106, 30, 30, 30, 30, 30, 373, 375, 376, 80: 374, 84: 372, 110: 369, 122: 371, 370},
		{115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 25: 115, 115, 30: 115, 68: 115, 102: 357, 118: 356, 120: 355},
		{117, 117, 117, 117, 117, 117, 117, 117, 117, 117},
		{113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 25: 113, 113, 30: 113, 68: 360, 121: 359},
		// 200
		{30: 358},
		{114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 25: 114, 114, 30: 114, 68: 114},
		{111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 25: 111, 111, 30: 364, 124: 363},
		{90: 361},
		{22: 165, 164, 362},
		// 205
		{112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 25: 112, 112, 30: 112},
		{109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 25: 366, 367, 136: 365},
		{110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 25: 110, 110},
		{116, 116, 116, 116, 116, 116, 116, 116, 116, 116},
		{108, 108, 108, 108, 108, 108, 108, 108, 108, 108},
		// 210
		{25: 368},
		{107, 107, 107, 107, 107, 107, 107, 107, 107, 107},
		{127, 127},
		{105, 105},
		{104, 104, 30, 30, 30, 30, 30, 373, 80: 424, 84: 423},
		// 215
		{103, 103, 103, 103, 103, 103, 103, 103},
		{22: 165, 164, 422},
		{2: 381, 382, 384, 386, 383, 85: 380, 88: 385},
		{96: 378},
		{36: 377},
		// 220
		{2, 2},
		{22: 165, 164, 163, 71: 379},
		{3, 3},
		{16, 16, 16, 405, 16, 16, 16, 16, 18: 404, 406, 69: 402, 403, 81: 401, 421},
		{27, 27, 27, 27, 27, 27, 27, 27, 18: 27, 27},
		// 225
		{2: 420},
		{25, 25, 25, 25, 25, 25, 25, 25, 18: 25, 25},
		{97: 419},
		{23, 23, 23, 405, 23, 23, 23, 23, 18: 404, 406, 69: 402, 403, 81: 401, 407},
		{22: 165, 164, 163, 71: 387},
		// 230
		{21, 21, 21, 21, 21, 21, 21, 21, 15: 389, 18: 21, 21, 32: 21, 113: 388},
		{19, 19, 19, 19, 19, 19, 19, 19, 18: 19, 19, 32: 396, 133: 395},
		{22: 165, 164, 178, 66: 390, 112: 391},
		{151, 151},
		{393, 392},
		// 235
		{22: 165, 164, 178, 66: 394},
		{20, 20, 20, 20, 20, 20, 20, 20, 18: 20, 20, 32: 20},
		{150, 150},
		{22, 22, 22, 22, 22, 22, 22, 22, 18: 22, 22},
		{94: 397},
		// 240
		{91: 398, 100: 399},
		{18, 18, 18, 18, 18, 18, 18, 18, 18: 18, 18},
		{2: 400},
		{17, 17, 17, 17, 17, 17, 17, 17, 18: 17, 17},
		{15, 15, 15, 15, 15, 15, 15, 15},
		// 245
		{6, 6, 6, 6, 6, 6, 6, 6, 19: 406, 28: 414, 413, 67: 416, 70: 417},
		{6, 6, 6, 405, 6, 6, 6, 6, 18: 404, 28: 414, 413, 67: 411, 69: 412},
		{10, 10, 10, 10, 10, 10, 10, 10, 19: 10, 28: 10, 10},
		{18: 410},
		{93: 408, 95: 409},
		// 250
		{1, 1},
		{8, 8, 8, 8, 8, 8, 8, 8, 18: 8, 28: 8, 8},
		{7, 7, 7, 7, 7, 7, 7, 7, 18: 7, 28: 7, 7},
		{9, 9, 9, 9, 9, 9, 9, 9, 19: 9, 28: 9, 9},
		{12, 12, 12, 12, 12, 12, 12, 12},
		// 255
		{6, 6, 6, 6, 6, 6, 6, 6, 28: 414, 413, 67: 415},
		{5, 5, 5, 5, 5, 5, 5, 5},
		{4, 4, 4, 4, 4, 4, 4, 4},
		{11, 11, 11, 11, 11, 11, 11, 11},
		{14, 14, 14, 14, 14, 14, 14, 14},
		// 260
		{6, 6, 6, 6, 6, 6, 6, 6, 28: 414, 413, 67: 418},
		{13, 13, 13, 13, 13, 13, 13, 13},
		{24, 24, 24, 24, 24, 24, 24, 24, 18: 24, 24},
		{26, 26, 26, 26, 26, 26, 26, 26, 18: 26, 26},
		{28, 28, 28, 28, 28, 28, 28, 28},
		// 265
		{2: 29, 29, 29, 29, 29},
		{102, 102, 102, 102, 102, 102, 102, 102},
		{2: 381, 382, 384, 386, 383, 85: 380, 88: 425},
		{23, 23, 23, 23, 23, 23, 23, 23, 18: 23, 23},
		{17: 132, 20: 132, 132, 114: 429},
		// 270
		{22: 165, 164, 178, 66: 182, 79: 428, 87: 181},
		{129, 129},
		{17: 131, 20: 131, 131, 132: 430},
		{17: 135, 20: 135, 135},
		{17: 139, 20: 139, 139},
		// 275
		{22: 165, 164, 433},
		{152, 152, 152, 152, 152, 152, 152, 152, 15: 152, 17: 152, 152, 152, 152, 152, 32: 152},
		{17: 154},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 143

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yylex.(*yyLexImpl).result = yyS[yypt-0].node
		}
	case 2:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 3:
		{
			yyVAL.node = yyS[yypt-1].node
		}
	case 4:
		{
			yyVAL.anything = &ast.TableName{
				Table: yyS[yypt-0].anything.(*element.Identifier),
			}
		}
	case 5:
		{
			yyVAL.anything = &ast.TableName{
				Schema: yyS[yypt-2].anything.(*element.Identifier),
				Table:  yyS[yypt-0].anything.(*element.Identifier),
			}
		}
	case 8:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 9:
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeNonQuoted,
				Value: yyS[yypt-0].str,
			}
		}
	case 10:
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeQuoted,
				Value: yyS[yypt-0].str,
			}
		}
	case 11:
		{
			yyVAL.node = &ast.AlterTableStmt{
				TableName:     yyS[yypt-3].anything.(*ast.TableName),
				ColumnClauses: yyS[yypt-0].anything.([]ast.ColumnClause),
			}
		}
	case 12:
		{
			// TODO
		}
	case 13:
		{
			// TODO
		}
	case 14:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 15:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 16:
		{
			// todo:
		}
	case 17:
		{
			yyVAL.anything = []ast.ColumnClause{yyS[yypt-0].anything.(ast.ColumnClause)}
		}
	case 18:
		{
			yyVAL.anything = append(yyS[yypt-1].anything.([]ast.ColumnClause), yyS[yypt-0].anything.(ast.ColumnClause))
		}
	case 19:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 20:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 21:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 22:
		{
			yyVAL.anything = &ast.AddColumnClause{
				Columns: yyS[yypt-3].anything.([]*ast.ColumnDefine),
			}
		}
	case 23:
		{
			// todo:
		}
	case 24:
		{
			// todo:
		}
	case 25:
		{
			// TODO
		}
	case 26:
		{
			// TODO
		}
	case 27:
		{
			yyVAL.anything = []*ast.ColumnDefine{yyS[yypt-0].anything.(*ast.ColumnDefine)}
		}
	case 28:
		{
			yyVAL.anything = append(yyS[yypt-2].anything.([]*ast.ColumnDefine), yyS[yypt-0].anything.(*ast.ColumnDefine))
		}
	case 29:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 30:
		{
			var collation *ast.Collation
			if yyS[yypt-5].anything != nil {
				collation = yyS[yypt-5].anything.(*ast.Collation)
			}
			var invisible *ast.InvisibleProperty
			if yyS[yypt-3].anything != nil {
				invisible = yyS[yypt-3].anything.(*ast.InvisibleProperty)
			}

			yyVAL.anything = &ast.ColumnDefine{
				ColumnName:        yyS[yypt-7].anything.(*element.Identifier),
				Datatype:          yyS[yypt-6].anything.(element.Datatype),
				Collation:         collation,
				Sort:              ast.SortProperty(yyS[yypt-4].b),
				InvisibleProperty: invisible,
			}
		}
	case 31:
		{
			yyVAL.anything = nil
		}
	case 32:
		{
			yyVAL.anything = &ast.Collation{Name: yyS[yypt-0].anything.(*element.Identifier)}
		}
	case 33:
		{
			yyVAL.b = false
		}
	case 34:
		{
			yyVAL.b = true
		}
	case 35:
		{
			yyVAL.anything = nil
		}
	case 36:
		{
			yyVAL.anything = &ast.InvisibleProperty{Type: ast.InvisiblePropertyInvisible}
		}
	case 37:
		{
			yyVAL.anything = &ast.InvisibleProperty{Type: ast.InvisiblePropertyVisible}
		}
	case 39:
		{
			// empty
		}
	case 42:
		{
			// empty
		}
	case 44:
		{
			// empty
		}
	case 46:
		{
			// empty
		}
	case 48:
		{
			// empty
		}
	case 51:
		{
			// empty
		}
	case 56:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 57:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 58:
		{
			yyVAL.anything = &element.NumberOrAsterisk{Number: yyS[yypt-0].i}
		}
	case 59:
		{
			yyVAL.anything = &element.NumberOrAsterisk{IsAsterisk: true}
		}
	case 60:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 61:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 62:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 63:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 64:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 65:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 66:
		{
			d := &element.Char{}
			d.SetDataDefine(element.DataDefineChar)
			yyVAL.anything = d
		}
	case 67:
		{
			size := yyS[yypt-1].i
			d := &element.Char{Size: &size}
			d.SetDataDefine(element.DataDefineChar)
			yyVAL.anything = d
		}
	case 68:
		{
			size := yyS[yypt-2].i
			d := &element.Char{Size: &size, IsByteSize: true}
			d.SetDataDefine(element.DataDefineChar)
			yyVAL.anything = d
		}
	case 69:
		{
			size := yyS[yypt-2].i
			d := &element.Char{Size: &size, IsCharSize: true}
			d.SetDataDefine(element.DataDefineChar)
			d.SetDataDefine(element.DataDefineChar)
			yyVAL.anything = d
		}
	case 70:
		{
			size := yyS[yypt-1].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDefine(element.DataDefineVarchar2)
			yyVAL.anything = d
		}
	case 71:
		{
			size := yyS[yypt-2].i
			d := &element.Varchar2{}
			d.Size = &size
			d.IsByteSize = true
			d.SetDataDefine(element.DataDefineVarchar2)
			yyVAL.anything = d
		}
	case 72:
		{
			size := yyS[yypt-2].i
			d := &element.Varchar2{}
			d.Size = &size
			d.IsCharSize = true
			d.SetDataDefine(element.DataDefineVarchar2)
			yyVAL.anything = d
		}
	case 73:
		{
			d := &element.NChar{}
			d.SetDataDefine(element.DataDefineNChar)
			yyVAL.anything = d
		}
	case 74:
		{
			size := yyS[yypt-1].i
			d := &element.NChar{Size: &size}
			d.SetDataDefine(element.DataDefineNChar)
			yyVAL.anything = d
		}
	case 75:
		{
			size := yyS[yypt-1].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDefine(element.DataDefineNVarChar2)
			yyVAL.anything = d
		}
	case 76:
		{
			d := &element.Number{}
			d.SetDataDefine(element.DataDefineNumber)
			yyVAL.anything = d
		}
	case 77:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDefine(element.DataDefineNumber)
			yyVAL.anything = d
		}
	case 78:
		{
			precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
			scale := yyS[yypt-1].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDefine(element.DataDefineNumber)
			yyVAL.anything = d
		}
	case 79:
		{
			d := &element.Float{}
			d.SetDataDefine(element.DataDefineFloat)
			yyVAL.anything = d
		}
	case 80:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Float{Precision: precision}
			d.SetDataDefine(element.DataDefineFloat)
			yyVAL.anything = d
		}
	case 81:
		{
			d := &element.BinaryFloat{}
			d.SetDataDefine(element.DataDefineBinaryFloat)
			yyVAL.anything = d
		}
	case 82:
		{
			d := &element.BinaryDouble{}
			d.SetDataDefine(element.DataDefineBinaryDouble)
			yyVAL.anything = d
		}
	case 83:
		{
			d := &element.Long{}
			d.SetDataDefine(element.DataDefineLong)
			yyVAL.anything = d
		}
	case 84:
		{
			d := &element.LongRaw{}
			d.SetDataDefine(element.DataDefineLongRaw)
			yyVAL.anything = d
		}
	case 85:
		{
			size := yyS[yypt-1].i
			d := &element.Raw{Size: &size}
			d.SetDataDefine(element.DataDefineRaw)
			yyVAL.anything = d
		}
	case 86:
		{
			d := &element.Date{}
			d.SetDataDefine(element.DataDefineDate)
			yyVAL.anything = d
		}
	case 87:
		{
			d := &element.Timestamp{}
			d.SetDataDefine(element.DataDefineTimestamp)
			yyVAL.anything = d
		}
	case 88:
		{
			precision := yyS[yypt-1].i
			d := &element.Timestamp{FractionalSecondsPrecision: &precision}
			d.SetDataDefine(element.DataDefineTimestamp)
			yyVAL.anything = d
		}
	case 89:
		{
			precision := yyS[yypt-4].i
			d := &element.Timestamp{FractionalSecondsPrecision: &precision, WithTimeZone: true}
			d.SetDataDefine(element.DataDefineTimestamp)
			yyVAL.anything = d
		}
	case 90:
		{
			precision := yyS[yypt-5].i
			d := &element.Timestamp{FractionalSecondsPrecision: &precision, WithLocalTimeZone: true}
			d.SetDataDefine(element.DataDefineTimestamp)
			yyVAL.anything = d
		}
	case 91:
		{
			d := &element.IntervalYear{}
			d.SetDataDefine(element.DataDefineIntervalYear)
			yyVAL.anything = d
		}
	case 92:
		{
			precision := yyS[yypt-3].i
			d := &element.IntervalYear{Precision: &precision}
			d.SetDataDefine(element.DataDefineIntervalYear)
			yyVAL.anything = d
		}
	case 93:
		{
			d := &element.IntervalDay{}
			d.SetDataDefine(element.DataDefineIntervalDay)
			yyVAL.anything = d
		}
	case 94:
		{
			precision := yyS[yypt-3].i
			d := &element.IntervalDay{Precision: &precision}
			d.SetDataDefine(element.DataDefineIntervalDay)
			yyVAL.anything = d
		}
	case 95:
		{
			precision := yyS[yypt-6].i
			sPrecision := yyS[yypt-1].i
			d := &element.IntervalDay{Precision: &precision, FractionalSecondsPrecision: &sPrecision}
			d.SetDataDefine(element.DataDefineIntervalDay)
			yyVAL.anything = d
		}
	case 96:
		{
			sPrecision := yyS[yypt-1].i
			d := &element.IntervalDay{FractionalSecondsPrecision: &sPrecision}
			d.SetDataDefine(element.DataDefineIntervalDay)
			yyVAL.anything = d
		}
	case 97:
		{
			d := &element.Blob{}
			d.SetDataDefine(element.DataDefineBlob)
			yyVAL.anything = d
		}
	case 98:
		{
			d := &element.Clob{}
			d.SetDataDefine(element.DataDefineClob)
			yyVAL.anything = d
		}
	case 99:
		{
			d := &element.NClob{}
			d.SetDataDefine(element.DataDefineNClob)
			yyVAL.anything = d
		}
	case 100:
		{
			d := &element.BFile{}
			d.SetDataDefine(element.DataDefineBFile)
			yyVAL.anything = d
		}
	case 101:
		{
			d := &element.RowId{}
			d.SetDataDefine(element.DataDefineRowId)
			yyVAL.anything = d
		}
	case 102:
		{
			d := &element.URowId{}
			d.SetDataDefine(element.DataDefineURowId)
			yyVAL.anything = d
		}
	case 103:
		{
			size := yyS[yypt-1].i
			d := &element.URowId{Size: &size}
			d.SetDataDefine(element.DataDefineURowId)
			yyVAL.anything = d
		}
	case 104:
		{
			d := &element.Char{}
			d.SetDataDefine(element.DataDefineCharacter)
			yyVAL.anything = d
		}
	case 105:
		{
			size := yyS[yypt-1].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDefine(element.DataDefineCharacterVarying)
			yyVAL.anything = d
		}
	case 106:
		{
			size := yyS[yypt-1].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDefine(element.DataDefineCharVarying)
			yyVAL.anything = d
		}
	case 107:
		{
			size := yyS[yypt-1].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDefine(element.DataDefineNCharVarying)
			yyVAL.anything = d
		}
	case 108:
		{
			size := yyS[yypt-1].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDefine(element.DataDefineVarchar)
			yyVAL.anything = d
		}
	case 109:
		{
			size := yyS[yypt-1].i
			d := &element.NChar{Size: &size}
			d.SetDataDefine(element.DataDefineNationalCharacter)
			yyVAL.anything = d
		}
	case 110:
		{
			size := yyS[yypt-1].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDefine(element.DataDefineNationalCharacterVarying)
			yyVAL.anything = d
		}
	case 111:
		{
			size := yyS[yypt-1].i
			d := &element.NChar{Size: &size}
			d.SetDataDefine(element.DataDefineNationalChar)
			yyVAL.anything = d
		}
	case 112:
		{
			size := yyS[yypt-1].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDefine(element.DataDefineNationalCharVarying)
			yyVAL.anything = d
		}
	case 113:
		{
			d := &element.Number{}
			d.SetDataDefine(element.DataDefineNumeric)
			yyVAL.anything = d
		}
	case 114:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDefine(element.DataDefineNumeric)
			yyVAL.anything = d
		}
	case 115:
		{
			precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
			scale := yyS[yypt-1].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDefine(element.DataDefineNumeric)
			yyVAL.anything = d
		}
	case 116:
		{
			d := &element.Number{}
			d.SetDataDefine(element.DataDefineDecimal)
			yyVAL.anything = d
		}
	case 117:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDefine(element.DataDefineDecimal)
			yyVAL.anything = d
		}
	case 118:
		{
			precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
			scale := yyS[yypt-1].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDefine(element.DataDefineDecimal)
			yyVAL.anything = d
		}
	case 119:
		{
			d := &element.Number{}
			d.SetDataDefine(element.DataDefineDec)
			yyVAL.anything = d
		}
	case 120:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDefine(element.DataDefineDec)
			yyVAL.anything = d
		}
	case 121:
		{
			precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
			scale := yyS[yypt-1].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDefine(element.DataDefineDec)
			yyVAL.anything = d
		}
	case 122:
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDefine(element.DataDefineInteger)
			yyVAL.anything = d
		}
	case 123:
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDefine(element.DataDefineInt)
			yyVAL.anything = d
		}
	case 124:
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDefine(element.DataDefineSmallInt)
			yyVAL.anything = d
		}
	case 125:
		{
			precision := &element.NumberOrAsterisk{Number: 126}
			d := &element.Float{Precision: precision}
			d.SetDataDefine(element.DataDefineDoublePrecision)
			yyVAL.anything = d
		}
	case 126:
		{
			precision := &element.NumberOrAsterisk{Number: 63}
			d := &element.Float{Precision: precision}
			d.SetDataDefine(element.DataDefineReal)
			yyVAL.anything = d
		}
	case 127:
		{
			// empty
		}
	case 136:
		{
			// empty
		}
	case 138:
		{
			// empty
		}
	case 141:
		{
			// empty
		}
	case 151:
		{
			// empty
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

// Code generated by goyacc - DO NOT EDIT.

package oralce_sql_parser

import __yyfmt__ "fmt"

import (
	"github.com/sjjian/oralce_sql_parser/ast"
	"github.com/sjjian/oralce_sql_parser/ast/element"
)

type yySymType struct {
	yys      int
	nothing  struct{}
	i        int
	b        bool
	str      string
	node     ast.Node
	anything interface{}
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault            = 57462
	yyEofCode            = 57344
	_add                 = 57350
	_all                 = 57444
	_alter               = 57348
	_always              = 57423
	_as                  = 57424
	_at                  = 57445
	_bfile               = 57377
	_binaryDouble        = 57359
	_binaryFloat         = 57358
	_blob                = 57374
	_by                  = 57400
	_byte                = 57352
	_cache               = 57427
	_cascade             = 57410
	_char                = 57351
	_character           = 57380
	_checkpoint          = 57456
	_clob                = 57375
	_collate             = 57393
	_column              = 57446
	_columns             = 57450
	_constraint          = 57403
	_constraints         = 57453
	_continue            = 57451
	_cycle               = 57428
	_date                = 57362
	_day                 = 57372
	_dec                 = 57386
	_decimal             = 57385
	_decrypt             = 57443
	_default             = 57422
	_deferrable          = 57414
	_deferred            = 57415
	_delete              = 57411
	_double              = 57390
	_doubleQuoteStr      = 57460
	_drop                = 57442
	_encrypt             = 57397
	_float               = 57357
	_force               = 57449
	_from                = 57347
	_generated           = 57425
	_identified          = 57399
	_identity            = 57426
	_immediate           = 57416
	_increment           = 57429
	_initially           = 57417
	_int                 = 57388
	_intNumber           = 57458
	_interger            = 57387
	_interval            = 57368
	_invalidate          = 57454
	_invisible           = 57395
	_is                  = 57420
	_key                 = 57404
	_levels              = 57447
	_limit               = 57430
	_local               = 57365
	_long                = 57360
	_maxvalue            = 57431
	_minvalue            = 57432
	_modify              = 57441
	_mouth               = 57371
	_national            = 57383
	_nchar               = 57354
	_nclob               = 57376
	_no                  = 57401
	_nocache             = 57433
	_nocycle             = 57434
	_nomaxvalue          = 57435
	_nominvalue          = 57436
	_nonquotedIdentifier = 57461
	_noorder             = 57437
	_norely              = 57418
	_not                 = 57405
	_null                = 57406
	_number              = 57356
	_numeric             = 57384
	_nvarchar2           = 57355
	_on                  = 57412
	_online              = 57455
	_order               = 57438
	_precision           = 57391
	_primary             = 57407
	_raw                 = 57361
	_real                = 57392
	_references          = 57409
	_rely                = 57419
	_rename              = 57457
	_rowid               = 57378
	_salt                = 57402
	_scope               = 57421
	_second              = 57373
	_select              = 57346
	_set                 = 57413
	_singleQuoteStr      = 57459
	_smallInt            = 57389
	_sort                = 57394
	_start               = 57439
	_substitutable       = 57448
	_table               = 57349
	_time                = 57366
	_timestamp           = 57363
	_to                  = 57370
	_unique              = 57408
	_unused              = 57452
	_urowid              = 57379
	_using               = 57398
	_value               = 57440
	_varchar             = 57382
	_varchar2            = 57353
	_varying             = 57381
	_visible             = 57396
	_with                = 57364
	_year                = 57369
	_zone                = 57367
	yyErrCode            = 57345

	yyMaxDepth = 200
	yyTabOfs   = -221
)

var (
	yyPrec = map[int]int{}

	yyXLAT = map[int]int{
		41:    0,   // ')' (226x)
		44:    1,   // ',' (177x)
		57406: 2,   // _null (158x)
		57405: 3,   // _not (156x)
		57407: 4,   // _primary (154x)
		57409: 5,   // _references (154x)
		57408: 6,   // _unique (154x)
		57403: 7,   // _constraint (151x)
		57442: 8,   // _drop (116x)
		57364: 9,   // _with (109x)
		57421: 10,  // _scope (108x)
		57397: 11,  // _encrypt (101x)
		57443: 12,  // _decrypt (92x)
		57422: 13,  // _default (83x)
		57425: 14,  // _generated (82x)
		57395: 15,  // _invisible (79x)
		57396: 16,  // _visible (79x)
		57394: 17,  // _sort (74x)
		57393: 18,  // _collate (71x)
		57446: 19,  // _column (47x)
		57344: 20,  // $end (46x)
		57413: 21,  // _set (45x)
		57350: 22,  // _add (44x)
		57441: 23,  // _modify (44x)
		59:    24,  // ';' (43x)
		40:    25,  // '(' (38x)
		57458: 26,  // _intNumber (37x)
		57414: 27,  // _deferrable (21x)
		57460: 28,  // _doubleQuoteStr (21x)
		57417: 29,  // _initially (20x)
		57461: 30,  // _nonquotedIdentifier (19x)
		57503: 31,  // Identifier (19x)
		57427: 32,  // _cache (17x)
		57428: 33,  // _cycle (17x)
		57429: 34,  // _increment (17x)
		57431: 35,  // _maxvalue (17x)
		57432: 36,  // _minvalue (17x)
		57433: 37,  // _nocache (17x)
		57434: 38,  // _nocycle (17x)
		57435: 39,  // _nomaxvalue (17x)
		57436: 40,  // _nominvalue (17x)
		57437: 41,  // _noorder (17x)
		57438: 42,  // _order (17x)
		57439: 43,  // _start (17x)
		57456: 44,  // _checkpoint (14x)
		57410: 45,  // _cascade (13x)
		57454: 46,  // _invalidate (12x)
		57455: 47,  // _online (12x)
		57475: 48,  // ColumnName (12x)
		57401: 49,  // _no (10x)
		57402: 50,  // _salt (10x)
		57351: 51,  // _char (9x)
		46:    52,  // '.' (8x)
		57418: 53,  // _norely (8x)
		57412: 54,  // _on (8x)
		57419: 55,  // _rely (8x)
		57459: 56,  // _singleQuoteStr (8x)
		57370: 57,  // _to (8x)
		57380: 58,  // _character (7x)
		57361: 59,  // _raw (7x)
		57457: 60,  // _rename (7x)
		57378: 61,  // _rowid (7x)
		57377: 62,  // _bfile (6x)
		57359: 63,  // _binaryDouble (6x)
		57358: 64,  // _binaryFloat (6x)
		57374: 65,  // _blob (6x)
		57375: 66,  // _clob (6x)
		57362: 67,  // _date (6x)
		57386: 68,  // _dec (6x)
		57385: 69,  // _decimal (6x)
		57390: 70,  // _double (6x)
		57357: 71,  // _float (6x)
		57388: 72,  // _int (6x)
		57387: 73,  // _interger (6x)
		57368: 74,  // _interval (6x)
		57360: 75,  // _long (6x)
		57383: 76,  // _national (6x)
		57354: 77,  // _nchar (6x)
		57376: 78,  // _nclob (6x)
		57356: 79,  // _number (6x)
		57384: 80,  // _numeric (6x)
		57355: 81,  // _nvarchar2 (6x)
		57392: 82,  // _real (6x)
		57389: 83,  // _smallInt (6x)
		57363: 84,  // _timestamp (6x)
		57379: 85,  // _urowid (6x)
		57382: 86,  // _varchar (6x)
		57353: 87,  // _varchar2 (6x)
		42:    88,  // '*' (5x)
		57426: 89,  // _identity (5x)
		57448: 90,  // _substitutable (5x)
		57381: 91,  // _varying (5x)
		57528: 92,  // NumberOrAsterisk (5x)
		57424: 93,  // _as (4x)
		57480: 94,  // ConstraintNameOrEmpty (4x)
		57485: 95,  // ConstraintStateRely (4x)
		57507: 96,  // IdentityOptionsOrEmpty (4x)
		57508: 97,  // InlineConstraint (4x)
		57400: 98,  // _by (3x)
		57399: 99,  // _identified (3x)
		57465: 100, // AnsiSupportDataTypes (3x)
		57468: 101, // CharacterDataTypes (3x)
		57482: 102, // ConstraintStateDeferrable (3x)
		57483: 103, // ConstraintStateDeferredOrImmediate (3x)
		57486: 104, // Datatype (3x)
		57487: 105, // DatetimeDataTypes (3x)
		57491: 106, // DropColumnCheckpoint (3x)
		57496: 107, // DropColumnProperty (3x)
		57513: 108, // InvisibleProperty (3x)
		57516: 109, // LargeObjectDataTypes (3x)
		57517: 110, // LongAndRawDataTypes (3x)
		57527: 111, // NumberDataTypes (3x)
		57529: 112, // OralceBuiltInDataTypes (3x)
		57535: 113, // RowIdDataTypes (3x)
		57540: 114, // TableName (3x)
		57444: 115, // _all (2x)
		57445: 116, // _at (2x)
		57352: 117, // _byte (2x)
		57450: 118, // _columns (2x)
		57449: 119, // _force (2x)
		57447: 120, // _levels (2x)
		57371: 121, // _mouth (2x)
		57373: 122, // _second (2x)
		57366: 123, // _time (2x)
		57452: 124, // _unused (2x)
		57367: 125, // _zone (2x)
		57463: 126, // AddColumnClause (2x)
		57466: 127, // ChangeColumnClause (2x)
		57469: 128, // CollateClause (2x)
		57472: 129, // ColumnDefinition (2x)
		57476: 130, // ColumnNameList (2x)
		57477: 131, // ColumnNameListForDropColumn (2x)
		57481: 132, // ConstraintState (2x)
		57484: 133, // ConstraintStateOrEmpty (2x)
		57488: 134, // DefaultClause (2x)
		57489: 135, // DefaultOrIdentityClause (2x)
		57492: 136, // DropColumnClause (2x)
		57494: 137, // DropColumnProperties (2x)
		57495: 138, // DropColumnPropertiesOrEmpty (2x)
		57498: 139, // EncryptClause (2x)
		57501: 140, // Expr (2x)
		57504: 141, // IdentityClause (2x)
		57505: 142, // IdentityOption (2x)
		57509: 143, // InlineConstraintList (2x)
		57510: 144, // InlineConstraintProperty (2x)
		57515: 145, // IsForce (2x)
		57520: 146, // ModifyColumnClause (2x)
		57522: 147, // ModifyColumnProperty (2x)
		57523: 148, // ModifyColumnSubstitutable (2x)
		57524: 149, // ModifyColumnVisibility (2x)
		57526: 150, // ModifyRealColumnProperty (2x)
		57531: 151, // RealColumnDefinition (2x)
		57532: 152, // ReferencesClause (2x)
		57348: 153, // _alter (1x)
		57423: 154, // _always (1x)
		57453: 155, // _constraints (1x)
		57451: 156, // _continue (1x)
		57372: 157, // _day (1x)
		57415: 158, // _deferred (1x)
		57411: 159, // _delete (1x)
		57416: 160, // _immediate (1x)
		57420: 161, // _is (1x)
		57404: 162, // _key (1x)
		57430: 163, // _limit (1x)
		57365: 164, // _local (1x)
		57391: 165, // _precision (1x)
		57349: 166, // _table (1x)
		57398: 167, // _using (1x)
		57440: 168, // _value (1x)
		57369: 169, // _year (1x)
		57464: 170, // AlterTableStmt (1x)
		57467: 171, // ChangeColumnClauseList (1x)
		57470: 172, // ColumnClauses (1x)
		57471: 173, // ColumnConstraintForModify (1x)
		57473: 174, // ColumnDefinitionConstraint (1x)
		57474: 175, // ColumnDefinitionList (1x)
		57478: 176, // ColumnNameListOrEmpty (1x)
		57479: 177, // ColumnProperties (1x)
		57490: 178, // DefaultOrIdentityClauseForModify (1x)
		57493: 179, // DropColumnOnline (1x)
		57497: 180, // EncryptAlgorithm (1x)
		57499: 181, // EncryptClauseForModify (1x)
		57500: 182, // EncryptionSpec (1x)
		57502: 183, // IdentifiedByClause (1x)
		57506: 184, // IdentityOptions (1x)
		57511: 185, // InlineRefConstraint (1x)
		57512: 186, // IntergrityAlgorithm (1x)
		57514: 187, // InvisiblePropertyOrEmpty (1x)
		57518: 188, // MemoptimizeReadClause (1x)
		57519: 189, // MemoptimizeWriteClause (1x)
		57521: 190, // ModifyColumnProperties (1x)
		57525: 191, // ModifyColumnVisibilityList (1x)
		57530: 192, // OutOfLinePartStorageList (1x)
		57533: 193, // ReferencesOnDelete (1x)
		57534: 194, // RenameColumnClause (1x)
		57536: 195, // SaltProperty (1x)
		57537: 196, // SortProperty (1x)
		57538: 197, // Start (1x)
		57539: 198, // Statement (1x)
		57462: 199, // $default (0x)
		57347: 200, // _from (0x)
		57346: 201, // _select (0x)
		57345: 202, // error (0x)
	}

	yySymNames = []string{
		"')'",
		"','",
		"_null",
		"_not",
		"_primary",
		"_references",
		"_unique",
		"_constraint",
		"_drop",
		"_with",
		"_scope",
		"_encrypt",
		"_decrypt",
		"_default",
		"_generated",
		"_invisible",
		"_visible",
		"_sort",
		"_collate",
		"_column",
		"$end",
		"_set",
		"_add",
		"_modify",
		"';'",
		"'('",
		"_intNumber",
		"_deferrable",
		"_doubleQuoteStr",
		"_initially",
		"_nonquotedIdentifier",
		"Identifier",
		"_cache",
		"_cycle",
		"_increment",
		"_maxvalue",
		"_minvalue",
		"_nocache",
		"_nocycle",
		"_nomaxvalue",
		"_nominvalue",
		"_noorder",
		"_order",
		"_start",
		"_checkpoint",
		"_cascade",
		"_invalidate",
		"_online",
		"ColumnName",
		"_no",
		"_salt",
		"_char",
		"'.'",
		"_norely",
		"_on",
		"_rely",
		"_singleQuoteStr",
		"_to",
		"_character",
		"_raw",
		"_rename",
		"_rowid",
		"_bfile",
		"_binaryDouble",
		"_binaryFloat",
		"_blob",
		"_clob",
		"_date",
		"_dec",
		"_decimal",
		"_double",
		"_float",
		"_int",
		"_interger",
		"_interval",
		"_long",
		"_national",
		"_nchar",
		"_nclob",
		"_number",
		"_numeric",
		"_nvarchar2",
		"_real",
		"_smallInt",
		"_timestamp",
		"_urowid",
		"_varchar",
		"_varchar2",
		"'*'",
		"_identity",
		"_substitutable",
		"_varying",
		"NumberOrAsterisk",
		"_as",
		"ConstraintNameOrEmpty",
		"ConstraintStateRely",
		"IdentityOptionsOrEmpty",
		"InlineConstraint",
		"_by",
		"_identified",
		"AnsiSupportDataTypes",
		"CharacterDataTypes",
		"ConstraintStateDeferrable",
		"ConstraintStateDeferredOrImmediate",
		"Datatype",
		"DatetimeDataTypes",
		"DropColumnCheckpoint",
		"DropColumnProperty",
		"InvisibleProperty",
		"LargeObjectDataTypes",
		"LongAndRawDataTypes",
		"NumberDataTypes",
		"OralceBuiltInDataTypes",
		"RowIdDataTypes",
		"TableName",
		"_all",
		"_at",
		"_byte",
		"_columns",
		"_force",
		"_levels",
		"_mouth",
		"_second",
		"_time",
		"_unused",
		"_zone",
		"AddColumnClause",
		"ChangeColumnClause",
		"CollateClause",
		"ColumnDefinition",
		"ColumnNameList",
		"ColumnNameListForDropColumn",
		"ConstraintState",
		"ConstraintStateOrEmpty",
		"DefaultClause",
		"DefaultOrIdentityClause",
		"DropColumnClause",
		"DropColumnProperties",
		"DropColumnPropertiesOrEmpty",
		"EncryptClause",
		"Expr",
		"IdentityClause",
		"IdentityOption",
		"InlineConstraintList",
		"InlineConstraintProperty",
		"IsForce",
		"ModifyColumnClause",
		"ModifyColumnProperty",
		"ModifyColumnSubstitutable",
		"ModifyColumnVisibility",
		"ModifyRealColumnProperty",
		"RealColumnDefinition",
		"ReferencesClause",
		"_alter",
		"_always",
		"_constraints",
		"_continue",
		"_day",
		"_deferred",
		"_delete",
		"_immediate",
		"_is",
		"_key",
		"_limit",
		"_local",
		"_precision",
		"_table",
		"_using",
		"_value",
		"_year",
		"AlterTableStmt",
		"ChangeColumnClauseList",
		"ColumnClauses",
		"ColumnConstraintForModify",
		"ColumnDefinitionConstraint",
		"ColumnDefinitionList",
		"ColumnNameListOrEmpty",
		"ColumnProperties",
		"DefaultOrIdentityClauseForModify",
		"DropColumnOnline",
		"EncryptAlgorithm",
		"EncryptClauseForModify",
		"EncryptionSpec",
		"IdentifiedByClause",
		"IdentityOptions",
		"InlineRefConstraint",
		"IntergrityAlgorithm",
		"InvisiblePropertyOrEmpty",
		"MemoptimizeReadClause",
		"MemoptimizeWriteClause",
		"ModifyColumnProperties",
		"ModifyColumnVisibilityList",
		"OutOfLinePartStorageList",
		"ReferencesOnDelete",
		"RenameColumnClause",
		"SaltProperty",
		"SortProperty",
		"Start",
		"Statement",
		"$default",
		"_from",
		"_select",
		"error",
	}

	yyTokenLiteralStrings = map[int]string{
		57458: "int number",
		57460: "double quotes string",
		57461: "nonquoted identifier",
		57459: "single quotes string",
	}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {197, 1},
		2:   {198, 1},
		3:   {198, 2},
		4:   {114, 1},
		5:   {114, 3},
		6:   {130, 1},
		7:   {130, 3},
		8:   {48, 1},
		9:   {31, 1},
		10:  {31, 1},
		11:  {170, 6},
		12:  {188, 0},
		13:  {189, 0},
		14:  {172, 1},
		15:  {172, 1},
		16:  {171, 1},
		17:  {171, 2},
		18:  {127, 1},
		19:  {127, 1},
		20:  {127, 1},
		21:  {126, 6},
		22:  {177, 0},
		23:  {192, 0},
		24:  {175, 1},
		25:  {175, 3},
		26:  {129, 1},
		27:  {151, 8},
		28:  {128, 0},
		29:  {128, 2},
		30:  {196, 0},
		31:  {196, 1},
		32:  {187, 0},
		33:  {187, 1},
		34:  {108, 1},
		35:  {108, 1},
		36:  {135, 0},
		37:  {135, 1},
		38:  {135, 1},
		39:  {134, 2},
		40:  {134, 4},
		41:  {141, 4},
		42:  {141, 5},
		43:  {141, 5},
		44:  {141, 6},
		45:  {141, 8},
		46:  {96, 0},
		47:  {96, 3},
		48:  {184, 0},
		49:  {184, 1},
		50:  {184, 2},
		51:  {142, 3},
		52:  {142, 4},
		53:  {142, 3},
		54:  {142, 2},
		55:  {142, 1},
		56:  {142, 2},
		57:  {142, 1},
		58:  {142, 1},
		59:  {142, 1},
		60:  {142, 2},
		61:  {142, 1},
		62:  {142, 1},
		63:  {142, 1},
		64:  {139, 0},
		65:  {139, 2},
		66:  {182, 4},
		67:  {180, 0},
		68:  {180, 2},
		69:  {183, 0},
		70:  {183, 3},
		71:  {186, 0},
		72:  {186, 1},
		73:  {195, 0},
		74:  {195, 1},
		75:  {195, 2},
		76:  {174, 0},
		77:  {174, 1},
		78:  {174, 1},
		79:  {143, 1},
		80:  {143, 2},
		81:  {146, 4},
		82:  {146, 4},
		83:  {146, 1},
		84:  {190, 1},
		85:  {190, 3},
		86:  {147, 1},
		87:  {150, 6},
		88:  {178, 2},
		89:  {178, 1},
		90:  {181, 1},
		91:  {181, 1},
		92:  {173, 0},
		93:  {173, 1},
		94:  {191, 1},
		95:  {191, 3},
		96:  {149, 2},
		97:  {148, 7},
		98:  {148, 8},
		99:  {145, 0},
		100: {145, 1},
		101: {136, 5},
		102: {136, 4},
		103: {136, 4},
		104: {136, 4},
		105: {131, 2},
		106: {131, 3},
		107: {138, 0},
		108: {138, 1},
		109: {137, 1},
		110: {137, 2},
		111: {107, 2},
		112: {107, 1},
		113: {179, 0},
		114: {179, 1},
		115: {106, 0},
		116: {106, 2},
		117: {194, 5},
		118: {104, 1},
		119: {104, 1},
		120: {92, 1},
		121: {92, 1},
		122: {112, 1},
		123: {112, 1},
		124: {112, 1},
		125: {112, 1},
		126: {112, 1},
		127: {112, 1},
		128: {101, 1},
		129: {101, 4},
		130: {101, 5},
		131: {101, 5},
		132: {101, 4},
		133: {101, 5},
		134: {101, 5},
		135: {101, 1},
		136: {101, 4},
		137: {101, 4},
		138: {111, 1},
		139: {111, 4},
		140: {111, 6},
		141: {111, 1},
		142: {111, 4},
		143: {111, 1},
		144: {111, 1},
		145: {110, 1},
		146: {110, 2},
		147: {110, 4},
		148: {105, 1},
		149: {105, 1},
		150: {105, 4},
		151: {105, 7},
		152: {105, 8},
		153: {105, 4},
		154: {105, 7},
		155: {105, 4},
		156: {105, 7},
		157: {105, 10},
		158: {105, 7},
		159: {109, 1},
		160: {109, 1},
		161: {109, 1},
		162: {109, 1},
		163: {113, 1},
		164: {113, 1},
		165: {113, 4},
		166: {100, 4},
		167: {100, 5},
		168: {100, 5},
		169: {100, 5},
		170: {100, 4},
		171: {100, 5},
		172: {100, 6},
		173: {100, 5},
		174: {100, 6},
		175: {100, 1},
		176: {100, 4},
		177: {100, 6},
		178: {100, 1},
		179: {100, 4},
		180: {100, 6},
		181: {100, 1},
		182: {100, 4},
		183: {100, 6},
		184: {100, 1},
		185: {100, 1},
		186: {100, 1},
		187: {100, 2},
		188: {100, 1},
		189: {94, 0},
		190: {94, 2},
		191: {97, 3},
		192: {144, 1},
		193: {144, 2},
		194: {144, 1},
		195: {144, 2},
		196: {144, 1},
		197: {152, 4},
		198: {176, 0},
		199: {176, 3},
		200: {193, 0},
		201: {193, 3},
		202: {193, 4},
		203: {133, 0},
		204: {133, 1},
		205: {132, 2},
		206: {132, 3},
		207: {132, 2},
		208: {132, 3},
		209: {102, 1},
		210: {102, 2},
		211: {103, 2},
		212: {103, 2},
		213: {95, 0},
		214: {95, 1},
		215: {95, 1},
		216: {185, 3},
		217: {185, 2},
		218: {185, 3},
		219: {140, 1},
		220: {140, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [409][]uint16{
		// 0
		{153: 225, 170: 224, 197: 222, 223},
		{20: 221},
		{20: 220},
		{20: 219, 24: 629},
		{166: 226},
		// 5
		{28: 229, 30: 228, 227, 114: 230},
		{217, 217, 217, 217, 217, 217, 217, 217, 217, 19: 217, 21: 217, 217, 217, 25: 217, 27: 217, 29: 217, 52: 627, 54: 217, 60: 217},
		{212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 19: 212, 212, 212, 212, 212, 212, 212, 27: 212, 29: 212, 44: 212, 212, 212, 212, 49: 212, 212, 212, 212, 54: 212, 56: 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 90: 212},
		{211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 19: 211, 211, 211, 211, 211, 211, 211, 27: 211, 29: 211, 44: 211, 211, 211, 211, 49: 211, 211, 211, 211, 54: 211, 56: 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 90: 211},
		{8: 209, 19: 209, 21: 209, 209, 209, 60: 209, 188: 231},
		// 10
		{8: 208, 19: 208, 21: 208, 208, 208, 60: 208, 189: 232},
		{8: 245, 19: 243, 21: 244, 240, 241, 60: 246, 126: 237, 236, 136: 239, 146: 238, 148: 242, 171: 234, 233, 194: 235},
		{20: 210, 24: 210},
		{8: 245, 19: 243, 207, 244, 240, 241, 207, 126: 237, 626, 136: 239, 146: 238, 148: 242},
		{20: 206, 24: 206},
		// 15
		{8: 205, 19: 205, 205, 205, 205, 205, 205},
		{8: 203, 19: 203, 203, 203, 203, 203, 203},
		{8: 202, 19: 202, 202, 202, 202, 202, 202},
		{8: 201, 19: 201, 201, 201, 201, 201, 201},
		{25: 597},
		// 20
		{25: 295},
		{8: 138, 19: 138, 138, 138, 138, 138, 138},
		{28: 229, 30: 228, 248, 48: 282},
		{124: 277},
		{19: 255, 25: 256, 118: 254, 124: 253, 131: 252},
		// 25
		{19: 247},
		{28: 229, 30: 228, 248, 48: 249},
		{213, 213, 3: 213, 8: 213, 15: 213, 213, 19: 213, 213, 213, 213, 213, 213, 44: 213, 213, 213, 213, 51: 213, 57: 213, 213, 213, 61: 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 90: 213},
		{57: 250},
		{28: 229, 30: 228, 248, 48: 251},
		// 30
		{20: 104, 24: 104},
		{8: 114, 19: 114, 114, 114, 114, 114, 114, 44: 114, 272, 273, 107: 271, 137: 270, 269},
		{118: 267},
		{156: 263},
		{28: 229, 30: 228, 248, 48: 262},
		// 35
		{28: 229, 30: 228, 248, 48: 257, 130: 258},
		{215, 215},
		{260, 259},
		{28: 229, 30: 228, 248, 48: 261},
		{8: 115, 19: 115, 115, 115, 115, 115, 115, 44: 115, 115, 115, 115},
		// 40
		{214, 214},
		{8: 116, 19: 116, 116, 116, 116, 116, 116, 44: 116, 116, 116, 116},
		{8: 106, 19: 106, 106, 106, 106, 106, 106, 44: 265, 106: 264},
		{8: 117, 19: 117, 117, 117, 117, 117, 117},
		{26: 266},
		// 45
		{8: 105, 19: 105, 105, 105, 105, 105, 105},
		{8: 106, 19: 106, 106, 106, 106, 106, 106, 44: 265, 106: 268},
		{8: 118, 19: 118, 118, 118, 118, 118, 118},
		{8: 106, 19: 106, 106, 106, 106, 106, 106, 44: 265, 106: 276},
		{8: 113, 19: 113, 113, 113, 113, 113, 113, 44: 113, 272, 273, 113, 107: 275},
		// 50
		{8: 112, 19: 112, 112, 112, 112, 112, 112, 44: 112, 112, 112, 112},
		{155: 274},
		{8: 109, 19: 109, 109, 109, 109, 109, 109, 44: 109, 109, 109, 109},
		{8: 110, 19: 110, 110, 110, 110, 110, 110, 44: 110, 110, 110, 110},
		{8: 111, 19: 111, 111, 111, 111, 111, 111, 44: 111, 111, 111, 111},
		// 55
		{8: 119, 19: 119, 119, 119, 119, 119, 119},
		{19: 255, 25: 256, 131: 278},
		{8: 114, 19: 114, 114, 114, 114, 114, 114, 45: 272, 273, 114, 107: 271, 137: 270, 279},
		{8: 108, 19: 108, 108, 108, 108, 108, 108, 47: 281, 179: 280},
		{8: 120, 19: 120, 120, 120, 120, 120, 120},
		// 60
		{8: 107, 19: 107, 107, 107, 107, 107, 107},
		{3: 284, 90: 283},
		{116: 291},
		{90: 285},
		{116: 286},
		// 65
		{115: 287},
		{120: 288},
		{8: 122, 19: 122, 122, 122, 122, 122, 122, 119: 290, 145: 289},
		{8: 123, 19: 123, 123, 123, 123, 123, 123},
		{8: 121, 19: 121, 121, 121, 121, 121, 121},
		// 70
		{115: 292},
		{120: 293},
		{8: 122, 19: 122, 122, 122, 122, 122, 122, 119: 290, 145: 294},
		{8: 124, 19: 124, 124, 124, 124, 124, 124},
		{28: 229, 30: 228, 248, 48: 300, 147: 298, 149: 301, 299, 190: 296, 297},
		// 75
		{593, 594},
		{589, 590},
		{137, 137},
		{135, 135},
		{15: 302, 303, 51: 314, 58: 333, 323, 61: 331, 330, 321, 320, 327, 328, 324, 338, 337, 342, 319, 340, 339, 326, 322, 335, 316, 329, 318, 336, 317, 343, 341, 325, 332, 334, 315, 100: 307, 308, 104: 304, 311, 108: 305, 312, 310, 309, 306, 313},
		// 80
		{127, 127},
		{187, 187, 187, 187, 187, 187, 187, 187, 9: 187, 187, 187, 13: 187, 187},
		{186, 186, 186, 186, 186, 186, 186, 186, 9: 186, 186, 186, 13: 186, 186},
		{193, 193, 193, 193, 193, 193, 193, 193, 193, 11: 193, 193, 193, 193, 18: 466, 128: 467},
		{125, 125},
		// 85
		{103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103},
		{102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102},
		{99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99},
		{98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98},
		{97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97},
		// 90
		{96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96},
		{95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95},
		{94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94},
		{93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 25: 455, 91: 456},
		{25: 448},
		// 95
		{86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 25: 441, 91: 442},
		{25: 438},
		{83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 25: 432},
		{80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 25: 429},
		{78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78},
		// 100
		{77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77},
		{76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 59: 428},
		{25: 425},
		{73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73},
		{72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 25: 416},
		// 105
		{157: 395, 169: 394},
		{62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62},
		{61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61},
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60},
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59},
		// 110
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58},
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 25: 391},
		{25: 384, 91: 385},
		{25: 381},
		{51: 366, 58: 365},
		// 115
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 25: 359},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 25: 353},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 25: 345},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36},
		// 120
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35},
		{165: 344},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34},
		{26: 346, 88: 347, 92: 348},
		// 125
		{101, 101, 52: 101},
		{100, 100, 52: 100},
		{349, 52: 350},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{26: 351},
		// 130
		{352},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38},
		{26: 346, 88: 347, 92: 354},
		{355, 52: 356},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42},
		// 135
		{26: 357},
		{358},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41},
		{26: 346, 88: 347, 92: 360},
		{361, 52: 362},
		// 140
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45},
		{26: 363},
		{364},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
		{25: 374, 91: 375},
		// 145
		{25: 367, 91: 368},
		{26: 372},
		{25: 369},
		{26: 370},
		{371},
		// 150
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47},
		{373},
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48},
		{26: 379},
		{25: 376},
		// 155
		{26: 377},
		{378},
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49},
		{380},
		{50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50},
		// 160
		{26: 382},
		{383},
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51},
		{26: 389},
		{25: 386},
		// 165
		{26: 387},
		{388},
		{54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54},
		{390},
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
		// 170
		{26: 392},
		{393},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56},
		{25: 410, 57: 409},
		{25: 397, 57: 396},
		// 175
		{122: 405},
		{26: 398},
		{399},
		{57: 400},
		{122: 401},
		// 180
		{65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 25: 402},
		{26: 403},
		{404},
		{64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64},
		{66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 25: 406},
		// 185
		{26: 407},
		{408},
		{63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63},
		{121: 415},
		{26: 411},
		// 190
		{412},
		{57: 413},
		{121: 414},
		{67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67},
		{68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68},
		// 195
		{26: 417},
		{418},
		{71, 71, 71, 71, 71, 71, 71, 71, 71, 419, 71, 71, 71, 71, 71, 71, 71, 71, 71},
		{123: 420, 164: 421},
		{125: 424},
		// 200
		{123: 422},
		{125: 423},
		{69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69},
		{70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70},
		{26: 426},
		// 205
		{427},
		{74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74},
		{75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75},
		{26: 346, 88: 347, 92: 430},
		{431},
		// 210
		{79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79},
		{26: 346, 88: 347, 92: 433},
		{434, 435},
		{82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82},
		{26: 436},
		// 215
		{437},
		{81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81},
		{26: 439},
		{440},
		{84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84},
		// 220
		{26: 446},
		{25: 443},
		{26: 444},
		{445},
		{52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52},
		// 225
		{447},
		{85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85},
		{26: 449},
		{450, 51: 452, 117: 451},
		{89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89},
		// 230
		{454},
		{453},
		{87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87},
		{88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88},
		{26: 460},
		// 235
		{25: 457},
		{26: 458},
		{459},
		{53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53},
		{461, 51: 463, 117: 462},
		// 240
		{92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92},
		{465},
		{464},
		{90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90},
		{91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91},
		// 245
		{28: 229, 30: 228, 588},
		{185, 185, 185, 185, 185, 185, 185, 185, 473, 11: 185, 185, 470, 471, 134: 468, 474, 141: 469, 178: 472},
		{184, 184, 184, 184, 184, 184, 184, 184, 9: 184, 184, 184, 184},
		{183, 183, 183, 183, 183, 183, 183, 183, 9: 183, 183, 183, 183},
		{26: 584, 28: 585, 49: 583, 140: 582},
		// 250
		{93: 539, 98: 541, 154: 540},
		{157, 157, 157, 157, 157, 157, 157, 157, 11: 476, 478, 139: 479, 181: 477},
		{89: 475},
		{132, 132, 132, 132, 132, 132, 132, 132, 11: 132, 132},
		{133, 133, 133, 133, 133, 133, 133, 133, 11: 133, 133},
		// 255
		{154, 154, 154, 154, 154, 154, 154, 154, 9: 154, 154, 49: 154, 154, 56: 154, 99: 154, 167: 527, 180: 526, 182: 525},
		{129, 129, 32, 32, 32, 32, 32, 483, 94: 484, 97: 480, 143: 481, 173: 482},
		{131, 131, 131, 131, 131, 131, 131, 131},
		{130, 130, 130, 130, 130, 130, 130, 130},
		{142, 142, 142, 142, 142, 142, 142, 142},
		// 260
		{128, 128, 32, 32, 32, 32, 32, 483, 94: 484, 97: 524},
		{134, 134},
		{28: 229, 30: 228, 523},
		{2: 486, 487, 489, 491, 488, 144: 485, 152: 490},
		{18, 18, 18, 510, 18, 18, 18, 18, 27: 509, 29: 511, 102: 507, 508, 132: 506, 505},
		// 265
		{29, 29, 29, 29, 29, 29, 29, 29, 27: 29, 29: 29},
		{2: 504},
		{27, 27, 27, 27, 27, 27, 27, 27, 27: 27, 29: 27},
		{162: 503},
		{25, 25, 25, 25, 25, 25, 25, 25, 27: 25, 29: 25},
		// 270
		{28: 229, 30: 228, 227, 114: 492},
		{23, 23, 23, 23, 23, 23, 23, 23, 25: 494, 27: 23, 29: 23, 54: 23, 176: 493},
		{21, 21, 21, 21, 21, 21, 21, 21, 27: 21, 29: 21, 54: 498, 193: 497},
		{28: 229, 30: 228, 248, 48: 257, 130: 495},
		{496, 259},
		// 275
		{22, 22, 22, 22, 22, 22, 22, 22, 27: 22, 29: 22, 54: 22},
		{24, 24, 24, 24, 24, 24, 24, 24, 27: 24, 29: 24},
		{159: 499},
		{21: 501, 45: 500},
		{20, 20, 20, 20, 20, 20, 20, 20, 27: 20, 29: 20},
		// 280
		{2: 502},
		{19, 19, 19, 19, 19, 19, 19, 19, 27: 19, 29: 19},
		{26, 26, 26, 26, 26, 26, 26, 26, 27: 26, 29: 26},
		{28, 28, 28, 28, 28, 28, 28, 28, 27: 28, 29: 28},
		{30, 30, 30, 30, 30, 30, 30, 30},
		// 285
		{17, 17, 17, 17, 17, 17, 17, 17},
		{8, 8, 8, 8, 8, 8, 8, 8, 29: 511, 53: 518, 55: 517, 95: 520, 103: 521},
		{8, 8, 8, 510, 8, 8, 8, 8, 27: 509, 53: 518, 55: 517, 95: 515, 102: 516},
		{12, 12, 12, 12, 12, 12, 12, 12, 29: 12, 53: 12, 55: 12},
		{27: 514},
		// 290
		{158: 512, 160: 513},
		{10, 10, 10, 10, 10, 10, 10, 10, 27: 10, 53: 10, 55: 10},
		{9, 9, 9, 9, 9, 9, 9, 9, 27: 9, 53: 9, 55: 9},
		{11, 11, 11, 11, 11, 11, 11, 11, 29: 11, 53: 11, 55: 11},
		{14, 14, 14, 14, 14, 14, 14, 14},
		// 295
		{8, 8, 8, 8, 8, 8, 8, 8, 53: 518, 55: 517, 95: 519},
		{7, 7, 7, 7, 7, 7, 7, 7},
		{6, 6, 6, 6, 6, 6, 6, 6},
		{13, 13, 13, 13, 13, 13, 13, 13},
		{16, 16, 16, 16, 16, 16, 16, 16},
		// 300
		{8, 8, 8, 8, 8, 8, 8, 8, 53: 518, 55: 517, 95: 522},
		{15, 15, 15, 15, 15, 15, 15, 15},
		{2: 31, 31, 31, 31, 31},
		{141, 141, 141, 141, 141, 141, 141, 141},
		{156, 156, 156, 156, 156, 156, 156, 156, 9: 156, 156},
		// 305
		{152, 152, 152, 152, 152, 152, 152, 152, 9: 152, 152, 49: 152, 152, 56: 152, 99: 530, 183: 529},
		{56: 528},
		{153, 153, 153, 153, 153, 153, 153, 153, 9: 153, 153, 49: 153, 153, 56: 153, 99: 153},
		{150, 150, 150, 150, 150, 150, 150, 150, 9: 150, 150, 49: 150, 150, 56: 534, 186: 533},
		{98: 531},
		// 310
		{28: 229, 30: 228, 532},
		{151, 151, 151, 151, 151, 151, 151, 151, 9: 151, 151, 49: 151, 151, 56: 151},
		{148, 148, 148, 148, 148, 148, 148, 148, 9: 148, 148, 49: 537, 536, 195: 535},
		{149, 149, 149, 149, 149, 149, 149, 149, 9: 149, 149, 49: 149, 149},
		{155, 155, 155, 155, 155, 155, 155, 155, 9: 155, 155},
		// 315
		{147, 147, 147, 147, 147, 147, 147, 147, 9: 147, 147},
		{50: 538},
		{146, 146, 146, 146, 146, 146, 146, 146, 9: 146, 146},
		{89: 580},
		{93: 577},
		// 320
		{13: 542},
		{54: 544, 93: 543},
		{89: 575},
		{2: 545},
		{93: 546},
		// 325
		{89: 547},
		{175, 175, 175, 175, 175, 175, 175, 175, 9: 175, 175, 175, 175, 25: 549, 96: 548},
		{176, 176, 176, 176, 176, 176, 176, 176, 9: 176, 176, 176, 176},
		{173, 32: 560, 558, 553, 554, 556, 561, 559, 555, 557, 563, 562, 552, 142: 551, 184: 550},
		{573, 32: 560, 558, 553, 554, 556, 561, 559, 555, 557, 563, 562, 552, 142: 574},
		// 330
		{172, 32: 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172},
		{9: 569},
		{98: 567},
		{26: 566},
		{166, 32: 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166},
		// 335
		{26: 565},
		{164, 32: 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164},
		{163, 32: 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163},
		{162, 32: 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162},
		{26: 564},
		// 340
		{160, 32: 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160},
		{159, 32: 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159},
		{158, 32: 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158},
		{161, 32: 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161},
		{165, 32: 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165},
		// 345
		{167, 32: 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167},
		{26: 568},
		{168, 32: 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168},
		{26: 570, 163: 571},
		{170, 32: 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170},
		// 350
		{168: 572},
		{169, 32: 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169},
		{174, 174, 174, 174, 174, 174, 174, 174, 9: 174, 174, 174, 174},
		{171, 32: 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171},
		{175, 175, 175, 175, 175, 175, 175, 175, 9: 175, 175, 175, 175, 25: 549, 96: 576},
		// 355
		{177, 177, 177, 177, 177, 177, 177, 177, 9: 177, 177, 177, 177},
		{89: 578},
		{175, 175, 175, 175, 175, 175, 175, 175, 9: 175, 175, 175, 175, 25: 549, 96: 579},
		{179, 179, 179, 179, 179, 179, 179, 179, 9: 179, 179, 179, 179},
		{175, 175, 175, 175, 175, 175, 175, 175, 9: 175, 175, 175, 175, 25: 549, 96: 581},
		// 360
		{180, 180, 180, 180, 180, 180, 180, 180, 9: 180, 180, 180, 180},
		{182, 182, 182, 182, 182, 182, 182, 182, 9: 182, 182, 182, 182},
		{2: 586},
		{2, 2, 2, 2, 2, 2, 2, 2, 9: 2, 2, 2, 2},
		{1, 1, 1, 1, 1, 1, 1, 1, 9: 1, 1, 1, 1},
		// 365
		{26: 584, 28: 585, 140: 587},
		{181, 181, 181, 181, 181, 181, 181, 181, 9: 181, 181, 181, 181},
		{192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192},
		{8: 139, 19: 139, 139, 139, 139, 139, 139},
		{28: 229, 30: 228, 248, 48: 592, 149: 591},
		// 370
		{126, 126},
		{15: 302, 303, 108: 305},
		{8: 140, 19: 140, 140, 140, 140, 140, 140},
		{28: 229, 30: 228, 248, 48: 596, 147: 595, 150: 299},
		{136, 136},
		// 375
		{51: 314, 58: 333, 323, 61: 331, 330, 321, 320, 327, 328, 324, 338, 337, 342, 319, 340, 339, 326, 322, 335, 316, 329, 318, 336, 317, 343, 341, 325, 332, 334, 315, 100: 307, 308, 104: 304, 311, 109: 312, 310, 309, 306, 313},
		{28: 229, 30: 228, 248, 48: 601, 129: 599, 151: 600, 175: 598},
		{621, 622},
		{197, 197},
		{195, 195},
		// 380
		{51: 314, 58: 333, 323, 61: 331, 330, 321, 320, 327, 328, 324, 338, 337, 342, 319, 340, 339, 326, 322, 335, 316, 329, 318, 336, 317, 343, 341, 325, 332, 334, 315, 100: 307, 308, 104: 602, 311, 109: 312, 310, 309, 306, 313},
		{193, 193, 193, 193, 193, 193, 193, 193, 9: 193, 193, 193, 13: 193, 193, 193, 193, 193, 466, 128: 603},
		{191, 191, 191, 191, 191, 191, 191, 191, 9: 191, 191, 191, 13: 191, 191, 191, 191, 605, 196: 604},
		{189, 189, 189, 189, 189, 189, 189, 189, 9: 189, 189, 189, 13: 189, 189, 302, 303, 108: 607, 187: 606},
		{190, 190, 190, 190, 190, 190, 190, 190, 9: 190, 190, 190, 13: 190, 190, 190, 190},
		// 385
		{185, 185, 185, 185, 185, 185, 185, 185, 9: 185, 185, 185, 13: 470, 471, 134: 468, 608, 141: 469},
		{188, 188, 188, 188, 188, 188, 188, 188, 9: 188, 188, 188, 13: 188, 188},
		{157, 157, 157, 157, 157, 157, 157, 157, 9: 157, 157, 476, 139: 609},
		{145, 145, 32, 32, 32, 32, 32, 483, 9: 615, 614, 94: 613, 97: 480, 143: 612, 174: 610, 185: 611},
		{194, 194},
		// 390
		{144, 144},
		{143, 143, 32, 32, 32, 32, 32, 483, 94: 484, 97: 524},
		{2: 486, 487, 489, 491, 488, 144: 485, 152: 619},
		{161: 617},
		{61: 616},
		// 395
		{4, 4},
		{28: 229, 30: 228, 227, 114: 618},
		{5, 5},
		{25, 25, 25, 510, 25, 25, 25, 25, 27: 509, 29: 511, 102: 507, 508, 132: 506, 620},
		{3, 3},
		// 400
		{8: 199, 19: 199, 199, 199, 199, 199, 199, 177: 624},
		{28: 229, 30: 228, 248, 48: 601, 129: 623, 151: 600},
		{196, 196},
		{8: 198, 19: 198, 198, 198, 198, 198, 198, 192: 625},
		{8: 200, 19: 200, 200, 200, 200, 200, 200},
		// 405
		{8: 204, 19: 204, 204, 204, 204, 204, 204},
		{28: 229, 30: 228, 628},
		{216, 216, 216, 216, 216, 216, 216, 216, 216, 19: 216, 21: 216, 216, 216, 25: 216, 27: 216, 29: 216, 54: 216, 60: 216},
		{20: 218},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 202

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yylex.(*yyLexImpl).result = yyS[yypt-0].node
		}
	case 2:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 3:
		{
			yyVAL.node = yyS[yypt-1].node
		}
	case 4:
		{
			yyVAL.anything = &ast.TableName{
				Table: yyS[yypt-0].anything.(*element.Identifier),
			}
		}
	case 5:
		{
			yyVAL.anything = &ast.TableName{
				Schema: yyS[yypt-2].anything.(*element.Identifier),
				Table:  yyS[yypt-0].anything.(*element.Identifier),
			}
		}
	case 8:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 9:
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeNonQuoted,
				Value: yyS[yypt-0].str,
			}
		}
	case 10:
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeQuoted,
				Value: yyS[yypt-0].str,
			}
		}
	case 11:
		{
			yyVAL.node = &ast.AlterTableStmt{
				TableName:     yyS[yypt-3].anything.(*ast.TableName),
				ColumnClauses: yyS[yypt-0].anything.([]ast.ColumnClause),
			}
		}
	case 12:
		{
			// TODO
		}
	case 13:
		{
			// TODO
		}
	case 14:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 15:
		{
			yyVAL.anything = []ast.ColumnClause{&ast.RenameColumnClause{}}
		}
	case 16:
		{
			yyVAL.anything = []ast.ColumnClause{yyS[yypt-0].anything.(ast.ColumnClause)}
		}
	case 17:
		{
			yyVAL.anything = append(yyS[yypt-1].anything.([]ast.ColumnClause), yyS[yypt-0].anything.(ast.ColumnClause))
		}
	case 18:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 19:
		{
			yyVAL.anything = &ast.ModifyColumnClause{}
		}
	case 20:
		{
			yyVAL.anything = &ast.DropColumnClause{}
		}
	case 21:
		{
			yyVAL.anything = &ast.AddColumnClause{
				Columns: yyS[yypt-3].anything.([]*ast.ColumnDefine),
			}
		}
	case 22:
		{
			// TODO
		}
	case 23:
		{
			// TODO
		}
	case 24:
		{
			yyVAL.anything = []*ast.ColumnDefine{yyS[yypt-0].anything.(*ast.ColumnDefine)}
		}
	case 25:
		{
			yyVAL.anything = append(yyS[yypt-2].anything.([]*ast.ColumnDefine), yyS[yypt-0].anything.(*ast.ColumnDefine))
		}
	case 26:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 27:
		{
			var collation *ast.Collation
			if yyS[yypt-5].anything != nil {
				collation = yyS[yypt-5].anything.(*ast.Collation)
			}
			var invisible *ast.InvisibleProperty
			if yyS[yypt-3].anything != nil {
				invisible = yyS[yypt-3].anything.(*ast.InvisibleProperty)
			}

			yyVAL.anything = &ast.ColumnDefine{
				ColumnName:        yyS[yypt-7].anything.(*element.Identifier),
				Datatype:          yyS[yypt-6].anything.(element.Datatype),
				Collation:         collation,
				Sort:              ast.SortProperty(yyS[yypt-4].b),
				InvisibleProperty: invisible,
			}
		}
	case 28:
		{
			yyVAL.anything = nil
		}
	case 29:
		{
			yyVAL.anything = &ast.Collation{Name: yyS[yypt-0].anything.(*element.Identifier)}
		}
	case 30:
		{
			yyVAL.b = false
		}
	case 31:
		{
			yyVAL.b = true
		}
	case 32:
		{
			yyVAL.anything = nil
		}
	case 33:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 34:
		{
			yyVAL.anything = &ast.InvisibleProperty{Type: ast.InvisiblePropertyInvisible}
		}
	case 35:
		{
			yyVAL.anything = &ast.InvisibleProperty{Type: ast.InvisiblePropertyVisible}
		}
	case 36:
		{
			// empty
		}
	case 46:
		{
			// empty
		}
	case 48:
		{
			// empty
		}
	case 64:
		{
			// empty
		}
	case 67:
		{
			// empty
		}
	case 69:
		{
			// empty
		}
	case 71:
		{
			// empty
		}
	case 73:
		{
			// empty
		}
	case 76:
		{
			// empty
		}
	case 81:
		{
			yyVAL.anything = nil
		}
	case 82:
		{
			yyVAL.anything = nil
		}
	case 83:
		{
			yyVAL.anything = nil
		}
	case 92:
		{
			// empty
		}
	case 99:
		{
			// empty
		}
	case 101:
		{
			yyVAL.anything = nil
		}
	case 102:
		{
			yyVAL.anything = nil
		}
	case 103:
		{
			yyVAL.anything = nil
		}
	case 104:
		{
			yyVAL.anything = nil
		}
	case 107:
		{
			// empty
		}
	case 113:
		{
			// empty
		}
	case 115:
		{
			// empty
		}
	case 117:
		{
			yyVAL.anything = nil
		}
	case 118:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 119:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 120:
		{
			yyVAL.anything = &element.NumberOrAsterisk{Number: yyS[yypt-0].i}
		}
	case 121:
		{
			yyVAL.anything = &element.NumberOrAsterisk{IsAsterisk: true}
		}
	case 122:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 123:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 124:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 125:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 126:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 127:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 128:
		{
			d := &element.Char{}
			d.SetDataDefine(element.DataDefineChar)
			yyVAL.anything = d
		}
	case 129:
		{
			size := yyS[yypt-1].i
			d := &element.Char{Size: &size}
			d.SetDataDefine(element.DataDefineChar)
			yyVAL.anything = d
		}
	case 130:
		{
			size := yyS[yypt-2].i
			d := &element.Char{Size: &size, IsByteSize: true}
			d.SetDataDefine(element.DataDefineChar)
			yyVAL.anything = d
		}
	case 131:
		{
			size := yyS[yypt-2].i
			d := &element.Char{Size: &size, IsCharSize: true}
			d.SetDataDefine(element.DataDefineChar)
			d.SetDataDefine(element.DataDefineChar)
			yyVAL.anything = d
		}
	case 132:
		{
			size := yyS[yypt-1].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDefine(element.DataDefineVarchar2)
			yyVAL.anything = d
		}
	case 133:
		{
			size := yyS[yypt-2].i
			d := &element.Varchar2{}
			d.Size = &size
			d.IsByteSize = true
			d.SetDataDefine(element.DataDefineVarchar2)
			yyVAL.anything = d
		}
	case 134:
		{
			size := yyS[yypt-2].i
			d := &element.Varchar2{}
			d.Size = &size
			d.IsCharSize = true
			d.SetDataDefine(element.DataDefineVarchar2)
			yyVAL.anything = d
		}
	case 135:
		{
			d := &element.NChar{}
			d.SetDataDefine(element.DataDefineNChar)
			yyVAL.anything = d
		}
	case 136:
		{
			size := yyS[yypt-1].i
			d := &element.NChar{Size: &size}
			d.SetDataDefine(element.DataDefineNChar)
			yyVAL.anything = d
		}
	case 137:
		{
			size := yyS[yypt-1].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDefine(element.DataDefineNVarChar2)
			yyVAL.anything = d
		}
	case 138:
		{
			d := &element.Number{}
			d.SetDataDefine(element.DataDefineNumber)
			yyVAL.anything = d
		}
	case 139:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDefine(element.DataDefineNumber)
			yyVAL.anything = d
		}
	case 140:
		{
			precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
			scale := yyS[yypt-1].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDefine(element.DataDefineNumber)
			yyVAL.anything = d
		}
	case 141:
		{
			d := &element.Float{}
			d.SetDataDefine(element.DataDefineFloat)
			yyVAL.anything = d
		}
	case 142:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Float{Precision: precision}
			d.SetDataDefine(element.DataDefineFloat)
			yyVAL.anything = d
		}
	case 143:
		{
			d := &element.BinaryFloat{}
			d.SetDataDefine(element.DataDefineBinaryFloat)
			yyVAL.anything = d
		}
	case 144:
		{
			d := &element.BinaryDouble{}
			d.SetDataDefine(element.DataDefineBinaryDouble)
			yyVAL.anything = d
		}
	case 145:
		{
			d := &element.Long{}
			d.SetDataDefine(element.DataDefineLong)
			yyVAL.anything = d
		}
	case 146:
		{
			d := &element.LongRaw{}
			d.SetDataDefine(element.DataDefineLongRaw)
			yyVAL.anything = d
		}
	case 147:
		{
			size := yyS[yypt-1].i
			d := &element.Raw{Size: &size}
			d.SetDataDefine(element.DataDefineRaw)
			yyVAL.anything = d
		}
	case 148:
		{
			d := &element.Date{}
			d.SetDataDefine(element.DataDefineDate)
			yyVAL.anything = d
		}
	case 149:
		{
			d := &element.Timestamp{}
			d.SetDataDefine(element.DataDefineTimestamp)
			yyVAL.anything = d
		}
	case 150:
		{
			precision := yyS[yypt-1].i
			d := &element.Timestamp{FractionalSecondsPrecision: &precision}
			d.SetDataDefine(element.DataDefineTimestamp)
			yyVAL.anything = d
		}
	case 151:
		{
			precision := yyS[yypt-4].i
			d := &element.Timestamp{FractionalSecondsPrecision: &precision, WithTimeZone: true}
			d.SetDataDefine(element.DataDefineTimestamp)
			yyVAL.anything = d
		}
	case 152:
		{
			precision := yyS[yypt-5].i
			d := &element.Timestamp{FractionalSecondsPrecision: &precision, WithLocalTimeZone: true}
			d.SetDataDefine(element.DataDefineTimestamp)
			yyVAL.anything = d
		}
	case 153:
		{
			d := &element.IntervalYear{}
			d.SetDataDefine(element.DataDefineIntervalYear)
			yyVAL.anything = d
		}
	case 154:
		{
			precision := yyS[yypt-3].i
			d := &element.IntervalYear{Precision: &precision}
			d.SetDataDefine(element.DataDefineIntervalYear)
			yyVAL.anything = d
		}
	case 155:
		{
			d := &element.IntervalDay{}
			d.SetDataDefine(element.DataDefineIntervalDay)
			yyVAL.anything = d
		}
	case 156:
		{
			precision := yyS[yypt-3].i
			d := &element.IntervalDay{Precision: &precision}
			d.SetDataDefine(element.DataDefineIntervalDay)
			yyVAL.anything = d
		}
	case 157:
		{
			precision := yyS[yypt-6].i
			sPrecision := yyS[yypt-1].i
			d := &element.IntervalDay{Precision: &precision, FractionalSecondsPrecision: &sPrecision}
			d.SetDataDefine(element.DataDefineIntervalDay)
			yyVAL.anything = d
		}
	case 158:
		{
			sPrecision := yyS[yypt-1].i
			d := &element.IntervalDay{FractionalSecondsPrecision: &sPrecision}
			d.SetDataDefine(element.DataDefineIntervalDay)
			yyVAL.anything = d
		}
	case 159:
		{
			d := &element.Blob{}
			d.SetDataDefine(element.DataDefineBlob)
			yyVAL.anything = d
		}
	case 160:
		{
			d := &element.Clob{}
			d.SetDataDefine(element.DataDefineClob)
			yyVAL.anything = d
		}
	case 161:
		{
			d := &element.NClob{}
			d.SetDataDefine(element.DataDefineNClob)
			yyVAL.anything = d
		}
	case 162:
		{
			d := &element.BFile{}
			d.SetDataDefine(element.DataDefineBFile)
			yyVAL.anything = d
		}
	case 163:
		{
			d := &element.RowId{}
			d.SetDataDefine(element.DataDefineRowId)
			yyVAL.anything = d
		}
	case 164:
		{
			d := &element.URowId{}
			d.SetDataDefine(element.DataDefineURowId)
			yyVAL.anything = d
		}
	case 165:
		{
			size := yyS[yypt-1].i
			d := &element.URowId{Size: &size}
			d.SetDataDefine(element.DataDefineURowId)
			yyVAL.anything = d
		}
	case 166:
		{
			d := &element.Char{}
			d.SetDataDefine(element.DataDefineCharacter)
			yyVAL.anything = d
		}
	case 167:
		{
			size := yyS[yypt-1].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDefine(element.DataDefineCharacterVarying)
			yyVAL.anything = d
		}
	case 168:
		{
			size := yyS[yypt-1].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDefine(element.DataDefineCharVarying)
			yyVAL.anything = d
		}
	case 169:
		{
			size := yyS[yypt-1].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDefine(element.DataDefineNCharVarying)
			yyVAL.anything = d
		}
	case 170:
		{
			size := yyS[yypt-1].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDefine(element.DataDefineVarchar)
			yyVAL.anything = d
		}
	case 171:
		{
			size := yyS[yypt-1].i
			d := &element.NChar{Size: &size}
			d.SetDataDefine(element.DataDefineNationalCharacter)
			yyVAL.anything = d
		}
	case 172:
		{
			size := yyS[yypt-1].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDefine(element.DataDefineNationalCharacterVarying)
			yyVAL.anything = d
		}
	case 173:
		{
			size := yyS[yypt-1].i
			d := &element.NChar{Size: &size}
			d.SetDataDefine(element.DataDefineNationalChar)
			yyVAL.anything = d
		}
	case 174:
		{
			size := yyS[yypt-1].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDefine(element.DataDefineNationalCharVarying)
			yyVAL.anything = d
		}
	case 175:
		{
			d := &element.Number{}
			d.SetDataDefine(element.DataDefineNumeric)
			yyVAL.anything = d
		}
	case 176:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDefine(element.DataDefineNumeric)
			yyVAL.anything = d
		}
	case 177:
		{
			precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
			scale := yyS[yypt-1].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDefine(element.DataDefineNumeric)
			yyVAL.anything = d
		}
	case 178:
		{
			d := &element.Number{}
			d.SetDataDefine(element.DataDefineDecimal)
			yyVAL.anything = d
		}
	case 179:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDefine(element.DataDefineDecimal)
			yyVAL.anything = d
		}
	case 180:
		{
			precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
			scale := yyS[yypt-1].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDefine(element.DataDefineDecimal)
			yyVAL.anything = d
		}
	case 181:
		{
			d := &element.Number{}
			d.SetDataDefine(element.DataDefineDec)
			yyVAL.anything = d
		}
	case 182:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDefine(element.DataDefineDec)
			yyVAL.anything = d
		}
	case 183:
		{
			precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
			scale := yyS[yypt-1].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDefine(element.DataDefineDec)
			yyVAL.anything = d
		}
	case 184:
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDefine(element.DataDefineInteger)
			yyVAL.anything = d
		}
	case 185:
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDefine(element.DataDefineInt)
			yyVAL.anything = d
		}
	case 186:
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDefine(element.DataDefineSmallInt)
			yyVAL.anything = d
		}
	case 187:
		{
			precision := &element.NumberOrAsterisk{Number: 126}
			d := &element.Float{Precision: precision}
			d.SetDataDefine(element.DataDefineDoublePrecision)
			yyVAL.anything = d
		}
	case 188:
		{
			precision := &element.NumberOrAsterisk{Number: 63}
			d := &element.Float{Precision: precision}
			d.SetDataDefine(element.DataDefineReal)
			yyVAL.anything = d
		}
	case 189:
		{
			// empty
		}
	case 198:
		{
			// empty
		}
	case 200:
		{
			// empty
		}
	case 203:
		{
			// empty
		}
	case 213:
		{
			// empty
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

// Code generated by goyacc -o sql.go -l sql.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

import (
	"strings"

	"github.com/codeindex2937/oracle-sql-parser/ast"
	"github.com/codeindex2937/oracle-sql-parser/ast/element"
)

func nextQuery(yylex interface{}) string {
	lex := yylex.(*yyLexImpl)
	tc := lex.scanner.TC
	query := string(lex.scanner.Text[lex.lastPos:tc])
	lex.lastPos = tc
	return strings.TrimSpace(query)
}

type yySymType struct {
	yys      int
	nothing  struct{}
	i        int
	b        bool
	str      string
	node     ast.Node
	anything interface{}
}

const _add = 57346
const _all = 57347
const _alter = 57348
const _as = 57349
const _asc = 57350
const _by = 57351
const _char = 57352
const _cluster = 57353
const _column = 57354
const _compress = 57355
const _create = 57356
const _date = 57357
const _decimal = 57358
const _default = 57359
const _delete = 57360
const _desc = 57361
const _drop = 57362
const _float = 57363
const _for = 57364
const _from = 57365
const _identified = 57366
const _immediate = 57367
const _increment = 57368
const _index = 57369
const _initial = 57370
const _integer = 57371
const _into = 57372
const _is = 57373
const _level = 57374
const _long = 57375
const _maxextents = 57376
const _modify = 57377
const _nocompress = 57378
const _not = 57379
const _null = 57380
const _number = 57381
const _on = 57382
const _online = 57383
const _optimal = 57384
const _order = 57385
const _pctfree = 57386
const _raw = 57387
const _rename = 57388
const _row = 57389
const _rowid = 57390
const _rows = 57391
const _select = 57392
const _set = 57393
const _smallInt = 57394
const _start = 57395
const _table = 57396
const _to = 57397
const _unique = 57398
const _validate = 57399
const _varchar = 57400
const _varchar2 = 57401
const _with = 57402
const _advanced = 57403
const _always = 57404
const _archive = 57405
const _at = 57406
const _attributes = 57407
const _auto = 57408
const _basic = 57409
const _bfile = 57410
const _binaryDouble = 57411
const _binaryFloat = 57412
const _bitmap = 57413
const _blob = 57414
const _blockchain = 57415
const _buffer_pool = 57416
const _byte = 57417
const _cache = 57418
const _capacity = 57419
const _cascade = 57420
const _cell_flash_cache = 57421
const _character = 57422
const _check = 57423
const _checkpoint = 57424
const _clob = 57425
const _collate = 57426
const _columns = 57427
const _commit = 57428
const _constraint = 57429
const _constraints = 57430
const _continue = 57431
const _creation = 57432
const _critical = 57433
const _cycle = 57434
const _data = 57435
const _day = 57436
const _dec = 57437
const _decrypt = 57438
const _deferrable = 57439
const _deferred = 57440
const _definition = 57441
const _delete_all = 57442
const _disable = 57443
const _disable_all = 57444
const _distribute = 57445
const _dml = 57446
const _double = 57447
const _duplicate = 57448
const _duplicated = 57449
const _E = 57450
const _enable = 57451
const _enable_all = 57452
const _encrypt = 57453
const _exceptions = 57454
const _extended = 57455
const _external = 57456
const _filesystem_like_logging = 57457
const _flash_cache = 57458
const _force = 57459
const _foreign = 57460
const _freelist = 57461
const _freelists = 57462
const _full = 57463
const _G = 57464
const _generated = 57465
const _global = 57466
const _groups = 57467
const _heap = 57468
const _high = 57469
const _identity = 57470
const _ilm = 57471
const _immutable = 57472
const _indexing = 57473
const _initially = 57474
const _initrans = 57475
const _inmemory = 57476
const _int = 57477
const _interval = 57478
const _invalidate = 57479
const _invalidation = 57480
const _invisible = 57481
const _K = 57482
const _keep = 57483
const _key = 57484
const _levels = 57485
const _limit = 57486
const _local = 57487
const _locking = 57488
const _logging = 57489
const _low = 57490
const _M = 57491
const _maxsize = 57492
const _maxtrans = 57493
const _maxvalue = 57494
const _medium = 57495
const _memcompress = 57496
const _memoptimize = 57497
const _metadata = 57498
const _minextents = 57499
const _minvalue = 57500
const _month = 57501
const _multivalue = 57502
const _national = 57503
const _nchar = 57504
const _nclob = 57505
const _next = 57506
const _no = 57507
const _nocache = 57508
const _nocycle = 57509
const _nologging = 57510
const _nomaxvalue = 57511
const _nominvalue = 57512
const _none = 57513
const _noorder = 57514
const _noparallel = 57515
const _norely = 57516
const _nosort = 57517
const _novalidate = 57518
const _numeric = 57519
const _nvarchar2 = 57520
const _organization = 57521
const _P = 57522
const _parallel = 57523
const _parent = 57524
const _partial = 57525
const _partition = 57526
const _pctincrease = 57527
const _pctused = 57528
const _peverse = 57529
const _policy = 57530
const _precision = 57531
const _preserve = 57532
const _primary = 57533
const _priority = 57534
const _private = 57535
const _purge = 57536
const _query = 57537
const _range = 57538
const _read = 57539
const _real = 57540
const _recycle = 57541
const _references = 57542
const _reject = 57543
const _rely = 57544
const _salt = 57545
const _scope = 57546
const _second = 57547
const _segment = 57548
const _service = 57549
const _sharded = 57550
const _sharding = 57551
const _sort = 57552
const _spatial = 57553
const _storage = 57554
const _store = 57555
const _subpartition = 57556
const _substitutable = 57557
const _T = 57558
const _tablespace = 57559
const _temporary = 57560
const _time = 57561
const _timestamp = 57562
const _unlimited = 57563
const _unusable = 57564
const _unused = 57565
const _urowid = 57566
const _usable = 57567
const _using = 57568
const _value = 57569
const _varying = 57570
const _visible = 57571
const _write = 57572
const _XMLType = 57573
const _year = 57574
const _zone = 57575
const _singleQuoteStr = 57576
const _doubleQuoteStr = 57577
const _nonquotedIdentifier = 57578
const _not_deferrable = 57579
const _no_inmemory = 57580
const _no_duplicate = 57581
const _row_level_locking = 57582
const _drop_index = 57583
const _intNumber = 57584

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"_add",
	"_all",
	"_alter",
	"_as",
	"_asc",
	"_by",
	"_char",
	"_cluster",
	"_column",
	"_compress",
	"_create",
	"_date",
	"_decimal",
	"_default",
	"_delete",
	"_desc",
	"_drop",
	"_float",
	"_for",
	"_from",
	"_identified",
	"_immediate",
	"_increment",
	"_index",
	"_initial",
	"_integer",
	"_into",
	"_is",
	"_level",
	"_long",
	"_maxextents",
	"_modify",
	"_nocompress",
	"_not",
	"_null",
	"_number",
	"_on",
	"_online",
	"_optimal",
	"_order",
	"_pctfree",
	"_raw",
	"_rename",
	"_row",
	"_rowid",
	"_rows",
	"_select",
	"_set",
	"_smallInt",
	"_start",
	"_table",
	"_to",
	"_unique",
	"_validate",
	"_varchar",
	"_varchar2",
	"_with",
	"_advanced",
	"_always",
	"_archive",
	"_at",
	"_attributes",
	"_auto",
	"_basic",
	"_bfile",
	"_binaryDouble",
	"_binaryFloat",
	"_bitmap",
	"_blob",
	"_blockchain",
	"_buffer_pool",
	"_byte",
	"_cache",
	"_capacity",
	"_cascade",
	"_cell_flash_cache",
	"_character",
	"_check",
	"_checkpoint",
	"_clob",
	"_collate",
	"_columns",
	"_commit",
	"_constraint",
	"_constraints",
	"_continue",
	"_creation",
	"_critical",
	"_cycle",
	"_data",
	"_day",
	"_dec",
	"_decrypt",
	"_deferrable",
	"_deferred",
	"_definition",
	"_delete_all",
	"_disable",
	"_disable_all",
	"_distribute",
	"_dml",
	"_double",
	"_duplicate",
	"_duplicated",
	"_E",
	"_enable",
	"_enable_all",
	"_encrypt",
	"_exceptions",
	"_extended",
	"_external",
	"_filesystem_like_logging",
	"_flash_cache",
	"_force",
	"_foreign",
	"_freelist",
	"_freelists",
	"_full",
	"_G",
	"_generated",
	"_global",
	"_groups",
	"_heap",
	"_high",
	"_identity",
	"_ilm",
	"_immutable",
	"_indexing",
	"_initially",
	"_initrans",
	"_inmemory",
	"_int",
	"_interval",
	"_invalidate",
	"_invalidation",
	"_invisible",
	"_K",
	"_keep",
	"_key",
	"_levels",
	"_limit",
	"_local",
	"_locking",
	"_logging",
	"_low",
	"_M",
	"_maxsize",
	"_maxtrans",
	"_maxvalue",
	"_medium",
	"_memcompress",
	"_memoptimize",
	"_metadata",
	"_minextents",
	"_minvalue",
	"_month",
	"_multivalue",
	"_national",
	"_nchar",
	"_nclob",
	"_next",
	"_no",
	"_nocache",
	"_nocycle",
	"_nologging",
	"_nomaxvalue",
	"_nominvalue",
	"_none",
	"_noorder",
	"_noparallel",
	"_norely",
	"_nosort",
	"_novalidate",
	"_numeric",
	"_nvarchar2",
	"_organization",
	"_P",
	"_parallel",
	"_parent",
	"_partial",
	"_partition",
	"_pctincrease",
	"_pctused",
	"_peverse",
	"_policy",
	"_precision",
	"_preserve",
	"_primary",
	"_priority",
	"_private",
	"_purge",
	"_query",
	"_range",
	"_read",
	"_real",
	"_recycle",
	"_references",
	"_reject",
	"_rely",
	"_salt",
	"_scope",
	"_second",
	"_segment",
	"_service",
	"_sharded",
	"_sharding",
	"_sort",
	"_spatial",
	"_storage",
	"_store",
	"_subpartition",
	"_substitutable",
	"_T",
	"_tablespace",
	"_temporary",
	"_time",
	"_timestamp",
	"_unlimited",
	"_unusable",
	"_unused",
	"_urowid",
	"_usable",
	"_using",
	"_value",
	"_varying",
	"_visible",
	"_write",
	"_XMLType",
	"_year",
	"_zone",
	"_singleQuoteStr",
	"_doubleQuoteStr",
	"_nonquotedIdentifier",
	"_not_deferrable",
	"_no_inmemory",
	"_no_duplicate",
	"_row_level_locking",
	"_drop_index",
	"_intNumber",
	"';'",
	"'.'",
	"','",
	"'('",
	"')'",
	"'='",
	"'*'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 11,
	54, 324,
	-2, 460,
	-1, 320,
	247, 686,
	-2, 689,
	-1, 621,
	1, 353,
	155, 353,
	182, 353,
	243, 353,
	-2, 358,
}

const yyPrivate = 57344

const yyLast = 1830

var yyAct = [...]int16{
	29, 849, 344, 923, 343, 937, 859, 541, 926, 540,
	785, 297, 904, 757, 934, 430, 865, 756, 539, 7,
	759, 861, 689, 686, 28, 641, 803, 208, 207, 777,
	714, 935, 228, 608, 623, 447, 522, 764, 427, 473,
	214, 583, 779, 260, 758, 432, 356, 433, 324, 472,
	357, 223, 332, 323, 441, 334, 287, 221, 426, 273,
	275, 666, 584, 931, 307, 282, 293, 906, 715, 585,
	451, 451, 1017, 1000, 718, 649, 451, 451, 981, 946,
	293, 729, 723, 728, 915, 278, 906, 669, 663, 668,
	662, 274, 1008, 661, 905, 660, 280, 659, 451, 658,
	603, 967, 451, 915, 602, 451, 451, 526, 518, 451,
	291, 499, 921, 905, 724, 894, 461, 913, 460, 726,
	833, 451, 277, 452, 832, 425, 665, 424, 423, 373,
	422, 372, 831, 911, 830, 829, 913, 828, 752, 289,
	648, 292, 560, 750, 747, 746, 741, 739, 738, 737,
	736, 727, 911, 289, 735, 966, 725, 734, 679, 722,
	721, 678, 671, 670, 667, 561, 653, 932, 651, 645,
	542, 597, 595, 552, 582, 930, 580, 502, 480, 293,
	478, 850, 966, 476, 930, 943, 875, 839, 751, 657,
	719, 655, 581, 907, 579, 276, 479, 717, 477, 909,
	281, 475, 638, 577, 716, 575, 573, 914, 912, 567,
	908, 910, 907, 916, 498, 497, 493, 208, 909, 491,
	490, 208, 28, 489, 488, 720, 914, 912, 230, 908,
	910, 486, 916, 485, 217, 793, 791, 256, 226, 484,
	481, 320, 418, 417, 559, 290, 340, 329, 317, 279,
	270, 270, 306, 296, 858, 279, 690, 566, 225, 794,
	562, 216, 554, 692, 10, 634, 815, 552, 549, 986,
	792, 691, 11, 314, 809, 316, 557, 288, 13, 14,
	555, 327, 326, 272, 808, 331, 330, 801, 951, 987,
	982, 288, 957, 341, 956, 804, 342, 558, 664, 955,
	294, 890, 564, 835, 546, 807, 812, 902, 811, 314,
	563, 806, 647, 804, 294, 553, 547, 748, 745, 744,
	208, 312, 416, 421, 743, 692, 742, 740, 677, 524,
	675, 656, 315, 691, 438, 654, 652, 371, 559, 545,
	650, 565, 646, 637, 437, 449, 543, 632, 631, 630,
	629, 272, 345, 600, 599, 353, 554, 862, 548, 243,
	316, 352, 598, 596, 32, 31, 592, 985, 589, 588,
	557, 467, 469, 374, 555, 776, 314, 450, 578, 576,
	574, 572, 521, 1005, 1040, 1023, 1012, 862, 931, 443,
	434, 558, 445, 446, 358, 872, 1039, 434, 453, 32,
	31, 749, 628, 242, 458, 900, 847, 672, 496, 553,
	349, 301, 428, 294, 350, 302, 1009, 767, 614, 295,
	594, 673, 500, 501, 471, 436, 505, 465, 507, 525,
	464, 889, 1033, 220, 212, 565, 455, 211, 347, 874,
	788, 520, 519, 350, 302, 886, 633, 873, 1029, 570,
	24, 258, 27, 1037, 528, 706, 895, 676, 1004, 949,
	984, 863, 512, 884, 314, 25, 509, 23, 1002, 208,
	804, 682, 885, 517, 506, 571, 508, 504, 1038, 514,
	513, 1007, 291, 818, 264, 999, 533, 527, 487, 275,
	511, 863, 932, 870, 593, 457, 800, 948, 798, 12,
	800, 21, 429, 888, 636, 893, 272, 537, 536, 538,
	824, 773, 997, 292, 278, 601, 996, 674, 18, 1013,
	821, 761, 760, 253, 22, 927, 970, 586, 587, 224,
	435, 253, 590, 591, 615, 224, 928, 435, 1027, 887,
	762, 252, 761, 760, 627, 222, 495, 298, 254, 364,
	1042, 277, 995, 1022, 26, 1025, 1021, 626, 703, 1026,
	619, 762, 618, 1019, 616, 712, 635, 639, 1034, 365,
	642, 274, 844, 993, 24, 625, 1024, 1020, 994, 32,
	31, 319, 318, 339, 1018, 328, 711, 19, 335, 25,
	310, 309, 436, 924, 868, 988, 992, 918, 1035, 851,
	385, 285, 20, 998, 769, 406, 390, 816, 644, 688,
	813, 401, 363, 1006, 32, 31, 346, 290, 680, 392,
	32, 31, 611, 404, 276, 607, 229, 366, 611, 400,
	774, 855, 687, 271, 822, 405, 990, 698, 413, 685,
	266, 681, 394, 879, 819, 697, 876, 336, 387, 398,
	707, 700, 702, 251, 687, 701, 881, 708, 412, 403,
	402, 462, 409, 227, 823, 817, 793, 791, 799, 961,
	384, 963, 878, 410, 820, 763, 262, 733, 26, 962,
	338, 869, 796, 516, 682, 391, 444, 283, 265, 797,
	794, 442, 710, 867, 208, 395, 763, 753, 552, 337,
	778, 792, 474, 483, 945, 682, 880, 795, 448, 232,
	213, 754, 938, 789, 1016, 787, 978, 968, 836, 877,
	532, 693, 977, 695, 454, 393, 408, 953, 612, 428,
	494, 944, 642, 834, 612, 440, 780, 782, 439, 209,
	205, 15, 492, 805, 802, 881, 810, 882, 852, 261,
	814, 388, 386, 411, 215, 826, 515, 827, 825, 530,
	715, 969, 284, 838, 709, 624, 718, 389, 399, 559,
	840, 1015, 983, 482, 723, 842, 694, 308, 238, 841,
	919, 853, 605, 604, 843, 768, 250, 554, 396, 871,
	789, 848, 787, 860, 247, 560, 856, 683, 626, 267,
	503, 557, 920, 699, 617, 555, 724, 250, 210, 239,
	415, 726, 846, 1032, 414, 269, 980, 286, 561, 429,
	240, 397, 558, 542, 348, 249, 552, 300, 299, 255,
	268, 731, 896, 771, 535, 3, 857, 941, 940, 954,
	553, 901, 732, 727, 897, 892, 249, 959, 725, 770,
	206, 722, 721, 917, 1030, 620, 531, 898, 420, 922,
	219, 883, 713, 419, 837, 854, 565, 772, 696, 613,
	510, 788, 431, 939, 263, 789, 789, 787, 787, 231,
	942, 933, 719, 936, 730, 929, 640, 468, 551, 717,
	550, 544, 369, 368, 463, 367, 716, 559, 259, 17,
	975, 973, 950, 864, 1031, 1014, 840, 1028, 1011, 989,
	965, 925, 1003, 562, 979, 554, 952, 720, 556, 790,
	958, 549, 784, 866, 705, 622, 781, 704, 621, 557,
	459, 354, 208, 555, 456, 971, 351, 257, 16, 523,
	972, 974, 755, 789, 976, 787, 860, 964, 684, 960,
	558, 606, 947, 899, 845, 564, 766, 546, 765, 903,
	610, 609, 568, 563, 470, 218, 775, 466, 553, 547,
	1, 991, 241, 891, 355, 305, 304, 303, 1001, 333,
	534, 246, 311, 313, 248, 322, 325, 321, 245, 244,
	1010, 237, 545, 236, 565, 235, 234, 233, 377, 543,
	376, 383, 382, 407, 381, 380, 379, 378, 375, 2,
	9, 548, 8, 6, 5, 4, 30, 529, 643, 569,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1036, 0, 275, 0, 0, 0, 1041, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 362,
	54, 55, 56, 57, 58, 359, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 81, 82, 83,
	84, 85, 86, 87, 88, 89, 361, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
	144, 145, 146, 147, 148, 149, 150, 151, 152, 153,
	154, 155, 156, 157, 158, 159, 160, 161, 162, 360,
	164, 165, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 199, 200, 201, 202, 370,
	203, 204, 0, 32, 31, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 81, 82, 83,
	84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
	144, 145, 146, 147, 148, 149, 150, 151, 152, 153,
	154, 155, 156, 157, 158, 159, 160, 161, 162, 163,
	164, 165, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 199, 200, 201, 202, 0,
	203, 204, 0, 32, 31, 33, 34, 35, 36, 37,
	38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 80, 81, 82, 83, 84, 85, 86, 87,
	88, 89, 90, 91, 92, 93, 94, 95, 96, 97,
	98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 141, 142, 143, 144, 145, 146, 147,
	148, 149, 150, 151, 152, 153, 154, 155, 156, 157,
	158, 159, 160, 161, 162, 163, 164, 165, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 176, 177,
	178, 179, 180, 181, 182, 183, 184, 185, 186, 187,
	188, 189, 190, 191, 192, 193, 194, 195, 196, 197,
	198, 199, 200, 201, 202, 0, 203, 204, 385, 32,
	31, 0, 0, 406, 390, 0, 793, 791, 0, 401,
	0, 0, 0, 0, 0, 0, 0, 392, 0, 0,
	0, 404, 0, 0, 0, 0, 0, 400, 0, 0,
	794, 0, 0, 405, 0, 0, 413, 0, 552, 0,
	394, 792, 0, 0, 0, 0, 387, 398, 0, 0,
	0, 0, 0, 0, 0, 0, 412, 403, 402, 0,
	409, 0, 0, 0, 0, 0, 0, 0, 384, 0,
	0, 410, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 391, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 395, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 786, 559,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 393, 408, 0, 0, 554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 0, 0, 0, 555, 0, 0, 0, 388,
	386, 411, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 558, 0, 0, 389, 399, 0, 0, 0,
	0, 0, 0, 783, 0, 0, 0, 0, 0, 0,
	553, 0, 0, 0, 0, 0, 396, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 565, 0, 415, 0,
	0, 788, 414, 0, 0, 0, 0, 0, 0, 397,
}

var yyPact = [...]int16{
	258, -1000, 36, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	687, 394, 1374, 686, 258, 1374, 685, 781, 219, 216,
	-1000, -1000, 637, -1000, -1000, -1000, -1000, 713, 17, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1374, -1000, 380, 14, 1374,
	1374, -1000, -1000, -1000, 509, -1000, 1374, 631, 774, 376,
	-1000, -1000, 393, -1000, 807, 1374, 242, -1000, 651, -1000,
	-1000, 290, 600, -1000, -1000, -1000, 795, -1000, 4, 9,
	675, 797, -1000, -1000, -1000, -1000, -1000, 54, -1000, 196,
	1374, -1000, 392, 806, 805, 214, -1000, 6, -184, 737,
	-1000, 453, 452, -1000, -1000, -1000, -1000, 5, 3, 68,
	1374, -1000, 433, -1000, 164, 2, 440, 439, -5, 1374,
	164, 443, 1, 1374, 164, -1000, 426, 510, 614, 591,
	441, 0, 164, 1374, 1374, 167, 401, -1000, 802, 185,
	213, -1000, -1000, 374, -1000, -1000, 978, 456, 1198, -1000,
	-1000, -116, -1000, -1000, 1598, -1000, -1000, 1374, -3, -4,
	1374, -117, -120, -1000, -1000, -1000, 590, 293, 293, 1374,
	683, 680, 609, 510, -1000, 598, -1000, 609, 609, 630,
	1374, 630, -1000, -124, -1000, 510, 660, 221, 184, -1000,
	-1000, 313, 368, -1000, -1000, -129, -1000, -1000, -1000, 164,
	440, 439, -5, -1000, -1000, 568, -1000, 205, -1000, -1000,
	164, 164, -1000, 1374, 618, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -45, -48, -50, -6, 693, -7,
	-13, -15, -1000, -1000, -1000, 299, -1000, -1000, -22, -23,
	-26, -27, -1000, -1000, 697, -30, -1000, 670, 314, -1000,
	-1000, -1000, -1000, -1000, -31, -32, -136, 1374, 1374, -70,
	769, -1000, -1000, 1374, -1000, 1374, 618, -1000, -1000, -1000,
	630, 288, 460, 300, -1000, -1000, 658, 630, -139, 1374,
	164, -1000, 140, -1000, -1000, -1000, -1000, 188, -1000, -140,
	188, 1374, -1000, 718, 851, 656, -1000, 1374, -1000, 817,
	-1000, 978, -1000, 651, -1000, -1000, 782, 13, -37, -1000,
	-1000, -1000, 239, -1000, 164, 139, -40, 138, -41, 137,
	-43, 136, -52, -54, -180, -180, -180, -1000, 127, 126,
	-180, -180, -1000, 124, 275, 117, 116, 112, 111, 293,
	-143, -147, -1000, 745, -1000, 1598, -1000, 273, 605, -1000,
	192, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 293, -1000,
	-1000, -1000, -1000, 713, 777, -1000, 630, -1000, -1000, -1000,
	-1000, 417, 850, -1000, 725, 618, -1000, -1000, 782, -1000,
	-1000, -1000, -1000, 385, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 108, 107, 106, 105, -1000, -1000, -1000, -1000,
	204, -1000, 383, 101, -1000, -44, 164, 1374, -1000, 273,
	-1000, -1000, -78, 100, 65, 98, -79, 94, -81, 93,
	-55, 89, -57, -148, -1000, -1000, -152, -157, 51, -83,
	-158, -84, -85, 174, 202, 358, 88, 252, 86, -86,
	-89, -1000, 293, 271, -1000, 759, 543, 481, -1000, -1000,
	-1000, 91, 714, 536, 776, 630, -1000, -1000, 188, 509,
	415, 444, 724, -1000, 606, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 438, -1000, -1000, -1000, 732, -1000,
	-164, -1000, 823, 611, -1000, -1000, -90, -1000, -93, -97,
	-98, -1000, -99, -1000, -100, 85, -101, 84, -1000, 82,
	-1000, 77, -1000, 76, -1000, -102, -103, -1000, -1000, 75,
	-1000, -1000, -1000, 168, -1000, -104, -58, -109, -1000, -1000,
	-1000, 293, 1374, -1000, 484, -1000, -1000, 191, -1000, -1000,
	747, -1000, -1000, 476, 842, 816, 454, -1000, -1000, 129,
	-1000, -1000, -1000, 509, -1000, 1604, 164, 592, -1000, 603,
	478, -1000, -1000, 40, -1000, 71, 71, 69, 63, 53,
	66, 64, 485, 228, 466, 503, 493, -1000, 782, 1374,
	-1000, -1000, -1000, 521, -1000, -1000, -1000, -1000, -1000, -1000,
	-110, -1000, -112, -113, -115, -123, -1000, -1000, -127, -1000,
	678, 61, 663, 723, -59, -1000, 484, -1000, 505, 293,
	-1000, 746, -1000, 430, -1000, -1000, 788, 172, 29, -65,
	471, 741, 519, -1000, -1000, -1000, 822, -1000, 10, 782,
	-1000, -1000, 223, 567, -1000, -1000, 309, -1000, 344, -1000,
	-1000, -1000, 234, 226, -1000, -60, 621, 482, 544, 607,
	698, -1000, -1000, -1000, 323, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 59, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 484, -1000, -1000,
	-1000, -1000, -1000, -1000, 346, -132, 251, -1000, 814, 1374,
	-1000, 293, -1000, -1000, -1000, 171, 832, -1000, -1000, -1000,
	60, -65, 469, 742, -1000, 772, -135, 518, 164, 464,
	-1000, -1000, 371, -71, 254, -1000, -1000, 654, 654, -1000,
	647, -1000, 164, 825, 824, 1374, -1000, -1000, 696, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 484, -1000, -1000, -61, 653, -168, -1000, 294,
	-1000, 164, -1000, 41, -1000, 667, 830, 57, -1000, 52,
	-1000, -1000, -1000, 50, -1000, -1000, -1000, -1000, -65, 840,
	1374, -1000, -1000, -1000, 569, 254, -91, 695, 372, -1000,
	1374, 371, -62, -1000, 253, 654, -1000, -1000, -1000, -1000,
	655, 794, -169, 48, -1000, 734, -1000, -1000, -1000, 257,
	-1000, -1000, -1000, 125, 47, -1000, -1000, -1000, -1000, 467,
	-1000, -1000, -1000, -1000, -1000, 533, 1374, 425, 408, -1000,
	-1000, -174, -64, -1000, 464, -1000, 267, -1000, -1000, 218,
	418, -1000, -155, -1000, -1000, -1000, 189, -1000, -65, 280,
	705, -175, -1000, -1000, -1000, -1000, -1000, -1000, 436, 429,
	-1000, -1000, 409, -1000, -1000, 145, 428, 411, -1000, -1000,
	-1000, 237, 849, -1000, 791, -1000, 384, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1374,
	-1000, -1000, 246, 282, -1000, -1000, -1000, 379, -1000, -1000,
	-1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1019, 38, 1018, 55, 1017, 32, 1016, 1015, 835,
	1014, 1013, 19, 1012, 1010, 1009, 28, 452, 0, 11,
	2, 58, 1008, 1007, 1006, 1005, 1004, 1003, 1002, 1001,
	1000, 998, 997, 996, 995, 993, 403, 991, 989, 988,
	987, 53, 986, 985, 48, 984, 983, 982, 50, 981,
	41, 49, 39, 980, 4, 56, 54, 979, 52, 977,
	976, 975, 974, 46, 394, 59, 44, 973, 17, 13,
	20, 972, 359, 37, 970, 967, 966, 965, 964, 962,
	33, 23, 961, 960, 22, 1, 959, 12, 958, 956,
	954, 953, 952, 951, 948, 942, 15, 35, 36, 939,
	40, 938, 937, 936, 934, 931, 930, 928, 927, 926,
	925, 34, 924, 31, 6, 3, 923, 922, 14, 10,
	9, 7, 919, 919, 918, 914, 912, 21, 911, 8,
	910, 909, 908, 907, 905, 904, 903, 16, 901, 900,
	5, 899, 898, 895, 894, 43, 893, 892, 42, 18,
	891, 890, 888, 887, 886, 29, 25, 884, 879, 874,
	872, 870, 869, 868, 867, 865, 45, 47, 865, 864,
	863, 862, 30, 26, 861, 860, 433, 57, 51, 858,
}

var yyR1 = [...]uint8{
	0, 74, 15, 15, 9, 9, 9, 9, 9, 9,
	8, 16, 16, 54, 54, 20, 75, 75, 17, 17,
	76, 76, 19, 19, 18, 18, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 10, 32,
	32, 33, 33, 35, 35, 36, 36, 36, 38, 78,
	79, 47, 47, 48, 46, 51, 51, 52, 1, 1,
	3, 3, 2, 2, 80, 80, 80, 82, 82, 83,
	83, 83, 83, 85, 85, 85, 86, 86, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 81, 81, 88, 89, 89, 90, 90, 91, 91,
	92, 92, 92, 67, 67, 68, 68, 39, 39, 39,
	40, 40, 41, 42, 93, 93, 94, 94, 95, 95,
	43, 43, 44, 45, 45, 6, 6, 49, 49, 49,
	49, 55, 55, 58, 58, 57, 57, 4, 4, 5,
	5, 56, 56, 37, 34, 34, 34, 34, 34, 34,
	71, 71, 72, 72, 72, 97, 97, 98, 99, 99,
	99, 100, 100, 11, 101, 101, 101, 101, 101, 101,
	101, 101, 102, 102, 102, 102, 102, 104, 104, 59,
	60, 105, 106, 53, 53, 107, 107, 107, 107, 110,
	110, 111, 111, 108, 108, 108, 108, 108, 112, 112,
	112, 118, 118, 113, 113, 119, 119, 119, 119, 119,
	123, 123, 120, 120, 120, 120, 120, 121, 121, 121,
	122, 122, 122, 122, 122, 122, 122, 125, 125, 125,
	125, 125, 125, 125, 126, 126, 114, 114, 114, 128,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	130, 130, 130, 130, 130, 130, 131, 131, 134, 134,
	134, 134, 134, 135, 135, 135, 135, 135, 132, 132,
	132, 132, 133, 133, 127, 127, 136, 136, 137, 137,
	115, 115, 115, 115, 116, 116, 116, 138, 139, 140,
	117, 117, 109, 61, 61, 62, 62, 63, 63, 12,
	141, 141, 141, 141, 142, 143, 143, 146, 148, 148,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 150, 150, 150, 150, 150, 150, 151,
	151, 152, 152, 152, 147, 153, 153, 154, 154, 156,
	157, 157, 157, 155, 155, 144, 144, 144, 145, 145,
	145, 13, 14, 158, 158, 159, 159, 21, 21, 21,
	50, 50, 22, 22, 22, 22, 22, 22, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 24, 24,
	24, 24, 24, 24, 24, 25, 25, 25, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 27, 27,
	28, 28, 28, 28, 29, 29, 29, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	31, 66, 69, 69, 70, 70, 70, 70, 70, 96,
	160, 160, 160, 160, 160, 166, 166, 167, 167, 161,
	161, 161, 162, 162, 162, 162, 163, 163, 163, 164,
	164, 164, 165, 165, 73, 168, 168, 169, 169, 169,
	64, 64, 65, 65, 65, 65, 124, 171, 171, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 173, 174, 174, 174, 174, 174, 174, 174,
	77, 77, 77, 77, 175, 175, 176, 176, 103, 103,
	103, 103, 177, 178, 84, 84, 170, 170, 170, 179,
	179,
}

var yyR2 = [...]int8{
	0, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	0, 1, 3, 1, 3, 1, 1, 3, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 5, 1,
	1, 1, 1, 1, 2, 1, 1, 1, 6, 0,
	0, 1, 3, 1, 8, 0, 1, 2, 0, 1,
	0, 1, 1, 1, 0, 1, 1, 2, 4, 4,
	5, 6, 8, 0, 2, 3, 1, 2, 3, 4,
	3, 2, 1, 2, 1, 1, 1, 2, 1, 1,
	1, 0, 2, 4, 0, 2, 0, 3, 0, 1,
	0, 1, 2, 0, 1, 1, 2, 4, 4, 1,
	1, 3, 1, 6, 2, 1, 1, 1, 0, 1,
	1, 3, 2, 7, 8, 0, 1, 5, 4, 4,
	4, 2, 3, 0, 1, 1, 2, 2, 1, 0,
	1, 0, 2, 5, 2, 5, 5, 7, 5, 1,
	1, 2, 5, 7, 5, 0, 1, 2, 0, 2,
	1, 0, 1, 8, 0, 2, 2, 1, 1, 1,
	1, 2, 0, 3, 3, 4, 3, 0, 2, 1,
	7, 0, 0, 0, 2, 0, 1, 1, 2, 4,
	4, 4, 4, 0, 4, 3, 2, 5, 0, 3,
	3, 0, 1, 1, 2, 1, 2, 3, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 3, 4, 4, 5, 4, 1, 0, 2, 3,
	3, 2, 3, 3, 1, 2, 1, 3, 2, 5,
	0, 3, 3, 4, 4, 3, 4, 4, 2, 2,
	0, 2, 2, 2, 2, 2, 0, 3, 0, 1,
	3, 2, 2, 0, 3, 3, 3, 3, 0, 1,
	2, 1, 0, 2, 0, 1, 1, 2, 5, 4,
	0, 2, 2, 2, 3, 3, 2, 2, 0, 0,
	4, 6, 0, 0, 3, 1, 3, 1, 1, 9,
	0, 1, 1, 1, 0, 1, 1, 3, 1, 2,
	1, 1, 1, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 3, 3, 1, 2,
	2, 1, 2, 1, 6, 0, 1, 1, 3, 2,
	0, 1, 1, 0, 1, 0, 1, 1, 0, 2,
	2, 5, 5, 0, 2, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	5, 5, 4, 5, 5, 1, 4, 4, 1, 4,
	6, 1, 4, 1, 1, 1, 2, 4, 1, 1,
	4, 5, 4, 7, 4, 7, 10, 7, 1, 4,
	1, 1, 1, 1, 1, 1, 4, 4, 5, 5,
	5, 4, 5, 6, 5, 6, 1, 4, 6, 1,
	4, 6, 1, 4, 6, 1, 1, 1, 2, 1,
	1, 2, 3, 2, 1, 2, 1, 2, 1, 6,
	0, 1, 2, 1, 2, 1, 1, 2, 2, 0,
	1, 1, 0, 3, 5, 3, 0, 1, 1, 0,
	1, 1, 0, 3, 5, 0, 3, 0, 3, 4,
	2, 1, 5, 6, 8, 4, 4, 1, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 3, 1,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 1, 2, 0, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 2, 1, 4, 1, 4, 0, 1,
	1, 2, 3, 3, 1, 1, 0, 3, 4, 0,
	1,
}

var yyChk = [...]int16{
	-1000, -74, -15, -9, -8, -10, -11, -12, -13, -14,
	6, 14, 241, 20, 243, 54, -101, -141, 124, 193,
	208, 107, 130, 73, 56, 71, 160, -17, -19, -18,
	-7, 236, 235, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 80, 81, 82, 83, 84, 85, 86, 87,
	88, 89, 90, 91, 92, 93, 94, 95, 96, 97,
	98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 141, 142, 143, 144, 145, 146, 147,
	148, 149, 150, 151, 152, 153, 154, 155, 156, 157,
	158, 159, 160, 161, 162, 163, 164, 165, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 176, 177,
	178, 179, 180, 181, 182, 183, 184, 185, 186, 187,
	188, 189, 190, 191, 192, 193, 194, 195, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
	208, 209, 210, 211, 212, 213, 214, 215, 216, 217,
	218, 219, 220, 221, 222, 223, 224, 225, 226, 227,
	228, 229, 230, 232, 233, 54, -9, -16, -19, 54,
	27, 218, 218, 73, -100, 41, 244, -16, -77, -175,
	-176, -177, 165, -178, 155, 244, -16, -17, -6, 117,
	-19, -158, 78, -32, -33, -34, -35, -37, 4, 35,
	46, -71, -36, -72, -38, -39, -49, 20, -45, 51,
	12, -176, 165, 155, 155, 22, -19, -102, 209, -142,
	-145, 98, 25, -159, 194, 88, -36, 4, 35, 20,
	246, -64, -66, -65, 87, 56, 191, 118, 81, 246,
	87, 191, 56, 12, 87, -72, 20, -55, 223, 85,
	191, 56, 87, 12, 246, 223, -20, -19, 155, 22,
	22, 197, 230, -59, -60, -61, 246, 248, 40, 138,
	138, -47, -48, -46, -20, -65, -18, 246, 142, 142,
	246, -40, -43, -41, -44, -42, -20, -18, 142, 246,
	-20, -18, -58, -57, -4, 78, 137, 85, 89, 142,
	246, -18, -20, -54, -20, -55, 215, 37, 22, 197,
	230, -103, -177, -178, -105, -62, -63, -48, -64, 87,
	191, 118, 81, 156, 93, 113, 171, -143, -146, -147,
	11, -16, 247, 245, -21, -22, -30, -31, -23, -24,
	-25, -26, -28, -29, 80, 10, 162, 58, 161, 177,
	16, 95, 29, 135, 52, 105, 198, 231, 59, 178,
	39, 21, 70, 69, 33, 45, 15, -27, 136, 72,
	83, 163, 68, 48, 224, 220, -54, 246, 246, -170,
	-179, -20, 247, 245, 247, 245, -21, -2, 139, 229,
	-96, -160, -166, -167, 97, 237, 132, -96, -54, 55,
	55, -56, 82, -4, 88, -56, -56, -97, 78, -54,
	-97, 245, 247, -58, 64, 215, -104, 182, -178, -106,
	247, 245, 93, -144, 225, 222, -75, -18, -153, -18,
	-78, -48, -51, -52, 84, 246, 228, 246, 228, 246,
	228, 246, 80, 10, 246, 246, 246, 189, 246, 246,
	246, 246, 45, 246, 60, 232, 94, 246, 246, 247,
	-54, -54, 247, 31, -41, -20, -44, -20, -51, -97,
	-161, 202, 174, -167, -166, 98, 25, -97, 247, -20,
	-18, 242, -98, -99, 141, 241, 247, -98, -20, -5,
	41, 5, 64, -16, -53, 17, -63, -145, -148, -149,
	-120, -121, 41, 217, -150, 210, 175, 187, 229, 139,
	-151, -152, 44, 186, 133, 151, -124, 147, 168, 115,
	13, 36, 131, 181, 173, 212, 244, 246, -79, -1,
	210, -18, 242, 246, 242, 246, 242, 246, 242, 246,
	228, 246, 228, -50, 242, 249, -50, -50, 242, 242,
	-50, -50, 242, 219, 145, 55, 246, 55, 246, 242,
	242, -96, 247, 247, 38, 37, -93, 20, -80, -82,
	-83, 17, 123, -162, 226, -96, -100, 27, -97, 143,
	5, -107, -110, -111, 40, -52, -149, -18, 17, 242,
	242, 242, 242, 242, 61, 183, 121, 242, 246, -18,
	-154, -156, -20, -3, -2, 247, 242, 247, 75, 10,
	242, 247, 242, 247, 242, 246, 242, 246, 247, 245,
	247, 245, 247, 245, 247, 75, 10, 247, 247, 245,
	247, 247, 233, 219, 159, 242, 205, 242, 247, 247,
	-96, -73, 200, 38, -94, 96, -81, 111, 128, -84,
	165, 242, 234, 7, 62, 9, -163, 109, 101, 27,
	-97, -98, -6, 143, -108, -112, 11, 206, -111, 40,
	86, 148, 127, -171, -172, 28, 164, 157, 34, 150,
	185, 120, 119, 42, 74, 116, 79, 111, 247, 245,
	-157, 8, 19, -80, 247, 247, 247, 247, 247, 247,
	242, 247, 242, 242, 242, 242, 247, 247, 242, 233,
	247, 246, 247, -96, -16, -95, -68, -69, -66, -70,
	38, 37, 56, 191, -73, -88, -89, 226, 38, 128,
	7, 17, -164, 57, 176, -76, 246, -155, -18, -148,
	-6, -109, -113, 179, -117, -119, 114, -120, 217, -121,
	-122, 13, 47, 12, 36, -18, 90, 86, 20, 190,
	18, 247, -172, -173, 242, -173, 242, 242, 221, 221,
	-173, 242, 242, 125, -173, 38, 141, 199, 17, 141,
	171, 17, 141, 171, 17, -155, -156, -81, 247, 247,
	247, 247, 247, 247, 55, 242, 55, -169, 40, 246,
	-69, -70, -96, 38, 142, -90, 24, 234, -84, -85,
	246, 128, 7, 40, -165, 112, -12, 14, 244, -114,
	-119, -127, 134, 238, -136, -137, -116, 126, 27, 114,
	184, -18, 51, 213, 213, 246, 25, 98, 190, 99,
	99, 49, 49, -174, 140, 149, 122, 216, 180, 108,
	242, -67, -68, 159, 247, 205, 18, -54, -96, -91,
	234, 9, 247, -86, -87, 53, 26, 152, 169, 158,
	170, 92, 167, 76, 166, 43, 172, -85, 128, 38,
	30, 247, -18, -115, 129, -128, -129, 154, 165, -127,
	246, 134, 238, -137, -118, -113, -118, -140, 65, -18,
	13, 13, -54, 246, 78, 51, 247, -92, 203, 165,
	-18, 247, -87, 60, 9, 242, 242, 242, -85, 7,
	-16, 100, 110, 102, -127, -130, 246, 192, 22, 66,
	154, -54, -129, -138, -114, -139, -140, 67, 61, -125,
	22, 247, 242, 38, 203, 242, 144, 242, 128, -131,
	103, -54, 171, 148, 153, 127, 91, 104, 195, 77,
	247, -115, 201, -126, 240, 165, 195, 63, 247, 227,
	-85, -132, 106, 239, -134, 66, 9, 247, 148, 127,
	148, 127, 144, 240, 148, 127, 148, 127, -133, 211,
	5, -135, 22, 48, 184, 214, -20, 207, 196, 17,
	5, -18, 171,
}

var yyDef = [...]int16{
	10, -2, 1, 2, 4, 5, 6, 7, 8, 9,
	0, -2, 0, 0, 10, 0, 0, 0, 0, 0,
	327, 328, 329, 330, 461, 462, 463, 321, 18, 22,
	23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
	33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
	43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
	83, 84, 85, 86, 87, 88, 89, 90, 91, 92,
	93, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
	143, 144, 145, 146, 147, 148, 149, 150, 151, 152,
	153, 154, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 164, 165, 166, 167, 168, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 178, 179, 180, 181, 182,
	183, 184, 185, 186, 187, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 197, 0, 3, 670, 11, 0,
	0, 325, 326, 331, 285, 322, 0, 513, 0, 671,
	672, 674, 0, 676, 0, 0, 332, 464, 508, 286,
	19, 515, 0, 198, 199, 200, 201, 202, 0, 0,
	0, 309, 203, 310, 205, 206, 207, 0, 269, 0,
	0, 673, 0, 0, 0, 0, 12, 453, 0, 0,
	511, 0, 0, 512, 516, 514, 204, 0, 0, 0,
	0, 304, 0, 631, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 311, 0, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 15, 0, 0,
	0, 682, 683, 678, 339, 341, 0, 0, 0, 509,
	510, 0, 211, 213, 0, 630, 591, 0, 0, 0,
	-2, 0, 0, 270, 280, 272, 0, 600, 600, 0,
	0, 0, 301, 294, 295, 0, 298, 301, 301, 315,
	0, 315, 291, 0, 13, 293, 0, 0, 0, 675,
	677, 337, 679, 680, 342, 0, 455, 457, 458, 52,
	156, 83, 46, 333, 334, 0, 336, 505, 465, 466,
	0, 495, 209, 0, 215, 517, 518, 519, 522, 523,
	524, 525, 526, 527, 0, 528, 535, 0, 0, 576,
	579, 582, 585, 586, 587, 0, 589, 590, 0, 0,
	538, 541, 543, 544, 545, 0, 548, 549, 0, 560,
	561, 562, 563, 564, 565, 558, 0, 0, 0, 0,
	0, 690, 267, 0, 268, 0, 215, 282, 222, 223,
	315, 609, 601, 603, 605, 606, 0, 315, 0, 0,
	0, 288, 0, 296, 297, 289, 290, 318, 316, 0,
	318, 0, 292, 299, 0, 0, 323, 0, 681, 343,
	454, 0, 335, 508, 506, 507, 0, 16, 0, 496,
	210, 212, 218, 216, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 588, 0, 0,
	0, 0, 546, 0, 0, 0, 0, 0, 0, 600,
	0, 0, 635, 0, 271, 0, 281, 0, 224, 305,
	612, 610, 611, 602, 604, 607, 608, 306, 600, 303,
	308, 302, 312, 321, 0, 320, 315, 314, 14, 287,
	300, 0, 0, 338, 345, 0, 456, 459, 467, 468,
	470, 471, 472, 0, 475, 476, 477, 478, 479, 480,
	481, 482, 0, 0, 0, 0, 376, 377, 378, 379,
	483, 488, 0, 491, 493, 0, 0, 0, 208, 220,
	219, 217, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 520, 521, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 632, 600, 0, 687, 0, 251, 0, 275, 225,
	226, 0, 0, 616, 0, 315, 317, 319, 318, 285,
	0, -2, 346, 347, 0, 344, 469, 473, 474, 372,
	373, 374, 375, 484, 485, 489, 490, 492, 0, 17,
	0, 497, 500, 224, 221, 567, 0, 529, 0, 0,
	0, 536, 0, 571, 0, 0, 0, 0, 577, 0,
	580, 0, 583, 0, 532, 0, 0, 537, 539, 0,
	542, 547, 550, 0, 552, 0, 554, 0, 566, 559,
	633, 600, 0, 688, 278, 276, 277, 254, 274, 227,
	0, 684, 685, 0, 0, 0, 619, 617, 618, 503,
	307, 313, 283, 285, 452, 0, 0, 0, 348, 0,
	0, 486, 487, 0, 637, 0, 0, 0, 0, 0,
	0, 0, 0, 649, 0, 0, 0, 661, 503, 0,
	499, 501, 502, 251, 568, 530, 531, 569, 570, 572,
	0, 574, 0, 0, 0, 0, 533, 534, 0, 551,
	0, 0, 0, 627, 0, 273, 279, 265, 0, 600,
	594, 0, 596, 0, 598, 252, 256, 0, 0, 233,
	0, 0, 622, 620, 621, 613, 0, 615, 20, 504,
	284, 340, 434, 0, 356, 363, 0, 365, 0, 368,
	369, 380, 0, 0, 386, 0, 0, 0, 0, 0,
	0, 636, 638, 639, 663, 640, 641, 642, 643, 644,
	645, 646, 647, 0, 650, 651, 652, 653, 654, 655,
	656, 657, 658, 659, 660, 494, 498, 263, 573, 575,
	578, 581, 584, 540, 0, 0, 0, 634, 0, 0,
	266, 600, 593, 595, 597, 258, 0, 255, 228, 229,
	0, 233, 0, 0, 599, 0, 0, 460, 0, 440,
	364, 396, 400, 434, 435, 436, 355, 361, 361, 449,
	0, 366, 0, 0, 0, 0, 359, 360, 0, 349,
	350, 352, 351, 662, 664, 665, 666, 667, 668, 669,
	648, 214, 264, 553, 557, 555, 0, 0, 592, 260,
	259, 0, 234, 0, 236, 0, 0, 0, 242, 0,
	244, 245, 246, 0, 248, 249, 250, 230, 233, 0,
	0, 614, 21, 354, 0, 434, 410, 0, 0, 398,
	0, 400, 0, 437, 434, 362, 448, 446, 449, 367,
	381, 387, 0, 0, 628, 0, 624, 253, 261, 0,
	257, 235, 237, 0, 0, 241, 243, 247, 231, 0,
	623, 441, 442, 443, 397, 416, 0, 0, 0, 409,
	408, 0, 0, 444, 440, 445, 450, 382, 383, 385,
	0, 357, 0, 629, 262, 238, 0, 240, 233, 428,
	418, 0, 411, 412, 413, 414, 415, 401, 402, 405,
	439, 447, 0, 384, 394, 0, 388, 391, 556, 239,
	232, 432, 429, 431, 423, 419, 0, 438, 403, 404,
	406, 407, 451, 395, 389, 390, 392, 393, 399, 0,
	430, 417, 0, 0, 421, 422, 433, 0, 420, 424,
	425, 426, 427,
}

var yyTok1 = [...]uint8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	246, 247, 249, 3, 245, 3, 244, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 243,
	3, 248,
}

var yyTok2 = [...]uint8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if yyDollar[1].node != nil {
				stmt := yyDollar[1].node
				stmt.SetText(nextQuery(yylex))
				yylex.(*yyLexImpl).result = append(yylex.(*yyLexImpl).result, stmt)
			}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if yyDollar[3].node != nil {
				stmt := yyDollar[3].node
				stmt.SetText(nextQuery(yylex))
				yylex.(*yyLexImpl).result = append(yylex.(*yyLexImpl).result, stmt)
			}
		}
	case 10:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.node = nil
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.TableName{
				Table: yyDollar[1].anything.(*element.Identifier),
			}
		}
	case 12:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = &ast.TableName{
				Schema: yyDollar[1].anything.(*element.Identifier),
				Table:  yyDollar[3].anything.(*element.Identifier),
			}
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*element.Identifier{yyDollar[1].anything.(*element.Identifier)}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*element.Identifier), yyDollar[3].anything.(*element.Identifier))
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.IndexName{
				Index: yyDollar[1].anything.(*element.Identifier),
			}
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = &ast.IndexName{
				Schema: yyDollar[1].anything.(*element.Identifier),
				Index:  yyDollar[3].anything.(*element.Identifier),
			}
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeNonQuoted,
				Value: yyDollar[1].str,
			}
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeNonQuoted,
				Value: yyDollar[1].str,
			}
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeQuoted,
				Value: yyDollar[1].str,
			}
		}
	case 198:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.AlterTableStmt{
				TableName:         yyDollar[3].anything.(*ast.TableName),
				AlterTableClauses: yyDollar[5].anything.([]ast.AlterTableClause),
			}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{yyDollar[1].anything.(ast.AlterTableClause)}
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{yyDollar[1].anything.(ast.AlterTableClause)}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.AlterTableClause), yyDollar[2].anything.(ast.AlterTableClause))
		}
	case 208:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.anything = &ast.AddColumnClause{
				Columns: yyDollar[3].anything.([]*ast.ColumnDef),
			}
		}
	case 209:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// TODO
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// TODO
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*ast.ColumnDef{yyDollar[1].anything.(*ast.ColumnDef)}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*ast.ColumnDef), yyDollar[3].anything.(*ast.ColumnDef))
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 214:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			var collation *ast.Collation
			if yyDollar[3].anything != nil {
				collation = yyDollar[3].anything.(*ast.Collation)
			}
			props := []ast.ColumnProp{}
			sort := ast.ColumnProp(yyDollar[4].i)
			if sort != ast.ColumnPropEmpty {
				props = append(props, sort)
			}
			invisible := ast.ColumnProp(yyDollar[5].i)
			if invisible != ast.ColumnPropEmpty {
				props = append(props, invisible)
			}

			var constraints []*ast.InlineConstraint
			if yyDollar[8].anything != nil {
				constraints = yyDollar[8].anything.([]*ast.InlineConstraint)
			}

			yyVAL.anything = &ast.ColumnDef{
				ColumnName:  yyDollar[1].anything.(*element.Identifier),
				Datatype:    yyDollar[2].anything.(element.Datatype),
				Collation:   collation,
				Props:       props,
				Constraints: constraints,
			}
		}
	case 215:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.Collation{Name: yyDollar[2].anything.(*element.Identifier)}
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropEmpty)
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropSort)
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropEmpty)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropInvisible)
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropVisible)
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*ast.InlineConstraint{yyDollar[1].anything.(*ast.InlineConstraint)}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*ast.InlineConstraint), yyDollar[2].anything.(*ast.InlineConstraint))
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyDollar[3].anything.([]*ast.ColumnDef),
			}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyDollar[3].anything.([]*ast.ColumnDef),
			}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyDollar[1].anything.([]*ast.ColumnDef),
			}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*ast.ColumnDef{yyDollar[1].anything.(*ast.ColumnDef)}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*ast.ColumnDef), yyDollar[3].anything.(*ast.ColumnDef))
		}
	case 273:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			var collation *ast.Collation
			if yyDollar[3].anything != nil {
				collation = yyDollar[3].anything.(*ast.Collation)
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyDollar[1].anything.(*element.Identifier),
				Datatype:   yyDollar[2].anything.(element.Datatype),
				Collation:  collation,
				Props:      []ast.ColumnProp{},
			}
		}
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*ast.ColumnDef{yyDollar[1].anything.(*ast.ColumnDef)}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*ast.ColumnDef), yyDollar[3].anything.(*ast.ColumnDef))
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyDollar[1].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{ast.ColumnProp(yyDollar[2].i)},
			}
		}
	case 283:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			prop := ast.ColumnPropSubstitutable
			if yyDollar[7].b {
				prop = ast.ColumnPropSubstitutableForce
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyDollar[2].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{prop},
			}
		}
	case 284:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			prop := ast.ColumnPropNotSubstitutable
			if yyDollar[8].b {
				prop = ast.ColumnPropNotSubstitutableForce
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyDollar[2].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{prop},
			}
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.b = false
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.b = true
		}
	case 287:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			props := []ast.DropColumnProp{}
			if yyDollar[4].anything != nil {
				props = append(props, yyDollar[4].anything.([]ast.DropColumnProp)...)
			}
			online := ast.DropColumnProp(yyDollar[5].i)
			if online != ast.DropColumnPropEmpty {
				props = append(props, online)
			}
			yyVAL.anything = &ast.DropColumnClause{
				Type:    ast.DropColumnTypeSetUnused,
				Columns: yyDollar[3].anything.([]*element.Identifier),
				Props:   props,
			}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			props := []ast.DropColumnProp{}
			if yyDollar[3].anything != nil {
				props = append(props, yyDollar[3].anything.([]ast.DropColumnProp)...)
			}
			cc := &ast.DropColumnClause{
				Type:    ast.DropColumnTypeDrop,
				Columns: yyDollar[2].anything.([]*element.Identifier),
				Props:   props,
			}
			var checkout int
			if yyDollar[4].anything != nil {
				checkout = yyDollar[4].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			cc := &ast.DropColumnClause{
				Type: ast.DropColumnTypeDropUnusedColumns,
			}
			var checkout int
			if yyDollar[4].anything != nil {
				checkout = yyDollar[4].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			cc := &ast.DropColumnClause{
				Type: ast.DropColumnTypeDropColumnsContinue,
			}
			var checkout int
			if yyDollar[4].anything != nil {
				checkout = yyDollar[4].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = []*element.Identifier{yyDollar[2].anything.(*element.Identifier)}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].anything
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.DropColumnProp{ast.DropColumnProp(yyDollar[1].i)}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.DropColumnProp), ast.DropColumnProp(yyDollar[2].i))
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.i = int(ast.DropColumnPropCascade)
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.DropColumnPropInvalidate)
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.i = int(ast.DropColumnPropEmpty)
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.DropColumnPropOnline)
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].i
		}
	case 303:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.anything = &ast.RenameColumnClause{
				OldName: yyDollar[3].anything.(*element.Identifier),
				NewName: yyDollar[5].anything.(*element.Identifier),
			}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{&ast.AddConstraintClause{
				Constraints: []*ast.OutOfLineConstraint{yyDollar[2].anything.(*ast.OutOfLineConstraint)},
			}}
		}
	case 305:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Name = yyDollar[3].anything.(*element.Identifier)
			yyVAL.anything = []ast.AlterTableClause{&ast.ModifyConstraintClause{
				Constraint: constraint,
			}}
		}
	case 306:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypePK
			yyVAL.anything = []ast.AlterTableClause{&ast.ModifyConstraintClause{
				Constraint: constraint,
			}}
		}
	case 307:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeUnique
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			yyVAL.anything = []ast.AlterTableClause{&ast.ModifyConstraintClause{
				Constraint: constraint,
			}}
		}
	case 308:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{&ast.RenameConstraintClause{
				OldName: yyDollar[3].anything.(*element.Identifier),
				NewName: yyDollar[5].anything.(*element.Identifier),
			}}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{yyDollar[1].anything.(ast.AlterTableClause)}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.AlterTableClause), yyDollar[2].anything.(ast.AlterTableClause))
		}
	case 312:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypePK
			yyVAL.anything = &ast.DropConstraintClause{
				Constraint: constraint,
			}
		}
	case 313:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeUnique
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			yyVAL.anything = &ast.DropConstraintClause{
				Constraint: constraint,
			}
		}
	case 314:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Name = yyDollar[3].anything.(*element.Identifier)
			yyVAL.anything = &ast.DropConstraintClause{
				Constraint: constraint,
			}
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 323:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.node = &ast.CreateTableStmt{
				TableName: yyDollar[4].anything.(*ast.TableName),
				RelTable:  yyDollar[6].anything.(*ast.RelTableDef),
			}
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 340:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			rd := &ast.RelTableDef{}
			if yyDollar[1].anything != nil {
				rd.TableStructs = yyDollar[1].anything.([]ast.TableStructDef)
			}
			yyVAL.anything = rd
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].anything
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].anything
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.TableStructDef{yyDollar[1].anything.(ast.TableStructDef)}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.TableStructDef), yyDollar[3].anything.(ast.TableStructDef))
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 459:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.node = &ast.CreateIndexStmt{}
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 503:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 511:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.DropIndexStmt{
				IndexName: yyDollar[2].anything.(*ast.IndexName),
			}
		}
	case 512:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.DropTableStmt{
				TableName: yyDollar[3].anything.(*ast.TableName),
			}
		}
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.NumberOrAsterisk{Number: yyDollar[1].i}
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.NumberOrAsterisk{IsAsterisk: true}
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Char{}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Char{Size: &size}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 530:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Char{Size: &size, IsByteSize: true}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 531:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Char{Size: &size, IsCharSize: true}
			d.SetDataDef(element.DataDefChar)
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 533:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Varchar2{}
			d.Size = &size
			d.IsByteSize = true
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 534:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Varchar2{}
			d.Size = &size
			d.IsCharSize = true
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.NChar{}
			d.SetDataDef(element.DataDefNChar)
			yyVAL.anything = d
		}
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNChar)
			yyVAL.anything = d
		}
	case 537:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNVarChar2)
			yyVAL.anything = d
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 540:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			scale := yyDollar[5].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Float{}
			d.SetDataDef(element.DataDefFloat)
			yyVAL.anything = d
		}
	case 542:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefFloat)
			yyVAL.anything = d
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.BinaryFloat{}
			d.SetDataDef(element.DataDefBinaryFloat)
			yyVAL.anything = d
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.BinaryDouble{}
			d.SetDataDef(element.DataDefBinaryDouble)
			yyVAL.anything = d
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Long{}
			d.SetDataDef(element.DataDefLong)
			yyVAL.anything = d
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			d := &element.LongRaw{}
			d.SetDataDef(element.DataDefLongRaw)
			yyVAL.anything = d
		}
	case 547:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Raw{Size: &size}
			d.SetDataDef(element.DataDefRaw)
			yyVAL.anything = d
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Date{}
			d.SetDataDef(element.DataDefDate)
			yyVAL.anything = d
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			d := yyDollar[1].anything.(*element.Timestamp)
			d.WithTimeZone = true
			yyVAL.anything = d
		}
	case 551:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			d := yyDollar[1].anything.(*element.Timestamp)
			d.WithLocalTimeZone = true
			yyVAL.anything = d
		}
	case 552:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			d := &element.IntervalYear{}
			d.SetDataDef(element.DataDefIntervalYear)
			yyVAL.anything = d
		}
	case 553:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			precision := yyDollar[4].i
			d := &element.IntervalYear{Precision: &precision}
			d.SetDataDef(element.DataDefIntervalYear)
			yyVAL.anything = d
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			d := &element.IntervalDay{}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 555:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			precision := yyDollar[4].i
			d := &element.IntervalDay{Precision: &precision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 556:
		yyDollar = yyS[yypt-10 : yypt+1]
		{
			precision := yyDollar[4].i
			sPrecision := yyDollar[9].i
			d := &element.IntervalDay{Precision: &precision, FractionalSecondsPrecision: &sPrecision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 557:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			sPrecision := yyDollar[6].i
			d := &element.IntervalDay{FractionalSecondsPrecision: &sPrecision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Timestamp{}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 559:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].i
			d := &element.Timestamp{FractionalSecondsPrecision: &precision}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Blob{}
			d.SetDataDef(element.DataDefBlob)
			yyVAL.anything = d
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Clob{}
			d.SetDataDef(element.DataDefClob)
			yyVAL.anything = d
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.NClob{}
			d.SetDataDef(element.DataDefNClob)
			yyVAL.anything = d
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.BFile{}
			d.SetDataDef(element.DataDefBFile)
			yyVAL.anything = d
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.RowId{}
			d.SetDataDef(element.DataDefRowId)
			yyVAL.anything = d
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.URowId{}
			d.SetDataDef(element.DataDefURowId)
			yyVAL.anything = d
		}
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.URowId{Size: &size}
			d.SetDataDef(element.DataDefURowId)
			yyVAL.anything = d
		}
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Char{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharacter)
			yyVAL.anything = d
		}
	case 568:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharacterVarying)
			yyVAL.anything = d
		}
	case 569:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharVarying)
			yyVAL.anything = d
		}
	case 570:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNCharVarying)
			yyVAL.anything = d
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefVarchar)
			yyVAL.anything = d
		}
	case 572:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNationalCharacter)
			yyVAL.anything = d
		}
	case 573:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			size := yyDollar[5].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNationalCharacterVarying)
			yyVAL.anything = d
		}
	case 574:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNationalChar)
			yyVAL.anything = d
		}
	case 575:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			size := yyDollar[5].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNationalCharVarying)
			yyVAL.anything = d
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 578:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			scale := yyDollar[5].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 580:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 581:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			scale := yyDollar[5].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 584:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			scale := yyDollar[5].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefInteger)
			yyVAL.anything = d
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefInt)
			yyVAL.anything = d
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefSmallInt)
			yyVAL.anything = d
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 126}
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefDoublePrecision)
			yyVAL.anything = d
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 63}
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefReal)
			yyVAL.anything = d
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.XMLType{}
			d.SetDataDef(element.DataDefXMLType)
			yyVAL.anything = d
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].anything
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			constraint := yyDollar[2].anything.(*ast.InlineConstraint)
			constraint.Name = yyDollar[1].anything.(*element.Identifier)
			yyVAL.anything = constraint
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypeNull,
			}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypeNotNull,
			}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypeUnique,
			}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypePK,
			}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypeReferences,
			}
		}
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 609:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 616:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 624:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			clause := &ast.ReferenceClause{}
			clause.Columns = yyDollar[4].anything.([]*element.Identifier)
			clause.Table = yyDollar[2].anything.(*ast.TableName)
			yyVAL.anything = clause
		}
	case 625:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			constraint := yyDollar[2].anything.(*ast.OutOfLineConstraint)
			constraint.Name = yyDollar[1].anything.(*element.Identifier)
			yyVAL.anything = constraint
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 632:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeUnique
			constraint.Columns = yyDollar[3].anything.([]*element.Identifier)
			yyVAL.anything = constraint
		}
	case 633:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypePK
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			yyVAL.anything = constraint
		}
	case 634:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeReferences
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			constraint.Reference = yyDollar[6].anything.(*ast.ReferenceClause)
			yyVAL.anything = constraint
		}
	case 635:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.anything = &ast.OutOfLineConstraint{}
		}
	case 663:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 678:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	}
	goto yystack /* stack new state and value */
}

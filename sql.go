// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"strings"

	"github.com/sjjian/oracle-sql-parser/ast"
	"github.com/sjjian/oracle-sql-parser/ast/element"
)

func nextQuery(yylex interface{}) string {
	lex := yylex.(*yyLexImpl)
	tc := lex.scanner.TC
	query := string(lex.scanner.Text[lex.lastPos:tc])
	lex.lastPos = tc
	return strings.TrimSpace(query)
}

type yySymType struct {
	yys      int
	nothing  struct{}
	i        int
	b        bool
	str      string
	node     ast.Node
	anything interface{}
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault                = 57558
	yyEofCode                = 57344
	_E                       = 57506
	_G                       = 57507
	_K                       = 57508
	_M                       = 57509
	_P                       = 57510
	_T                       = 57511
	_add                     = 57350
	_advanced                = 57515
	_all                     = 57444
	_alter                   = 57348
	_always                  = 57423
	_archive                 = 57521
	_as                      = 57424
	_at                      = 57445
	_attributes              = 57552
	_auto                    = 57526
	_basic                   = 57516
	_bfile                   = 57377
	_binaryDouble            = 57359
	_binaryFloat             = 57358
	_blob                    = 57374
	_blockchain              = 57459
	_buffer_pool             = 57490
	_by                      = 57400
	_byte                    = 57352
	_cache                   = 57427
	_capacity                = 57527
	_cascade                 = 57410
	_cell_flash_cache        = 57491
	_char                    = 57351
	_character               = 57380
	_checkpoint              = 57456
	_clob                    = 57375
	_cluster                 = 57480
	_collate                 = 57393
	_column                  = 57446
	_columns                 = 57450
	_commit                  = 57472
	_compress                = 57517
	_constraint              = 57403
	_constraints             = 57453
	_continue                = 57451
	_create                  = 57458
	_creation                = 57482
	_critical                = 57532
	_cycle                   = 57428
	_data                    = 57466
	_date                    = 57362
	_day                     = 57372
	_dec                     = 57386
	_decimal                 = 57385
	_decrypt                 = 57443
	_default                 = 57422
	_deferrable              = 57414
	_deferred                = 57415
	_definition              = 57473
	_delete                  = 57411
	_delete_all              = 57542
	_disable                 = 57543
	_disable_all             = 57544
	_distribute              = 57535
	_dml                     = 57528
	_double                  = 57390
	_doubleQuoteStr          = 57556
	_drop                    = 57442
	_duplicate               = 57540
	_duplicated              = 57460
	_enable                  = 57545
	_enable_all              = 57546
	_encrypt                 = 57397
	_extended                = 57467
	_external                = 57549
	_filesystem_like_logging = 57512
	_flash_cache             = 57492
	_float                   = 57357
	_for                     = 57476
	_force                   = 57449
	_freelist                = 57493
	_freelists               = 57494
	_from                    = 57347
	_generated               = 57425
	_global                  = 57461
	_groups                  = 57505
	_heap                    = 57550
	_high                    = 57529
	_identified              = 57399
	_identity                = 57426
	_ilm                     = 57547
	_immediate               = 57416
	_immutable               = 57462
	_increment               = 57429
	_index                   = 57551
	_initial                 = 57495
	_initially               = 57417
	_initrans                = 57485
	_inmemory                = 57525
	_int                     = 57388
	_intNumber               = 57554
	_interger                = 57387
	_interval                = 57368
	_invalidate              = 57454
	_invisible               = 57395
	_is                      = 57420
	_keep                    = 57496
	_key                     = 57404
	_level                   = 57523
	_levels                  = 57447
	_limit                   = 57430
	_local                   = 57365
	_locking                 = 57524
	_logging                 = 57513
	_long                    = 57360
	_low                     = 57530
	_maxextents              = 57497
	_maxsize                 = 57498
	_maxtrans                = 57486
	_maxvalue                = 57431
	_medium                  = 57533
	_memcompress             = 57531
	_memoptimize             = 57477
	_metadata                = 57468
	_minextents              = 57499
	_minvalue                = 57432
	_modify                  = 57441
	_mouth                   = 57371
	_national                = 57383
	_nchar                   = 57354
	_nclob                   = 57376
	_next                    = 57500
	_no                      = 57401
	_nocache                 = 57433
	_nocompress              = 57518
	_nocycle                 = 57434
	_nologging               = 57514
	_nomaxvalue              = 57435
	_nominvalue              = 57436
	_none                    = 57469
	_nonquotedIdentifier     = 57557
	_noorder                 = 57437
	_norely                  = 57418
	_not                     = 57405
	_null                    = 57406
	_number                  = 57356
	_numeric                 = 57384
	_nvarchar2               = 57355
	_on                      = 57412
	_online                  = 57455
	_optimal                 = 57501
	_order                   = 57438
	_organization            = 57481
	_parent                  = 57471
	_partition               = 57536
	_pctfree                 = 57487
	_pctincrease             = 57502
	_pctused                 = 57488
	_policy                  = 57548
	_precision               = 57391
	_preserve                = 57474
	_primary                 = 57407
	_priority                = 57534
	_private                 = 57463
	_query                   = 57522
	_range                   = 57537
	_raw                     = 57361
	_read                    = 57478
	_real                    = 57392
	_recycle                 = 57503
	_references              = 57409
	_reject                  = 57553
	_rely                    = 57419
	_rename                  = 57457
	_row                     = 57519
	_rowid                   = 57378
	_rows                    = 57475
	_salt                    = 57402
	_scope                   = 57421
	_second                  = 57373
	_segment                 = 57483
	_select                  = 57346
	_service                 = 57539
	_set                     = 57413
	_sharded                 = 57464
	_sharding                = 57470
	_singleQuoteStr          = 57555
	_smallInt                = 57389
	_sort                    = 57394
	_spatial                 = 57541
	_start                   = 57439
	_storage                 = 57489
	_store                   = 57520
	_subpartition            = 57538
	_substitutable           = 57448
	_table                   = 57349
	_tablespace              = 57484
	_temporary               = 57465
	_time                    = 57366
	_timestamp               = 57363
	_to                      = 57370
	_unique                  = 57408
	_unlimited               = 57504
	_unused                  = 57452
	_urowid                  = 57379
	_using                   = 57398
	_value                   = 57440
	_varchar                 = 57382
	_varchar2                = 57353
	_varying                 = 57381
	_visible                 = 57396
	_with                    = 57364
	_write                   = 57479
	_year                    = 57369
	_zone                    = 57367
	yyErrCode                = 57345

	yyMaxDepth = 200
	yyTabOfs   = -416
)

var (
	yyPrec = map[int]int{}

	yyXLAT = map[int]int{
		41:    0,   // ')' (269x)
		57344: 1,   // $end (202x)
		59:    2,   // ';' (201x)
		44:    3,   // ',' (186x)
		57406: 4,   // _null (160x)
		57405: 5,   // _not (157x)
		57477: 6,   // _memoptimize (155x)
		57407: 7,   // _primary (155x)
		57409: 8,   // _references (155x)
		57408: 9,   // _unique (155x)
		57403: 10,  // _constraint (152x)
		57471: 11,  // _parent (152x)
		57397: 12,  // _encrypt (137x)
		57442: 13,  // _drop (125x)
		57446: 14,  // _column (117x)
		57364: 15,  // _with (110x)
		57421: 16,  // _scope (109x)
		57401: 17,  // _no (104x)
		57422: 18,  // _default (100x)
		57443: 19,  // _decrypt (93x)
		57547: 20,  // _ilm (93x)
		57525: 21,  // _inmemory (90x)
		57425: 22,  // _generated (83x)
		57395: 23,  // _invisible (80x)
		57396: 24,  // _visible (80x)
		57394: 25,  // _sort (75x)
		57393: 26,  // _collate (72x)
		57517: 27,  // _compress (69x)
		57519: 28,  // _row (68x)
		57518: 29,  // _nocompress (67x)
		57512: 30,  // _filesystem_like_logging (66x)
		57485: 31,  // _initrans (66x)
		57513: 32,  // _logging (66x)
		57486: 33,  // _maxtrans (66x)
		57514: 34,  // _nologging (66x)
		57487: 35,  // _pctfree (66x)
		57488: 36,  // _pctused (66x)
		57489: 37,  // _storage (66x)
		57484: 38,  // _tablespace (66x)
		40:    39,  // '(' (61x)
		57413: 40,  // _set (53x)
		57350: 41,  // _add (52x)
		57441: 42,  // _modify (51x)
		57554: 43,  // _intNumber (50x)
		57556: 44,  // _doubleQuoteStr (42x)
		57557: 45,  // _nonquotedIdentifier (40x)
		57490: 46,  // _buffer_pool (35x)
		57491: 47,  // _cell_flash_cache (35x)
		57492: 48,  // _flash_cache (35x)
		57493: 49,  // _freelist (35x)
		57494: 50,  // _freelists (35x)
		57495: 51,  // _initial (35x)
		57497: 52,  // _maxextents (35x)
		57498: 53,  // _maxsize (35x)
		57499: 54,  // _minextents (35x)
		57500: 55,  // _next (35x)
		57501: 56,  // _optimal (35x)
		57502: 57,  // _pctincrease (35x)
		57541: 58,  // _spatial (35x)
		57540: 59,  // _duplicate (32x)
		57610: 60,  // Identifier (32x)
		57549: 61,  // _external (28x)
		57481: 62,  // _organization (27x)
		57480: 63,  // _cluster (24x)
		57412: 64,  // _on (24x)
		57483: 65,  // _segment (24x)
		57414: 66,  // _deferrable (21x)
		57417: 67,  // _initially (20x)
		57575: 68,  // ColumnName (19x)
		57427: 69,  // _cache (17x)
		57428: 70,  // _cycle (17x)
		57535: 71,  // _distribute (17x)
		57429: 72,  // _increment (17x)
		57431: 73,  // _maxvalue (17x)
		57432: 74,  // _minvalue (17x)
		57433: 75,  // _nocache (17x)
		57434: 76,  // _nocycle (17x)
		57435: 77,  // _nomaxvalue (17x)
		57436: 78,  // _nominvalue (17x)
		57437: 79,  // _noorder (17x)
		57438: 80,  // _order (17x)
		57439: 81,  // _start (17x)
		57456: 82,  // _checkpoint (14x)
		57457: 83,  // _rename (14x)
		57410: 84,  // _cascade (13x)
		57476: 85,  // _for (12x)
		57454: 86,  // _invalidate (12x)
		57455: 87,  // _online (12x)
		57534: 88,  // _priority (11x)
		57402: 89,  // _salt (10x)
		57351: 90,  // _char (9x)
		46:    91,  // '.' (8x)
		57418: 92,  // _norely (8x)
		57419: 93,  // _rely (8x)
		57378: 94,  // _rowid (8x)
		57555: 95,  // _singleQuoteStr (8x)
		57370: 96,  // _to (8x)
		57380: 97,  // _character (7x)
		57361: 98,  // _raw (7x)
		57377: 99,  // _bfile (6x)
		57359: 100, // _binaryDouble (6x)
		57358: 101, // _binaryFloat (6x)
		57374: 102, // _blob (6x)
		57375: 103, // _clob (6x)
		57362: 104, // _date (6x)
		57386: 105, // _dec (6x)
		57385: 106, // _decimal (6x)
		57390: 107, // _double (6x)
		57357: 108, // _float (6x)
		57388: 109, // _int (6x)
		57387: 110, // _interger (6x)
		57368: 111, // _interval (6x)
		57360: 112, // _long (6x)
		57383: 113, // _national (6x)
		57354: 114, // _nchar (6x)
		57376: 115, // _nclob (6x)
		57356: 116, // _number (6x)
		57384: 117, // _numeric (6x)
		57355: 118, // _nvarchar2 (6x)
		57392: 119, // _real (6x)
		57389: 120, // _smallInt (6x)
		57363: 121, // _timestamp (6x)
		57379: 122, // _urowid (6x)
		57382: 123, // _varchar (6x)
		57353: 124, // _varchar2 (6x)
		57576: 125, // ColumnNameList (6x)
		57667: 126, // PhysicalAttrClause (6x)
		57690: 127, // StorageClause (6x)
		57693: 128, // TableCompression (6x)
		42:    129, // '*' (5x)
		57529: 130, // _high (5x)
		57426: 131, // _identity (5x)
		57530: 132, // _low (5x)
		57469: 133, // _none (5x)
		57470: 134, // _sharding (5x)
		57448: 135, // _substitutable (5x)
		57381: 136, // _varying (5x)
		57627: 137, // InmemoryColumnClause (5x)
		57643: 138, // LoggingClause (5x)
		57659: 139, // NumberOrAsterisk (5x)
		57668: 140, // PhysicalAttrsClause (5x)
		57680: 141, // SegmentAttrClause (5x)
		57696: 142, // TableName (5x)
		57444: 143, // _all (4x)
		57424: 144, // _as (4x)
		57400: 145, // _by (4x)
		57548: 146, // _policy (4x)
		57572: 147, // ColumnDef (4x)
		57580: 148, // ConstraintNameOrEmpty (4x)
		57585: 149, // ConstraintStateRely (4x)
		57614: 150, // IdentityOptionsOrEmpty (4x)
		57616: 151, // IlmCompressionPolicy (4x)
		57617: 152, // IlmInmemoryPolicy (4x)
		57618: 153, // IlmPolicyClause (4x)
		57619: 154, // IlmTieringPolicy (4x)
		57622: 155, // InlineConstraint (4x)
		57628: 156, // InmemoryColumnClauses (4x)
		57629: 157, // InmemoryColumnClausesOrEmpty (4x)
		57670: 158, // RealColumnDef (4x)
		57684: 159, // SizeClause (4x)
		57411: 160, // _delete (3x)
		57399: 161, // _identified (3x)
		57496: 162, // _keep (3x)
		57531: 163, // _memcompress (3x)
		57561: 164, // AnsiSupportDataTypes (3x)
		57565: 165, // CharacterDataTypes (3x)
		57566: 166, // CollateClause (3x)
		57582: 167, // ConstraintStateDeferrable (3x)
		57583: 168, // ConstraintStateDeferredOrImmediate (3x)
		57587: 169, // Datatype (3x)
		57588: 170, // DatetimeDataTypes (3x)
		57594: 171, // DropColumnCheckpoint (3x)
		57597: 172, // DropColumnProp (3x)
		57639: 173, // InvisibleProp (3x)
		57642: 174, // LargeObjectDataTypes (3x)
		57644: 175, // LongAndRawDataTypes (3x)
		57658: 176, // NumberDataTypes (3x)
		57663: 177, // OralceBuiltInDataTypes (3x)
		57678: 178, // RowIdDataTypes (3x)
		57681: 179, // SegmentAttrsClause (3x)
		57348: 180, // _alter (2x)
		57445: 181, // _at (2x)
		57526: 182, // _auto (2x)
		57459: 183, // _blockchain (2x)
		57352: 184, // _byte (2x)
		57450: 185, // _columns (2x)
		57472: 186, // _commit (2x)
		57458: 187, // _create (2x)
		57466: 188, // _data (2x)
		57415: 189, // _deferred (2x)
		57473: 190, // _definition (2x)
		57449: 191, // _force (2x)
		57416: 192, // _immediate (2x)
		57523: 193, // _level (2x)
		57447: 194, // _levels (2x)
		57430: 195, // _limit (2x)
		57524: 196, // _locking (2x)
		57371: 197, // _mouth (2x)
		57536: 198, // _partition (2x)
		57474: 199, // _preserve (2x)
		57522: 200, // _query (2x)
		57478: 201, // _read (2x)
		57553: 202, // _reject (2x)
		57475: 203, // _rows (2x)
		57373: 204, // _second (2x)
		57520: 205, // _store (2x)
		57349: 206, // _table (2x)
		57465: 207, // _temporary (2x)
		57366: 208, // _time (2x)
		57504: 209, // _unlimited (2x)
		57452: 210, // _unused (2x)
		57479: 211, // _write (2x)
		57367: 212, // _zone (2x)
		57559: 213, // AddColumnClause (2x)
		57560: 214, // AlterTableStmt (2x)
		57563: 215, // ChangeColumnClause (2x)
		57567: 216, // CollateClauseOrEmpty (2x)
		57577: 217, // ColumnNameListForDropColumn (2x)
		57581: 218, // ConstraintState (2x)
		57584: 219, // ConstraintStateOrEmpty (2x)
		57586: 220, // CreateTableStmt (2x)
		57589: 221, // DefaultClause (2x)
		57591: 222, // DefaultOrIdentityClause (2x)
		57595: 223, // DropColumnClause (2x)
		57598: 224, // DropColumnProps (2x)
		57599: 225, // DropColumnPropsOrEmpty (2x)
		57600: 226, // EmptyStmt (2x)
		57602: 227, // EncryptClause (2x)
		57605: 228, // Expr (2x)
		57607: 229, // ExternalTableClause (2x)
		57611: 230, // IdentityClause (2x)
		57612: 231, // IdentityOption (2x)
		57615: 232, // IlmClause (2x)
		57623: 233, // InlineConstraintList (2x)
		57624: 234, // InlineConstraintProp (2x)
		57634: 235, // InmemoryMemCompress (2x)
		57637: 236, // InmemoryTableClause (2x)
		57641: 237, // IsForce (2x)
		57647: 238, // MemoptimizeRead (2x)
		57649: 239, // MemoptimizeWrite (2x)
		57651: 240, // ModifyColumnClause (2x)
		57652: 241, // ModifyColumnProp (2x)
		57654: 242, // ModifyColumnSubstitutable (2x)
		57655: 243, // ModifyColumnVisibility (2x)
		57657: 244, // ModifyRealColumnProp (2x)
		57671: 245, // ReferencesClause (2x)
		57674: 246, // RelTableProp (2x)
		57682: 247, // SegmentAttrsClauseOrEmpty (2x)
		57688: 248, // Statement (2x)
		57691: 249, // StorageProp (2x)
		57694: 250, // TableCompressionOrEmpty (2x)
		61:    251, // '=' (1x)
		57515: 252, // _advanced (1x)
		57423: 253, // _always (1x)
		57521: 254, // _archive (1x)
		57552: 255, // _attributes (1x)
		57516: 256, // _basic (1x)
		57527: 257, // _capacity (1x)
		57453: 258, // _constraints (1x)
		57451: 259, // _continue (1x)
		57482: 260, // _creation (1x)
		57532: 261, // _critical (1x)
		57372: 262, // _day (1x)
		57542: 263, // _delete_all (1x)
		57543: 264, // _disable (1x)
		57544: 265, // _disable_all (1x)
		57528: 266, // _dml (1x)
		57460: 267, // _duplicated (1x)
		57506: 268, // _E (1x)
		57545: 269, // _enable (1x)
		57546: 270, // _enable_all (1x)
		57467: 271, // _extended (1x)
		57507: 272, // _G (1x)
		57461: 273, // _global (1x)
		57505: 274, // _groups (1x)
		57550: 275, // _heap (1x)
		57462: 276, // _immutable (1x)
		57551: 277, // _index (1x)
		57420: 278, // _is (1x)
		57508: 279, // _K (1x)
		57404: 280, // _key (1x)
		57365: 281, // _local (1x)
		57509: 282, // _M (1x)
		57533: 283, // _medium (1x)
		57468: 284, // _metadata (1x)
		57510: 285, // _P (1x)
		57391: 286, // _precision (1x)
		57463: 287, // _private (1x)
		57537: 288, // _range (1x)
		57503: 289, // _recycle (1x)
		57539: 290, // _service (1x)
		57464: 291, // _sharded (1x)
		57538: 292, // _subpartition (1x)
		57511: 293, // _T (1x)
		57398: 294, // _using (1x)
		57440: 295, // _value (1x)
		57369: 296, // _year (1x)
		57562: 297, // BlockchainTableClauses (1x)
		57564: 298, // ChangeColumnClauseList (1x)
		57568: 299, // ColumnClauses (1x)
		57569: 300, // ColumnCompressLock (1x)
		57570: 301, // ColumnCompressProp (1x)
		57571: 302, // ColumnConstraintForModify (1x)
		57573: 303, // ColumnDefConstraint (1x)
		57574: 304, // ColumnDefList (1x)
		57578: 305, // ColumnNameListOrEmpty (1x)
		57579: 306, // ColumnProps (1x)
		57590: 307, // DefaultCollateClauseOrEmpty (1x)
		57592: 308, // DefaultOrIdentityClauseForModify (1x)
		57593: 309, // DeferredSegmentCreation (1x)
		57596: 310, // DropColumnOnline (1x)
		57601: 311, // EncryptAlgorithm (1x)
		57603: 312, // EncryptClauseForModify (1x)
		57604: 313, // EncryptionSpec (1x)
		57606: 314, // ExternalPartitionClause (1x)
		57608: 315, // HeapOrgTableClause (1x)
		57609: 316, // IdentifiedByClause (1x)
		57613: 317, // IdentityOptions (1x)
		57620: 318, // ImmutableTableClauses (1x)
		57621: 319, // IndexOrgTableClause (1x)
		57625: 320, // InlineRefConstraint (1x)
		57626: 321, // InmemoryAttrs (1x)
		57630: 322, // InmemoryDistribute (1x)
		57631: 323, // InmemoryDistributeBy (1x)
		57632: 324, // InmemoryDistributeFor (1x)
		57633: 325, // InmemoryDuplicate (1x)
		57635: 326, // InmemoryProp (1x)
		57636: 327, // InmemorySpatial (1x)
		57638: 328, // IntergrityAlgorithm (1x)
		57640: 329, // InvisiblePropOrEmpty (1x)
		57645: 330, // Memoptimize (1x)
		57646: 331, // MemoptimizeForAlterTable (1x)
		57648: 332, // MemoptimizeReadForAlterTable (1x)
		57650: 333, // MemoptimizeWriteForAlterTable (1x)
		57653: 334, // ModifyColumnProps (1x)
		57656: 335, // ModifyColumnVisibilityList (1x)
		57660: 336, // OnCommitClause (1x)
		57661: 337, // OnCommitDef (1x)
		57662: 338, // OnCommitRows (1x)
		57664: 339, // OrgClause (1x)
		57665: 340, // OutOfLinePartStorageList (1x)
		57666: 341, // ParentTable (1x)
		57669: 342, // PhysicalProps (1x)
		57672: 343, // ReferencesOnDelete (1x)
		57673: 344, // RelTableDef (1x)
		57675: 345, // RelTableProps (1x)
		57676: 346, // RelTablePropsOrEmpty (1x)
		57677: 347, // RenameColumnClause (1x)
		57679: 348, // SaltProp (1x)
		57683: 349, // ShardingType (1x)
		57685: 350, // SizeUnit (1x)
		57686: 351, // SortProp (1x)
		57687: 352, // Start (1x)
		57689: 353, // StatementList (1x)
		57692: 354, // StorageProps (1x)
		57695: 355, // TableDef (1x)
		57697: 356, // TableProps (1x)
		57698: 357, // TableType (1x)
		57558: 358, // $default (0x)
		57347: 359, // _from (0x)
		57346: 360, // _select (0x)
		57345: 361, // error (0x)
	}

	yySymNames = []string{
		"')'",
		"$end",
		"';'",
		"','",
		"_null",
		"_not",
		"_memoptimize",
		"_primary",
		"_references",
		"_unique",
		"_constraint",
		"_parent",
		"_encrypt",
		"_drop",
		"_column",
		"_with",
		"_scope",
		"_no",
		"_default",
		"_decrypt",
		"_ilm",
		"_inmemory",
		"_generated",
		"_invisible",
		"_visible",
		"_sort",
		"_collate",
		"_compress",
		"_row",
		"_nocompress",
		"_filesystem_like_logging",
		"_initrans",
		"_logging",
		"_maxtrans",
		"_nologging",
		"_pctfree",
		"_pctused",
		"_storage",
		"_tablespace",
		"'('",
		"_set",
		"_add",
		"_modify",
		"_intNumber",
		"_doubleQuoteStr",
		"_nonquotedIdentifier",
		"_buffer_pool",
		"_cell_flash_cache",
		"_flash_cache",
		"_freelist",
		"_freelists",
		"_initial",
		"_maxextents",
		"_maxsize",
		"_minextents",
		"_next",
		"_optimal",
		"_pctincrease",
		"_spatial",
		"_duplicate",
		"Identifier",
		"_external",
		"_organization",
		"_cluster",
		"_on",
		"_segment",
		"_deferrable",
		"_initially",
		"ColumnName",
		"_cache",
		"_cycle",
		"_distribute",
		"_increment",
		"_maxvalue",
		"_minvalue",
		"_nocache",
		"_nocycle",
		"_nomaxvalue",
		"_nominvalue",
		"_noorder",
		"_order",
		"_start",
		"_checkpoint",
		"_rename",
		"_cascade",
		"_for",
		"_invalidate",
		"_online",
		"_priority",
		"_salt",
		"_char",
		"'.'",
		"_norely",
		"_rely",
		"_rowid",
		"_singleQuoteStr",
		"_to",
		"_character",
		"_raw",
		"_bfile",
		"_binaryDouble",
		"_binaryFloat",
		"_blob",
		"_clob",
		"_date",
		"_dec",
		"_decimal",
		"_double",
		"_float",
		"_int",
		"_interger",
		"_interval",
		"_long",
		"_national",
		"_nchar",
		"_nclob",
		"_number",
		"_numeric",
		"_nvarchar2",
		"_real",
		"_smallInt",
		"_timestamp",
		"_urowid",
		"_varchar",
		"_varchar2",
		"ColumnNameList",
		"PhysicalAttrClause",
		"StorageClause",
		"TableCompression",
		"'*'",
		"_high",
		"_identity",
		"_low",
		"_none",
		"_sharding",
		"_substitutable",
		"_varying",
		"InmemoryColumnClause",
		"LoggingClause",
		"NumberOrAsterisk",
		"PhysicalAttrsClause",
		"SegmentAttrClause",
		"TableName",
		"_all",
		"_as",
		"_by",
		"_policy",
		"ColumnDef",
		"ConstraintNameOrEmpty",
		"ConstraintStateRely",
		"IdentityOptionsOrEmpty",
		"IlmCompressionPolicy",
		"IlmInmemoryPolicy",
		"IlmPolicyClause",
		"IlmTieringPolicy",
		"InlineConstraint",
		"InmemoryColumnClauses",
		"InmemoryColumnClausesOrEmpty",
		"RealColumnDef",
		"SizeClause",
		"_delete",
		"_identified",
		"_keep",
		"_memcompress",
		"AnsiSupportDataTypes",
		"CharacterDataTypes",
		"CollateClause",
		"ConstraintStateDeferrable",
		"ConstraintStateDeferredOrImmediate",
		"Datatype",
		"DatetimeDataTypes",
		"DropColumnCheckpoint",
		"DropColumnProp",
		"InvisibleProp",
		"LargeObjectDataTypes",
		"LongAndRawDataTypes",
		"NumberDataTypes",
		"OralceBuiltInDataTypes",
		"RowIdDataTypes",
		"SegmentAttrsClause",
		"_alter",
		"_at",
		"_auto",
		"_blockchain",
		"_byte",
		"_columns",
		"_commit",
		"_create",
		"_data",
		"_deferred",
		"_definition",
		"_force",
		"_immediate",
		"_level",
		"_levels",
		"_limit",
		"_locking",
		"_mouth",
		"_partition",
		"_preserve",
		"_query",
		"_read",
		"_reject",
		"_rows",
		"_second",
		"_store",
		"_table",
		"_temporary",
		"_time",
		"_unlimited",
		"_unused",
		"_write",
		"_zone",
		"AddColumnClause",
		"AlterTableStmt",
		"ChangeColumnClause",
		"CollateClauseOrEmpty",
		"ColumnNameListForDropColumn",
		"ConstraintState",
		"ConstraintStateOrEmpty",
		"CreateTableStmt",
		"DefaultClause",
		"DefaultOrIdentityClause",
		"DropColumnClause",
		"DropColumnProps",
		"DropColumnPropsOrEmpty",
		"EmptyStmt",
		"EncryptClause",
		"Expr",
		"ExternalTableClause",
		"IdentityClause",
		"IdentityOption",
		"IlmClause",
		"InlineConstraintList",
		"InlineConstraintProp",
		"InmemoryMemCompress",
		"InmemoryTableClause",
		"IsForce",
		"MemoptimizeRead",
		"MemoptimizeWrite",
		"ModifyColumnClause",
		"ModifyColumnProp",
		"ModifyColumnSubstitutable",
		"ModifyColumnVisibility",
		"ModifyRealColumnProp",
		"ReferencesClause",
		"RelTableProp",
		"SegmentAttrsClauseOrEmpty",
		"Statement",
		"StorageProp",
		"TableCompressionOrEmpty",
		"'='",
		"_advanced",
		"_always",
		"_archive",
		"_attributes",
		"_basic",
		"_capacity",
		"_constraints",
		"_continue",
		"_creation",
		"_critical",
		"_day",
		"_delete_all",
		"_disable",
		"_disable_all",
		"_dml",
		"_duplicated",
		"_E",
		"_enable",
		"_enable_all",
		"_extended",
		"_G",
		"_global",
		"_groups",
		"_heap",
		"_immutable",
		"_index",
		"_is",
		"_K",
		"_key",
		"_local",
		"_M",
		"_medium",
		"_metadata",
		"_P",
		"_precision",
		"_private",
		"_range",
		"_recycle",
		"_service",
		"_sharded",
		"_subpartition",
		"_T",
		"_using",
		"_value",
		"_year",
		"BlockchainTableClauses",
		"ChangeColumnClauseList",
		"ColumnClauses",
		"ColumnCompressLock",
		"ColumnCompressProp",
		"ColumnConstraintForModify",
		"ColumnDefConstraint",
		"ColumnDefList",
		"ColumnNameListOrEmpty",
		"ColumnProps",
		"DefaultCollateClauseOrEmpty",
		"DefaultOrIdentityClauseForModify",
		"DeferredSegmentCreation",
		"DropColumnOnline",
		"EncryptAlgorithm",
		"EncryptClauseForModify",
		"EncryptionSpec",
		"ExternalPartitionClause",
		"HeapOrgTableClause",
		"IdentifiedByClause",
		"IdentityOptions",
		"ImmutableTableClauses",
		"IndexOrgTableClause",
		"InlineRefConstraint",
		"InmemoryAttrs",
		"InmemoryDistribute",
		"InmemoryDistributeBy",
		"InmemoryDistributeFor",
		"InmemoryDuplicate",
		"InmemoryProp",
		"InmemorySpatial",
		"IntergrityAlgorithm",
		"InvisiblePropOrEmpty",
		"Memoptimize",
		"MemoptimizeForAlterTable",
		"MemoptimizeReadForAlterTable",
		"MemoptimizeWriteForAlterTable",
		"ModifyColumnProps",
		"ModifyColumnVisibilityList",
		"OnCommitClause",
		"OnCommitDef",
		"OnCommitRows",
		"OrgClause",
		"OutOfLinePartStorageList",
		"ParentTable",
		"PhysicalProps",
		"ReferencesOnDelete",
		"RelTableDef",
		"RelTableProps",
		"RelTablePropsOrEmpty",
		"RenameColumnClause",
		"SaltProp",
		"ShardingType",
		"SizeUnit",
		"SortProp",
		"Start",
		"StatementList",
		"StorageProps",
		"TableDef",
		"TableProps",
		"TableType",
		"$default",
		"_from",
		"_select",
		"error",
	}

	yyTokenLiteralStrings = map[int]string{
		57554: "int number",
		57556: "double quotes string",
		57557: "nonquoted identifier",
		57555: "single quotes string",
	}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {352, 1},
		2:   {353, 1},
		3:   {353, 3},
		4:   {248, 1},
		5:   {248, 1},
		6:   {248, 1},
		7:   {226, 0},
		8:   {142, 1},
		9:   {142, 3},
		10:  {125, 1},
		11:  {125, 3},
		12:  {68, 1},
		13:  {60, 1},
		14:  {60, 1},
		15:  {214, 5},
		16:  {299, 1},
		17:  {299, 1},
		18:  {298, 1},
		19:  {298, 2},
		20:  {215, 1},
		21:  {215, 1},
		22:  {215, 1},
		23:  {213, 6},
		24:  {306, 0},
		25:  {340, 0},
		26:  {304, 1},
		27:  {304, 3},
		28:  {147, 1},
		29:  {158, 8},
		30:  {216, 0},
		31:  {216, 1},
		32:  {166, 2},
		33:  {351, 0},
		34:  {351, 1},
		35:  {329, 0},
		36:  {329, 1},
		37:  {173, 1},
		38:  {173, 1},
		39:  {222, 0},
		40:  {222, 1},
		41:  {222, 1},
		42:  {221, 2},
		43:  {221, 4},
		44:  {230, 4},
		45:  {230, 5},
		46:  {230, 5},
		47:  {230, 6},
		48:  {230, 8},
		49:  {150, 0},
		50:  {150, 3},
		51:  {317, 0},
		52:  {317, 1},
		53:  {317, 2},
		54:  {231, 3},
		55:  {231, 4},
		56:  {231, 3},
		57:  {231, 2},
		58:  {231, 1},
		59:  {231, 2},
		60:  {231, 1},
		61:  {231, 1},
		62:  {231, 1},
		63:  {231, 2},
		64:  {231, 1},
		65:  {231, 1},
		66:  {231, 1},
		67:  {227, 0},
		68:  {227, 2},
		69:  {313, 4},
		70:  {311, 0},
		71:  {311, 2},
		72:  {316, 0},
		73:  {316, 3},
		74:  {328, 0},
		75:  {328, 1},
		76:  {348, 0},
		77:  {348, 1},
		78:  {348, 2},
		79:  {303, 0},
		80:  {303, 1},
		81:  {303, 1},
		82:  {233, 1},
		83:  {233, 2},
		84:  {240, 4},
		85:  {240, 4},
		86:  {240, 1},
		87:  {334, 1},
		88:  {334, 3},
		89:  {241, 1},
		90:  {244, 6},
		91:  {308, 2},
		92:  {308, 1},
		93:  {312, 1},
		94:  {312, 1},
		95:  {302, 0},
		96:  {302, 1},
		97:  {335, 1},
		98:  {335, 3},
		99:  {243, 2},
		100: {242, 7},
		101: {242, 8},
		102: {237, 0},
		103: {237, 1},
		104: {223, 5},
		105: {223, 4},
		106: {223, 4},
		107: {223, 4},
		108: {217, 2},
		109: {217, 3},
		110: {225, 0},
		111: {225, 1},
		112: {224, 1},
		113: {224, 2},
		114: {172, 2},
		115: {172, 1},
		116: {310, 0},
		117: {310, 1},
		118: {171, 0},
		119: {171, 2},
		120: {347, 5},
		121: {220, 8},
		122: {357, 0},
		123: {357, 2},
		124: {357, 2},
		125: {357, 1},
		126: {357, 1},
		127: {357, 1},
		128: {357, 1},
		129: {357, 2},
		130: {349, 0},
		131: {349, 3},
		132: {349, 3},
		133: {349, 4},
		134: {349, 3},
		135: {341, 0},
		136: {341, 2},
		137: {355, 1},
		138: {344, 7},
		139: {318, 0},
		140: {297, 0},
		141: {307, 0},
		142: {307, 2},
		143: {336, 2},
		144: {337, 0},
		145: {337, 4},
		146: {337, 4},
		147: {338, 0},
		148: {338, 4},
		149: {338, 4},
		150: {342, 0},
		151: {342, 5},
		152: {342, 3},
		153: {342, 2},
		154: {342, 5},
		155: {309, 0},
		156: {309, 3},
		157: {309, 3},
		158: {247, 0},
		159: {247, 1},
		160: {179, 1},
		161: {179, 2},
		162: {141, 1},
		163: {141, 2},
		164: {141, 3},
		165: {141, 1},
		166: {141, 1},
		167: {140, 1},
		168: {140, 2},
		169: {126, 2},
		170: {126, 2},
		171: {126, 2},
		172: {126, 2},
		173: {126, 1},
		174: {127, 4},
		175: {354, 1},
		176: {354, 2},
		177: {249, 2},
		178: {249, 2},
		179: {249, 2},
		180: {249, 2},
		181: {249, 2},
		182: {249, 2},
		183: {249, 2},
		184: {249, 2},
		185: {249, 2},
		186: {249, 3},
		187: {249, 1},
		188: {249, 2},
		189: {249, 2},
		190: {249, 2},
		191: {249, 2},
		192: {249, 2},
		193: {249, 2},
		194: {249, 2},
		195: {249, 2},
		196: {249, 2},
		197: {249, 2},
		198: {249, 2},
		199: {249, 1},
		200: {159, 2},
		201: {350, 0},
		202: {350, 1},
		203: {350, 1},
		204: {350, 1},
		205: {350, 1},
		206: {350, 1},
		207: {350, 1},
		208: {138, 1},
		209: {138, 1},
		210: {138, 1},
		211: {250, 0},
		212: {250, 1},
		213: {128, 1},
		214: {128, 3},
		215: {128, 4},
		216: {128, 4},
		217: {128, 5},
		218: {128, 1},
		219: {301, 0},
		220: {301, 2},
		221: {301, 3},
		222: {301, 3},
		223: {301, 2},
		224: {301, 3},
		225: {301, 3},
		226: {300, 0},
		227: {300, 3},
		228: {300, 4},
		229: {236, 0},
		230: {236, 3},
		231: {236, 3},
		232: {236, 1},
		233: {321, 5},
		234: {235, 0},
		235: {235, 3},
		236: {235, 3},
		237: {235, 4},
		238: {235, 4},
		239: {235, 3},
		240: {235, 4},
		241: {235, 4},
		242: {235, 2},
		243: {235, 2},
		244: {326, 0},
		245: {326, 2},
		246: {326, 2},
		247: {326, 2},
		248: {326, 2},
		249: {326, 2},
		250: {322, 0},
		251: {322, 3},
		252: {323, 0},
		253: {323, 1},
		254: {323, 3},
		255: {323, 2},
		256: {323, 2},
		257: {324, 0},
		258: {324, 3},
		259: {324, 3},
		260: {324, 3},
		261: {324, 3},
		262: {325, 0},
		263: {325, 1},
		264: {325, 2},
		265: {325, 2},
		266: {327, 0},
		267: {327, 2},
		268: {157, 0},
		269: {157, 1},
		270: {156, 1},
		271: {156, 2},
		272: {137, 4},
		273: {137, 5},
		274: {137, 5},
		275: {232, 0},
		276: {232, 4},
		277: {232, 4},
		278: {232, 4},
		279: {232, 4},
		280: {232, 2},
		281: {232, 2},
		282: {232, 2},
		283: {153, 1},
		284: {153, 1},
		285: {153, 1},
		286: {151, 0},
		287: {154, 0},
		288: {152, 0},
		289: {339, 3},
		290: {339, 3},
		291: {339, 2},
		292: {315, 3},
		293: {319, 0},
		294: {229, 0},
		295: {314, 4},
		296: {314, 6},
		297: {356, 0},
		298: {346, 0},
		299: {346, 3},
		300: {345, 1},
		301: {345, 3},
		302: {246, 1},
		303: {169, 1},
		304: {169, 1},
		305: {139, 1},
		306: {139, 1},
		307: {177, 1},
		308: {177, 1},
		309: {177, 1},
		310: {177, 1},
		311: {177, 1},
		312: {177, 1},
		313: {165, 1},
		314: {165, 4},
		315: {165, 5},
		316: {165, 5},
		317: {165, 4},
		318: {165, 5},
		319: {165, 5},
		320: {165, 1},
		321: {165, 4},
		322: {165, 4},
		323: {176, 1},
		324: {176, 4},
		325: {176, 6},
		326: {176, 1},
		327: {176, 4},
		328: {176, 1},
		329: {176, 1},
		330: {175, 1},
		331: {175, 2},
		332: {175, 4},
		333: {170, 1},
		334: {170, 1},
		335: {170, 4},
		336: {170, 7},
		337: {170, 8},
		338: {170, 4},
		339: {170, 7},
		340: {170, 4},
		341: {170, 7},
		342: {170, 10},
		343: {170, 7},
		344: {174, 1},
		345: {174, 1},
		346: {174, 1},
		347: {174, 1},
		348: {178, 1},
		349: {178, 1},
		350: {178, 4},
		351: {164, 4},
		352: {164, 5},
		353: {164, 5},
		354: {164, 5},
		355: {164, 4},
		356: {164, 5},
		357: {164, 6},
		358: {164, 5},
		359: {164, 6},
		360: {164, 1},
		361: {164, 4},
		362: {164, 6},
		363: {164, 1},
		364: {164, 4},
		365: {164, 6},
		366: {164, 1},
		367: {164, 4},
		368: {164, 6},
		369: {164, 1},
		370: {164, 1},
		371: {164, 1},
		372: {164, 2},
		373: {164, 1},
		374: {148, 0},
		375: {148, 2},
		376: {155, 3},
		377: {234, 1},
		378: {234, 2},
		379: {234, 1},
		380: {234, 2},
		381: {234, 1},
		382: {245, 4},
		383: {305, 0},
		384: {305, 3},
		385: {343, 0},
		386: {343, 3},
		387: {343, 4},
		388: {219, 0},
		389: {219, 1},
		390: {218, 2},
		391: {218, 3},
		392: {218, 2},
		393: {218, 3},
		394: {167, 1},
		395: {167, 2},
		396: {168, 2},
		397: {168, 2},
		398: {149, 0},
		399: {149, 1},
		400: {149, 1},
		401: {320, 3},
		402: {320, 2},
		403: {320, 3},
		404: {331, 2},
		405: {332, 1},
		406: {332, 4},
		407: {333, 1},
		408: {333, 4},
		409: {330, 2},
		410: {238, 0},
		411: {238, 3},
		412: {239, 0},
		413: {239, 3},
		414: {228, 1},
		415: {228, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [711][]uint16{
		// 0
		{1: 409, 409, 180: 423, 187: 424, 214: 421, 220: 422, 226: 420, 248: 419, 352: 417, 418},
		{1: 416},
		{1: 415, 1125},
		{1: 414, 414},
		{1: 412, 412},
		// 5
		{1: 411, 411},
		{1: 410, 410},
		{206: 1016},
		{206: 425},
		{44: 294, 294, 183: 432, 267: 430, 273: 427, 276: 431, 287: 428, 291: 429, 357: 426},
		// 10
		{44: 438, 437, 60: 436, 142: 439},
		{207: 435},
		{207: 434},
		{44: 291, 291},
		{44: 290, 290},
		// 15
		{44: 289, 289, 183: 433},
		{44: 288, 288},
		{44: 287, 287},
		{44: 292, 292},
		{44: 293, 293},
		// 20
		{408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 13: 408, 408, 17: 408, 408, 27: 408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 61: 408, 408, 408, 408, 408, 408, 408, 83: 408, 91: 1014, 134: 408},
		{403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 27: 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 58: 403, 403, 61: 403, 403, 403, 403, 403, 403, 403, 82: 403, 403, 403, 86: 403, 403, 89: 403, 403, 403, 94: 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 134: 403, 403},
		{402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 27: 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 58: 402, 402, 61: 402, 402, 402, 402, 402, 402, 402, 82: 402, 402, 402, 86: 402, 402, 89: 402, 402, 402, 94: 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 134: 402, 402},
		{1: 286, 286, 6: 286, 11: 286, 14: 286, 18: 286, 27: 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 61: 286, 286, 286, 286, 286, 134: 441, 349: 440},
		{1: 118, 118, 6: 118, 11: 118, 14: 118, 18: 118, 27: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 451, 61: 118, 118, 118, 118, 118, 344: 449, 346: 450, 355: 448},
		// 25
		{251: 442},
		{133: 446, 188: 444, 271: 445, 284: 443},
		{1: 285, 285, 6: 285, 11: 285, 14: 285, 18: 285, 27: 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 61: 285, 285, 285, 285, 285},
		{1: 284, 284, 6: 284, 11: 284, 14: 284, 18: 284, 27: 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 61: 284, 284, 284, 284, 284},
		{188: 447},
		// 30
		{1: 282, 282, 6: 282, 11: 282, 14: 282, 18: 282, 27: 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 61: 282, 282, 282, 282, 282},
		{1: 283, 283, 6: 283, 11: 283, 14: 283, 18: 283, 27: 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 61: 283, 283, 283, 283, 283},
		{1: 6, 6, 6: 1004, 11: 6, 238: 1003, 330: 1002},
		{1: 279, 279, 6: 279, 11: 279},
		{1: 277, 277, 6: 277, 11: 277, 14: 277, 18: 277, 27: 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 61: 277, 277, 277, 277, 277, 318: 759},
		// 35
		{44: 438, 437, 60: 452, 68: 454, 147: 457, 158: 453, 246: 456, 345: 455},
		{404, 404, 404, 404, 5: 404, 404, 11: 404, 13: 404, 404, 17: 404, 20: 404, 404, 23: 404, 404, 40: 404, 404, 404, 82: 404, 84: 404, 86: 404, 404, 90: 404, 94: 404, 96: 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 135: 404},
		{388, 3: 388},
		{90: 470, 94: 487, 97: 489, 479, 486, 477, 476, 483, 484, 480, 494, 493, 498, 475, 496, 495, 482, 478, 491, 472, 485, 474, 492, 473, 499, 497, 481, 488, 490, 471, 164: 463, 464, 169: 461, 467, 174: 468, 466, 465, 462, 469},
		{458, 3: 459},
		// 40
		{116, 3: 116},
		{114, 3: 114},
		{1: 117, 117, 6: 117, 11: 117, 14: 117, 18: 117, 27: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 61: 117, 117, 117, 117, 117},
		{44: 438, 437, 60: 452, 68: 454, 147: 457, 158: 453, 246: 460},
		{115, 3: 115},
		// 45
		{386, 3: 386, 386, 386, 7: 386, 386, 386, 386, 12: 386, 15: 386, 386, 18: 386, 22: 386, 386, 386, 386, 624, 166: 623, 216: 622},
		{113, 3: 113, 113, 113, 7: 113, 113, 113, 113, 12: 113, 113, 15: 113, 113, 18: 113, 113, 22: 113, 113, 113, 113, 113},
		{112, 3: 112, 112, 112, 7: 112, 112, 112, 112, 12: 112, 112, 15: 112, 112, 18: 112, 112, 22: 112, 112, 112, 112, 112},
		{109, 3: 109, 109, 109, 7: 109, 109, 109, 109, 12: 109, 109, 15: 109, 109, 18: 109, 109, 22: 109, 109, 109, 109, 109},
		{108, 3: 108, 108, 108, 7: 108, 108, 108, 108, 12: 108, 108, 15: 108, 108, 18: 108, 108, 22: 108, 108, 108, 108, 108},
		// 50
		{107, 3: 107, 107, 107, 7: 107, 107, 107, 107, 12: 107, 107, 15: 107, 107, 18: 107, 107, 22: 107, 107, 107, 107, 107},
		{106, 3: 106, 106, 106, 7: 106, 106, 106, 106, 12: 106, 106, 15: 106, 106, 18: 106, 106, 22: 106, 106, 106, 106, 106},
		{105, 3: 105, 105, 105, 7: 105, 105, 105, 105, 12: 105, 105, 15: 105, 105, 18: 105, 105, 22: 105, 105, 105, 105, 105},
		{104, 3: 104, 104, 104, 7: 104, 104, 104, 104, 12: 104, 104, 15: 104, 104, 18: 104, 104, 22: 104, 104, 104, 104, 104},
		{103, 3: 103, 103, 103, 7: 103, 103, 103, 103, 12: 103, 103, 15: 103, 103, 18: 103, 103, 22: 103, 103, 103, 103, 103, 39: 611, 136: 612},
		// 55
		{39: 604},
		{96, 3: 96, 96, 96, 7: 96, 96, 96, 96, 12: 96, 96, 15: 96, 96, 18: 96, 96, 22: 96, 96, 96, 96, 96, 39: 597, 136: 598},
		{39: 594},
		{93, 3: 93, 93, 93, 7: 93, 93, 93, 93, 12: 93, 93, 15: 93, 93, 18: 93, 93, 22: 93, 93, 93, 93, 93, 39: 588},
		{90, 3: 90, 90, 90, 7: 90, 90, 90, 90, 12: 90, 90, 15: 90, 90, 18: 90, 90, 22: 90, 90, 90, 90, 90, 39: 585},
		// 60
		{88, 3: 88, 88, 88, 7: 88, 88, 88, 88, 12: 88, 88, 15: 88, 88, 18: 88, 88, 22: 88, 88, 88, 88, 88},
		{87, 3: 87, 87, 87, 7: 87, 87, 87, 87, 12: 87, 87, 15: 87, 87, 18: 87, 87, 22: 87, 87, 87, 87, 87},
		{86, 3: 86, 86, 86, 7: 86, 86, 86, 86, 12: 86, 86, 15: 86, 86, 18: 86, 86, 22: 86, 86, 86, 86, 86, 98: 584},
		{39: 581},
		{83, 3: 83, 83, 83, 7: 83, 83, 83, 83, 12: 83, 83, 15: 83, 83, 18: 83, 83, 22: 83, 83, 83, 83, 83},
		// 65
		{82, 3: 82, 82, 82, 7: 82, 82, 82, 82, 12: 82, 82, 15: 82, 82, 18: 82, 82, 22: 82, 82, 82, 82, 82, 39: 572},
		{262: 551, 296: 550},
		{72, 3: 72, 72, 72, 7: 72, 72, 72, 72, 12: 72, 72, 15: 72, 72, 18: 72, 72, 22: 72, 72, 72, 72, 72},
		{71, 3: 71, 71, 71, 7: 71, 71, 71, 71, 12: 71, 71, 15: 71, 71, 18: 71, 71, 22: 71, 71, 71, 71, 71},
		{70, 3: 70, 70, 70, 7: 70, 70, 70, 70, 12: 70, 70, 15: 70, 70, 18: 70, 70, 22: 70, 70, 70, 70, 70},
		// 70
		{69, 3: 69, 69, 69, 7: 69, 69, 69, 69, 12: 69, 69, 15: 69, 69, 18: 69, 69, 22: 69, 69, 69, 69, 69},
		{68, 3: 68, 68, 68, 7: 68, 68, 68, 68, 12: 68, 68, 15: 68, 68, 18: 68, 68, 22: 68, 68, 68, 68, 68},
		{67, 3: 67, 67, 67, 7: 67, 67, 67, 67, 12: 67, 67, 15: 67, 67, 18: 67, 67, 22: 67, 67, 67, 67, 67, 39: 547},
		{39: 540, 136: 541},
		{39: 537},
		// 75
		{90: 522, 97: 521},
		{56, 3: 56, 56, 56, 7: 56, 56, 56, 56, 12: 56, 56, 15: 56, 56, 18: 56, 56, 22: 56, 56, 56, 56, 56, 39: 515},
		{53, 3: 53, 53, 53, 7: 53, 53, 53, 53, 12: 53, 53, 15: 53, 53, 18: 53, 53, 22: 53, 53, 53, 53, 53, 39: 509},
		{50, 3: 50, 50, 50, 7: 50, 50, 50, 50, 12: 50, 50, 15: 50, 50, 18: 50, 50, 22: 50, 50, 50, 50, 50, 39: 501},
		{47, 3: 47, 47, 47, 7: 47, 47, 47, 47, 12: 47, 47, 15: 47, 47, 18: 47, 47, 22: 47, 47, 47, 47, 47},
		// 80
		{46, 3: 46, 46, 46, 7: 46, 46, 46, 46, 12: 46, 46, 15: 46, 46, 18: 46, 46, 22: 46, 46, 46, 46, 46},
		{45, 3: 45, 45, 45, 7: 45, 45, 45, 45, 12: 45, 45, 15: 45, 45, 18: 45, 45, 22: 45, 45, 45, 45, 45},
		{286: 500},
		{43, 3: 43, 43, 43, 7: 43, 43, 43, 43, 12: 43, 43, 15: 43, 43, 18: 43, 43, 22: 43, 43, 43, 43, 43},
		{44, 3: 44, 44, 44, 7: 44, 44, 44, 44, 12: 44, 44, 15: 44, 44, 18: 44, 44, 22: 44, 44, 44, 44, 44},
		// 85
		{43: 502, 129: 503, 139: 504},
		{111, 3: 111, 91: 111},
		{110, 3: 110, 91: 110},
		{505, 91: 506},
		{49, 3: 49, 49, 49, 7: 49, 49, 49, 49, 12: 49, 49, 15: 49, 49, 18: 49, 49, 22: 49, 49, 49, 49, 49},
		// 90
		{43: 507},
		{508},
		{48, 3: 48, 48, 48, 7: 48, 48, 48, 48, 12: 48, 48, 15: 48, 48, 18: 48, 48, 22: 48, 48, 48, 48, 48},
		{43: 502, 129: 503, 139: 510},
		{511, 91: 512},
		// 95
		{52, 3: 52, 52, 52, 7: 52, 52, 52, 52, 12: 52, 52, 15: 52, 52, 18: 52, 52, 22: 52, 52, 52, 52, 52},
		{43: 513},
		{514},
		{51, 3: 51, 51, 51, 7: 51, 51, 51, 51, 12: 51, 51, 15: 51, 51, 18: 51, 51, 22: 51, 51, 51, 51, 51},
		{43: 502, 129: 503, 139: 516},
		// 100
		{517, 91: 518},
		{55, 3: 55, 55, 55, 7: 55, 55, 55, 55, 12: 55, 55, 15: 55, 55, 18: 55, 55, 22: 55, 55, 55, 55, 55},
		{43: 519},
		{520},
		{54, 3: 54, 54, 54, 7: 54, 54, 54, 54, 12: 54, 54, 15: 54, 54, 18: 54, 54, 22: 54, 54, 54, 54, 54},
		// 105
		{39: 530, 136: 531},
		{39: 523, 136: 524},
		{43: 528},
		{39: 525},
		{43: 526},
		// 110
		{527},
		{57, 3: 57, 57, 57, 7: 57, 57, 57, 57, 12: 57, 57, 15: 57, 57, 18: 57, 57, 22: 57, 57, 57, 57, 57},
		{529},
		{58, 3: 58, 58, 58, 7: 58, 58, 58, 58, 12: 58, 58, 15: 58, 58, 18: 58, 58, 22: 58, 58, 58, 58, 58},
		{43: 535},
		// 115
		{39: 532},
		{43: 533},
		{534},
		{59, 3: 59, 59, 59, 7: 59, 59, 59, 59, 12: 59, 59, 15: 59, 59, 18: 59, 59, 22: 59, 59, 59, 59, 59},
		{536},
		// 120
		{60, 3: 60, 60, 60, 7: 60, 60, 60, 60, 12: 60, 60, 15: 60, 60, 18: 60, 60, 22: 60, 60, 60, 60, 60},
		{43: 538},
		{539},
		{61, 3: 61, 61, 61, 7: 61, 61, 61, 61, 12: 61, 61, 15: 61, 61, 18: 61, 61, 22: 61, 61, 61, 61, 61},
		{43: 545},
		// 125
		{39: 542},
		{43: 543},
		{544},
		{64, 3: 64, 64, 64, 7: 64, 64, 64, 64, 12: 64, 64, 15: 64, 64, 18: 64, 64, 22: 64, 64, 64, 64, 64},
		{546},
		// 130
		{65, 3: 65, 65, 65, 7: 65, 65, 65, 65, 12: 65, 65, 15: 65, 65, 18: 65, 65, 22: 65, 65, 65, 65, 65},
		{43: 548},
		{549},
		{66, 3: 66, 66, 66, 7: 66, 66, 66, 66, 12: 66, 66, 15: 66, 66, 18: 66, 66, 22: 66, 66, 66, 66, 66},
		{39: 566, 96: 565},
		// 135
		{39: 553, 96: 552},
		{204: 561},
		{43: 554},
		{555},
		{96: 556},
		// 140
		{204: 557},
		{75, 3: 75, 75, 75, 7: 75, 75, 75, 75, 12: 75, 75, 15: 75, 75, 18: 75, 75, 22: 75, 75, 75, 75, 75, 39: 558},
		{43: 559},
		{560},
		{74, 3: 74, 74, 74, 7: 74, 74, 74, 74, 12: 74, 74, 15: 74, 74, 18: 74, 74, 22: 74, 74, 74, 74, 74},
		// 145
		{76, 3: 76, 76, 76, 7: 76, 76, 76, 76, 12: 76, 76, 15: 76, 76, 18: 76, 76, 22: 76, 76, 76, 76, 76, 39: 562},
		{43: 563},
		{564},
		{73, 3: 73, 73, 73, 7: 73, 73, 73, 73, 12: 73, 73, 15: 73, 73, 18: 73, 73, 22: 73, 73, 73, 73, 73},
		{197: 571},
		// 150
		{43: 567},
		{568},
		{96: 569},
		{197: 570},
		{77, 3: 77, 77, 77, 7: 77, 77, 77, 77, 12: 77, 77, 15: 77, 77, 18: 77, 77, 22: 77, 77, 77, 77, 77},
		// 155
		{78, 3: 78, 78, 78, 7: 78, 78, 78, 78, 12: 78, 78, 15: 78, 78, 18: 78, 78, 22: 78, 78, 78, 78, 78},
		{43: 573},
		{574},
		{81, 3: 81, 81, 81, 7: 81, 81, 81, 81, 12: 81, 81, 15: 575, 81, 18: 81, 81, 22: 81, 81, 81, 81, 81},
		{208: 576, 281: 577},
		// 160
		{212: 580},
		{208: 578},
		{212: 579},
		{79, 3: 79, 79, 79, 7: 79, 79, 79, 79, 12: 79, 79, 15: 79, 79, 18: 79, 79, 22: 79, 79, 79, 79, 79},
		{80, 3: 80, 80, 80, 7: 80, 80, 80, 80, 12: 80, 80, 15: 80, 80, 18: 80, 80, 22: 80, 80, 80, 80, 80},
		// 165
		{43: 582},
		{583},
		{84, 3: 84, 84, 84, 7: 84, 84, 84, 84, 12: 84, 84, 15: 84, 84, 18: 84, 84, 22: 84, 84, 84, 84, 84},
		{85, 3: 85, 85, 85, 7: 85, 85, 85, 85, 12: 85, 85, 15: 85, 85, 18: 85, 85, 22: 85, 85, 85, 85, 85},
		{43: 502, 129: 503, 139: 586},
		// 170
		{587},
		{89, 3: 89, 89, 89, 7: 89, 89, 89, 89, 12: 89, 89, 15: 89, 89, 18: 89, 89, 22: 89, 89, 89, 89, 89},
		{43: 502, 129: 503, 139: 589},
		{590, 3: 591},
		{92, 3: 92, 92, 92, 7: 92, 92, 92, 92, 12: 92, 92, 15: 92, 92, 18: 92, 92, 22: 92, 92, 92, 92, 92},
		// 175
		{43: 592},
		{593},
		{91, 3: 91, 91, 91, 7: 91, 91, 91, 91, 12: 91, 91, 15: 91, 91, 18: 91, 91, 22: 91, 91, 91, 91, 91},
		{43: 595},
		{596},
		// 180
		{94, 3: 94, 94, 94, 7: 94, 94, 94, 94, 12: 94, 94, 15: 94, 94, 18: 94, 94, 22: 94, 94, 94, 94, 94},
		{43: 602},
		{39: 599},
		{43: 600},
		{601},
		// 185
		{62, 3: 62, 62, 62, 7: 62, 62, 62, 62, 12: 62, 62, 15: 62, 62, 18: 62, 62, 22: 62, 62, 62, 62, 62},
		{603},
		{95, 3: 95, 95, 95, 7: 95, 95, 95, 95, 12: 95, 95, 15: 95, 95, 18: 95, 95, 22: 95, 95, 95, 95, 95},
		{43: 605},
		{606, 90: 608, 184: 607},
		// 190
		{99, 3: 99, 99, 99, 7: 99, 99, 99, 99, 12: 99, 99, 15: 99, 99, 18: 99, 99, 22: 99, 99, 99, 99, 99},
		{610},
		{609},
		{97, 3: 97, 97, 97, 7: 97, 97, 97, 97, 12: 97, 97, 15: 97, 97, 18: 97, 97, 22: 97, 97, 97, 97, 97},
		{98, 3: 98, 98, 98, 7: 98, 98, 98, 98, 12: 98, 98, 15: 98, 98, 18: 98, 98, 22: 98, 98, 98, 98, 98},
		// 195
		{43: 616},
		{39: 613},
		{43: 614},
		{615},
		{63, 3: 63, 63, 63, 7: 63, 63, 63, 63, 12: 63, 63, 15: 63, 63, 18: 63, 63, 22: 63, 63, 63, 63, 63},
		// 200
		{617, 90: 619, 184: 618},
		{102, 3: 102, 102, 102, 7: 102, 102, 102, 102, 12: 102, 102, 15: 102, 102, 18: 102, 102, 22: 102, 102, 102, 102, 102},
		{621},
		{620},
		{100, 3: 100, 100, 100, 7: 100, 100, 100, 100, 12: 100, 100, 15: 100, 100, 18: 100, 100, 22: 100, 100, 100, 100, 100},
		// 205
		{101, 3: 101, 101, 101, 7: 101, 101, 101, 101, 12: 101, 101, 15: 101, 101, 18: 101, 101, 22: 101, 101, 101, 101, 101},
		{383, 3: 383, 383, 383, 7: 383, 383, 383, 383, 12: 383, 15: 383, 383, 18: 383, 22: 383, 383, 383, 627, 351: 626},
		{385, 3: 385, 385, 385, 7: 385, 385, 385, 385, 12: 385, 385, 15: 385, 385, 18: 385, 385, 22: 385, 385, 385, 385},
		{44: 438, 437, 60: 625},
		{384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 18: 384, 384, 22: 384, 384, 384, 384, 27: 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 61: 384, 384, 384, 384, 384},
		// 210
		{381, 3: 381, 381, 381, 7: 381, 381, 381, 381, 12: 381, 15: 381, 381, 18: 381, 22: 381, 630, 631, 173: 629, 329: 628},
		{382, 3: 382, 382, 382, 7: 382, 382, 382, 382, 12: 382, 15: 382, 382, 18: 382, 22: 382, 382, 382},
		{377, 3: 377, 377, 377, 7: 377, 377, 377, 377, 12: 377, 15: 377, 377, 18: 635, 22: 636, 221: 633, 632, 230: 634},
		{380, 3: 380, 380, 380, 7: 380, 380, 380, 380, 12: 380, 15: 380, 380, 18: 380, 22: 380},
		{379, 3: 379, 379, 379, 7: 379, 379, 379, 379, 12: 379, 15: 379, 379, 18: 379, 22: 379},
		// 215
		{378, 3: 378, 378, 378, 7: 378, 378, 378, 378, 12: 378, 15: 378, 378, 18: 378, 22: 378},
		{349, 3: 349, 349, 349, 7: 349, 349, 349, 349, 12: 687, 15: 349, 349, 227: 686},
		{376, 3: 376, 376, 376, 7: 376, 376, 376, 376, 12: 376, 15: 376, 376, 19: 376},
		{375, 3: 375, 375, 375, 7: 375, 375, 375, 375, 12: 375, 15: 375, 375, 19: 375},
		{17: 681, 43: 682, 683, 228: 680},
		// 220
		{144: 637, 639, 253: 638},
		{131: 678},
		{144: 675},
		{18: 640},
		{64: 642, 144: 641},
		// 225
		{131: 673},
		{4: 643},
		{144: 644},
		{131: 645},
		{367, 3: 367, 367, 367, 7: 367, 367, 367, 367, 12: 367, 15: 367, 367, 19: 367, 39: 647, 150: 646},
		// 230
		{368, 3: 368, 368, 368, 7: 368, 368, 368, 368, 12: 368, 15: 368, 368, 19: 368},
		{365, 69: 658, 656, 72: 651, 652, 654, 659, 657, 653, 655, 661, 660, 650, 231: 649, 317: 648},
		{671, 69: 658, 656, 72: 651, 652, 654, 659, 657, 653, 655, 661, 660, 650, 231: 672},
		{364, 69: 364, 364, 72: 364, 364, 364, 364, 364, 364, 364, 364, 364, 364},
		{15: 667},
		// 235
		{145: 665},
		{43: 664},
		{358, 69: 358, 358, 72: 358, 358, 358, 358, 358, 358, 358, 358, 358, 358},
		{43: 663},
		{356, 69: 356, 356, 72: 356, 356, 356, 356, 356, 356, 356, 356, 356, 356},
		// 240
		{355, 69: 355, 355, 72: 355, 355, 355, 355, 355, 355, 355, 355, 355, 355},
		{354, 69: 354, 354, 72: 354, 354, 354, 354, 354, 354, 354, 354, 354, 354},
		{43: 662},
		{352, 69: 352, 352, 72: 352, 352, 352, 352, 352, 352, 352, 352, 352, 352},
		{351, 69: 351, 351, 72: 351, 351, 351, 351, 351, 351, 351, 351, 351, 351},
		// 245
		{350, 69: 350, 350, 72: 350, 350, 350, 350, 350, 350, 350, 350, 350, 350},
		{353, 69: 353, 353, 72: 353, 353, 353, 353, 353, 353, 353, 353, 353, 353},
		{357, 69: 357, 357, 72: 357, 357, 357, 357, 357, 357, 357, 357, 357, 357},
		{359, 69: 359, 359, 72: 359, 359, 359, 359, 359, 359, 359, 359, 359, 359},
		{43: 666},
		// 250
		{360, 69: 360, 360, 72: 360, 360, 360, 360, 360, 360, 360, 360, 360, 360},
		{43: 668, 195: 669},
		{362, 69: 362, 362, 72: 362, 362, 362, 362, 362, 362, 362, 362, 362, 362},
		{295: 670},
		{361, 69: 361, 361, 72: 361, 361, 361, 361, 361, 361, 361, 361, 361, 361},
		// 255
		{366, 3: 366, 366, 366, 7: 366, 366, 366, 366, 12: 366, 15: 366, 366, 19: 366},
		{363, 69: 363, 363, 72: 363, 363, 363, 363, 363, 363, 363, 363, 363, 363},
		{367, 3: 367, 367, 367, 7: 367, 367, 367, 367, 12: 367, 15: 367, 367, 19: 367, 39: 647, 150: 674},
		{369, 3: 369, 369, 369, 7: 369, 369, 369, 369, 12: 369, 15: 369, 369, 19: 369},
		{131: 676},
		// 260
		{367, 3: 367, 367, 367, 7: 367, 367, 367, 367, 12: 367, 15: 367, 367, 19: 367, 39: 647, 150: 677},
		{371, 3: 371, 371, 371, 7: 371, 371, 371, 371, 12: 371, 15: 371, 371, 19: 371},
		{367, 3: 367, 367, 367, 7: 367, 367, 367, 367, 12: 367, 15: 367, 367, 19: 367, 39: 647, 150: 679},
		{372, 3: 372, 372, 372, 7: 372, 372, 372, 372, 12: 372, 15: 372, 372, 19: 372},
		{374, 3: 374, 374, 374, 7: 374, 374, 374, 374, 12: 374, 15: 374, 374, 19: 374},
		// 265
		{4: 684},
		{2, 3: 2, 2, 2, 7: 2, 2, 2, 2, 12: 2, 15: 2, 2, 19: 2},
		{1, 3: 1, 1, 1, 7: 1, 1, 1, 1, 12: 1, 15: 1, 1, 19: 1},
		{43: 682, 683, 228: 685},
		{373, 3: 373, 373, 373, 7: 373, 373, 373, 373, 12: 373, 15: 373, 373, 19: 373},
		// 270
		{337, 3: 337, 42, 42, 7: 42, 42, 42, 706, 15: 709, 708, 148: 707, 155: 705, 233: 704, 303: 702, 320: 703},
		{346, 3: 346, 346, 346, 7: 346, 346, 346, 346, 15: 346, 346, 346, 89: 346, 95: 346, 161: 346, 294: 690, 311: 689, 313: 688},
		{348, 3: 348, 348, 348, 7: 348, 348, 348, 348, 15: 348, 348},
		{344, 3: 344, 344, 344, 7: 344, 344, 344, 344, 15: 344, 344, 344, 89: 344, 95: 344, 161: 693, 316: 692},
		{95: 691},
		// 275
		{345, 3: 345, 345, 345, 7: 345, 345, 345, 345, 15: 345, 345, 345, 89: 345, 95: 345, 161: 345},
		{342, 3: 342, 342, 342, 7: 342, 342, 342, 342, 15: 342, 342, 342, 89: 342, 95: 697, 328: 696},
		{145: 694},
		{44: 438, 437, 60: 695},
		{343, 3: 343, 343, 343, 7: 343, 343, 343, 343, 15: 343, 343, 343, 89: 343, 95: 343},
		// 280
		{340, 3: 340, 340, 340, 7: 340, 340, 340, 340, 15: 340, 340, 700, 89: 699, 348: 698},
		{341, 3: 341, 341, 341, 7: 341, 341, 341, 341, 15: 341, 341, 341, 89: 341},
		{347, 3: 347, 347, 347, 7: 347, 347, 347, 347, 15: 347, 347},
		{339, 3: 339, 339, 339, 7: 339, 339, 339, 339, 15: 339, 339},
		{89: 701},
		// 285
		{338, 3: 338, 338, 338, 7: 338, 338, 338, 338, 15: 338, 338},
		{387, 3: 387},
		{336, 3: 336},
		{335, 3: 335, 42, 42, 7: 42, 42, 42, 706, 148: 757, 155: 756},
		{334, 3: 334, 334, 334, 7: 334, 334, 334, 334},
		// 290
		{44: 438, 437, 60: 755},
		{4: 714, 715, 7: 717, 719, 716, 234: 713, 245: 718},
		{278: 711},
		{94: 710},
		{14, 3: 14},
		// 295
		{44: 438, 437, 60: 436, 142: 712},
		{15, 3: 15},
		{28, 3: 28, 28, 738, 7: 28, 28, 28, 28, 66: 737, 739, 167: 735, 736, 218: 734, 754},
		{39, 3: 39, 39, 39, 7: 39, 39, 39, 39, 66: 39, 39},
		{4: 753},
		// 300
		{37, 3: 37, 37, 37, 7: 37, 37, 37, 37, 66: 37, 37},
		{280: 752},
		{35, 3: 35, 35, 738, 7: 35, 35, 35, 35, 66: 737, 739, 167: 735, 736, 218: 734, 740},
		{44: 438, 437, 60: 436, 142: 720},
		{33, 3: 33, 33, 33, 7: 33, 33, 33, 33, 39: 722, 64: 33, 66: 33, 33, 305: 721},
		// 305
		{31, 3: 31, 31, 31, 7: 31, 31, 31, 31, 64: 729, 66: 31, 31, 343: 728},
		{44: 438, 437, 60: 452, 68: 723, 125: 724},
		{406, 3: 406},
		{726, 3: 725},
		{44: 438, 437, 60: 452, 68: 727},
		// 310
		{32, 3: 32, 32, 32, 7: 32, 32, 32, 32, 64: 32, 66: 32, 32},
		{405, 3: 405},
		{34, 3: 34, 34, 34, 7: 34, 34, 34, 34, 66: 34, 34},
		{160: 730},
		{40: 732, 84: 731},
		// 315
		{30, 3: 30, 30, 30, 7: 30, 30, 30, 30, 66: 30, 30},
		{4: 733},
		{29, 3: 29, 29, 29, 7: 29, 29, 29, 29, 66: 29, 29},
		{27, 3: 27, 27, 27, 7: 27, 27, 27, 27},
		{18, 3: 18, 18, 18, 7: 18, 18, 18, 18, 67: 739, 92: 747, 746, 149: 749, 168: 750},
		// 320
		{18, 3: 18, 18, 738, 7: 18, 18, 18, 18, 66: 737, 92: 747, 746, 149: 744, 167: 745},
		{22, 3: 22, 22, 22, 7: 22, 22, 22, 22, 67: 22, 92: 22, 22},
		{66: 743},
		{189: 741, 192: 742},
		{13, 3: 13},
		// 325
		{20, 3: 20, 20, 20, 7: 20, 20, 20, 20, 66: 20, 92: 20, 20},
		{19, 3: 19, 19, 19, 7: 19, 19, 19, 19, 66: 19, 92: 19, 19},
		{21, 3: 21, 21, 21, 7: 21, 21, 21, 21, 67: 21, 92: 21, 21},
		{24, 3: 24, 24, 24, 7: 24, 24, 24, 24},
		{18, 3: 18, 18, 18, 7: 18, 18, 18, 18, 92: 747, 746, 149: 748},
		// 330
		{17, 3: 17, 17, 17, 7: 17, 17, 17, 17},
		{16, 3: 16, 16, 16, 7: 16, 16, 16, 16},
		{23, 3: 23, 23, 23, 7: 23, 23, 23, 23},
		{26, 3: 26, 26, 26, 7: 26, 26, 26, 26},
		{18, 3: 18, 18, 18, 7: 18, 18, 18, 18, 92: 747, 746, 149: 751},
		// 335
		{25, 3: 25, 25, 25, 7: 25, 25, 25, 25},
		{36, 3: 36, 36, 36, 7: 36, 36, 36, 36, 66: 36, 36},
		{38, 3: 38, 38, 38, 7: 38, 38, 38, 38, 66: 38, 38},
		{40, 3: 40, 40, 40, 7: 40, 40, 40, 40},
		{4: 41, 41, 7: 41, 41, 41},
		// 340
		{333, 3: 333, 333, 333, 7: 333, 333, 333, 333},
		{4: 714, 715, 7: 717, 719, 716, 234: 713, 245: 758},
		{35, 3: 35, 35, 35, 7: 35, 35, 35, 35, 66: 35, 35},
		{1: 276, 276, 6: 276, 11: 276, 14: 276, 18: 276, 27: 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 61: 276, 276, 276, 276, 276, 297: 760},
		{1: 275, 275, 6: 275, 11: 275, 14: 275, 18: 762, 27: 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 61: 275, 275, 275, 275, 275, 307: 761},
		// 345
		{1: 272, 272, 6: 272, 11: 272, 14: 272, 27: 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 61: 272, 272, 272, 766, 272, 336: 764, 765},
		{26: 624, 166: 763},
		{1: 274, 274, 6: 274, 11: 274, 14: 274, 27: 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 61: 274, 274, 274, 274, 274},
		{1: 266, 266, 6: 266, 11: 266, 14: 261, 27: 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 61: 261, 261, 781, 65: 782, 309: 780, 342: 779},
		{1: 269, 269, 6: 269, 11: 269, 14: 269, 27: 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 61: 269, 269, 269, 773, 269, 338: 772},
		// 350
		{186: 767},
		{13: 768, 199: 769},
		{190: 771},
		{190: 770},
		{1: 270, 270, 6: 270, 11: 270, 14: 270, 27: 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 61: 270, 270, 270, 270, 270},
		// 355
		{1: 271, 271, 6: 271, 11: 271, 14: 271, 27: 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 61: 271, 271, 271, 271, 271},
		{1: 273, 273, 6: 273, 11: 273, 14: 273, 27: 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 61: 273, 273, 273, 65: 273},
		{186: 774},
		{160: 775, 199: 776},
		{203: 778},
		// 360
		{203: 777},
		{1: 267, 267, 6: 267, 11: 267, 14: 267, 27: 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 61: 267, 267, 267, 65: 267},
		{1: 268, 268, 6: 268, 11: 268, 14: 268, 27: 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 61: 268, 268, 268, 65: 268},
		{1: 119, 119, 6: 119, 11: 119, 356: 1001},
		{14: 810, 27: 808, 809, 811, 807, 801, 805, 802, 806, 799, 800, 804, 795, 61: 812, 791, 126: 798, 803, 797, 138: 796, 140: 794, 793, 179: 790, 314: 792},
		// 365
		{44: 438, 437, 60: 786},
		{260: 783},
		{189: 785, 192: 784},
		{14: 260, 27: 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 61: 260, 260},
		{14: 259, 27: 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 61: 259, 259},
		// 370
		{39: 787},
		{44: 438, 437, 60: 452, 68: 723, 125: 788},
		{789, 3: 725},
		{1: 262, 262, 6: 262, 11: 262},
		{1: 205, 205, 6: 205, 11: 205, 14: 810, 17: 205, 20: 205, 205, 27: 808, 809, 811, 807, 801, 805, 802, 806, 799, 800, 804, 795, 126: 798, 803, 998, 138: 796, 140: 794, 904, 250: 997},
		// 375
		{61: 899, 275: 897, 277: 898, 339: 896},
		{1: 263, 263, 6: 263, 11: 263},
		{1: 256, 256, 6: 256, 11: 256, 14: 256, 17: 256, 20: 256, 256, 27: 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256},
		{1: 254, 254, 6: 254, 11: 254, 14: 254, 17: 254, 20: 254, 254, 27: 254, 254, 254, 254, 801, 254, 802, 254, 799, 800, 804, 254, 126: 895, 803},
		{40: 893, 44: 438, 437, 60: 892},
		// 380
		{1: 251, 251, 6: 251, 11: 251, 14: 251, 17: 251, 20: 251, 251, 27: 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251},
		{1: 250, 250, 6: 250, 11: 250, 14: 250, 17: 250, 20: 250, 250, 27: 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250},
		{1: 249, 249, 6: 249, 11: 249, 14: 249, 17: 249, 20: 249, 249, 27: 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249},
		{43: 891},
		{43: 890},
		// 385
		{43: 889},
		{43: 888},
		{1: 243, 243, 6: 243, 11: 243, 14: 243, 17: 243, 20: 243, 243, 27: 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243},
		{39: 840},
		{1: 208, 208, 6: 208, 11: 208, 14: 208, 17: 208, 20: 208, 208, 27: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208},
		// 390
		{1: 207, 207, 6: 207, 11: 207, 14: 207, 17: 207, 20: 207, 207, 27: 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207},
		{1: 206, 206, 6: 206, 11: 206, 14: 206, 17: 206, 20: 206, 206, 27: 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206},
		{1: 203, 203, 6: 203, 11: 203, 14: 203, 17: 203, 20: 203, 203, 27: 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203},
		{205: 836},
		{205: 818},
		// 395
		{1: 198, 198, 6: 198, 11: 198, 14: 198, 17: 198, 20: 198, 198, 27: 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198},
		{198: 813},
		{255: 814},
		{1: 122, 122, 6: 122, 11: 122, 202: 122, 229: 815},
		{1: 121, 121, 6: 121, 11: 121, 202: 816},
		// 400
		{195: 817},
		{1: 120, 120, 6: 120, 11: 120},
		{27: 819},
		{1: 197, 197, 6: 197, 11: 197, 14: 197, 17: 197, 20: 197, 197, 27: 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 85: 821, 301: 820},
		{1: 190, 190, 6: 190, 11: 190, 14: 190, 17: 830, 20: 190, 190, 27: 190, 829, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 300: 828},
		// 405
		{200: 822, 254: 823},
		{1: 196, 196, 6: 196, 11: 196, 14: 196, 17: 196, 20: 196, 196, 27: 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 130: 827, 132: 826},
		{1: 193, 193, 6: 193, 11: 193, 14: 193, 17: 193, 20: 193, 193, 27: 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 130: 825, 132: 824},
		{1: 192, 192, 6: 192, 11: 192, 14: 192, 17: 192, 20: 192, 192, 27: 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192},
		{1: 191, 191, 6: 191, 11: 191, 14: 191, 17: 191, 20: 191, 191, 27: 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191},
		// 410
		{1: 195, 195, 6: 195, 11: 195, 14: 195, 17: 195, 20: 195, 195, 27: 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195},
		{1: 194, 194, 6: 194, 11: 194, 14: 194, 17: 194, 20: 194, 194, 27: 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194},
		{1: 199, 199, 6: 199, 11: 199, 14: 199, 17: 199, 20: 199, 199, 27: 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199},
		{193: 834},
		{28: 831},
		// 415
		{193: 832},
		{196: 833},
		{1: 188, 188, 6: 188, 11: 188, 14: 188, 17: 188, 20: 188, 188, 27: 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188},
		{196: 835},
		{1: 189, 189, 6: 189, 11: 189, 14: 189, 17: 189, 20: 189, 189, 27: 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189},
		// 420
		{27: 837},
		{1: 202, 202, 6: 202, 11: 202, 14: 202, 17: 202, 20: 202, 202, 27: 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 252: 839, 256: 838},
		{1: 201, 201, 6: 201, 11: 201, 14: 201, 17: 201, 20: 201, 201, 27: 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201},
		{1: 200, 200, 6: 200, 11: 200, 14: 200, 17: 200, 20: 200, 200, 27: 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200},
		{12: 855, 46: 852, 854, 853, 850, 849, 843, 846, 847, 845, 844, 851, 848, 249: 842, 354: 841},
		// 425
		{886, 12: 855, 46: 852, 854, 853, 850, 849, 843, 846, 847, 845, 844, 851, 848, 249: 887},
		{241, 12: 241, 46: 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241},
		{43: 867, 159: 885},
		{43: 867, 159: 884},
		{43: 883},
		// 430
		{43: 881, 209: 882},
		{43: 867, 159: 880, 209: 879},
		{43: 878},
		{43: 877},
		{274: 875},
		// 435
		{229, 4: 866, 12: 229, 43: 867, 46: 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 159: 865},
		{18: 864, 162: 862, 289: 863},
		{18: 861, 133: 860, 162: 859},
		{18: 858, 133: 857, 162: 856},
		{217, 12: 217, 46: 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217},
		// 440
		{220, 12: 220, 46: 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220},
		{219, 12: 219, 46: 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219},
		{218, 12: 218, 46: 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218},
		{223, 12: 223, 46: 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223},
		{222, 12: 222, 46: 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222},
		// 445
		{221, 12: 221, 46: 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221},
		{226, 12: 226, 46: 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226},
		{225, 12: 225, 46: 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225},
		{224, 12: 224, 46: 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224},
		{228, 12: 228, 46: 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228},
		// 450
		{227, 12: 227, 46: 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227},
		{215, 12: 215, 46: 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 268: 874, 272: 871, 279: 869, 282: 870, 285: 873, 293: 872, 350: 868},
		{216, 12: 216, 46: 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216},
		{214, 12: 214, 46: 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214},
		{213, 12: 213, 46: 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213},
		// 455
		{212, 12: 212, 46: 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212},
		{211, 12: 211, 46: 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211},
		{210, 12: 210, 46: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210},
		{209, 12: 209, 46: 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209},
		{43: 876},
		// 460
		{230, 12: 230, 46: 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230},
		{231, 12: 231, 46: 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231},
		{232, 12: 232, 46: 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232},
		{234, 12: 234, 46: 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234},
		{233, 12: 233, 46: 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233},
		// 465
		{236, 12: 236, 46: 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236},
		{235, 12: 235, 46: 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235},
		{237, 12: 237, 46: 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237},
		{238, 12: 238, 46: 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238},
		{239, 12: 239, 46: 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239},
		// 470
		{1: 242, 242, 6: 242, 11: 242, 14: 242, 17: 242, 20: 242, 242, 27: 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242},
		{240, 12: 240, 46: 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240},
		{1: 244, 244, 6: 244, 11: 244, 14: 244, 17: 244, 20: 244, 244, 27: 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244},
		{1: 245, 245, 6: 245, 11: 245, 14: 245, 17: 245, 20: 245, 245, 27: 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245},
		{1: 246, 246, 6: 246, 11: 246, 14: 246, 17: 246, 20: 246, 246, 27: 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246},
		// 475
		{1: 247, 247, 6: 247, 11: 247, 14: 247, 17: 247, 20: 247, 247, 27: 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247},
		{1: 253, 253, 6: 253, 11: 253, 14: 253, 17: 253, 20: 253, 253, 27: 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253},
		{44: 438, 437, 60: 894},
		{1: 252, 252, 6: 252, 11: 252, 14: 252, 17: 252, 20: 252, 252, 27: 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252},
		{1: 248, 248, 6: 248, 11: 248, 14: 248, 17: 248, 20: 248, 248, 27: 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248},
		// 480
		{1: 264, 264, 6: 264, 11: 264},
		{1: 258, 258, 6: 258, 11: 258, 14: 810, 17: 258, 20: 258, 258, 27: 808, 809, 811, 807, 801, 805, 802, 806, 799, 800, 804, 795, 126: 798, 803, 797, 138: 796, 140: 794, 793, 179: 901, 247: 905},
		{1: 258, 258, 6: 258, 11: 258, 14: 810, 27: 808, 809, 811, 807, 801, 805, 802, 806, 799, 800, 804, 795, 126: 798, 803, 797, 138: 796, 140: 794, 793, 179: 901, 247: 902},
		{1: 122, 122, 6: 122, 11: 122, 229: 900},
		{1: 125, 125, 6: 125, 11: 125},
		// 485
		{1: 257, 257, 6: 257, 11: 257, 14: 810, 17: 257, 20: 257, 257, 27: 808, 809, 811, 807, 801, 805, 802, 806, 799, 800, 804, 795, 126: 798, 803, 797, 138: 796, 140: 794, 904},
		{1: 123, 123, 6: 123, 11: 123, 319: 903},
		{1: 126, 126, 6: 126, 11: 126},
		{1: 255, 255, 6: 255, 11: 255, 14: 255, 17: 255, 20: 255, 255, 27: 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},
		{1: 205, 205, 6: 205, 11: 205, 14: 810, 17: 205, 20: 205, 205, 27: 808, 809, 811, 128: 906, 250: 908, 315: 907},
		// 490
		{1: 204, 204, 6: 204, 11: 204, 17: 204, 20: 204, 204},
		{1: 127, 127, 6: 127, 11: 127},
		{1: 187, 187, 6: 187, 11: 187, 17: 910, 20: 187, 909, 137: 913, 156: 912, 911, 236: 914},
		{1: 182, 182, 6: 182, 11: 182, 17: 943, 20: 182, 182, 39: 944, 58: 182, 182, 71: 182, 88: 182, 163: 942, 235: 964, 321: 963},
		{21: 961},
		// 495
		{1: 184, 184, 6: 184, 11: 184, 20: 184},
		{1: 147, 147, 6: 147, 11: 147, 17: 937, 20: 147, 936, 137: 935},
		{1: 146, 146, 6: 146, 11: 146, 17: 146, 20: 146, 146},
		{1: 141, 141, 6: 141, 11: 141, 20: 915, 232: 916},
		{41: 917, 160: 918, 263: 921, 920, 923, 269: 919, 922},
		// 500
		{1: 124, 124, 6: 124, 11: 124},
		{146: 933},
		{146: 931},
		{146: 929},
		{146: 924},
		// 505
		{1: 136, 136, 6: 136, 11: 136},
		{1: 135, 135, 6: 135, 11: 135},
		{1: 134, 134, 6: 134, 11: 134},
		{1: 130, 130, 6: 130, 11: 130, 151: 926, 928, 925, 927},
		{1: 137, 137, 6: 137, 11: 137},
		// 510
		{1: 133, 133, 6: 133, 11: 133},
		{1: 132, 132, 6: 132, 11: 132},
		{1: 131, 131, 6: 131, 11: 131},
		{1: 130, 130, 6: 130, 11: 130, 151: 926, 928, 930, 927},
		{1: 138, 138, 6: 138, 11: 138},
		// 515
		{1: 130, 130, 6: 130, 11: 130, 151: 926, 928, 932, 927},
		{1: 139, 139, 6: 139, 11: 139},
		{1: 130, 130, 6: 130, 11: 130, 151: 926, 928, 934, 927},
		{1: 140, 140, 6: 140, 11: 140},
		{1: 145, 145, 6: 145, 11: 145, 17: 145, 20: 145, 145},
		// 520
		{17: 943, 39: 944, 163: 942, 235: 945},
		{21: 938},
		{39: 939},
		{44: 438, 437, 60: 452, 68: 723, 125: 940},
		{941, 3: 725},
		// 525
		{1: 142, 142, 6: 142, 11: 142, 17: 142, 20: 142, 142},
		{85: 952, 182: 953},
		{163: 951},
		{44: 438, 437, 60: 452, 68: 723, 125: 949},
		{39: 946},
		// 530
		{44: 438, 437, 60: 452, 68: 723, 125: 947},
		{948, 3: 725},
		{1: 143, 143, 6: 143, 11: 143, 17: 143, 20: 143, 143},
		{950, 3: 725},
		{1: 144, 144, 6: 144, 11: 144, 17: 144, 20: 144, 144},
		// 535
		{1: 174, 174, 6: 174, 11: 174, 17: 174, 20: 174, 174, 39: 174, 58: 174, 174, 71: 174, 88: 174},
		{200: 955, 257: 956, 266: 954},
		{1: 173, 173, 6: 173, 11: 173, 17: 173, 20: 173, 173, 39: 173, 58: 173, 173, 71: 173, 88: 173},
		{1: 181, 181, 6: 181, 11: 181, 17: 181, 20: 181, 181, 39: 181, 58: 181, 181, 71: 181, 88: 181},
		{1: 180, 180, 6: 180, 11: 180, 17: 180, 20: 180, 180, 39: 180, 58: 180, 180, 71: 180, 88: 180, 130: 960, 132: 959},
		// 540
		{1: 177, 177, 6: 177, 11: 177, 17: 177, 20: 177, 177, 39: 177, 58: 177, 177, 71: 177, 88: 177, 130: 958, 132: 957},
		{1: 176, 176, 6: 176, 11: 176, 17: 176, 20: 176, 176, 39: 176, 58: 176, 176, 71: 176, 88: 176},
		{1: 175, 175, 6: 175, 11: 175, 17: 175, 20: 175, 175, 39: 175, 58: 175, 175, 71: 175, 88: 175},
		{1: 179, 179, 6: 179, 11: 179, 17: 179, 20: 179, 179, 39: 179, 58: 179, 179, 71: 179, 88: 179},
		{1: 178, 178, 6: 178, 11: 178, 17: 178, 20: 178, 178, 39: 178, 58: 178, 178, 71: 178, 88: 178},
		// 545
		{1: 148, 148, 6: 148, 11: 148, 17: 937, 20: 148, 936, 39: 939, 137: 913, 156: 912, 962},
		{1: 185, 185, 6: 185, 11: 185, 20: 185},
		{1: 148, 148, 6: 148, 11: 148, 17: 937, 20: 148, 936, 137: 913, 156: 912, 996},
		{1: 172, 172, 6: 172, 11: 172, 17: 172, 20: 172, 172, 39: 946, 58: 172, 172, 71: 172, 88: 966, 326: 965},
		{1: 166, 166, 6: 166, 11: 166, 17: 166, 20: 166, 166, 58: 166, 166, 71: 973, 322: 972},
		// 550
		{130: 970, 132: 968, 967, 261: 971, 283: 969},
		{1: 171, 171, 6: 171, 11: 171, 17: 171, 20: 171, 171, 58: 171, 171, 71: 171},
		{1: 170, 170, 6: 170, 11: 170, 17: 170, 20: 170, 170, 58: 170, 170, 71: 170},
		{1: 169, 169, 6: 169, 11: 169, 17: 169, 20: 169, 169, 58: 169, 169, 71: 169},
		{1: 168, 168, 6: 168, 11: 168, 17: 168, 20: 168, 168, 58: 168, 168, 71: 168},
		// 555
		{1: 167, 167, 6: 167, 11: 167, 17: 167, 20: 167, 167, 58: 167, 167, 71: 167},
		{1: 154, 154, 6: 154, 11: 154, 17: 990, 20: 154, 154, 58: 154, 989, 325: 988},
		{1: 164, 164, 6: 164, 11: 164, 17: 164, 20: 164, 164, 58: 164, 164, 85: 164, 145: 976, 182: 975, 323: 974},
		{1: 159, 159, 6: 159, 11: 159, 17: 159, 20: 159, 159, 58: 159, 159, 85: 982, 324: 981},
		{1: 163, 163, 6: 163, 11: 163, 17: 163, 20: 163, 163, 58: 163, 163, 85: 163},
		// 560
		{94: 977, 198: 978, 292: 979},
		{288: 980},
		{1: 161, 161, 6: 161, 11: 161, 17: 161, 20: 161, 161, 58: 161, 161, 85: 161},
		{1: 160, 160, 6: 160, 11: 160, 17: 160, 20: 160, 160, 58: 160, 160, 85: 160},
		{1: 162, 162, 6: 162, 11: 162, 17: 162, 20: 162, 162, 58: 162, 162, 85: 162},
		// 565
		{1: 165, 165, 6: 165, 11: 165, 17: 165, 20: 165, 165, 58: 165, 165},
		{290: 983},
		{18: 984, 44: 438, 437, 60: 986, 133: 987, 143: 985},
		{1: 158, 158, 6: 158, 11: 158, 17: 158, 20: 158, 158, 58: 158, 158},
		{1: 157, 157, 6: 157, 11: 157, 17: 157, 20: 157, 157, 58: 157, 157},
		// 570
		{1: 156, 156, 6: 156, 11: 156, 17: 156, 20: 156, 156, 58: 156, 156},
		{1: 155, 155, 6: 155, 11: 155, 17: 155, 20: 155, 155, 58: 155, 155},
		{1: 150, 150, 6: 150, 11: 150, 17: 150, 20: 150, 150, 58: 994, 327: 993},
		{1: 153, 153, 6: 153, 11: 153, 17: 153, 20: 153, 153, 58: 153, 143: 992},
		{59: 991},
		// 575
		{1: 151, 151, 6: 151, 11: 151, 17: 151, 20: 151, 151, 58: 151},
		{1: 152, 152, 6: 152, 11: 152, 17: 152, 20: 152, 152, 58: 152},
		{1: 183, 183, 6: 183, 11: 183, 17: 183, 20: 183, 183},
		{44: 438, 437, 60: 452, 68: 995},
		{1: 149, 149, 6: 149, 11: 149, 17: 149, 20: 149, 149},
		// 580
		{1: 186, 186, 6: 186, 11: 186, 20: 186},
		{1: 187, 187, 6: 187, 11: 187, 17: 910, 20: 187, 909, 137: 913, 156: 912, 911, 236: 999},
		{1: 250, 250, 6: 250, 11: 250, 14: 250, 17: 250, 20: 250, 250, 27: 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250},
		{1: 141, 141, 6: 141, 11: 141, 20: 915, 232: 1000},
		{1: 265, 265, 6: 265, 11: 265},
		// 585
		{1: 278, 278, 6: 278, 11: 278},
		{1: 281, 281, 11: 1012, 341: 1011},
		{1: 4, 4, 6: 1008, 11: 4, 239: 1007},
		{85: 1005},
		{201: 1006},
		// 590
		{1: 5, 5, 6: 5, 11: 5, 13: 5, 5, 17: 5, 40: 5, 5, 5, 83: 5},
		{1: 7, 7, 11: 7},
		{85: 1009},
		{211: 1010},
		{1: 3, 3, 11: 3, 13: 3, 3, 40: 3, 3, 3, 83: 3},
		// 595
		{1: 295, 295},
		{44: 438, 437, 60: 436, 142: 1013},
		{1: 280, 280},
		{44: 438, 437, 60: 1015},
		{407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 13: 407, 407, 17: 407, 407, 27: 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 61: 407, 407, 407, 407, 407, 407, 407, 83: 407, 134: 407},
		// 600
		{44: 438, 437, 60: 436, 142: 1017},
		{6: 1004, 13: 6, 6, 17: 1021, 40: 6, 6, 6, 83: 6, 238: 1020, 331: 1018, 1019},
		{13: 1043, 1041, 40: 1042, 1038, 1039, 83: 1044, 213: 1035, 215: 1034, 223: 1037, 240: 1036, 242: 1040, 298: 1032, 1031, 347: 1033},
		{6: 1008, 13: 4, 4, 17: 1027, 40: 4, 4, 4, 83: 4, 239: 1026, 333: 1025},
		{6: 11, 13: 11, 11, 17: 11, 40: 11, 11, 11, 83: 11},
		// 605
		{6: 1022},
		{85: 1023},
		{201: 1024},
		{6: 10, 13: 10, 10, 17: 10, 40: 10, 10, 10, 83: 10},
		{13: 12, 12, 40: 12, 12, 12, 83: 12},
		// 610
		{13: 9, 9, 40: 9, 9, 9, 83: 9},
		{6: 1028},
		{85: 1029},
		{211: 1030},
		{13: 8, 8, 40: 8, 8, 8, 83: 8},
		// 615
		{1: 401, 401},
		{1: 400, 400, 13: 1043, 1041, 40: 1042, 1038, 1039, 213: 1035, 215: 1124, 223: 1037, 240: 1036, 242: 1040},
		{1: 399, 399},
		{1: 398, 398, 13: 398, 398, 40: 398, 398, 398},
		{1: 396, 396, 13: 396, 396, 40: 396, 396, 396},
		// 620
		{1: 395, 395, 13: 395, 395, 40: 395, 395, 395},
		{1: 394, 394, 13: 394, 394, 40: 394, 394, 394},
		{39: 1116},
		{39: 1089},
		{1: 330, 330, 13: 330, 330, 40: 330, 330, 330},
		// 625
		{44: 438, 437, 60: 452, 68: 1076},
		{210: 1071},
		{14: 1052, 39: 1053, 185: 1051, 210: 1050, 217: 1049},
		{14: 1045},
		{44: 438, 437, 60: 452, 68: 1046},
		// 630
		{96: 1047},
		{44: 438, 437, 60: 452, 68: 1048},
		{1: 296, 296},
		{1: 306, 306, 13: 306, 306, 40: 306, 306, 306, 82: 306, 84: 1066, 86: 1067, 172: 1065, 224: 1064, 1063},
		{185: 1061},
		// 635
		{259: 1057},
		{44: 438, 437, 60: 452, 68: 1056},
		{44: 438, 437, 60: 452, 68: 723, 125: 1054},
		{1055, 3: 725},
		{1: 307, 307, 13: 307, 307, 40: 307, 307, 307, 82: 307, 84: 307, 86: 307, 307},
		// 640
		{1: 308, 308, 13: 308, 308, 40: 308, 308, 308, 82: 308, 84: 308, 86: 308, 308},
		{1: 298, 298, 13: 298, 298, 40: 298, 298, 298, 82: 1059, 171: 1058},
		{1: 309, 309, 13: 309, 309, 40: 309, 309, 309},
		{43: 1060},
		{1: 297, 297, 13: 297, 297, 40: 297, 297, 297},
		// 645
		{1: 298, 298, 13: 298, 298, 40: 298, 298, 298, 82: 1059, 171: 1062},
		{1: 310, 310, 13: 310, 310, 40: 310, 310, 310},
		{1: 298, 298, 13: 298, 298, 40: 298, 298, 298, 82: 1059, 171: 1070},
		{1: 305, 305, 13: 305, 305, 40: 305, 305, 305, 82: 305, 84: 1066, 86: 1067, 305, 172: 1069},
		{1: 304, 304, 13: 304, 304, 40: 304, 304, 304, 82: 304, 84: 304, 86: 304, 304},
		// 650
		{258: 1068},
		{1: 301, 301, 13: 301, 301, 40: 301, 301, 301, 82: 301, 84: 301, 86: 301, 301},
		{1: 302, 302, 13: 302, 302, 40: 302, 302, 302, 82: 302, 84: 302, 86: 302, 302},
		{1: 303, 303, 13: 303, 303, 40: 303, 303, 303, 82: 303, 84: 303, 86: 303, 303},
		{1: 311, 311, 13: 311, 311, 40: 311, 311, 311},
		// 655
		{14: 1052, 39: 1053, 217: 1072},
		{1: 306, 306, 13: 306, 306, 40: 306, 306, 306, 84: 1066, 86: 1067, 306, 172: 1065, 224: 1064, 1073},
		{1: 300, 300, 13: 300, 300, 40: 300, 300, 300, 87: 1075, 310: 1074},
		{1: 312, 312, 13: 312, 312, 40: 312, 312, 312},
		{1: 299, 299, 13: 299, 299, 40: 299, 299, 299},
		// 660
		{5: 1078, 135: 1077},
		{181: 1085},
		{135: 1079},
		{181: 1080},
		{143: 1081},
		// 665
		{194: 1082},
		{1: 314, 314, 13: 314, 314, 40: 314, 314, 314, 191: 1084, 237: 1083},
		{1: 315, 315, 13: 315, 315, 40: 315, 315, 315},
		{1: 313, 313, 13: 313, 313, 40: 313, 313, 313},
		{143: 1086},
		// 670
		{194: 1087},
		{1: 314, 314, 13: 314, 314, 40: 314, 314, 314, 191: 1084, 237: 1088},
		{1: 316, 316, 13: 316, 316, 40: 316, 316, 316},
		{44: 438, 437, 60: 452, 68: 1094, 241: 1092, 243: 1095, 1093, 334: 1090, 1091},
		{1112, 3: 1113},
		// 675
		{1108, 3: 1109},
		{329, 3: 329},
		{327, 3: 327},
		{23: 630, 631, 90: 470, 94: 487, 97: 489, 479, 486, 477, 476, 483, 484, 480, 494, 493, 498, 475, 496, 495, 482, 478, 491, 472, 485, 474, 492, 473, 499, 497, 481, 488, 490, 471, 164: 463, 464, 169: 1096, 467, 173: 1097, 468, 466, 465, 462, 469},
		{319, 3: 319},
		// 680
		{386, 3: 386, 386, 386, 7: 386, 386, 386, 386, 12: 386, 386, 18: 386, 386, 22: 386, 26: 624, 166: 623, 216: 1098},
		{317, 3: 317},
		{377, 3: 377, 377, 377, 7: 377, 377, 377, 377, 12: 377, 1100, 18: 635, 377, 22: 636, 221: 633, 1101, 230: 634, 308: 1099},
		{349, 3: 349, 349, 349, 7: 349, 349, 349, 349, 12: 687, 19: 1104, 227: 1105, 312: 1103},
		{131: 1102},
		// 685
		{324, 3: 324, 324, 324, 7: 324, 324, 324, 324, 12: 324, 19: 324},
		{325, 3: 325, 325, 325, 7: 325, 325, 325, 325, 12: 325, 19: 325},
		{321, 3: 321, 42, 42, 7: 42, 42, 42, 706, 148: 757, 155: 705, 233: 1106, 302: 1107},
		{323, 3: 323, 323, 323, 7: 323, 323, 323, 323},
		{322, 3: 322, 322, 322, 7: 322, 322, 322, 322},
		// 690
		{320, 3: 320, 42, 42, 7: 42, 42, 42, 706, 148: 757, 155: 756},
		{326, 3: 326},
		{1: 331, 331, 13: 331, 331, 40: 331, 331, 331},
		{44: 438, 437, 60: 452, 68: 1111, 243: 1110},
		{318, 3: 318},
		// 695
		{23: 630, 631, 173: 1097},
		{1: 332, 332, 13: 332, 332, 40: 332, 332, 332},
		{44: 438, 437, 60: 452, 68: 1115, 241: 1114, 244: 1093},
		{328, 3: 328},
		{90: 470, 94: 487, 97: 489, 479, 486, 477, 476, 483, 484, 480, 494, 493, 498, 475, 496, 495, 482, 478, 491, 472, 485, 474, 492, 473, 499, 497, 481, 488, 490, 471, 164: 463, 464, 169: 1096, 467, 174: 468, 466, 465, 462, 469},
		// 700
		{44: 438, 437, 60: 452, 68: 454, 147: 1118, 158: 453, 304: 1117},
		{1119, 3: 1120},
		{390, 3: 390},
		{1: 392, 392, 13: 392, 392, 40: 392, 392, 392, 306: 1122},
		{44: 438, 437, 60: 452, 68: 454, 147: 1121, 158: 453},
		// 705
		{389, 3: 389},
		{1: 391, 391, 13: 391, 391, 40: 391, 391, 391, 340: 1123},
		{1: 393, 393, 13: 393, 393, 40: 393, 393, 393},
		{1: 397, 397, 13: 397, 397, 40: 397, 397, 397},
		{1: 409, 409, 180: 423, 187: 424, 214: 421, 220: 422, 226: 420, 248: 1126},
		// 710
		{1: 413, 413},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 361

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			if yyS[yypt-0].node != nil {
				stmt := yyS[yypt-0].node
				stmt.SetText(nextQuery(yylex))
				yylex.(*yyLexImpl).result = append(yylex.(*yyLexImpl).result, stmt)
			}
		}
	case 3:
		{
			if yyS[yypt-0].node != nil {
				stmt := yyS[yypt-0].node
				stmt.SetText(nextQuery(yylex))
				yylex.(*yyLexImpl).result = append(yylex.(*yyLexImpl).result, stmt)
			}
		}
	case 7:
		{
			yyVAL.node = nil
		}
	case 8:
		{
			yyVAL.anything = &ast.TableName{
				Table: yyS[yypt-0].anything.(*element.Identifier),
			}
		}
	case 9:
		{
			yyVAL.anything = &ast.TableName{
				Schema: yyS[yypt-2].anything.(*element.Identifier),
				Table:  yyS[yypt-0].anything.(*element.Identifier),
			}
		}
	case 10:
		{
			yyVAL.anything = []*element.Identifier{yyS[yypt-0].anything.(*element.Identifier)}
		}
	case 11:
		{
			yyVAL.anything = append(yyS[yypt-2].anything.([]*element.Identifier), yyS[yypt-0].anything.(*element.Identifier))
		}
	case 12:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 13:
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeNonQuoted,
				Value: yyS[yypt-0].str,
			}
		}
	case 14:
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeQuoted,
				Value: yyS[yypt-0].str,
			}
		}
	case 15:
		{
			yyVAL.node = &ast.AlterTableStmt{
				TableName:     yyS[yypt-2].anything.(*ast.TableName),
				ColumnClauses: yyS[yypt-0].anything.([]ast.ColumnClause),
			}
		}
	case 16:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 17:
		{
			yyVAL.anything = []ast.ColumnClause{yyS[yypt-0].anything.(ast.ColumnClause)}
		}
	case 18:
		{
			yyVAL.anything = []ast.ColumnClause{yyS[yypt-0].anything.(ast.ColumnClause)}
		}
	case 19:
		{
			yyVAL.anything = append(yyS[yypt-1].anything.([]ast.ColumnClause), yyS[yypt-0].anything.(ast.ColumnClause))
		}
	case 23:
		{
			yyVAL.anything = &ast.AddColumnClause{
				Columns: yyS[yypt-3].anything.([]*ast.ColumnDef),
			}
		}
	case 24:
		{
			// TODO
		}
	case 25:
		{
			// TODO
		}
	case 26:
		{
			yyVAL.anything = []*ast.ColumnDef{yyS[yypt-0].anything.(*ast.ColumnDef)}
		}
	case 27:
		{
			yyVAL.anything = append(yyS[yypt-2].anything.([]*ast.ColumnDef), yyS[yypt-0].anything.(*ast.ColumnDef))
		}
	case 28:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 29:
		{
			var collation *ast.Collation
			if yyS[yypt-5].anything != nil {
				collation = yyS[yypt-5].anything.(*ast.Collation)
			}
			props := []ast.ColumnProp{}
			sort := ast.ColumnProp(yyS[yypt-4].i)
			if sort != ast.ColumnPropEmpty {
				props = append(props, sort)
			}
			invisible := ast.ColumnProp(yyS[yypt-3].i)
			if invisible != ast.ColumnPropEmpty {
				props = append(props, invisible)
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyS[yypt-7].anything.(*element.Identifier),
				Datatype:   yyS[yypt-6].anything.(element.Datatype),
				Collation:  collation,
				Props:      props,
			}
		}
	case 30:
		{
			yyVAL.anything = nil
		}
	case 31:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 32:
		{
			yyVAL.anything = &ast.Collation{Name: yyS[yypt-0].anything.(*element.Identifier)}
		}
	case 33:
		{
			yyVAL.i = int(ast.ColumnPropEmpty)
		}
	case 34:
		{
			yyVAL.i = int(ast.ColumnPropSort)
		}
	case 35:
		{
			yyVAL.i = int(ast.ColumnPropEmpty)
		}
	case 37:
		{
			yyVAL.i = int(ast.ColumnPropInvisible)
		}
	case 38:
		{
			yyVAL.i = int(ast.ColumnPropVisible)
		}
	case 39:
		{
			// empty
		}
	case 49:
		{
			// empty
		}
	case 51:
		{
			// empty
		}
	case 67:
		{
			// empty
		}
	case 70:
		{
			// empty
		}
	case 72:
		{
			// empty
		}
	case 74:
		{
			// empty
		}
	case 76:
		{
			// empty
		}
	case 79:
		{
			// empty
		}
	case 84:
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyS[yypt-1].anything.([]*ast.ColumnDef),
			}
		}
	case 85:
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyS[yypt-1].anything.([]*ast.ColumnDef),
			}
		}
	case 86:
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyS[yypt-0].anything.([]*ast.ColumnDef),
			}
		}
	case 87:
		{
			yyVAL.anything = []*ast.ColumnDef{yyS[yypt-0].anything.(*ast.ColumnDef)}
		}
	case 88:
		{
			yyVAL.anything = append(yyS[yypt-2].anything.([]*ast.ColumnDef), yyS[yypt-0].anything.(*ast.ColumnDef))
		}
	case 90:
		{
			var collation *ast.Collation
			if yyS[yypt-3].anything != nil {
				collation = yyS[yypt-3].anything.(*ast.Collation)
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyS[yypt-5].anything.(*element.Identifier),
				Datatype:   yyS[yypt-4].anything.(element.Datatype),
				Collation:  collation,
				Props:      []ast.ColumnProp{},
			}
		}
	case 95:
		{
			// empty
		}
	case 97:
		{
			yyVAL.anything = []*ast.ColumnDef{yyS[yypt-0].anything.(*ast.ColumnDef)}
		}
	case 98:
		{
			yyVAL.anything = append(yyS[yypt-2].anything.([]*ast.ColumnDef), yyS[yypt-0].anything.(*ast.ColumnDef))
		}
	case 99:
		{
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyS[yypt-1].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{ast.ColumnProp(yyS[yypt-0].i)},
			}
		}
	case 100:
		{
			prop := ast.ColumnPropSubstitutable
			if yyS[yypt-0].b {
				prop = ast.ColumnPropSubstitutableForce
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyS[yypt-5].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{prop},
			}
		}
	case 101:
		{
			prop := ast.ColumnPropNotSubstitutable
			if yyS[yypt-0].b {
				prop = ast.ColumnPropNotSubstitutableForce
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyS[yypt-6].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{prop},
			}
		}
	case 102:
		{
			yyVAL.b = false
		}
	case 103:
		{
			yyVAL.b = true
		}
	case 104:
		{
			props := []ast.DropColumnProp{}
			if yyS[yypt-1].anything != nil {
				props = append(props, yyS[yypt-1].anything.([]ast.DropColumnProp)...)
			}
			online := ast.DropColumnProp(yyS[yypt-0].i)
			if online != ast.DropColumnPropEmpty {
				props = append(props, online)
			}
			yyVAL.anything = &ast.DropColumnClause{
				Type:    ast.DropColumnTypeSetUnused,
				Columns: yyS[yypt-2].anything.([]*element.Identifier),
				Props:   props,
			}
		}
	case 105:
		{
			props := []ast.DropColumnProp{}
			if yyS[yypt-1].anything != nil {
				props = append(props, yyS[yypt-1].anything.([]ast.DropColumnProp)...)
			}
			cc := &ast.DropColumnClause{
				Type:    ast.DropColumnTypeDrop,
				Columns: yyS[yypt-2].anything.([]*element.Identifier),
				Props:   props,
			}
			var checkout int
			if yyS[yypt-0].anything != nil {
				checkout = yyS[yypt-0].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 106:
		{
			cc := &ast.DropColumnClause{
				Type: ast.DropColumnTypeDropUnusedColumns,
			}
			var checkout int
			if yyS[yypt-0].anything != nil {
				checkout = yyS[yypt-0].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 107:
		{
			cc := &ast.DropColumnClause{
				Type: ast.DropColumnTypeDropColumnsContinue,
			}
			var checkout int
			if yyS[yypt-0].anything != nil {
				checkout = yyS[yypt-0].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 108:
		{
			yyVAL.anything = []*element.Identifier{yyS[yypt-0].anything.(*element.Identifier)}
		}
	case 109:
		{
			yyVAL.anything = yyS[yypt-1].anything
		}
	case 110:
		{
			yyVAL.anything = nil
		}
	case 112:
		{
			yyVAL.anything = []ast.DropColumnProp{ast.DropColumnProp(yyS[yypt-0].i)}
		}
	case 113:
		{
			yyVAL.anything = append(yyS[yypt-1].anything.([]ast.DropColumnProp), ast.DropColumnProp(yyS[yypt-0].i))
		}
	case 114:
		{
			yyVAL.i = int(ast.DropColumnPropCascade)
		}
	case 115:
		{
			yyVAL.i = int(ast.DropColumnPropInvalidate)
		}
	case 116:
		{
			yyVAL.i = int(ast.DropColumnPropEmpty)
		}
	case 117:
		{
			yyVAL.i = int(ast.DropColumnPropOnline)
		}
	case 118:
		{
			yyVAL.anything = nil
		}
	case 119:
		{
			yyVAL.anything = yyS[yypt-0].i
		}
	case 120:
		{
			yyVAL.anything = &ast.RenameColumnClause{
				OldName: yyS[yypt-2].anything.(*element.Identifier),
				NewName: yyS[yypt-0].anything.(*element.Identifier),
			}
		}
	case 121:
		{
			yyVAL.node = &ast.CreateTableStmt{
				TableName: yyS[yypt-4].anything.(*ast.TableName),
				RelTable:  yyS[yypt-2].anything.(*ast.RelTableDef),
			}
		}
	case 122:
		{
			// empty
		}
	case 130:
		{
			// empty
		}
	case 135:
		{
			// empty
		}
	case 138:
		{
			rd := &ast.RelTableDef{}
			if yyS[yypt-6].anything != nil {
				rd.Columns = yyS[yypt-6].anything.([]*ast.ColumnDef)
			}
			yyVAL.anything = rd
		}
	case 141:
		{
			yyVAL.anything = nil
		}
	case 142:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 144:
		{
			// empty
		}
	case 147:
		{
			// empty
		}
	case 150:
		{
			// empty
		}
	case 155:
		{
			// empty
		}
	case 158:
		{
			// empty
		}
	case 201:
		{
			// empty
		}
	case 211:
		{
			// empty
		}
	case 219:
		{
			// empty
		}
	case 226:
		{
			// empty
		}
	case 229:
		{
			// empty
		}
	case 234:
		{
			// empty
		}
	case 244:
		{
			// empty
		}
	case 250:
		{
			// empty
		}
	case 252:
		{
			// empty
		}
	case 257:
		{
			// empty
		}
	case 262:
		{
			// empty
		}
	case 266:
		{
			// empty
		}
	case 268:
		{
			// empty
		}
	case 275:
		{
			// empty
		}
	case 298:
		{
			yyVAL.anything = nil
		}
	case 299:
		{
			yyVAL.anything = yyS[yypt-1].anything
		}
	case 300:
		{
			yyVAL.anything = []*ast.ColumnDef{yyS[yypt-0].anything.(*ast.ColumnDef)}
		}
	case 301:
		{
			yyVAL.anything = append(yyS[yypt-2].anything.([]*ast.ColumnDef), yyS[yypt-0].anything.(*ast.ColumnDef))
		}
	case 303:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 304:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 305:
		{
			yyVAL.anything = &element.NumberOrAsterisk{Number: yyS[yypt-0].i}
		}
	case 306:
		{
			yyVAL.anything = &element.NumberOrAsterisk{IsAsterisk: true}
		}
	case 307:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 308:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 309:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 310:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 311:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 312:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 313:
		{
			d := &element.Char{}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 314:
		{
			size := yyS[yypt-1].i
			d := &element.Char{Size: &size}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 315:
		{
			size := yyS[yypt-2].i
			d := &element.Char{Size: &size, IsByteSize: true}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 316:
		{
			size := yyS[yypt-2].i
			d := &element.Char{Size: &size, IsCharSize: true}
			d.SetDataDef(element.DataDefChar)
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 317:
		{
			size := yyS[yypt-1].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 318:
		{
			size := yyS[yypt-2].i
			d := &element.Varchar2{}
			d.Size = &size
			d.IsByteSize = true
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 319:
		{
			size := yyS[yypt-2].i
			d := &element.Varchar2{}
			d.Size = &size
			d.IsCharSize = true
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 320:
		{
			d := &element.NChar{}
			d.SetDataDef(element.DataDefNChar)
			yyVAL.anything = d
		}
	case 321:
		{
			size := yyS[yypt-1].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNChar)
			yyVAL.anything = d
		}
	case 322:
		{
			size := yyS[yypt-1].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNVarChar2)
			yyVAL.anything = d
		}
	case 323:
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 324:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 325:
		{
			precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
			scale := yyS[yypt-1].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 326:
		{
			d := &element.Float{}
			d.SetDataDef(element.DataDefFloat)
			yyVAL.anything = d
		}
	case 327:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefFloat)
			yyVAL.anything = d
		}
	case 328:
		{
			d := &element.BinaryFloat{}
			d.SetDataDef(element.DataDefBinaryFloat)
			yyVAL.anything = d
		}
	case 329:
		{
			d := &element.BinaryDouble{}
			d.SetDataDef(element.DataDefBinaryDouble)
			yyVAL.anything = d
		}
	case 330:
		{
			d := &element.Long{}
			d.SetDataDef(element.DataDefLong)
			yyVAL.anything = d
		}
	case 331:
		{
			d := &element.LongRaw{}
			d.SetDataDef(element.DataDefLongRaw)
			yyVAL.anything = d
		}
	case 332:
		{
			size := yyS[yypt-1].i
			d := &element.Raw{Size: &size}
			d.SetDataDef(element.DataDefRaw)
			yyVAL.anything = d
		}
	case 333:
		{
			d := &element.Date{}
			d.SetDataDef(element.DataDefDate)
			yyVAL.anything = d
		}
	case 334:
		{
			d := &element.Timestamp{}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 335:
		{
			precision := yyS[yypt-1].i
			d := &element.Timestamp{FractionalSecondsPrecision: &precision}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 336:
		{
			precision := yyS[yypt-4].i
			d := &element.Timestamp{FractionalSecondsPrecision: &precision, WithTimeZone: true}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 337:
		{
			precision := yyS[yypt-5].i
			d := &element.Timestamp{FractionalSecondsPrecision: &precision, WithLocalTimeZone: true}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 338:
		{
			d := &element.IntervalYear{}
			d.SetDataDef(element.DataDefIntervalYear)
			yyVAL.anything = d
		}
	case 339:
		{
			precision := yyS[yypt-3].i
			d := &element.IntervalYear{Precision: &precision}
			d.SetDataDef(element.DataDefIntervalYear)
			yyVAL.anything = d
		}
	case 340:
		{
			d := &element.IntervalDay{}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 341:
		{
			precision := yyS[yypt-3].i
			d := &element.IntervalDay{Precision: &precision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 342:
		{
			precision := yyS[yypt-6].i
			sPrecision := yyS[yypt-1].i
			d := &element.IntervalDay{Precision: &precision, FractionalSecondsPrecision: &sPrecision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 343:
		{
			sPrecision := yyS[yypt-1].i
			d := &element.IntervalDay{FractionalSecondsPrecision: &sPrecision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 344:
		{
			d := &element.Blob{}
			d.SetDataDef(element.DataDefBlob)
			yyVAL.anything = d
		}
	case 345:
		{
			d := &element.Clob{}
			d.SetDataDef(element.DataDefClob)
			yyVAL.anything = d
		}
	case 346:
		{
			d := &element.NClob{}
			d.SetDataDef(element.DataDefNClob)
			yyVAL.anything = d
		}
	case 347:
		{
			d := &element.BFile{}
			d.SetDataDef(element.DataDefBFile)
			yyVAL.anything = d
		}
	case 348:
		{
			d := &element.RowId{}
			d.SetDataDef(element.DataDefRowId)
			yyVAL.anything = d
		}
	case 349:
		{
			d := &element.URowId{}
			d.SetDataDef(element.DataDefURowId)
			yyVAL.anything = d
		}
	case 350:
		{
			size := yyS[yypt-1].i
			d := &element.URowId{Size: &size}
			d.SetDataDef(element.DataDefURowId)
			yyVAL.anything = d
		}
	case 351:
		{
			d := &element.Char{}
			d.SetDataDef(element.DataDefCharacter)
			yyVAL.anything = d
		}
	case 352:
		{
			size := yyS[yypt-1].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharacterVarying)
			yyVAL.anything = d
		}
	case 353:
		{
			size := yyS[yypt-1].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharVarying)
			yyVAL.anything = d
		}
	case 354:
		{
			size := yyS[yypt-1].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNCharVarying)
			yyVAL.anything = d
		}
	case 355:
		{
			size := yyS[yypt-1].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefVarchar)
			yyVAL.anything = d
		}
	case 356:
		{
			size := yyS[yypt-1].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNationalCharacter)
			yyVAL.anything = d
		}
	case 357:
		{
			size := yyS[yypt-1].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNationalCharacterVarying)
			yyVAL.anything = d
		}
	case 358:
		{
			size := yyS[yypt-1].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNationalChar)
			yyVAL.anything = d
		}
	case 359:
		{
			size := yyS[yypt-1].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNationalCharVarying)
			yyVAL.anything = d
		}
	case 360:
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 361:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 362:
		{
			precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
			scale := yyS[yypt-1].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 363:
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 364:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 365:
		{
			precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
			scale := yyS[yypt-1].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 366:
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 367:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 368:
		{
			precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
			scale := yyS[yypt-1].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 369:
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefInteger)
			yyVAL.anything = d
		}
	case 370:
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefInt)
			yyVAL.anything = d
		}
	case 371:
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefSmallInt)
			yyVAL.anything = d
		}
	case 372:
		{
			precision := &element.NumberOrAsterisk{Number: 126}
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefDoublePrecision)
			yyVAL.anything = d
		}
	case 373:
		{
			precision := &element.NumberOrAsterisk{Number: 63}
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefReal)
			yyVAL.anything = d
		}
	case 374:
		{
			// empty
		}
	case 383:
		{
			// empty
		}
	case 385:
		{
			// empty
		}
	case 388:
		{
			// empty
		}
	case 398:
		{
			// empty
		}
	case 410:
		{
			// empty
		}
	case 412:
		{
			// empty
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

// Code generated by goyacc -o sql.go -l sql.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

import (
	"strings"

	"github.com/codeindex2937/oracle-sql-parser/ast"
	"github.com/codeindex2937/oracle-sql-parser/ast/element"
)

func nextQuery(yylex interface{}) string {
	lex := yylex.(*yyLexImpl)
	tc := lex.scanner.TC
	query := string(lex.scanner.Text[lex.lastPos:tc])
	lex.lastPos = tc
	return strings.TrimSpace(query)
}

type yySymType struct {
	yys      int
	nothing  struct{}
	i        int
	b        bool
	str      string
	node     ast.Node
	anything interface{}
}

const _action = 57346
const _add = 57347
const _all = 57348
const _alter = 57349
const _as = 57350
const _asc = 57351
const _by = 57352
const _char = 57353
const _cluster = 57354
const _column = 57355
const _comment = 57356
const _compress = 57357
const _create = 57358
const _date = 57359
const _decimal = 57360
const _default = 57361
const _delete = 57362
const _desc = 57363
const _drop = 57364
const _float = 57365
const _for = 57366
const _from = 57367
const _grant = 57368
const _identified = 57369
const _immediate = 57370
const _increment = 57371
const _index = 57372
const _initial = 57373
const _insert = 57374
const _integer = 57375
const _into = 57376
const _is = 57377
const _level = 57378
const _long = 57379
const _maxextents = 57380
const _modify = 57381
const _nocompress = 57382
const _not = 57383
const _null = 57384
const _number = 57385
const _on = 57386
const _online = 57387
const _optimal = 57388
const _order = 57389
const _pctfree = 57390
const _raw = 57391
const _rename = 57392
const _restrict = 57393
const _row = 57394
const _rowid = 57395
const _rows = 57396
const _select = 57397
const _sequence = 57398
const _set = 57399
const _smallInt = 57400
const _start = 57401
const _table = 57402
const _to = 57403
const _unique = 57404
const _update = 57405
const _validate = 57406
const _varchar = 57407
const _varchar2 = 57408
const _with = 57409
const _advanced = 57410
const _always = 57411
const _archive = 57412
const _at = 57413
const _attributes = 57414
const _auto = 57415
const _basic = 57416
const _bfile = 57417
const _binaryDouble = 57418
const _binaryFloat = 57419
const _bitmap = 57420
const _blob = 57421
const _blockchain = 57422
const _buffer_pool = 57423
const _byte = 57424
const _cache = 57425
const _capacity = 57426
const _cascade = 57427
const _cell_flash_cache = 57428
const _character = 57429
const _check = 57430
const _checkpoint = 57431
const _clob = 57432
const _collate = 57433
const _columns = 57434
const _commit = 57435
const _constraint = 57436
const _constraints = 57437
const _continue = 57438
const _creation = 57439
const _critical = 57440
const _cycle = 57441
const _data = 57442
const _day = 57443
const _dec = 57444
const _decrypt = 57445
const _deferrable = 57446
const _deferred = 57447
const _definition = 57448
const _delete_all = 57449
const _disable = 57450
const _disable_all = 57451
const _distribute = 57452
const _dml = 57453
const _double = 57454
const _duplicate = 57455
const _duplicated = 57456
const _E = 57457
const _enable = 57458
const _enable_all = 57459
const _encrypt = 57460
const _exceptions = 57461
const _extended = 57462
const _external = 57463
const _filesystem_like_logging = 57464
const _flash_cache = 57465
const _force = 57466
const _foreign = 57467
const _freelist = 57468
const _freelists = 57469
const _full = 57470
const _G = 57471
const _generated = 57472
const _global = 57473
const _groups = 57474
const _heap = 57475
const _high = 57476
const _identity = 57477
const _ilm = 57478
const _immutable = 57479
const _indexing = 57480
const _initially = 57481
const _initrans = 57482
const _inmemory = 57483
const _int = 57484
const _interval = 57485
const _invalidate = 57486
const _invalidation = 57487
const _invisible = 57488
const _K = 57489
const _keep = 57490
const _key = 57491
const _levels = 57492
const _limit = 57493
const _local = 57494
const _locking = 57495
const _logging = 57496
const _low = 57497
const _M = 57498
const _maxsize = 57499
const _maxtrans = 57500
const _maxvalue = 57501
const _medium = 57502
const _memcompress = 57503
const _memoptimize = 57504
const _metadata = 57505
const _minextents = 57506
const _minvalue = 57507
const _month = 57508
const _multivalue = 57509
const _national = 57510
const _nchar = 57511
const _nclob = 57512
const _next = 57513
const _no = 57514
const _nocache = 57515
const _nocycle = 57516
const _nologging = 57517
const _nomaxvalue = 57518
const _nominvalue = 57519
const _none = 57520
const _noorder = 57521
const _noparallel = 57522
const _norely = 57523
const _nosort = 57524
const _novalidate = 57525
const _numeric = 57526
const _nvarchar2 = 57527
const _organization = 57528
const _P = 57529
const _parallel = 57530
const _parent = 57531
const _partial = 57532
const _partition = 57533
const _pctincrease = 57534
const _pctused = 57535
const _peverse = 57536
const _policy = 57537
const _precision = 57538
const _preserve = 57539
const _primary = 57540
const _priority = 57541
const _private = 57542
const _purge = 57543
const _query = 57544
const _range = 57545
const _read = 57546
const _real = 57547
const _recycle = 57548
const _references = 57549
const _reject = 57550
const _rely = 57551
const _salt = 57552
const _scope = 57553
const _second = 57554
const _segment = 57555
const _service = 57556
const _sharded = 57557
const _sharding = 57558
const _sort = 57559
const _spatial = 57560
const _storage = 57561
const _store = 57562
const _subpartition = 57563
const _substitutable = 57564
const _T = 57565
const _tablespace = 57566
const _temporary = 57567
const _time = 57568
const _timestamp = 57569
const _unlimited = 57570
const _unusable = 57571
const _unused = 57572
const _urowid = 57573
const _usable = 57574
const _using = 57575
const _value = 57576
const _varying = 57577
const _visible = 57578
const _write = 57579
const _XMLType = 57580
const _year = 57581
const _zone = 57582
const _singleQuoteStr = 57583
const _doubleQuoteStr = 57584
const _nonquotedIdentifier = 57585
const _not_deferrable = 57586
const _no_inmemory = 57587
const _no_duplicate = 57588
const _row_level_locking = 57589
const _drop_index = 57590
const _intNumber = 57591

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"_action",
	"_add",
	"_all",
	"_alter",
	"_as",
	"_asc",
	"_by",
	"_char",
	"_cluster",
	"_column",
	"_comment",
	"_compress",
	"_create",
	"_date",
	"_decimal",
	"_default",
	"_delete",
	"_desc",
	"_drop",
	"_float",
	"_for",
	"_from",
	"_grant",
	"_identified",
	"_immediate",
	"_increment",
	"_index",
	"_initial",
	"_insert",
	"_integer",
	"_into",
	"_is",
	"_level",
	"_long",
	"_maxextents",
	"_modify",
	"_nocompress",
	"_not",
	"_null",
	"_number",
	"_on",
	"_online",
	"_optimal",
	"_order",
	"_pctfree",
	"_raw",
	"_rename",
	"_restrict",
	"_row",
	"_rowid",
	"_rows",
	"_select",
	"_sequence",
	"_set",
	"_smallInt",
	"_start",
	"_table",
	"_to",
	"_unique",
	"_update",
	"_validate",
	"_varchar",
	"_varchar2",
	"_with",
	"_advanced",
	"_always",
	"_archive",
	"_at",
	"_attributes",
	"_auto",
	"_basic",
	"_bfile",
	"_binaryDouble",
	"_binaryFloat",
	"_bitmap",
	"_blob",
	"_blockchain",
	"_buffer_pool",
	"_byte",
	"_cache",
	"_capacity",
	"_cascade",
	"_cell_flash_cache",
	"_character",
	"_check",
	"_checkpoint",
	"_clob",
	"_collate",
	"_columns",
	"_commit",
	"_constraint",
	"_constraints",
	"_continue",
	"_creation",
	"_critical",
	"_cycle",
	"_data",
	"_day",
	"_dec",
	"_decrypt",
	"_deferrable",
	"_deferred",
	"_definition",
	"_delete_all",
	"_disable",
	"_disable_all",
	"_distribute",
	"_dml",
	"_double",
	"_duplicate",
	"_duplicated",
	"_E",
	"_enable",
	"_enable_all",
	"_encrypt",
	"_exceptions",
	"_extended",
	"_external",
	"_filesystem_like_logging",
	"_flash_cache",
	"_force",
	"_foreign",
	"_freelist",
	"_freelists",
	"_full",
	"_G",
	"_generated",
	"_global",
	"_groups",
	"_heap",
	"_high",
	"_identity",
	"_ilm",
	"_immutable",
	"_indexing",
	"_initially",
	"_initrans",
	"_inmemory",
	"_int",
	"_interval",
	"_invalidate",
	"_invalidation",
	"_invisible",
	"_K",
	"_keep",
	"_key",
	"_levels",
	"_limit",
	"_local",
	"_locking",
	"_logging",
	"_low",
	"_M",
	"_maxsize",
	"_maxtrans",
	"_maxvalue",
	"_medium",
	"_memcompress",
	"_memoptimize",
	"_metadata",
	"_minextents",
	"_minvalue",
	"_month",
	"_multivalue",
	"_national",
	"_nchar",
	"_nclob",
	"_next",
	"_no",
	"_nocache",
	"_nocycle",
	"_nologging",
	"_nomaxvalue",
	"_nominvalue",
	"_none",
	"_noorder",
	"_noparallel",
	"_norely",
	"_nosort",
	"_novalidate",
	"_numeric",
	"_nvarchar2",
	"_organization",
	"_P",
	"_parallel",
	"_parent",
	"_partial",
	"_partition",
	"_pctincrease",
	"_pctused",
	"_peverse",
	"_policy",
	"_precision",
	"_preserve",
	"_primary",
	"_priority",
	"_private",
	"_purge",
	"_query",
	"_range",
	"_read",
	"_real",
	"_recycle",
	"_references",
	"_reject",
	"_rely",
	"_salt",
	"_scope",
	"_second",
	"_segment",
	"_service",
	"_sharded",
	"_sharding",
	"_sort",
	"_spatial",
	"_storage",
	"_store",
	"_subpartition",
	"_substitutable",
	"_T",
	"_tablespace",
	"_temporary",
	"_time",
	"_timestamp",
	"_unlimited",
	"_unusable",
	"_unused",
	"_urowid",
	"_usable",
	"_using",
	"_value",
	"_varying",
	"_visible",
	"_write",
	"_XMLType",
	"_year",
	"_zone",
	"_singleQuoteStr",
	"_doubleQuoteStr",
	"_nonquotedIdentifier",
	"_not_deferrable",
	"_no_inmemory",
	"_no_duplicate",
	"_row_level_locking",
	"_drop_index",
	"_intNumber",
	"';'",
	"'.'",
	"','",
	"'('",
	"')'",
	"'='",
	"'*'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 14,
	60, 330,
	-2, 464,
	-1, 378,
	254, 724,
	-2, 727,
	-1, 687,
	1, 359,
	162, 359,
	189, 359,
	250, 359,
	-2, 364,
}

const yyPrivate = 57344

const yyLast = 1983

var yyAct = [...]int16{
	35, 915, 402, 992, 401, 963, 925, 606, 1006, 605,
	852, 347, 995, 973, 1014, 221, 824, 931, 1003, 492,
	823, 604, 927, 7, 826, 756, 753, 34, 707, 870,
	844, 781, 222, 1004, 264, 226, 674, 689, 587, 509,
	831, 489, 365, 538, 230, 649, 846, 307, 414, 494,
	825, 495, 537, 390, 382, 415, 243, 381, 503, 392,
	488, 241, 337, 323, 282, 283, 416, 650, 782, 1000,
	975, 343, 733, 1085, 651, 785, 325, 716, 357, 513,
	625, 1094, 513, 790, 1077, 513, 990, 1055, 984, 332,
	513, 960, 1020, 343, 796, 736, 795, 735, 1041, 730,
	974, 729, 328, 900, 728, 626, 727, 726, 324, 725,
	607, 899, 513, 617, 669, 513, 898, 668, 791, 897,
	513, 330, 591, 793, 982, 513, 975, 583, 513, 523,
	564, 522, 513, 487, 514, 486, 485, 896, 484, 327,
	980, 895, 341, 732, 984, 435, 819, 434, 715, 817,
	339, 814, 1040, 343, 813, 794, 974, 808, 806, 805,
	792, 804, 803, 789, 788, 802, 801, 746, 745, 738,
	737, 734, 339, 1001, 342, 720, 718, 712, 567, 663,
	982, 999, 916, 661, 648, 1040, 646, 624, 999, 545,
	1012, 543, 541, 941, 786, 905, 980, 818, 724, 722,
	976, 784, 647, 627, 645, 619, 978, 544, 783, 542,
	540, 614, 326, 704, 983, 981, 643, 977, 979, 622,
	985, 641, 639, 620, 222, 331, 632, 563, 233, 787,
	562, 558, 556, 555, 554, 222, 34, 553, 551, 246,
	623, 550, 549, 546, 266, 629, 222, 611, 222, 272,
	269, 378, 271, 628, 480, 479, 976, 296, 618, 612,
	398, 387, 978, 375, 329, 320, 356, 320, 234, 430,
	983, 981, 924, 977, 979, 306, 985, 631, 340, 433,
	329, 757, 610, 13, 630, 315, 263, 245, 338, 608,
	18, 868, 14, 346, 232, 1025, 1063, 759, 16, 882,
	876, 613, 17, 875, 19, 758, 700, 38, 37, 250,
	338, 344, 1064, 1056, 364, 731, 367, 860, 843, 858,
	714, 871, 1031, 372, 874, 374, 1030, 368, 1029, 322,
	956, 385, 384, 344, 902, 389, 388, 879, 878, 873,
	871, 316, 815, 399, 861, 321, 400, 335, 812, 811,
	759, 971, 617, 810, 809, 807, 859, 744, 758, 372,
	589, 742, 723, 721, 719, 717, 713, 1082, 703, 698,
	222, 664, 697, 696, 429, 662, 370, 695, 666, 665,
	478, 483, 658, 655, 654, 644, 373, 642, 640, 928,
	638, 586, 500, 344, 1062, 360, 359, 305, 304, 303,
	1100, 1089, 969, 511, 1117, 1000, 499, 322, 403, 913,
	411, 431, 496, 938, 496, 410, 366, 1116, 374, 694,
	38, 37, 816, 739, 561, 240, 624, 490, 408, 529,
	531, 532, 407, 436, 534, 351, 352, 1086, 372, 512,
	834, 680, 1081, 214, 619, 928, 527, 498, 345, 526,
	228, 505, 740, 660, 507, 508, 33, 515, 622, 227,
	590, 517, 620, 940, 939, 408, 636, 520, 352, 1106,
	405, 298, 1114, 773, 961, 533, 235, 1110, 955, 623,
	743, 1061, 1079, 577, 565, 566, 749, 699, 570, 1115,
	572, 536, 952, 929, 311, 1076, 552, 618, 1023, 885,
	828, 827, 1084, 585, 584, 867, 871, 865, 867, 1001,
	950, 576, 936, 519, 996, 702, 593, 491, 325, 951,
	959, 829, 1074, 630, 15, 997, 372, 659, 855, 1044,
	840, 222, 574, 741, 1090, 598, 1022, 828, 827, 582,
	637, 573, 571, 569, 328, 579, 578, 293, 341, 929,
	954, 592, 497, 324, 497, 293, 244, 1015, 829, 300,
	891, 244, 560, 1017, 348, 292, 242, 30, 294, 1099,
	888, 1104, 601, 602, 322, 603, 1119, 701, 770, 1102,
	342, 327, 447, 31, 667, 1098, 953, 910, 468, 452,
	422, 1016, 1103, 685, 463, 377, 652, 653, 38, 37,
	1101, 656, 657, 681, 454, 1096, 1097, 376, 466, 693,
	423, 397, 386, 1075, 462, 1111, 393, 779, 362, 361,
	467, 498, 677, 993, 475, 692, 1095, 1065, 883, 456,
	987, 684, 705, 682, 1083, 708, 449, 460, 778, 917,
	38, 37, 38, 37, 691, 1112, 474, 465, 464, 841,
	471, 404, 836, 421, 326, 934, 755, 830, 446, 880,
	677, 472, 265, 673, 921, 291, 749, 754, 424, 860,
	1067, 858, 32, 453, 774, 394, 709, 711, 1018, 270,
	752, 247, 866, 457, 340, 944, 884, 945, 747, 889,
	765, 1035, 1073, 1037, 830, 754, 861, 524, 764, 886,
	396, 1036, 942, 749, 617, 947, 309, 581, 859, 863,
	748, 506, 625, 455, 470, 312, 333, 490, 395, 890,
	769, 767, 864, 768, 777, 860, 775, 858, 1072, 887,
	539, 504, 548, 678, 510, 268, 1007, 626, 229, 450,
	448, 473, 607, 1042, 1052, 617, 935, 800, 1093, 1070,
	1051, 597, 861, 516, 1071, 451, 461, 946, 933, 1027,
	617, 222, 559, 23, 859, 821, 301, 845, 820, 30,
	903, 678, 1069, 223, 862, 965, 458, 853, 624, 943,
	856, 901, 854, 308, 580, 31, 760, 29, 762, 218,
	502, 501, 1043, 313, 237, 212, 619, 334, 477, 708,
	20, 216, 476, 947, 948, 847, 849, 491, 547, 459,
	622, 1092, 869, 872, 620, 557, 877, 918, 964, 624,
	881, 27, 231, 1013, 215, 893, 892, 894, 595, 904,
	776, 623, 217, 690, 624, 627, 358, 619, 24, 219,
	906, 236, 850, 614, 28, 988, 908, 761, 909, 618,
	907, 622, 619, 919, 278, 620, 937, 856, 1059, 854,
	926, 914, 290, 671, 670, 835, 622, 922, 692, 750,
	620, 287, 623, 633, 32, 630, 568, 629, 317, 611,
	855, 1058, 432, 314, 989, 628, 290, 623, 279, 766,
	618, 612, 683, 224, 912, 319, 1109, 798, 1054, 280,
	406, 350, 349, 295, 336, 618, 289, 25, 3, 799,
	966, 782, 318, 965, 610, 958, 630, 838, 785, 986,
	600, 608, 26, 923, 1010, 991, 790, 967, 220, 252,
	289, 630, 1009, 613, 1028, 970, 855, 302, 1033, 1008,
	837, 856, 856, 854, 854, 1107, 1011, 261, 1002, 686,
	596, 1060, 998, 1005, 482, 239, 949, 780, 481, 251,
	920, 791, 839, 763, 679, 575, 793, 493, 363, 310,
	267, 1024, 616, 615, 609, 906, 426, 525, 299, 1049,
	1019, 1047, 930, 259, 1108, 1091, 1026, 1105, 1088, 1032,
	1066, 1039, 994, 1080, 1053, 621, 857, 851, 794, 257,
	932, 222, 772, 792, 1045, 1034, 789, 788, 688, 848,
	1048, 771, 856, 1046, 854, 926, 1050, 1038, 687, 1057,
	521, 412, 518, 409, 297, 21, 588, 822, 751, 672,
	1021, 968, 911, 833, 832, 972, 676, 786, 675, 634,
	535, 238, 842, 528, 784, 1068, 1, 213, 249, 248,
	706, 783, 1078, 39, 530, 427, 425, 962, 281, 253,
	957, 413, 355, 354, 353, 255, 391, 1087, 599, 286,
	369, 371, 787, 260, 258, 288, 254, 256, 380, 262,
	383, 379, 285, 284, 277, 276, 275, 274, 273, 439,
	438, 445, 444, 469, 443, 442, 441, 440, 437, 225,
	2, 12, 11, 10, 9, 8, 6, 5, 4, 1113,
	797, 325, 22, 36, 594, 1118, 710, 40, 41, 42,
	43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 420, 61, 62,
	63, 64, 65, 417, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
	83, 84, 85, 86, 87, 88, 89, 90, 91, 92,
	93, 94, 95, 96, 419, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
	143, 144, 145, 146, 147, 148, 149, 150, 151, 152,
	153, 154, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 164, 165, 166, 167, 168, 169, 418, 171, 172,
	173, 174, 175, 176, 177, 178, 179, 180, 181, 182,
	183, 184, 185, 186, 187, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 207, 208, 209, 39, 210, 211,
	635, 38, 37, 0, 0, 428, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 40, 41, 42, 43, 44, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 80, 81, 82, 83, 84, 85, 86, 87, 88,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 39, 210, 211, 0, 38, 37, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 138, 139, 140, 141, 142, 143, 144,
	145, 146, 147, 148, 149, 150, 151, 152, 153, 154,
	155, 156, 157, 158, 159, 160, 161, 162, 163, 164,
	165, 166, 167, 168, 169, 170, 171, 172, 173, 174,
	175, 176, 177, 178, 179, 180, 181, 182, 183, 184,
	185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
	195, 196, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 206, 207, 208, 209, 447, 210, 211, 0, 38,
	37, 468, 452, 0, 0, 0, 0, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 454, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 462, 0, 0,
	0, 0, 0, 467, 0, 0, 0, 475, 0, 0,
	0, 0, 456, 0, 0, 0, 0, 0, 0, 449,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 474,
	465, 464, 0, 471, 0, 0, 0, 0, 0, 0,
	0, 446, 0, 0, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 455, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 450, 448, 473, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 451, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 477, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 459,
}

var yyPact = [...]int16{
	276, -1000, 54, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 740, 707, 1517, 735, 769, 795, 276,
	1517, 713, 863, 1517, 234, 225, -1000, -1000, 658, -1000,
	-1000, -1000, -1000, 777, 43, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1517, 224, -1000, -1000, -1000, -1000, -1000, 781,
	-1000, 394, 36, 1517, 1517, 900, 35, -1000, -1000, -1000,
	538, -1000, 1517, 650, 1517, 769, 1517, 1517, 849, 393,
	-1000, -1000, 406, -1000, 879, 1517, 255, -1000, -1000, 900,
	-1000, 699, 927, 150, -1000, 149, -1000, -1000, -1000, 148,
	-1000, -1000, -1000, 1517, 678, -1000, -1000, 293, 620, 732,
	-1000, 848, 34, -1000, -1000, -1000, 873, -1000, 14, 27,
	703, 882, -1000, -1000, -1000, -1000, -1000, 80, -1000, 218,
	1517, -1000, 402, 878, 877, 231, -1000, 13, -177, 792,
	-1000, 147, 146, -1000, -1000, -1000, -1000, -1000, 474, 473,
	-1000, -1000, -1000, 178, 175, 1517, -1000, 12, 11, 58,
	1517, -1000, 456, -1000, 178, 10, 458, 446, -2, 1517,
	178, 463, 8, 1517, 178, -1000, 486, 531, 626, 604,
	462, 7, 178, 1517, 1517, 140, 429, -1000, 876, 199,
	228, -1000, -1000, 399, -1000, -1000, 1049, 490, 1283, -1000,
	-1000, -1000, -1000, 17, -1000, 170, -1000, 847, 28, -107,
	-1000, -1000, 1744, -1000, -1000, 1517, 2, 1, 1517, -116,
	-119, -1000, -1000, -1000, 571, 308, 308, 1517, 730, 729,
	642, 531, -1000, 616, -1000, 642, 642, 649, 1517, 649,
	-1000, -120, -1000, 531, 682, 239, 191, -1000, -1000, 324,
	385, -1000, -1000, -123, -1000, -1000, -1000, 178, 458, 446,
	-2, -1000, -1000, 597, -1000, 217, -1000, -1000, 178, 178,
	178, -1000, 175, 178, -1000, 1517, 639, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -43, -44, -46, -10,
	721, -11, -12, -15, -1000, -1000, -1000, 300, -1000, -1000,
	-16, -19, -20, -21, -1000, -1000, 766, -22, -1000, 695,
	323, -1000, -1000, -1000, -1000, -1000, -23, -26, -124, 1517,
	1517, -76, 841, -1000, -1000, 1517, -1000, 1517, 639, -1000,
	-1000, -1000, 649, 302, 482, 310, -1000, -1000, 679, 649,
	-127, 1517, 178, -1000, 142, -1000, -1000, -1000, -1000, 212,
	-1000, -132, 212, 1517, -1000, 783, 944, 680, -1000, 1517,
	-1000, 901, -1000, 1049, -1000, 678, -1000, -1000, 697, 26,
	-27, -1000, -1000, 170, 838, -1000, -1000, 249, -1000, 178,
	141, -31, 139, -32, 138, -37, 136, -49, -51, -182,
	-182, -182, -1000, 135, 134, -182, -182, -1000, 133, 301,
	122, 118, 130, 129, 308, -137, -140, -1000, 822, -1000,
	1744, -1000, 281, 641, -1000, 208, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 308, -1000, -1000, -1000, -1000, 777, 862,
	-1000, 649, -1000, -1000, -1000, -1000, 443, 943, -1000, 789,
	639, -1000, -1000, 697, -1000, -1000, -1000, -1000, 400, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 128, 124, 123,
	120, -1000, -1000, -1000, -1000, 238, -1000, 387, 119, -1000,
	-40, 178, 1517, 175, -1000, 281, -1000, -1000, -77, 117,
	66, 116, -78, 115, -79, 114, -54, 113, -55, -145,
	-1000, -1000, -148, -153, 61, -83, -157, -84, -85, 183,
	226, 367, 112, 268, 108, -86, -87, -1000, 308, 279,
	-1000, 827, 577, 521, -1000, -1000, -1000, 109, 778, 582,
	859, 649, -1000, -1000, 212, 538, 428, 461, 786, -1000,
	631, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	483, -1000, -1000, -1000, 880, -1000, -158, -1000, 888, 170,
	603, -1000, -1000, -88, -1000, -89, -92, -93, -1000, -95,
	-1000, -96, 106, -97, 105, -1000, 104, -1000, 100, -1000,
	99, -1000, -100, -103, -1000, -1000, 93, -1000, -1000, -1000,
	182, -1000, -105, -56, -108, -1000, -1000, -1000, 308, 1517,
	-1000, 459, -1000, -1000, 207, -1000, -1000, 823, -1000, -1000,
	517, 932, 898, 466, -1000, -1000, 65, -1000, -1000, -1000,
	538, -1000, 656, 178, 612, -1000, 629, 485, -1000, -1000,
	37, -1000, 91, 91, 90, 75, 72, 89, 88, 527,
	257, 480, 551, 541, -1000, 697, 1517, -1000, -1000, -1000,
	549, -1000, -1000, -1000, -1000, -1000, -1000, -113, -1000, -117,
	-135, -138, -143, -1000, -1000, -151, -1000, 720, 85, 709,
	785, -58, -1000, 459, -1000, 496, 308, -1000, 806, -1000,
	438, -1000, -1000, 867, 168, 56, -71, 504, 809, 545,
	-1000, -1000, -1000, 907, -1000, 21, 697, -1000, -1000, 304,
	625, -1000, -1000, 321, -1000, 356, -1000, -1000, -1000, 244,
	243, -1000, -60, 674, 488, 581, 651, 750, -1000, -1000,
	-1000, 363, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	81, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 459, -1000, -1000, -1000, -1000, -1000,
	-1000, 354, -163, 262, 755, 1517, -1000, 308, -1000, -1000,
	-1000, 161, 925, -1000, -1000, -1000, 97, -71, 495, 803,
	-1000, 850, -168, 505, 178, 487, -1000, -1000, 353, -72,
	264, -1000, -1000, 712, 712, -1000, 664, -1000, 178, 917,
	909, 1517, -1000, -1000, 749, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 459, -1000,
	-1000, -63, 779, -1000, 506, 506, -162, -1000, 326, -1000,
	178, -1000, 41, -1000, 692, 924, 79, -1000, 77, -1000,
	-1000, -1000, 73, -1000, -1000, -1000, -1000, -71, 930, 1517,
	-1000, -1000, -1000, 584, 264, -101, 719, 368, -1000, 1517,
	353, -65, -1000, 248, 712, -1000, -1000, -1000, -1000, 676,
	874, -167, 64, 893, -1000, -1000, -1000, 839, 947, -1000,
	-1000, -1000, -1000, 271, -1000, -1000, -1000, 145, 63, -1000,
	-1000, -1000, -1000, 492, -1000, -1000, -1000, -1000, -1000, 560,
	1517, 594, 411, -1000, -1000, -170, -68, -1000, 487, -1000,
	274, -1000, -1000, 195, 432, -1000, -181, -1000, -1000, -1000,
	-1000, -1000, -1000, 203, -1000, -71, 288, 738, -173, -1000,
	-1000, -1000, -1000, -1000, -1000, 471, 451, -1000, -1000, 418,
	-1000, -1000, 153, 445, 437, -1000, -1000, -1000, 251, 939,
	-1000, 872, -1000, 424, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1517, -1000, -1000, 258,
	286, -1000, -1000, -1000, 398, -1000, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1290, 41, 1116, 59, 1114, 34, 1113, 1112, 1110,
	443, 42, 1108, 908, 1107, 1106, 23, 1105, 1104, 1103,
	1102, 1101, 1100, 15, 456, 1099, 0, 11, 2, 60,
	1098, 1097, 1096, 1095, 1094, 1093, 1092, 1091, 1090, 1089,
	1088, 1087, 1086, 1085, 64, 1084, 1083, 1082, 1081, 57,
	1080, 1078, 54, 1075, 1071, 1070, 55, 1069, 45, 52,
	43, 1068, 4, 62, 58, 1066, 53, 1064, 1063, 1062,
	1061, 48, 66, 63, 50, 1060, 20, 16, 24, 1058,
	65, 40, 1057, 5, 14, 1056, 1055, 1054, 1050, 28,
	1049, 1048, 1047, 1046, 1043, 1042, 1041, 1040, 1039, 36,
	26, 1038, 1036, 25, 1, 1035, 13, 1034, 1033, 1032,
	1031, 1030, 1029, 1028, 1027, 19, 39, 38, 1026, 44,
	1025, 1024, 1023, 1022, 1021, 1020, 1018, 1011, 1009, 1008,
	37, 1002, 33, 6, 3, 1000, 997, 18, 10, 9,
	7, 996, 995, 994, 993, 22, 992, 12, 991, 990,
	988, 987, 985, 984, 982, 17, 981, 979, 8, 978,
	977, 47, 976, 46, 21, 974, 973, 972, 30, 970,
	969, 309, 968, 967, 965, 964, 963, 962, 960, 49,
	51, 958, 957, 31, 29, 956, 955, 425, 61, 56,
	954,
}

var yyR1 = [...]uint8{
	0, 93, 22, 22, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 12, 23, 23, 62, 62, 28, 94,
	94, 24, 24, 95, 95, 25, 25, 27, 27, 26,
	26, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 14, 40, 40, 41, 41, 43,
	43, 44, 44, 44, 46, 97, 98, 55, 55, 56,
	54, 59, 59, 60, 1, 1, 3, 3, 2, 2,
	99, 99, 99, 101, 101, 102, 102, 102, 102, 104,
	104, 104, 105, 105, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 100, 100, 107,
	108, 108, 109, 109, 110, 110, 111, 111, 111, 75,
	75, 76, 76, 47, 47, 47, 48, 48, 49, 50,
	112, 112, 113, 113, 114, 114, 51, 51, 52, 53,
	53, 6, 6, 57, 57, 57, 57, 63, 63, 66,
	66, 65, 65, 4, 4, 5, 5, 64, 64, 45,
	42, 42, 42, 42, 42, 42, 79, 79, 80, 80,
	80, 116, 116, 117, 118, 118, 118, 119, 119, 15,
	120, 120, 120, 120, 120, 120, 120, 120, 121, 121,
	121, 121, 121, 123, 123, 67, 68, 124, 125, 61,
	61, 126, 126, 126, 126, 129, 129, 130, 130, 127,
	127, 127, 127, 127, 131, 131, 131, 137, 137, 132,
	132, 138, 138, 138, 138, 138, 139, 139, 139, 139,
	139, 140, 140, 140, 141, 141, 141, 141, 141, 141,
	141, 143, 143, 143, 143, 143, 143, 143, 144, 144,
	133, 133, 133, 146, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 148, 148, 148, 148, 148, 148,
	149, 149, 152, 152, 152, 152, 152, 153, 153, 153,
	153, 153, 150, 150, 150, 150, 151, 151, 145, 145,
	154, 154, 155, 155, 134, 134, 134, 134, 135, 135,
	135, 156, 157, 158, 136, 136, 128, 69, 69, 70,
	70, 71, 71, 16, 8, 8, 8, 8, 159, 85,
	85, 162, 163, 163, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 164, 165, 165, 165,
	165, 165, 165, 166, 166, 167, 167, 167, 86, 87,
	87, 88, 88, 89, 9, 9, 9, 168, 168, 160,
	160, 160, 161, 161, 161, 17, 18, 19, 90, 90,
	91, 91, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 20, 21, 21, 21, 92, 92,
	10, 10, 10, 10, 172, 172, 169, 169, 170, 170,
	29, 29, 29, 58, 58, 30, 30, 30, 30, 30,
	30, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 32, 32, 32, 32, 32, 32, 32, 33, 33,
	33, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 35, 35, 36, 36, 36, 36, 37, 37, 37,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 39, 74, 77, 77, 78, 78, 78,
	78, 78, 115, 173, 173, 173, 173, 173, 179, 179,
	180, 180, 174, 174, 174, 175, 175, 175, 175, 176,
	176, 176, 177, 177, 177, 178, 178, 81, 82, 83,
	84, 84, 84, 84, 84, 72, 72, 73, 73, 73,
	73, 73, 73, 73, 142, 182, 182, 183, 183, 183,
	183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
	183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
	184, 185, 185, 185, 185, 185, 185, 185, 96, 96,
	96, 96, 186, 186, 187, 187, 122, 122, 122, 122,
	188, 189, 103, 103, 181, 181, 181, 190, 190, 11,
	11,
}

var yyR2 = [...]int8{
	0, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 3, 1, 3, 1, 1,
	3, 1, 3, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 5, 1, 1, 1, 1, 1,
	2, 1, 1, 1, 6, 0, 0, 1, 3, 1,
	8, 0, 1, 2, 0, 1, 0, 1, 1, 1,
	0, 1, 1, 2, 4, 4, 5, 6, 8, 0,
	2, 3, 1, 2, 3, 4, 3, 2, 1, 2,
	1, 1, 1, 2, 1, 1, 1, 0, 2, 4,
	0, 2, 0, 3, 0, 1, 0, 1, 2, 0,
	1, 1, 2, 4, 4, 1, 1, 3, 1, 6,
	2, 1, 1, 1, 0, 1, 1, 3, 2, 7,
	8, 0, 1, 5, 4, 4, 4, 2, 3, 0,
	1, 1, 2, 2, 1, 0, 1, 0, 2, 5,
	2, 5, 5, 7, 5, 1, 1, 2, 5, 7,
	5, 0, 1, 2, 0, 2, 1, 0, 1, 8,
	0, 2, 2, 1, 1, 1, 1, 2, 0, 3,
	3, 4, 3, 0, 2, 1, 7, 0, 0, 0,
	2, 0, 1, 1, 2, 4, 4, 4, 4, 0,
	4, 3, 2, 5, 0, 3, 3, 0, 1, 1,
	2, 1, 2, 3, 1, 1, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 3, 4, 4, 5, 4,
	1, 0, 2, 3, 3, 2, 3, 3, 1, 2,
	1, 3, 2, 5, 0, 3, 3, 4, 4, 3,
	4, 4, 2, 2, 0, 2, 2, 2, 2, 2,
	0, 3, 0, 1, 3, 2, 2, 0, 3, 3,
	3, 3, 0, 1, 2, 1, 0, 2, 0, 1,
	1, 2, 5, 4, 0, 2, 2, 2, 3, 3,
	2, 2, 0, 0, 4, 6, 0, 0, 3, 1,
	3, 1, 1, 9, 0, 1, 1, 1, 0, 1,
	1, 3, 1, 2, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 6, 0,
	1, 1, 3, 2, 0, 1, 1, 0, 1, 0,
	1, 1, 0, 2, 2, 5, 5, 4, 0, 1,
	1, 2, 3, 3, 2, 1, 2, 1, 1, 1,
	2, 1, 1, 1, 6, 6, 8, 10, 1, 3,
	1, 1, 1, 1, 1, 3, 0, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 5, 5, 4, 5, 5, 1, 4,
	4, 1, 4, 6, 1, 4, 1, 1, 1, 2,
	4, 1, 1, 4, 5, 4, 7, 4, 7, 10,
	7, 1, 4, 1, 1, 1, 1, 1, 1, 4,
	4, 5, 5, 5, 4, 5, 6, 5, 6, 1,
	4, 6, 1, 4, 6, 1, 4, 6, 1, 1,
	1, 2, 1, 1, 2, 3, 2, 1, 2, 1,
	2, 1, 6, 0, 1, 2, 1, 2, 1, 1,
	2, 2, 0, 1, 1, 0, 3, 5, 3, 0,
	1, 1, 0, 1, 1, 0, 3, 5, 2, 2,
	1, 1, 2, 2, 2, 2, 1, 5, 6, 7,
	9, 9, 11, 4, 4, 1, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 3, 1, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	2, 0, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 2, 1, 4, 1, 4, 0, 1, 1, 2,
	3, 3, 1, 1, 0, 3, 4, 0, 1, 1,
	2,
}

var yyChk = [...]int16{
	-1000, -93, -22, -13, -12, -14, -15, -16, -17, -18,
	-19, -20, -21, 7, 16, 248, 22, 26, 14, 250,
	60, -120, -8, 56, 131, 200, 215, 114, 137, 80,
	62, 78, 167, -24, -27, -26, -7, 243, 242, 4,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 80, 81, 82, 83, 84, 85, 86, 87,
	88, 89, 90, 91, 92, 93, 94, 95, 96, 97,
	98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 141, 142, 143, 144, 145, 146, 147,
	148, 149, 150, 151, 152, 153, 154, 155, 156, 157,
	158, 159, 160, 161, 162, 163, 164, 165, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 176, 177,
	178, 179, 180, 181, 182, 183, 184, 185, 186, 187,
	188, 189, 190, 191, 192, 193, 194, 195, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
	208, 209, 210, 211, 212, 213, 214, 215, 216, 217,
	218, 219, 220, 221, 222, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 233, 234, 235, 236, 237,
	239, 240, 60, -92, -10, 55, 32, 63, 20, 44,
	-13, -23, -27, 60, 30, -25, -27, 225, 225, 80,
	-119, 45, 251, -23, 44, 252, 60, 13, -96, -186,
	-187, -188, 172, -189, 162, 251, -23, -24, -90, -91,
	-171, 59, 29, 159, 176, 165, 177, 99, 174, 83,
	173, 47, 179, 251, -6, 124, -27, -169, 85, -23,
	-10, -23, -27, -40, -41, -42, -43, -45, 5, 39,
	50, -79, -44, -80, -46, -47, -57, 22, -53, 57,
	13, -187, 172, 162, 162, 24, -27, -121, 216, -159,
	-171, 67, 10, 249, 249, 249, -27, -161, 105, 28,
	-170, 201, 95, 61, 35, 251, -44, 5, 39, 22,
	253, -72, -74, -73, 94, 62, 198, 125, 88, 253,
	94, 198, 62, 13, 94, -80, 22, -63, 230, 92,
	198, 62, 94, 13, 253, 230, -28, -27, 162, 24,
	24, 204, 237, -67, -68, -69, 253, 255, 44, 249,
	249, 145, 145, -172, -26, -11, 241, -26, -27, -55,
	-56, -54, -28, -73, -26, 253, 149, 149, 253, -48,
	-51, -49, -52, -50, -28, -26, 149, 253, -28, -26,
	-66, -65, -4, 85, 144, 92, 96, 149, 253, -26,
	-28, -62, -28, -63, 222, 41, 24, 204, 237, -122,
	-188, -189, -124, -70, -71, -56, -72, 94, 198, 125,
	88, 163, 100, 120, 178, -85, -162, -86, 12, -23,
	252, 241, 35, 251, 254, 252, -29, -30, -38, -39,
	-31, -32, -33, -34, -36, -37, 87, 11, 169, 65,
	168, 184, 18, 102, 33, 142, 58, 112, 205, 238,
	66, 185, 43, 23, 77, 76, 37, 49, 17, -35,
	143, 79, 90, 170, 75, 53, 231, 227, -62, 253,
	253, -181, -190, -28, 254, 252, 254, 252, -29, -2,
	146, 236, -115, -173, -179, -180, 104, 244, 139, -115,
	-62, 61, 61, -64, 89, -4, 95, -64, -64, -116,
	85, -62, -116, 252, 254, -66, 71, 222, -123, 189,
	-189, -125, 254, 252, 100, -160, 232, 229, -94, -26,
	-87, -26, -26, -11, -26, -97, -56, -59, -60, 91,
	253, 235, 253, 235, 253, 235, 253, 87, 11, 253,
	253, 253, 196, 253, 253, 253, 253, 49, 253, 67,
	239, 101, 253, 253, 254, -62, -62, 254, 35, -49,
	-28, -52, -28, -59, -116, -174, 209, 181, -180, -179,
	105, 28, -116, 254, -28, -26, 249, -117, -118, 148,
	248, 254, -117, -28, -5, 45, 6, 71, -23, -61,
	19, -71, -161, -163, -164, -139, -140, 45, 224, -165,
	217, 182, 194, 236, 146, -166, -167, 48, 193, 140,
	158, -142, 154, 175, 122, 15, 40, 138, 188, 180,
	219, 251, 253, 35, -98, -1, 217, -26, 249, 253,
	249, 253, 249, 253, 249, 253, 235, 253, 235, -58,
	249, 256, -58, -58, 249, 249, -58, -58, 249, 226,
	152, 61, 253, 61, 253, 249, 249, -115, 254, 254,
	42, 41, -112, 22, -99, -101, -102, 19, 130, -175,
	233, -115, -119, 30, -116, 150, 6, -126, -129, -130,
	44, -60, -164, -26, 19, 249, 249, 249, 249, 249,
	68, 190, 128, 249, 253, -26, -88, -89, -28, -11,
	-3, -2, 254, 249, 254, 82, 11, 249, 254, 249,
	254, 249, 253, 249, 253, 254, 252, 254, 252, 254,
	252, 254, 82, 11, 254, 254, 252, 254, 254, 240,
	226, 166, 249, 212, 249, 254, 254, -115, -81, 207,
	42, -113, 103, -100, 118, 135, -103, 172, 249, 241,
	8, 69, 10, -176, 116, 108, 30, -116, -117, -6,
	150, -127, -131, 12, 213, -130, 44, 93, 155, 134,
	-182, -183, 31, 171, 164, 38, 157, 192, 127, 126,
	46, 81, 123, 86, 118, 254, 252, -9, 9, 21,
	-99, 254, 254, 254, 254, 254, 254, 249, 254, 249,
	249, 249, 249, 254, 254, 249, 240, 254, 253, 254,
	-115, -23, -114, -76, -77, -74, -78, 42, 41, 62,
	198, -81, -107, -108, 233, 42, 135, 8, 19, -177,
	64, 183, -95, 253, -168, -26, -163, -6, -128, -132,
	186, -136, -138, 121, -139, 224, -140, -141, 15, 52,
	13, 40, -26, 97, 93, 22, 197, 20, 254, -183,
	-184, 249, -184, 249, 249, 228, 228, -184, 249, 249,
	132, -184, 42, 148, 206, 19, 148, 178, 19, 148,
	178, 19, -168, -89, -100, 254, 254, 254, 254, 254,
	254, 61, 249, 61, 44, 253, -77, -78, -115, 42,
	149, -109, 27, 241, -103, -104, 253, 135, 8, 44,
	-178, 119, -16, 16, 251, -133, -138, -145, 141, 245,
	-154, -155, -135, 133, 30, 121, 191, -26, 57, 220,
	220, 253, 28, 105, 197, 106, 106, 54, 54, -185,
	147, 156, 129, 223, 187, 115, 249, -75, -76, 166,
	254, 212, -82, -83, 63, 20, -62, -115, -110, 241,
	10, 254, -105, -106, 59, 29, 159, 176, 165, 177,
	99, 174, 83, 173, 47, 179, -104, 135, 42, 34,
	254, -26, -134, 136, -146, -147, 161, 172, -145, 253,
	141, 245, -155, -137, -132, -137, -158, 72, -26, 15,
	15, -62, 253, 44, -84, 51, 85, 57, 172, -84,
	254, -111, 210, 172, -26, 254, -106, 67, 10, 249,
	249, 249, -104, 8, -23, 107, 117, 109, -145, -148,
	253, 199, 24, 73, 161, -62, -147, -156, -133, -157,
	-158, 74, 68, -143, 24, 254, 249, -83, 42, 19,
	4, 210, 249, 151, 249, 135, -149, 110, -62, 178,
	155, 160, 134, 98, 111, 202, 84, 254, -134, 208,
	-144, 247, 172, 202, 70, 254, 234, -104, -150, 113,
	246, -152, 73, 10, 254, 155, 134, 155, 134, 151,
	247, 155, 134, 155, 134, -151, 218, 6, -153, 24,
	53, 191, 221, -28, 214, 203, 19, 6, -26, 178,
}

var yyDef = [...]int16{
	13, -2, 1, 2, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 0, -2, 0, 0, 0, 0, 13,
	0, 0, 0, 0, 0, 0, 333, 334, 335, 336,
	465, 466, 467, 327, 21, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 0, 0, 538, 540, 541, 542, 543, 0,
	3, 708, 14, 0, 0, 518, 25, 331, 332, 337,
	291, 328, 0, 546, 0, 0, 0, 0, 0, 709,
	710, 712, 0, 714, 0, 0, 338, 468, 517, 519,
	520, 0, 0, 0, 525, 0, 527, 528, 529, 0,
	531, 532, 533, 0, 512, 292, 22, 548, 0, 0,
	539, 0, 0, 204, 205, 206, 207, 208, 0, 0,
	0, 315, 209, 316, 211, 212, 213, 0, 275, 0,
	0, 711, 0, 0, 0, 0, 15, 457, 0, 0,
	521, 0, 0, 524, 526, 530, 26, 515, 0, 0,
	516, 549, 547, 0, 0, 0, 210, 0, 0, 0,
	0, 310, 0, 666, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 317, 0, 299, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 18, 0, 0,
	0, 720, 721, 716, 345, 347, 0, 0, 0, 522,
	523, 513, 514, 534, 544, 535, 729, 27, 0, 0,
	217, 219, 0, 665, 624, 0, 0, 0, -2, 0,
	0, 276, 286, 278, 0, 633, 633, 0, 0, 0,
	307, 300, 301, 0, 304, 307, 307, 321, 0, 321,
	297, 0, 16, 299, 0, 0, 0, 713, 715, 343,
	717, 718, 348, 0, 459, 461, 462, 58, 162, 89,
	52, 339, 340, 0, 342, 509, 469, 470, 0, 499,
	0, 730, 0, 0, 215, 0, 221, 550, 551, 552,
	555, 556, 557, 558, 559, 560, 0, 561, 568, 0,
	0, 609, 612, 615, 618, 619, 620, 0, 622, 623,
	0, 0, 571, 574, 576, 577, 578, 0, 581, 582,
	0, 593, 594, 595, 596, 597, 598, 591, 0, 0,
	0, 0, 0, 728, 273, 0, 274, 0, 221, 288,
	228, 229, 321, 642, 634, 636, 638, 639, 0, 321,
	0, 0, 0, 294, 0, 302, 303, 295, 296, 324,
	322, 0, 324, 0, 298, 305, 0, 0, 329, 0,
	719, 349, 458, 0, 341, 512, 510, 511, 0, 19,
	0, 500, 545, 536, 0, 216, 218, 224, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 621, 0, 0, 0, 0, 579, 0, 0,
	0, 0, 0, 0, 633, 0, 0, 673, 0, 277,
	0, 287, 0, 230, 311, 645, 643, 644, 635, 637,
	640, 641, 312, 633, 309, 314, 308, 318, 327, 0,
	326, 321, 320, 17, 293, 306, 0, 0, 344, 351,
	0, 460, 463, 471, 472, 474, 475, 476, 0, 479,
	480, 481, 482, 483, 484, 485, 486, 0, 0, 0,
	0, 380, 381, 382, 383, 487, 492, 0, 495, 497,
	0, 0, 0, 0, 214, 226, 225, 223, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	553, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 667, 633, 0,
	725, 0, 257, 0, 281, 231, 232, 0, 0, 649,
	0, 321, 323, 325, 324, 291, 0, -2, 352, 353,
	0, 350, 473, 477, 478, 376, 377, 378, 379, 488,
	489, 493, 494, 496, 0, 20, 0, 501, 504, 537,
	230, 227, 600, 0, 562, 0, 0, 0, 569, 0,
	604, 0, 0, 0, 0, 610, 0, 613, 0, 616,
	0, 565, 0, 0, 570, 572, 0, 575, 580, 583,
	0, 585, 0, 587, 0, 599, 592, 668, 633, 0,
	726, 284, 282, 283, 260, 280, 233, 0, 722, 723,
	0, 0, 0, 652, 650, 651, 507, 313, 319, 289,
	291, 456, 0, 0, 0, 354, 0, 0, 490, 491,
	0, 675, 0, 0, 0, 0, 0, 0, 0, 0,
	687, 0, 0, 0, 699, 507, 0, 503, 505, 506,
	257, 601, 563, 564, 602, 603, 605, 0, 607, 0,
	0, 0, 0, 566, 567, 0, 584, 0, 0, 0,
	669, 0, 279, 285, 271, 0, 633, 627, 0, 629,
	0, 631, 258, 262, 0, 0, 239, 0, 0, 655,
	653, 654, 646, 0, 648, 23, 508, 290, 346, 438,
	0, 362, 369, 0, 371, 0, 374, 375, 384, 0,
	0, 390, 0, 0, 0, 0, 0, 0, 674, 676,
	677, 701, 678, 679, 680, 681, 682, 683, 684, 685,
	0, 688, 689, 690, 691, 692, 693, 694, 695, 696,
	697, 698, 498, 502, 269, 606, 608, 611, 614, 617,
	573, 0, 0, 0, 0, 0, 272, 633, 626, 628,
	630, 264, 0, 261, 234, 235, 0, 239, 0, 0,
	632, 0, 0, 464, 0, 444, 370, 400, 404, 438,
	439, 440, 361, 367, 367, 453, 0, 372, 0, 0,
	0, 0, 365, 366, 0, 355, 356, 358, 357, 700,
	702, 703, 704, 705, 706, 707, 686, 220, 270, 586,
	590, 588, 670, 671, 0, 0, 0, 625, 266, 265,
	0, 240, 0, 242, 0, 0, 0, 248, 0, 250,
	251, 252, 0, 254, 255, 256, 236, 239, 0, 0,
	647, 24, 360, 0, 438, 414, 0, 0, 402, 0,
	404, 0, 441, 438, 368, 452, 450, 453, 373, 385,
	391, 0, 0, 0, 658, 660, 661, 0, 0, 659,
	657, 259, 267, 0, 263, 241, 243, 0, 0, 247,
	249, 253, 237, 0, 656, 445, 446, 447, 401, 420,
	0, 0, 0, 413, 412, 0, 0, 448, 444, 449,
	454, 386, 387, 389, 0, 363, 0, 672, 662, 664,
	663, 268, 244, 0, 246, 239, 432, 422, 0, 415,
	416, 417, 418, 419, 405, 406, 409, 443, 451, 0,
	388, 398, 0, 392, 395, 589, 245, 238, 436, 433,
	435, 427, 423, 0, 442, 407, 408, 410, 411, 455,
	399, 393, 394, 396, 397, 403, 0, 434, 421, 0,
	0, 425, 426, 437, 0, 424, 428, 429, 430, 431,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	253, 254, 256, 3, 252, 3, 251, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 250,
	3, 255,
}

var yyTok2 = [...]uint8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if yyDollar[1].node != nil {
				stmt := yyDollar[1].node
				stmt.SetText(nextQuery(yylex))
				yylex.(*yyLexImpl).result = append(yylex.(*yyLexImpl).result, stmt)
			}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if yyDollar[3].node != nil {
				stmt := yyDollar[3].node
				stmt.SetText(nextQuery(yylex))
				yylex.(*yyLexImpl).result = append(yylex.(*yyLexImpl).result, stmt)
			}
		}
	case 13:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.node = nil
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.TableName{
				Table: yyDollar[1].anything.(*element.Identifier),
			}
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = &ast.TableName{
				Schema: yyDollar[1].anything.(*element.Identifier),
				Table:  yyDollar[3].anything.(*element.Identifier),
			}
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*element.Identifier{yyDollar[1].anything.(*element.Identifier)}
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*element.Identifier), yyDollar[3].anything.(*element.Identifier))
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.IndexName{
				Index: yyDollar[1].anything.(*element.Identifier),
			}
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = &ast.IndexName{
				Schema: yyDollar[1].anything.(*element.Identifier),
				Index:  yyDollar[3].anything.(*element.Identifier),
			}
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.SequenceName{
				Sequence: yyDollar[1].anything.(*element.Identifier),
			}
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = &ast.SequenceName{
				Schema:   yyDollar[1].anything.(*element.Identifier),
				Sequence: yyDollar[3].anything.(*element.Identifier),
			}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeNonQuoted,
				Value: yyDollar[1].str,
			}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeNonQuoted,
				Value: yyDollar[1].str,
			}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeQuoted,
				Value: yyDollar[1].str,
			}
		}
	case 204:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.AlterTableStmt{
				TableName:         yyDollar[3].anything.(*ast.TableName),
				AlterTableClauses: yyDollar[5].anything.([]ast.AlterTableClause),
			}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{yyDollar[1].anything.(ast.AlterTableClause)}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{yyDollar[1].anything.(ast.AlterTableClause)}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.AlterTableClause), yyDollar[2].anything.(ast.AlterTableClause))
		}
	case 214:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.anything = &ast.AddColumnClause{
				Columns: yyDollar[3].anything.([]*ast.ColumnDef),
			}
		}
	case 215:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// TODO
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// TODO
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*ast.ColumnDef{yyDollar[1].anything.(*ast.ColumnDef)}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*ast.ColumnDef), yyDollar[3].anything.(*ast.ColumnDef))
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 220:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			var collation *ast.Collation
			if yyDollar[3].anything != nil {
				collation = yyDollar[3].anything.(*ast.Collation)
			}
			props := []ast.ColumnProp{}
			sort := ast.ColumnProp(yyDollar[4].i)
			if sort != ast.ColumnPropEmpty {
				props = append(props, sort)
			}
			invisible := ast.ColumnProp(yyDollar[5].i)
			if invisible != ast.ColumnPropEmpty {
				props = append(props, invisible)
			}

			var constraints []*ast.InlineConstraint
			if yyDollar[8].anything != nil {
				constraints = yyDollar[8].anything.([]*ast.InlineConstraint)
			}

			yyVAL.anything = &ast.ColumnDef{
				ColumnName:  yyDollar[1].anything.(*element.Identifier),
				Datatype:    yyDollar[2].anything.(element.Datatype),
				Collation:   collation,
				Props:       props,
				Constraints: constraints,
			}
		}
	case 221:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.Collation{Name: yyDollar[2].anything.(*element.Identifier)}
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropEmpty)
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropSort)
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropEmpty)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropInvisible)
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropVisible)
		}
	case 230:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*ast.InlineConstraint{yyDollar[1].anything.(*ast.InlineConstraint)}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*ast.InlineConstraint), yyDollar[2].anything.(*ast.InlineConstraint))
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyDollar[3].anything.([]*ast.ColumnDef),
			}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyDollar[3].anything.([]*ast.ColumnDef),
			}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyDollar[1].anything.([]*ast.ColumnDef),
			}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*ast.ColumnDef{yyDollar[1].anything.(*ast.ColumnDef)}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*ast.ColumnDef), yyDollar[3].anything.(*ast.ColumnDef))
		}
	case 279:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			var collation *ast.Collation
			if yyDollar[3].anything != nil {
				collation = yyDollar[3].anything.(*ast.Collation)
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyDollar[1].anything.(*element.Identifier),
				Datatype:   yyDollar[2].anything.(element.Datatype),
				Collation:  collation,
				Props:      []ast.ColumnProp{},
			}
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*ast.ColumnDef{yyDollar[1].anything.(*ast.ColumnDef)}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*ast.ColumnDef), yyDollar[3].anything.(*ast.ColumnDef))
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyDollar[1].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{ast.ColumnProp(yyDollar[2].i)},
			}
		}
	case 289:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			prop := ast.ColumnPropSubstitutable
			if yyDollar[7].b {
				prop = ast.ColumnPropSubstitutableForce
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyDollar[2].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{prop},
			}
		}
	case 290:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			prop := ast.ColumnPropNotSubstitutable
			if yyDollar[8].b {
				prop = ast.ColumnPropNotSubstitutableForce
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyDollar[2].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{prop},
			}
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.b = false
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.b = true
		}
	case 293:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			props := []ast.DropColumnProp{}
			if yyDollar[4].anything != nil {
				props = append(props, yyDollar[4].anything.([]ast.DropColumnProp)...)
			}
			online := ast.DropColumnProp(yyDollar[5].i)
			if online != ast.DropColumnPropEmpty {
				props = append(props, online)
			}
			yyVAL.anything = &ast.DropColumnClause{
				Type:    ast.DropColumnTypeSetUnused,
				Columns: yyDollar[3].anything.([]*element.Identifier),
				Props:   props,
			}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			props := []ast.DropColumnProp{}
			if yyDollar[3].anything != nil {
				props = append(props, yyDollar[3].anything.([]ast.DropColumnProp)...)
			}
			cc := &ast.DropColumnClause{
				Type:    ast.DropColumnTypeDrop,
				Columns: yyDollar[2].anything.([]*element.Identifier),
				Props:   props,
			}
			var checkout int
			if yyDollar[4].anything != nil {
				checkout = yyDollar[4].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			cc := &ast.DropColumnClause{
				Type: ast.DropColumnTypeDropUnusedColumns,
			}
			var checkout int
			if yyDollar[4].anything != nil {
				checkout = yyDollar[4].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			cc := &ast.DropColumnClause{
				Type: ast.DropColumnTypeDropColumnsContinue,
			}
			var checkout int
			if yyDollar[4].anything != nil {
				checkout = yyDollar[4].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = []*element.Identifier{yyDollar[2].anything.(*element.Identifier)}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].anything
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.DropColumnProp{ast.DropColumnProp(yyDollar[1].i)}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.DropColumnProp), ast.DropColumnProp(yyDollar[2].i))
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.i = int(ast.DropColumnPropCascade)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.DropColumnPropInvalidate)
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.i = int(ast.DropColumnPropEmpty)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.DropColumnPropOnline)
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].i
		}
	case 309:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.anything = &ast.RenameColumnClause{
				OldName: yyDollar[3].anything.(*element.Identifier),
				NewName: yyDollar[5].anything.(*element.Identifier),
			}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{&ast.AddConstraintClause{
				Constraints: []*ast.OutOfLineConstraint{yyDollar[2].anything.(*ast.OutOfLineConstraint)},
			}}
		}
	case 311:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Name = yyDollar[3].anything.(*element.Identifier)
			yyVAL.anything = []ast.AlterTableClause{&ast.ModifyConstraintClause{
				Constraint: constraint,
			}}
		}
	case 312:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypePK
			yyVAL.anything = []ast.AlterTableClause{&ast.ModifyConstraintClause{
				Constraint: constraint,
			}}
		}
	case 313:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeUnique
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			yyVAL.anything = []ast.AlterTableClause{&ast.ModifyConstraintClause{
				Constraint: constraint,
			}}
		}
	case 314:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{&ast.RenameConstraintClause{
				OldName: yyDollar[3].anything.(*element.Identifier),
				NewName: yyDollar[5].anything.(*element.Identifier),
			}}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{yyDollar[1].anything.(ast.AlterTableClause)}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.AlterTableClause), yyDollar[2].anything.(ast.AlterTableClause))
		}
	case 318:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypePK
			yyVAL.anything = &ast.DropConstraintClause{
				Constraint: constraint,
			}
		}
	case 319:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeUnique
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			yyVAL.anything = &ast.DropConstraintClause{
				Constraint: constraint,
			}
		}
	case 320:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Name = yyDollar[3].anything.(*element.Identifier)
			yyVAL.anything = &ast.DropConstraintClause{
				Constraint: constraint,
			}
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 329:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.node = &ast.CreateTableStmt{
				TableName: yyDollar[4].anything.(*ast.TableName),
				RelTable:  yyDollar[6].anything.(*ast.RelTableDef),
			}
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 346:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			rd := &ast.RelTableDef{}
			if yyDollar[1].anything != nil {
				rd.TableStructs = yyDollar[1].anything.([]ast.TableStructDef)
			}
			yyVAL.anything = rd
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].anything
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].anything
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.TableStructDef{yyDollar[1].anything.(ast.TableStructDef)}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.TableStructDef), yyDollar[3].anything.(ast.TableStructDef))
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 463:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.node = &ast.CreateIndexStmt{
				Type:      yyDollar[2].str,
				IndexName: yyDollar[4].anything.(*ast.IndexName),
				Index:     yyDollar[7].anything.(*ast.TableIndexClause),
			}
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 498:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			alias, _ := yyDollar[2].anything.(*element.Identifier)
			yyVAL.anything = &ast.TableIndexClause{
				TableName:  yyDollar[1].anything.(*ast.TableName),
				Alias:      alias,
				IndexExprs: yyDollar[4].anything.([]ast.IndexExpr),
			}
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.IndexExpr{yyDollar[1].anything.(ast.IndexExpr)}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.IndexExpr), yyDollar[3].anything.(ast.IndexExpr))
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = ast.IndexExpr{
				Column:    yyDollar[1].anything.(*element.Identifier),
				Direction: yyDollar[2].str,
			}
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 515:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.DropIndexStmt{
				IndexName: yyDollar[2].anything.(*ast.IndexName),
			}
		}
	case 516:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.DropTableStmt{
				TableName: yyDollar[3].anything.(*ast.TableName),
			}
		}
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			// empty
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			// empty
		}
	case 534:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			// empty
		}
	case 535:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &ast.CommentStmt{
				Type:      ast.CommentOnTable,
				TableName: yyDollar[4].anything.(*ast.TableName),
				Comment:   yyDollar[6].str,
			}
		}
	case 536:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.node = &ast.CommentStmt{
				Type: ast.CommentOnColumn,
				TableName: &ast.TableName{
					Table: yyDollar[4].anything.(*element.Identifier),
				},
				ColumnName: yyDollar[6].anything.(*element.Identifier),
				Comment:    yyDollar[8].str,
			}
		}
	case 537:
		yyDollar = yyS[yypt-10 : yypt+1]
		{
			yyVAL.node = &ast.CommentStmt{
				Type: ast.CommentOnColumn,
				TableName: &ast.TableName{
					Schema: yyDollar[4].anything.(*element.Identifier),
					Table:  yyDollar[6].anything.(*element.Identifier),
				},
				ColumnName: yyDollar[8].anything.(*element.Identifier),
				Comment:    yyDollar[10].str,
			}
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			// empty
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.NumberOrAsterisk{Number: yyDollar[1].i}
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.NumberOrAsterisk{IsAsterisk: true}
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Char{}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 562:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Char{Size: &size}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 563:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Char{Size: &size, IsByteSize: true}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 564:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Char{Size: &size, IsCharSize: true}
			d.SetDataDef(element.DataDefChar)
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 566:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Varchar2{}
			d.Size = &size
			d.IsByteSize = true
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 567:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Varchar2{}
			d.Size = &size
			d.IsCharSize = true
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.NChar{}
			d.SetDataDef(element.DataDefNChar)
			yyVAL.anything = d
		}
	case 569:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNChar)
			yyVAL.anything = d
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNVarChar2)
			yyVAL.anything = d
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 573:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			scale := yyDollar[5].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Float{}
			d.SetDataDef(element.DataDefFloat)
			yyVAL.anything = d
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefFloat)
			yyVAL.anything = d
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.BinaryFloat{}
			d.SetDataDef(element.DataDefBinaryFloat)
			yyVAL.anything = d
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.BinaryDouble{}
			d.SetDataDef(element.DataDefBinaryDouble)
			yyVAL.anything = d
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Long{}
			d.SetDataDef(element.DataDefLong)
			yyVAL.anything = d
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			d := &element.LongRaw{}
			d.SetDataDef(element.DataDefLongRaw)
			yyVAL.anything = d
		}
	case 580:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Raw{Size: &size}
			d.SetDataDef(element.DataDefRaw)
			yyVAL.anything = d
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Date{}
			d.SetDataDef(element.DataDefDate)
			yyVAL.anything = d
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			d := yyDollar[1].anything.(*element.Timestamp)
			d.WithTimeZone = true
			yyVAL.anything = d
		}
	case 584:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			d := yyDollar[1].anything.(*element.Timestamp)
			d.WithLocalTimeZone = true
			yyVAL.anything = d
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			d := &element.IntervalYear{}
			d.SetDataDef(element.DataDefIntervalYear)
			yyVAL.anything = d
		}
	case 586:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			precision := yyDollar[4].i
			d := &element.IntervalYear{Precision: &precision}
			d.SetDataDef(element.DataDefIntervalYear)
			yyVAL.anything = d
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			d := &element.IntervalDay{}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 588:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			precision := yyDollar[4].i
			d := &element.IntervalDay{Precision: &precision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 589:
		yyDollar = yyS[yypt-10 : yypt+1]
		{
			precision := yyDollar[4].i
			sPrecision := yyDollar[9].i
			d := &element.IntervalDay{Precision: &precision, FractionalSecondsPrecision: &sPrecision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 590:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			sPrecision := yyDollar[6].i
			d := &element.IntervalDay{FractionalSecondsPrecision: &sPrecision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Timestamp{}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].i
			d := &element.Timestamp{FractionalSecondsPrecision: &precision}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Blob{}
			d.SetDataDef(element.DataDefBlob)
			yyVAL.anything = d
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Clob{}
			d.SetDataDef(element.DataDefClob)
			yyVAL.anything = d
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.NClob{}
			d.SetDataDef(element.DataDefNClob)
			yyVAL.anything = d
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.BFile{}
			d.SetDataDef(element.DataDefBFile)
			yyVAL.anything = d
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.RowId{}
			d.SetDataDef(element.DataDefRowId)
			yyVAL.anything = d
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.URowId{}
			d.SetDataDef(element.DataDefURowId)
			yyVAL.anything = d
		}
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.URowId{Size: &size}
			d.SetDataDef(element.DataDefURowId)
			yyVAL.anything = d
		}
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Char{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharacter)
			yyVAL.anything = d
		}
	case 601:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharacterVarying)
			yyVAL.anything = d
		}
	case 602:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharVarying)
			yyVAL.anything = d
		}
	case 603:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNCharVarying)
			yyVAL.anything = d
		}
	case 604:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefVarchar)
			yyVAL.anything = d
		}
	case 605:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNationalCharacter)
			yyVAL.anything = d
		}
	case 606:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			size := yyDollar[5].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNationalCharacterVarying)
			yyVAL.anything = d
		}
	case 607:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNationalChar)
			yyVAL.anything = d
		}
	case 608:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			size := yyDollar[5].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNationalCharVarying)
			yyVAL.anything = d
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 610:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 611:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			scale := yyDollar[5].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 613:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 614:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			scale := yyDollar[5].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 617:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			scale := yyDollar[5].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefInteger)
			yyVAL.anything = d
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefInt)
			yyVAL.anything = d
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefSmallInt)
			yyVAL.anything = d
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 126}
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefDoublePrecision)
			yyVAL.anything = d
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 63}
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefReal)
			yyVAL.anything = d
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.XMLType{}
			d.SetDataDef(element.DataDefXMLType)
			yyVAL.anything = d
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].anything
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			constraint := yyDollar[2].anything.(*ast.InlineConstraint)
			constraint.Name = yyDollar[1].anything.(*element.Identifier)
			yyVAL.anything = constraint
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypeNull,
			}
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypeNotNull,
			}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypeUnique,
			}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypePK,
			}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypeReferences,
			}
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 642:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 645:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 649:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 652:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 655:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 657:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			clause := &ast.ReferenceClause{}
			clause.Columns = yyDollar[4].anything.([]*element.Identifier)
			clause.Table = yyDollar[2].anything.(*ast.TableName)
			yyVAL.anything = clause
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.ReferenceOption{
				Type: yyDollar[2].anything.(ast.ReferenceAction),
			}
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.ReferenceOption{
				Type: yyDollar[2].anything.(ast.ReferenceAction),
			}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = ast.RefOptRestrict
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = ast.RefOptCascade
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = ast.RefOptSetNull
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = ast.RefOptNoAction
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = ast.RefOptSetDefault
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			constraint := yyDollar[2].anything.(*ast.OutOfLineConstraint)
			constraint.Name = yyDollar[1].anything.(*element.Identifier)
			yyVAL.anything = constraint
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 667:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeUnique
			constraint.Columns = yyDollar[3].anything.([]*element.Identifier)
			yyVAL.anything = constraint
		}
	case 668:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypePK
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			yyVAL.anything = constraint
		}
	case 669:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeReferences
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			constraint.Reference = yyDollar[6].anything.(*ast.ReferenceClause)
			yyVAL.anything = constraint
		}
	case 670:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeReferences
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			constraint.Reference = yyDollar[6].anything.(*ast.ReferenceClause)
			constraint.UpdateAction = yyDollar[9].anything.(*ast.ReferenceOption)
			yyVAL.anything = constraint
		}
	case 671:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeReferences
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			constraint.Reference = yyDollar[6].anything.(*ast.ReferenceClause)
			constraint.DeleteAction = yyDollar[9].anything.(*ast.ReferenceOption)
			yyVAL.anything = constraint
		}
	case 672:
		yyDollar = yyS[yypt-11 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeReferences
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			constraint.Reference = yyDollar[6].anything.(*ast.ReferenceClause)
			constraint.UpdateAction = yyDollar[9].anything.(*ast.ReferenceOption)
			constraint.DeleteAction = yyDollar[11].anything.(*ast.ReferenceOption)
			yyVAL.anything = constraint
		}
	case 673:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.anything = &ast.OutOfLineConstraint{}
		}
	case 701:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 708:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 716:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str += "'"
			yyVAL.str += yyDollar[2].str
		}
	}
	goto yystack /* stack new state and value */
}

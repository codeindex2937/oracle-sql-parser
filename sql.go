// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"strings"

	"github.com/sjjian/oracle-sql-parser/ast"
	"github.com/sjjian/oracle-sql-parser/ast/element"
)

func nextQuery(yylex interface{}) string {
	lex := yylex.(*yyLexImpl)
	tc := lex.scanner.TC
	query := string(lex.scanner.Text[lex.lastPos:tc])
	lex.lastPos = tc
	return strings.TrimSpace(query)
}

type yySymType struct {
	yys      int
	nothing  struct{}
	i        int
	b        bool
	str      string
	node     ast.Node
	anything interface{}
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault                = 57578
	yyEofCode                = 57344
	_E                       = 57506
	_G                       = 57507
	_K                       = 57508
	_M                       = 57509
	_P                       = 57510
	_T                       = 57511
	_add                     = 57350
	_advanced                = 57515
	_all                     = 57444
	_alter                   = 57348
	_always                  = 57423
	_archive                 = 57521
	_as                      = 57424
	_asc                     = 57568
	_at                      = 57445
	_attributes              = 57552
	_auto                    = 57526
	_basic                   = 57516
	_bfile                   = 57377
	_binaryDouble            = 57359
	_binaryFloat             = 57358
	_bitmap                  = 57559
	_blob                    = 57374
	_blockchain              = 57459
	_buffer_pool             = 57490
	_by                      = 57400
	_byte                    = 57352
	_cache                   = 57427
	_capacity                = 57527
	_cascade                 = 57410
	_cell_flash_cache        = 57491
	_char                    = 57351
	_character               = 57380
	_checkpoint              = 57456
	_clob                    = 57375
	_cluster                 = 57480
	_collate                 = 57393
	_column                  = 57446
	_columns                 = 57450
	_commit                  = 57472
	_compress                = 57517
	_constraint              = 57403
	_constraints             = 57453
	_continue                = 57451
	_create                  = 57458
	_creation                = 57482
	_critical                = 57532
	_cycle                   = 57428
	_data                    = 57466
	_date                    = 57362
	_day                     = 57372
	_dec                     = 57386
	_decimal                 = 57385
	_decrypt                 = 57443
	_default                 = 57422
	_deferrable              = 57414
	_deferred                = 57415
	_definition              = 57473
	_delete                  = 57411
	_delete_all              = 57542
	_desc                    = 57569
	_disable                 = 57543
	_disable_all             = 57544
	_distribute              = 57535
	_dml                     = 57528
	_double                  = 57390
	_doubleQuoteStr          = 57576
	_drop                    = 57442
	_duplicate               = 57540
	_duplicated              = 57460
	_enable                  = 57545
	_enable_all              = 57546
	_encrypt                 = 57397
	_exceptions              = 57557
	_extended                = 57467
	_external                = 57549
	_filesystem_like_logging = 57512
	_flash_cache             = 57492
	_float                   = 57357
	_for                     = 57476
	_force                   = 57449
	_foreign                 = 57554
	_freelist                = 57493
	_freelists               = 57494
	_from                    = 57347
	_full                    = 57563
	_generated               = 57425
	_global                  = 57461
	_groups                  = 57505
	_heap                    = 57550
	_high                    = 57529
	_identified              = 57399
	_identity                = 57426
	_ilm                     = 57547
	_immediate               = 57416
	_immutable               = 57462
	_increment               = 57429
	_index                   = 57551
	_indexing                = 57564
	_initial                 = 57495
	_initially               = 57417
	_initrans                = 57485
	_inmemory                = 57525
	_int                     = 57388
	_intNumber               = 57574
	_integer                 = 57387
	_interval                = 57368
	_into                    = 57558
	_invalidate              = 57454
	_invalidation            = 57572
	_invisible               = 57395
	_is                      = 57420
	_keep                    = 57496
	_key                     = 57404
	_level                   = 57523
	_levels                  = 57447
	_limit                   = 57430
	_local                   = 57365
	_locking                 = 57524
	_logging                 = 57513
	_long                    = 57360
	_low                     = 57530
	_maxextents              = 57497
	_maxsize                 = 57498
	_maxtrans                = 57486
	_maxvalue                = 57431
	_medium                  = 57533
	_memcompress             = 57531
	_memoptimize             = 57477
	_metadata                = 57468
	_minextents              = 57499
	_minvalue                = 57432
	_modify                  = 57441
	_mouth                   = 57371
	_multivalue              = 57560
	_national                = 57383
	_nchar                   = 57354
	_nclob                   = 57376
	_next                    = 57500
	_no                      = 57401
	_nocache                 = 57433
	_nocompress              = 57518
	_nocycle                 = 57434
	_nologging               = 57514
	_nomaxvalue              = 57435
	_nominvalue              = 57436
	_none                    = 57469
	_nonquotedIdentifier     = 57577
	_noorder                 = 57437
	_noparallel              = 57566
	_norely                  = 57418
	_nosort                  = 57561
	_not                     = 57405
	_novalidate              = 57555
	_null                    = 57406
	_number                  = 57356
	_numeric                 = 57384
	_nvarchar2               = 57355
	_on                      = 57412
	_online                  = 57455
	_optimal                 = 57501
	_order                   = 57438
	_organization            = 57481
	_parallel                = 57567
	_parent                  = 57471
	_partial                 = 57565
	_partition               = 57536
	_pctfree                 = 57487
	_pctincrease             = 57502
	_pctused                 = 57488
	_peverse                 = 57562
	_policy                  = 57548
	_precision               = 57391
	_preserve                = 57474
	_primary                 = 57407
	_priority                = 57534
	_private                 = 57463
	_purge                   = 57573
	_query                   = 57522
	_range                   = 57537
	_raw                     = 57361
	_read                    = 57478
	_real                    = 57392
	_recycle                 = 57503
	_references              = 57409
	_reject                  = 57553
	_rely                    = 57419
	_rename                  = 57457
	_row                     = 57519
	_rowid                   = 57378
	_rows                    = 57475
	_salt                    = 57402
	_scope                   = 57421
	_second                  = 57373
	_segment                 = 57483
	_select                  = 57346
	_service                 = 57539
	_set                     = 57413
	_sharded                 = 57464
	_sharding                = 57470
	_singleQuoteStr          = 57575
	_smallInt                = 57389
	_sort                    = 57394
	_spatial                 = 57541
	_start                   = 57439
	_storage                 = 57489
	_store                   = 57520
	_subpartition            = 57538
	_substitutable           = 57448
	_table                   = 57349
	_tablespace              = 57484
	_temporary               = 57465
	_time                    = 57366
	_timestamp               = 57363
	_to                      = 57370
	_unique                  = 57408
	_unlimited               = 57504
	_unusable                = 57571
	_unused                  = 57452
	_urowid                  = 57379
	_usable                  = 57570
	_using                   = 57398
	_validate                = 57556
	_value                   = 57440
	_varchar                 = 57382
	_varchar2                = 57353
	_varying                 = 57381
	_visible                 = 57396
	_with                    = 57364
	_write                   = 57479
	_year                    = 57369
	_zone                    = 57367
	yyErrCode                = 57345

	yyMaxDepth = 200
	yyTabOfs   = -513
)

var (
	yyPrec = map[int]int{}

	yyXLAT = map[int]int{
		41:    0,   // ')' (348x)
		57344: 1,   // $end (312x)
		59:    2,   // ';' (311x)
		44:    3,   // ',' (216x)
		57408: 4,   // _unique (182x)
		57407: 5,   // _primary (180x)
		57403: 6,   // _constraint (177x)
		57405: 7,   // _not (172x)
		57406: 8,   // _null (169x)
		57409: 9,   // _references (165x)
		57477: 10,  // _memoptimize (155x)
		57471: 11,  // _parent (152x)
		57442: 12,  // _drop (144x)
		57397: 13,  // _encrypt (137x)
		57395: 14,  // _invisible (121x)
		57396: 15,  // _visible (121x)
		57446: 16,  // _column (118x)
		57394: 17,  // _sort (116x)
		57364: 18,  // _with (110x)
		57421: 19,  // _scope (109x)
		57401: 20,  // _no (104x)
		57422: 21,  // _default (101x)
		57517: 22,  // _compress (99x)
		57518: 23,  // _nocompress (97x)
		57512: 24,  // _filesystem_like_logging (96x)
		57485: 25,  // _initrans (96x)
		57513: 26,  // _logging (96x)
		57486: 27,  // _maxtrans (96x)
		57514: 28,  // _nologging (96x)
		57487: 29,  // _pctfree (96x)
		57488: 30,  // _pctused (96x)
		57489: 31,  // _storage (96x)
		57484: 32,  // _tablespace (96x)
		57443: 33,  // _decrypt (93x)
		57547: 34,  // _ilm (93x)
		57525: 35,  // _inmemory (90x)
		57425: 36,  // _generated (83x)
		40:    37,  // '(' (73x)
		57393: 38,  // _collate (72x)
		57519: 39,  // _row (68x)
		57576: 40,  // _doubleQuoteStr (67x)
		57577: 41,  // _nonquotedIdentifier (65x)
		57455: 42,  // _online (62x)
		57413: 43,  // _set (53x)
		57644: 44,  // Identifier (53x)
		57350: 45,  // _add (52x)
		57415: 46,  // _deferred (52x)
		57416: 47,  // _immediate (52x)
		57574: 48,  // _intNumber (52x)
		57441: 49,  // _modify (51x)
		57571: 50,  // _unusable (47x)
		57570: 51,  // _usable (47x)
		57414: 52,  // _deferrable (46x)
		57543: 53,  // _disable (46x)
		57545: 54,  // _enable (46x)
		57554: 55,  // _foreign (46x)
		57398: 56,  // _using (46x)
		57557: 57,  // _exceptions (45x)
		57417: 58,  // _initially (45x)
		57418: 59,  // _norely (45x)
		57555: 60,  // _novalidate (45x)
		57419: 61,  // _rely (45x)
		57556: 62,  // _validate (45x)
		57564: 63,  // _indexing (43x)
		57566: 64,  // _noparallel (43x)
		57561: 65,  // _nosort (43x)
		57567: 66,  // _parallel (43x)
		57562: 67,  // _peverse (43x)
		57410: 68,  // _cascade (41x)
		57490: 69,  // _buffer_pool (35x)
		57491: 70,  // _cell_flash_cache (35x)
		57492: 71,  // _flash_cache (35x)
		57493: 72,  // _freelist (35x)
		57494: 73,  // _freelists (35x)
		57495: 74,  // _initial (35x)
		57497: 75,  // _maxextents (35x)
		57498: 76,  // _maxsize (35x)
		57499: 77,  // _minextents (35x)
		57500: 78,  // _next (35x)
		57501: 79,  // _optimal (35x)
		57502: 80,  // _pctincrease (35x)
		57541: 81,  // _spatial (35x)
		57540: 82,  // _duplicate (32x)
		57549: 83,  // _external (28x)
		57412: 84,  // _on (28x)
		57481: 85,  // _organization (27x)
		57601: 86,  // ColumnName (26x)
		57480: 87,  // _cluster (25x)
		57483: 88,  // _segment (24x)
		57427: 89,  // _cache (17x)
		57428: 90,  // _cycle (17x)
		57535: 91,  // _distribute (17x)
		57429: 92,  // _increment (17x)
		57431: 93,  // _maxvalue (17x)
		57432: 94,  // _minvalue (17x)
		57433: 95,  // _nocache (17x)
		57434: 96,  // _nocycle (17x)
		57435: 97,  // _nomaxvalue (17x)
		57436: 98,  // _nominvalue (17x)
		57437: 99,  // _noorder (17x)
		57438: 100, // _order (17x)
		57439: 101, // _start (17x)
		57456: 102, // _checkpoint (14x)
		57457: 103, // _rename (14x)
		57476: 104, // _for (12x)
		57454: 105, // _invalidate (12x)
		57496: 106, // _keep (12x)
		57534: 107, // _priority (11x)
		57602: 108, // ColumnNameList (11x)
		57402: 109, // _salt (10x)
		57609: 110, // ConstraintState (10x)
		57638: 111, // ExceptionsClause (10x)
		57752: 112, // UsingIndexClause (10x)
		57351: 113, // _char (9x)
		57551: 114, // _index (9x)
		57370: 115, // _to (9x)
		57717: 116, // PhysicalAttrClause (9x)
		57741: 117, // StorageClause (9x)
		57378: 118, // _rowid (8x)
		57575: 119, // _singleQuoteStr (8x)
		57608: 120, // ConstraintNameOrEmpty (8x)
		57749: 121, // TableName (8x)
		57380: 122, // _character (7x)
		57573: 123, // _purge (7x)
		57361: 124, // _raw (7x)
		57688: 125, // LoggingClause (7x)
		57718: 126, // PhysicalAttrsClause (7x)
		57377: 127, // _bfile (6x)
		57359: 128, // _binaryDouble (6x)
		57358: 129, // _binaryFloat (6x)
		57374: 130, // _blob (6x)
		57375: 131, // _clob (6x)
		57362: 132, // _date (6x)
		57386: 133, // _dec (6x)
		57385: 134, // _decimal (6x)
		57390: 135, // _double (6x)
		57357: 136, // _float (6x)
		57529: 137, // _high (6x)
		57388: 138, // _int (6x)
		57387: 139, // _integer (6x)
		57368: 140, // _interval (6x)
		57360: 141, // _long (6x)
		57530: 142, // _low (6x)
		57383: 143, // _national (6x)
		57354: 144, // _nchar (6x)
		57376: 145, // _nclob (6x)
		57356: 146, // _number (6x)
		57384: 147, // _numeric (6x)
		57355: 148, // _nvarchar2 (6x)
		57392: 149, // _real (6x)
		57389: 150, // _smallInt (6x)
		57363: 151, // _timestamp (6x)
		57379: 152, // _urowid (6x)
		57382: 153, // _varchar (6x)
		57353: 154, // _varchar2 (6x)
		57586: 155, // CascadeOrEmpty (6x)
		57610: 156, // ConstraintStateList (6x)
		57611: 157, // ConstraintStateOrEmpty (6x)
		57745: 158, // TableCompression (6x)
		42:    159, // '*' (5x)
		46:    160, // '.' (5x)
		57426: 161, // _identity (5x)
		57404: 162, // _key (5x)
		57469: 163, // _none (5x)
		57470: 164, // _sharding (5x)
		57448: 165, // _substitutable (5x)
		57381: 166, // _varying (5x)
		57671: 167, // InmemoryColumnClause (5x)
		57704: 168, // NumberOrAsterisk (5x)
		57731: 169, // SegmentAttrClause (5x)
		57444: 170, // _all (4x)
		57424: 171, // _as (4x)
		57568: 172, // _asc (4x)
		57400: 173, // _by (4x)
		57569: 174, // _desc (4x)
		57548: 175, // _policy (4x)
		57598: 176, // ColumnDef (4x)
		57648: 177, // IdentityOptionsOrEmpty (4x)
		57650: 178, // IlmCompressionPolicy (4x)
		57651: 179, // IlmInmemoryPolicy (4x)
		57652: 180, // IlmPolicyClause (4x)
		57653: 181, // IlmTieringPolicy (4x)
		57666: 182, // InlineConstraint (4x)
		57672: 183, // InmemoryColumnClauses (4x)
		57673: 184, // InmemoryColumnClausesOrEmpty (4x)
		57711: 185, // OutOfLineConstraint (4x)
		57721: 186, // RealColumnDef (4x)
		57735: 187, // SizeClause (4x)
		57450: 188, // _columns (3x)
		57458: 189, // _create (3x)
		57411: 190, // _delete (3x)
		57399: 191, // _identified (3x)
		57531: 192, // _memcompress (3x)
		57349: 193, // _table (3x)
		57452: 194, // _unused (3x)
		57582: 195, // AnsiSupportDataTypes (3x)
		57589: 196, // CharacterDataTypes (3x)
		57592: 197, // CollateClause (3x)
		57603: 198, // ColumnNameListForDropColumn (3x)
		57613: 199, // CreateIndexStmt (3x)
		57616: 200, // Datatype (3x)
		57617: 201, // DatetimeDataTypes (3x)
		57623: 202, // DropColumnCheckpoint (3x)
		57626: 203, // DropColumnProp (3x)
		57631: 204, // DropConstraintProps (3x)
		57683: 205, // InvisibleProp (3x)
		57686: 206, // KeepIndexOrEmpty (3x)
		57687: 207, // LargeObjectDataTypes (3x)
		57689: 208, // LongAndRawDataTypes (3x)
		57703: 209, // NumberDataTypes (3x)
		57709: 210, // OralceBuiltInDataTypes (3x)
		57722: 211, // ReferencesClause (3x)
		57729: 212, // RowIdDataTypes (3x)
		57732: 213, // SegmentAttrsClause (3x)
		57515: 214, // _advanced (2x)
		57348: 215, // _alter (2x)
		57445: 216, // _at (2x)
		57526: 217, // _auto (2x)
		57559: 218, // _bitmap (2x)
		57459: 219, // _blockchain (2x)
		57352: 220, // _byte (2x)
		57472: 221, // _commit (2x)
		57453: 222, // _constraints (2x)
		57466: 223, // _data (2x)
		57473: 224, // _definition (2x)
		57449: 225, // _force (2x)
		57572: 226, // _invalidation (2x)
		57523: 227, // _level (2x)
		57447: 228, // _levels (2x)
		57430: 229, // _limit (2x)
		57524: 230, // _locking (2x)
		57371: 231, // _mouth (2x)
		57560: 232, // _multivalue (2x)
		57536: 233, // _partition (2x)
		57474: 234, // _preserve (2x)
		57522: 235, // _query (2x)
		57478: 236, // _read (2x)
		57553: 237, // _reject (2x)
		57475: 238, // _rows (2x)
		57373: 239, // _second (2x)
		57520: 240, // _store (2x)
		57465: 241, // _temporary (2x)
		57366: 242, // _time (2x)
		57504: 243, // _unlimited (2x)
		57479: 244, // _write (2x)
		57367: 245, // _zone (2x)
		57579: 246, // AddColumnClause (2x)
		57581: 247, // AlterTableStmt (2x)
		57587: 248, // ChangeColumnClause (2x)
		57593: 249, // CollateClauseOrEmpty (2x)
		57615: 250, // CreateTableStmt (2x)
		57618: 251, // DefaultClause (2x)
		57620: 252, // DefaultOrIdentityClause (2x)
		57624: 253, // DropColumnClause (2x)
		57627: 254, // DropColumnProps (2x)
		57628: 255, // DropColumnPropsOrEmpty (2x)
		57629: 256, // DropConstraintClause (2x)
		57632: 257, // DropTableStmt (2x)
		57633: 258, // EmptyStmt (2x)
		57635: 259, // EncryptClause (2x)
		57639: 260, // Expr (2x)
		57641: 261, // ExternalTableClause (2x)
		57645: 262, // IdentityClause (2x)
		57646: 263, // IdentityOption (2x)
		57649: 264, // IlmClause (2x)
		57655: 265, // IndexAttr (2x)
		57658: 266, // IndexCompression (2x)
		57659: 267, // IndexExpr (2x)
		57662: 268, // IndexName (2x)
		57664: 269, // IndexProps (2x)
		57665: 270, // IndexType (2x)
		57667: 271, // InlineConstraintList (2x)
		57668: 272, // InlineConstraintType (2x)
		57678: 273, // InmemoryMemCompress (2x)
		57681: 274, // InmemoryTableClause (2x)
		57685: 275, // IsForce (2x)
		57692: 276, // MemoptimizeRead (2x)
		57694: 277, // MemoptimizeWrite (2x)
		57696: 278, // ModifyColumnClause (2x)
		57697: 279, // ModifyColumnProp (2x)
		57699: 280, // ModifyColumnSubstitutable (2x)
		57700: 281, // ModifyColumnVisibility (2x)
		57702: 282, // ModifyRealColumnProp (2x)
		57714: 283, // ParallelClause (2x)
		57716: 284, // PartialIndexClause (2x)
		57725: 285, // RelTableProp (2x)
		57733: 286, // SegmentAttrsClauseOrEmpty (2x)
		57739: 287, // Statement (2x)
		57742: 288, // StorageProp (2x)
		57746: 289, // TableCompressionOrEmpty (2x)
		61:    290, // '=' (1x)
		57423: 291, // _always (1x)
		57521: 292, // _archive (1x)
		57552: 293, // _attributes (1x)
		57516: 294, // _basic (1x)
		57527: 295, // _capacity (1x)
		57451: 296, // _continue (1x)
		57482: 297, // _creation (1x)
		57532: 298, // _critical (1x)
		57372: 299, // _day (1x)
		57542: 300, // _delete_all (1x)
		57544: 301, // _disable_all (1x)
		57528: 302, // _dml (1x)
		57460: 303, // _duplicated (1x)
		57506: 304, // _E (1x)
		57546: 305, // _enable_all (1x)
		57467: 306, // _extended (1x)
		57563: 307, // _full (1x)
		57507: 308, // _G (1x)
		57461: 309, // _global (1x)
		57505: 310, // _groups (1x)
		57550: 311, // _heap (1x)
		57462: 312, // _immutable (1x)
		57558: 313, // _into (1x)
		57420: 314, // _is (1x)
		57508: 315, // _K (1x)
		57365: 316, // _local (1x)
		57509: 317, // _M (1x)
		57533: 318, // _medium (1x)
		57468: 319, // _metadata (1x)
		57510: 320, // _P (1x)
		57565: 321, // _partial (1x)
		57391: 322, // _precision (1x)
		57463: 323, // _private (1x)
		57537: 324, // _range (1x)
		57503: 325, // _recycle (1x)
		57539: 326, // _service (1x)
		57464: 327, // _sharded (1x)
		57538: 328, // _subpartition (1x)
		57511: 329, // _T (1x)
		57440: 330, // _value (1x)
		57369: 331, // _year (1x)
		57580: 332, // AlterTableClauses (1x)
		57583: 333, // BitmapJoinIndexClause (1x)
		57584: 334, // BlockchainTableClauses (1x)
		57585: 335, // CascadeConstraintsOrEmpty (1x)
		57588: 336, // ChangeColumnClauseList (1x)
		57590: 337, // ClusterIndexClause (1x)
		57591: 338, // ClusterName (1x)
		57594: 339, // ColumnClauses (1x)
		57595: 340, // ColumnCompressLock (1x)
		57596: 341, // ColumnCompressProp (1x)
		57597: 342, // ColumnConstraintForModify (1x)
		57599: 343, // ColumnDefConstraint (1x)
		57600: 344, // ColumnDefList (1x)
		57604: 345, // ColumnNameListOrEmpty (1x)
		57605: 346, // ColumnProps (1x)
		57606: 347, // ColumnSortClause (1x)
		57607: 348, // ConstraintClauses (1x)
		57612: 349, // CreateIndexInvalidation (1x)
		57614: 350, // CreateIndexUsable (1x)
		57619: 351, // DefaultCollateClauseOrEmpty (1x)
		57621: 352, // DefaultOrIdentityClauseForModify (1x)
		57622: 353, // DeferredSegmentCreation (1x)
		57625: 354, // DropColumnOnline (1x)
		57630: 355, // DropConstraintClauses (1x)
		57634: 356, // EncryptAlgorithm (1x)
		57636: 357, // EncryptClauseForModify (1x)
		57637: 358, // EncryptionSpec (1x)
		57640: 359, // ExternalPartitionClause (1x)
		57642: 360, // HeapOrgTableClause (1x)
		57643: 361, // IdentifiedByClause (1x)
		57647: 362, // IdentityOptions (1x)
		57654: 363, // ImmutableTableClauses (1x)
		57656: 364, // IndexAttrs (1x)
		57657: 365, // IndexClause (1x)
		57660: 366, // IndexExprs (1x)
		57661: 367, // IndexIlmClause (1x)
		57663: 368, // IndexOrgTableClause (1x)
		57669: 369, // InlineRefConstraint (1x)
		57670: 370, // InmemoryAttrs (1x)
		57674: 371, // InmemoryDistribute (1x)
		57675: 372, // InmemoryDistributeBy (1x)
		57676: 373, // InmemoryDistributeFor (1x)
		57677: 374, // InmemoryDuplicate (1x)
		57679: 375, // InmemoryProp (1x)
		57680: 376, // InmemorySpatial (1x)
		57682: 377, // IntergrityAlgorithm (1x)
		57684: 378, // InvisiblePropOrEmpty (1x)
		57690: 379, // Memoptimize (1x)
		57691: 380, // MemoptimizeForAlterTable (1x)
		57693: 381, // MemoptimizeReadForAlterTable (1x)
		57695: 382, // MemoptimizeWriteForAlterTable (1x)
		57698: 383, // ModifyColumnProps (1x)
		57701: 384, // ModifyColumnVisibilityList (1x)
		57705: 385, // OnCommitClause (1x)
		57706: 386, // OnCommitDef (1x)
		57707: 387, // OnCommitRows (1x)
		57708: 388, // OnlineOrEmpty (1x)
		57710: 389, // OrgClause (1x)
		57712: 390, // OutOfLineConstraints (1x)
		57713: 391, // OutOfLinePartStorageList (1x)
		57715: 392, // ParentTable (1x)
		57719: 393, // PhysicalProps (1x)
		57720: 394, // PurgeOrEmpty (1x)
		57723: 395, // ReferencesOnDelete (1x)
		57724: 396, // RelTableDef (1x)
		57726: 397, // RelTableProps (1x)
		57727: 398, // RelTablePropsOrEmpty (1x)
		57728: 399, // RenameColumnClause (1x)
		57730: 400, // SaltProp (1x)
		57734: 401, // ShardingType (1x)
		57736: 402, // SizeUnit (1x)
		57737: 403, // SortProp (1x)
		57738: 404, // Start (1x)
		57740: 405, // StatementList (1x)
		57743: 406, // StorageProps (1x)
		57744: 407, // TableAlias (1x)
		57747: 408, // TableDef (1x)
		57748: 409, // TableIndexClause (1x)
		57750: 410, // TableProps (1x)
		57751: 411, // TableType (1x)
		57578: 412, // $default (0x)
		57347: 413, // _from (0x)
		57346: 414, // _select (0x)
		57345: 415, // error (0x)
	}

	yySymNames = []string{
		"')'",
		"$end",
		"';'",
		"','",
		"_unique",
		"_primary",
		"_constraint",
		"_not",
		"_null",
		"_references",
		"_memoptimize",
		"_parent",
		"_drop",
		"_encrypt",
		"_invisible",
		"_visible",
		"_column",
		"_sort",
		"_with",
		"_scope",
		"_no",
		"_default",
		"_compress",
		"_nocompress",
		"_filesystem_like_logging",
		"_initrans",
		"_logging",
		"_maxtrans",
		"_nologging",
		"_pctfree",
		"_pctused",
		"_storage",
		"_tablespace",
		"_decrypt",
		"_ilm",
		"_inmemory",
		"_generated",
		"'('",
		"_collate",
		"_row",
		"_doubleQuoteStr",
		"_nonquotedIdentifier",
		"_online",
		"_set",
		"Identifier",
		"_add",
		"_deferred",
		"_immediate",
		"_intNumber",
		"_modify",
		"_unusable",
		"_usable",
		"_deferrable",
		"_disable",
		"_enable",
		"_foreign",
		"_using",
		"_exceptions",
		"_initially",
		"_norely",
		"_novalidate",
		"_rely",
		"_validate",
		"_indexing",
		"_noparallel",
		"_nosort",
		"_parallel",
		"_peverse",
		"_cascade",
		"_buffer_pool",
		"_cell_flash_cache",
		"_flash_cache",
		"_freelist",
		"_freelists",
		"_initial",
		"_maxextents",
		"_maxsize",
		"_minextents",
		"_next",
		"_optimal",
		"_pctincrease",
		"_spatial",
		"_duplicate",
		"_external",
		"_on",
		"_organization",
		"ColumnName",
		"_cluster",
		"_segment",
		"_cache",
		"_cycle",
		"_distribute",
		"_increment",
		"_maxvalue",
		"_minvalue",
		"_nocache",
		"_nocycle",
		"_nomaxvalue",
		"_nominvalue",
		"_noorder",
		"_order",
		"_start",
		"_checkpoint",
		"_rename",
		"_for",
		"_invalidate",
		"_keep",
		"_priority",
		"ColumnNameList",
		"_salt",
		"ConstraintState",
		"ExceptionsClause",
		"UsingIndexClause",
		"_char",
		"_index",
		"_to",
		"PhysicalAttrClause",
		"StorageClause",
		"_rowid",
		"_singleQuoteStr",
		"ConstraintNameOrEmpty",
		"TableName",
		"_character",
		"_purge",
		"_raw",
		"LoggingClause",
		"PhysicalAttrsClause",
		"_bfile",
		"_binaryDouble",
		"_binaryFloat",
		"_blob",
		"_clob",
		"_date",
		"_dec",
		"_decimal",
		"_double",
		"_float",
		"_high",
		"_int",
		"_integer",
		"_interval",
		"_long",
		"_low",
		"_national",
		"_nchar",
		"_nclob",
		"_number",
		"_numeric",
		"_nvarchar2",
		"_real",
		"_smallInt",
		"_timestamp",
		"_urowid",
		"_varchar",
		"_varchar2",
		"CascadeOrEmpty",
		"ConstraintStateList",
		"ConstraintStateOrEmpty",
		"TableCompression",
		"'*'",
		"'.'",
		"_identity",
		"_key",
		"_none",
		"_sharding",
		"_substitutable",
		"_varying",
		"InmemoryColumnClause",
		"NumberOrAsterisk",
		"SegmentAttrClause",
		"_all",
		"_as",
		"_asc",
		"_by",
		"_desc",
		"_policy",
		"ColumnDef",
		"IdentityOptionsOrEmpty",
		"IlmCompressionPolicy",
		"IlmInmemoryPolicy",
		"IlmPolicyClause",
		"IlmTieringPolicy",
		"InlineConstraint",
		"InmemoryColumnClauses",
		"InmemoryColumnClausesOrEmpty",
		"OutOfLineConstraint",
		"RealColumnDef",
		"SizeClause",
		"_columns",
		"_create",
		"_delete",
		"_identified",
		"_memcompress",
		"_table",
		"_unused",
		"AnsiSupportDataTypes",
		"CharacterDataTypes",
		"CollateClause",
		"ColumnNameListForDropColumn",
		"CreateIndexStmt",
		"Datatype",
		"DatetimeDataTypes",
		"DropColumnCheckpoint",
		"DropColumnProp",
		"DropConstraintProps",
		"InvisibleProp",
		"KeepIndexOrEmpty",
		"LargeObjectDataTypes",
		"LongAndRawDataTypes",
		"NumberDataTypes",
		"OralceBuiltInDataTypes",
		"ReferencesClause",
		"RowIdDataTypes",
		"SegmentAttrsClause",
		"_advanced",
		"_alter",
		"_at",
		"_auto",
		"_bitmap",
		"_blockchain",
		"_byte",
		"_commit",
		"_constraints",
		"_data",
		"_definition",
		"_force",
		"_invalidation",
		"_level",
		"_levels",
		"_limit",
		"_locking",
		"_mouth",
		"_multivalue",
		"_partition",
		"_preserve",
		"_query",
		"_read",
		"_reject",
		"_rows",
		"_second",
		"_store",
		"_temporary",
		"_time",
		"_unlimited",
		"_write",
		"_zone",
		"AddColumnClause",
		"AlterTableStmt",
		"ChangeColumnClause",
		"CollateClauseOrEmpty",
		"CreateTableStmt",
		"DefaultClause",
		"DefaultOrIdentityClause",
		"DropColumnClause",
		"DropColumnProps",
		"DropColumnPropsOrEmpty",
		"DropConstraintClause",
		"DropTableStmt",
		"EmptyStmt",
		"EncryptClause",
		"Expr",
		"ExternalTableClause",
		"IdentityClause",
		"IdentityOption",
		"IlmClause",
		"IndexAttr",
		"IndexCompression",
		"IndexExpr",
		"IndexName",
		"IndexProps",
		"IndexType",
		"InlineConstraintList",
		"InlineConstraintType",
		"InmemoryMemCompress",
		"InmemoryTableClause",
		"IsForce",
		"MemoptimizeRead",
		"MemoptimizeWrite",
		"ModifyColumnClause",
		"ModifyColumnProp",
		"ModifyColumnSubstitutable",
		"ModifyColumnVisibility",
		"ModifyRealColumnProp",
		"ParallelClause",
		"PartialIndexClause",
		"RelTableProp",
		"SegmentAttrsClauseOrEmpty",
		"Statement",
		"StorageProp",
		"TableCompressionOrEmpty",
		"'='",
		"_always",
		"_archive",
		"_attributes",
		"_basic",
		"_capacity",
		"_continue",
		"_creation",
		"_critical",
		"_day",
		"_delete_all",
		"_disable_all",
		"_dml",
		"_duplicated",
		"_E",
		"_enable_all",
		"_extended",
		"_full",
		"_G",
		"_global",
		"_groups",
		"_heap",
		"_immutable",
		"_into",
		"_is",
		"_K",
		"_local",
		"_M",
		"_medium",
		"_metadata",
		"_P",
		"_partial",
		"_precision",
		"_private",
		"_range",
		"_recycle",
		"_service",
		"_sharded",
		"_subpartition",
		"_T",
		"_value",
		"_year",
		"AlterTableClauses",
		"BitmapJoinIndexClause",
		"BlockchainTableClauses",
		"CascadeConstraintsOrEmpty",
		"ChangeColumnClauseList",
		"ClusterIndexClause",
		"ClusterName",
		"ColumnClauses",
		"ColumnCompressLock",
		"ColumnCompressProp",
		"ColumnConstraintForModify",
		"ColumnDefConstraint",
		"ColumnDefList",
		"ColumnNameListOrEmpty",
		"ColumnProps",
		"ColumnSortClause",
		"ConstraintClauses",
		"CreateIndexInvalidation",
		"CreateIndexUsable",
		"DefaultCollateClauseOrEmpty",
		"DefaultOrIdentityClauseForModify",
		"DeferredSegmentCreation",
		"DropColumnOnline",
		"DropConstraintClauses",
		"EncryptAlgorithm",
		"EncryptClauseForModify",
		"EncryptionSpec",
		"ExternalPartitionClause",
		"HeapOrgTableClause",
		"IdentifiedByClause",
		"IdentityOptions",
		"ImmutableTableClauses",
		"IndexAttrs",
		"IndexClause",
		"IndexExprs",
		"IndexIlmClause",
		"IndexOrgTableClause",
		"InlineRefConstraint",
		"InmemoryAttrs",
		"InmemoryDistribute",
		"InmemoryDistributeBy",
		"InmemoryDistributeFor",
		"InmemoryDuplicate",
		"InmemoryProp",
		"InmemorySpatial",
		"IntergrityAlgorithm",
		"InvisiblePropOrEmpty",
		"Memoptimize",
		"MemoptimizeForAlterTable",
		"MemoptimizeReadForAlterTable",
		"MemoptimizeWriteForAlterTable",
		"ModifyColumnProps",
		"ModifyColumnVisibilityList",
		"OnCommitClause",
		"OnCommitDef",
		"OnCommitRows",
		"OnlineOrEmpty",
		"OrgClause",
		"OutOfLineConstraints",
		"OutOfLinePartStorageList",
		"ParentTable",
		"PhysicalProps",
		"PurgeOrEmpty",
		"ReferencesOnDelete",
		"RelTableDef",
		"RelTableProps",
		"RelTablePropsOrEmpty",
		"RenameColumnClause",
		"SaltProp",
		"ShardingType",
		"SizeUnit",
		"SortProp",
		"Start",
		"StatementList",
		"StorageProps",
		"TableAlias",
		"TableDef",
		"TableIndexClause",
		"TableProps",
		"TableType",
		"$default",
		"_from",
		"_select",
		"error",
	}

	yyTokenLiteralStrings = map[int]string{
		57576: "double quotes string",
		57577: "nonquoted identifier",
		57574: "int number",
		57575: "single quotes string",
	}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {404, 1},
		2:   {405, 1},
		3:   {405, 3},
		4:   {287, 1},
		5:   {287, 1},
		6:   {287, 1},
		7:   {287, 1},
		8:   {287, 1},
		9:   {258, 0},
		10:  {121, 1},
		11:  {121, 3},
		12:  {108, 1},
		13:  {108, 3},
		14:  {86, 1},
		15:  {44, 1},
		16:  {44, 1},
		17:  {338, 1},
		18:  {338, 3},
		19:  {247, 5},
		20:  {332, 1},
		21:  {332, 1},
		22:  {339, 1},
		23:  {339, 1},
		24:  {336, 1},
		25:  {336, 2},
		26:  {248, 1},
		27:  {248, 1},
		28:  {248, 1},
		29:  {246, 6},
		30:  {346, 0},
		31:  {391, 0},
		32:  {344, 1},
		33:  {344, 3},
		34:  {176, 1},
		35:  {186, 8},
		36:  {249, 0},
		37:  {249, 1},
		38:  {197, 2},
		39:  {403, 0},
		40:  {403, 1},
		41:  {378, 0},
		42:  {378, 1},
		43:  {205, 1},
		44:  {205, 1},
		45:  {252, 0},
		46:  {252, 1},
		47:  {252, 1},
		48:  {251, 2},
		49:  {251, 4},
		50:  {262, 4},
		51:  {262, 5},
		52:  {262, 5},
		53:  {262, 6},
		54:  {262, 8},
		55:  {177, 0},
		56:  {177, 3},
		57:  {362, 0},
		58:  {362, 1},
		59:  {362, 2},
		60:  {263, 3},
		61:  {263, 4},
		62:  {263, 3},
		63:  {263, 2},
		64:  {263, 1},
		65:  {263, 2},
		66:  {263, 1},
		67:  {263, 1},
		68:  {263, 1},
		69:  {263, 2},
		70:  {263, 1},
		71:  {263, 1},
		72:  {263, 1},
		73:  {259, 0},
		74:  {259, 2},
		75:  {358, 4},
		76:  {356, 0},
		77:  {356, 2},
		78:  {361, 0},
		79:  {361, 3},
		80:  {377, 0},
		81:  {377, 1},
		82:  {400, 0},
		83:  {400, 1},
		84:  {400, 2},
		85:  {343, 0},
		86:  {343, 1},
		87:  {343, 1},
		88:  {271, 1},
		89:  {271, 2},
		90:  {278, 4},
		91:  {278, 4},
		92:  {278, 1},
		93:  {383, 1},
		94:  {383, 3},
		95:  {279, 1},
		96:  {282, 6},
		97:  {352, 2},
		98:  {352, 1},
		99:  {357, 1},
		100: {357, 1},
		101: {342, 0},
		102: {342, 1},
		103: {384, 1},
		104: {384, 3},
		105: {281, 2},
		106: {280, 7},
		107: {280, 8},
		108: {275, 0},
		109: {275, 1},
		110: {253, 5},
		111: {253, 4},
		112: {253, 4},
		113: {253, 4},
		114: {198, 2},
		115: {198, 3},
		116: {255, 0},
		117: {255, 1},
		118: {254, 1},
		119: {254, 2},
		120: {203, 2},
		121: {203, 1},
		122: {354, 0},
		123: {354, 1},
		124: {202, 0},
		125: {202, 2},
		126: {399, 5},
		127: {348, 2},
		128: {348, 5},
		129: {348, 5},
		130: {348, 7},
		131: {348, 5},
		132: {348, 1},
		133: {390, 1},
		134: {390, 2},
		135: {355, 1},
		136: {355, 2},
		137: {256, 5},
		138: {256, 7},
		139: {256, 5},
		140: {155, 0},
		141: {155, 1},
		142: {204, 2},
		143: {206, 0},
		144: {206, 2},
		145: {388, 0},
		146: {388, 1},
		147: {250, 8},
		148: {411, 0},
		149: {411, 2},
		150: {411, 2},
		151: {411, 1},
		152: {411, 1},
		153: {411, 1},
		154: {411, 1},
		155: {411, 2},
		156: {401, 0},
		157: {401, 3},
		158: {401, 3},
		159: {401, 4},
		160: {401, 3},
		161: {392, 0},
		162: {392, 2},
		163: {408, 1},
		164: {396, 7},
		165: {363, 0},
		166: {334, 0},
		167: {351, 0},
		168: {351, 2},
		169: {385, 2},
		170: {386, 0},
		171: {386, 4},
		172: {386, 4},
		173: {387, 0},
		174: {387, 4},
		175: {387, 4},
		176: {393, 0},
		177: {393, 5},
		178: {393, 3},
		179: {393, 2},
		180: {393, 5},
		181: {353, 0},
		182: {353, 3},
		183: {353, 3},
		184: {286, 0},
		185: {286, 1},
		186: {213, 1},
		187: {213, 2},
		188: {169, 1},
		189: {169, 2},
		190: {169, 3},
		191: {169, 1},
		192: {169, 1},
		193: {126, 1},
		194: {126, 2},
		195: {116, 2},
		196: {116, 2},
		197: {116, 2},
		198: {116, 2},
		199: {116, 1},
		200: {125, 1},
		201: {125, 1},
		202: {125, 1},
		203: {289, 0},
		204: {289, 1},
		205: {158, 1},
		206: {158, 3},
		207: {158, 4},
		208: {158, 4},
		209: {158, 5},
		210: {158, 1},
		211: {341, 0},
		212: {341, 2},
		213: {341, 3},
		214: {341, 3},
		215: {341, 2},
		216: {341, 3},
		217: {341, 3},
		218: {340, 0},
		219: {340, 3},
		220: {340, 4},
		221: {274, 0},
		222: {274, 3},
		223: {274, 3},
		224: {274, 1},
		225: {370, 5},
		226: {273, 0},
		227: {273, 3},
		228: {273, 3},
		229: {273, 4},
		230: {273, 4},
		231: {273, 3},
		232: {273, 4},
		233: {273, 4},
		234: {273, 2},
		235: {273, 2},
		236: {375, 0},
		237: {375, 2},
		238: {375, 2},
		239: {375, 2},
		240: {375, 2},
		241: {375, 2},
		242: {371, 0},
		243: {371, 3},
		244: {372, 0},
		245: {372, 1},
		246: {372, 3},
		247: {372, 2},
		248: {372, 2},
		249: {373, 0},
		250: {373, 3},
		251: {373, 3},
		252: {373, 3},
		253: {373, 3},
		254: {374, 0},
		255: {374, 1},
		256: {374, 2},
		257: {374, 2},
		258: {376, 0},
		259: {376, 2},
		260: {184, 0},
		261: {184, 1},
		262: {183, 1},
		263: {183, 2},
		264: {167, 4},
		265: {167, 5},
		266: {167, 5},
		267: {264, 0},
		268: {264, 4},
		269: {264, 4},
		270: {264, 4},
		271: {264, 4},
		272: {264, 2},
		273: {264, 2},
		274: {264, 2},
		275: {180, 1},
		276: {180, 1},
		277: {180, 1},
		278: {178, 0},
		279: {181, 0},
		280: {179, 0},
		281: {389, 3},
		282: {389, 3},
		283: {389, 2},
		284: {360, 3},
		285: {368, 0},
		286: {261, 0},
		287: {359, 4},
		288: {359, 6},
		289: {410, 0},
		290: {398, 0},
		291: {398, 3},
		292: {397, 1},
		293: {397, 3},
		294: {285, 1},
		295: {285, 1},
		296: {199, 9},
		297: {270, 0},
		298: {270, 1},
		299: {270, 1},
		300: {270, 1},
		301: {268, 1},
		302: {268, 3},
		303: {367, 0},
		304: {365, 1},
		305: {365, 1},
		306: {365, 1},
		307: {337, 3},
		308: {364, 1},
		309: {364, 2},
		310: {265, 1},
		311: {265, 1},
		312: {265, 1},
		313: {265, 2},
		314: {265, 2},
		315: {265, 1},
		316: {265, 1},
		317: {265, 1},
		318: {265, 1},
		319: {265, 1},
		320: {265, 1},
		321: {265, 1},
		322: {265, 1},
		323: {266, 1},
		324: {266, 2},
		325: {266, 2},
		326: {266, 3},
		327: {266, 3},
		328: {266, 1},
		329: {284, 2},
		330: {284, 2},
		331: {283, 1},
		332: {283, 2},
		333: {283, 1},
		334: {409, 6},
		335: {407, 0},
		336: {407, 1},
		337: {366, 1},
		338: {366, 3},
		339: {267, 2},
		340: {347, 0},
		341: {347, 1},
		342: {347, 1},
		343: {269, 0},
		344: {333, 0},
		345: {350, 0},
		346: {350, 1},
		347: {350, 1},
		348: {349, 0},
		349: {349, 2},
		350: {349, 2},
		351: {257, 5},
		352: {335, 0},
		353: {335, 2},
		354: {394, 0},
		355: {394, 1},
		356: {200, 1},
		357: {200, 1},
		358: {168, 1},
		359: {168, 1},
		360: {210, 1},
		361: {210, 1},
		362: {210, 1},
		363: {210, 1},
		364: {210, 1},
		365: {210, 1},
		366: {196, 1},
		367: {196, 4},
		368: {196, 5},
		369: {196, 5},
		370: {196, 4},
		371: {196, 5},
		372: {196, 5},
		373: {196, 1},
		374: {196, 4},
		375: {196, 4},
		376: {209, 1},
		377: {209, 4},
		378: {209, 6},
		379: {209, 1},
		380: {209, 4},
		381: {209, 1},
		382: {209, 1},
		383: {208, 1},
		384: {208, 2},
		385: {208, 4},
		386: {201, 1},
		387: {201, 1},
		388: {201, 4},
		389: {201, 7},
		390: {201, 8},
		391: {201, 4},
		392: {201, 7},
		393: {201, 4},
		394: {201, 7},
		395: {201, 10},
		396: {201, 7},
		397: {207, 1},
		398: {207, 1},
		399: {207, 1},
		400: {207, 1},
		401: {212, 1},
		402: {212, 1},
		403: {212, 4},
		404: {195, 4},
		405: {195, 5},
		406: {195, 5},
		407: {195, 5},
		408: {195, 4},
		409: {195, 5},
		410: {195, 6},
		411: {195, 5},
		412: {195, 6},
		413: {195, 1},
		414: {195, 4},
		415: {195, 6},
		416: {195, 1},
		417: {195, 4},
		418: {195, 6},
		419: {195, 1},
		420: {195, 4},
		421: {195, 6},
		422: {195, 1},
		423: {195, 1},
		424: {195, 1},
		425: {195, 2},
		426: {195, 1},
		427: {120, 0},
		428: {120, 2},
		429: {182, 3},
		430: {182, 3},
		431: {272, 1},
		432: {272, 2},
		433: {272, 1},
		434: {272, 2},
		435: {211, 4},
		436: {345, 0},
		437: {345, 3},
		438: {395, 0},
		439: {395, 3},
		440: {395, 4},
		441: {157, 0},
		442: {157, 1},
		443: {156, 1},
		444: {156, 2},
		445: {110, 1},
		446: {110, 2},
		447: {110, 2},
		448: {110, 2},
		449: {110, 1},
		450: {110, 1},
		451: {110, 1},
		452: {110, 1},
		453: {110, 1},
		454: {110, 1},
		455: {110, 1},
		456: {110, 1},
		457: {112, 3},
		458: {112, 5},
		459: {112, 3},
		460: {111, 3},
		461: {369, 3},
		462: {369, 2},
		463: {369, 3},
		464: {185, 6},
		465: {185, 7},
		466: {185, 8},
		467: {117, 4},
		468: {406, 1},
		469: {406, 2},
		470: {288, 2},
		471: {288, 2},
		472: {288, 2},
		473: {288, 2},
		474: {288, 2},
		475: {288, 2},
		476: {288, 2},
		477: {288, 2},
		478: {288, 2},
		479: {288, 3},
		480: {288, 1},
		481: {288, 2},
		482: {288, 2},
		483: {288, 2},
		484: {288, 2},
		485: {288, 2},
		486: {288, 2},
		487: {288, 2},
		488: {288, 2},
		489: {288, 2},
		490: {288, 2},
		491: {288, 2},
		492: {288, 1},
		493: {187, 2},
		494: {402, 0},
		495: {402, 1},
		496: {402, 1},
		497: {402, 1},
		498: {402, 1},
		499: {402, 1},
		500: {402, 1},
		501: {380, 2},
		502: {381, 1},
		503: {381, 4},
		504: {382, 1},
		505: {382, 4},
		506: {379, 2},
		507: {276, 0},
		508: {276, 3},
		509: {277, 0},
		510: {277, 3},
		511: {260, 1},
		512: {260, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [874][]uint16{
		// 0
		{1: 504, 504, 12: 524, 189: 523, 199: 520, 215: 522, 247: 518, 250: 519, 257: 521, 517, 287: 516, 404: 514, 515},
		{1: 513},
		{1: 512, 1385},
		{1: 511, 511},
		{1: 509, 509},
		// 5
		{1: 508, 508},
		{1: 507, 507},
		{1: 506, 506},
		{1: 505, 505},
		{193: 1226},
		// 10
		{4: 539, 114: 216, 193: 537, 218: 540, 232: 541, 270: 538},
		{193: 525},
		{40: 528, 527, 44: 526, 121: 529},
		{503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 16: 503, 20: 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 37: 503, 39: 503, 503, 503, 43: 503, 45: 503, 49: 503, 52: 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 68: 503, 83: 503, 503, 503, 87: 503, 503, 103: 503, 123: 503, 160: 535, 164: 503},
		{498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 39: 498, 498, 498, 498, 498, 45: 498, 498, 498, 49: 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 81: 498, 498, 498, 498, 498, 87: 498, 498, 102: 498, 498, 105: 498, 498, 109: 498, 113: 498, 115: 498, 118: 498, 498, 122: 498, 498, 498, 127: 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 138: 498, 498, 498, 498, 143: 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 160: 498, 164: 498, 498, 172: 498, 174: 498},
		// 15
		{497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 39: 497, 497, 497, 497, 497, 45: 497, 497, 497, 49: 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 81: 497, 497, 497, 497, 497, 87: 497, 497, 102: 497, 497, 105: 497, 497, 109: 497, 113: 497, 115: 497, 118: 497, 497, 122: 497, 497, 497, 127: 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 138: 497, 497, 497, 497, 143: 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 160: 497, 164: 497, 497, 172: 497, 174: 497},
		{1: 161, 161, 68: 531, 123: 161, 335: 530},
		{1: 159, 159, 123: 534, 394: 533},
		{222: 532},
		{1: 160, 160, 123: 160},
		// 20
		{1: 162, 162},
		{1: 158, 158},
		{40: 528, 527, 44: 536},
		{502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 16: 502, 20: 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 37: 502, 39: 502, 502, 502, 43: 502, 45: 502, 49: 502, 52: 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 68: 502, 83: 502, 502, 502, 87: 502, 502, 103: 502, 123: 502, 164: 502},
		{40: 365, 365, 219: 679, 303: 677, 309: 674, 312: 678, 323: 675, 327: 676, 411: 673},
		// 25
		{114: 542},
		{114: 215},
		{114: 214},
		{114: 213},
		{40: 528, 527, 44: 544, 268: 543},
		// 30
		{84: 210, 367: 547},
		{212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 52: 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 68: 212, 84: 212, 160: 545},
		{40: 528, 527, 44: 546},
		{211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 52: 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 68: 211, 84: 211},
		{84: 548},
		// 35
		{169, 169, 169, 40: 528, 527, 44: 526, 46: 169, 169, 50: 169, 169, 87: 553, 121: 554, 333: 552, 337: 550, 365: 549, 409: 551},
		{168, 168, 168, 46: 168, 168, 50: 667, 666, 350: 665},
		{209, 209, 209, 46: 209, 209, 50: 209, 209},
		{208, 208, 208, 46: 208, 208, 50: 208, 208},
		{207, 207, 207, 46: 207, 207, 50: 207, 207},
		// 40
		{40: 528, 527, 44: 569, 338: 570},
		{37: 178, 40: 528, 527, 44: 556, 407: 555},
		{37: 557},
		{37: 177},
		{40: 528, 527, 44: 558, 86: 561, 267: 560, 366: 559},
		// 45
		{499, 499, 499, 499, 7: 499, 10: 499, 499, 499, 14: 499, 499, 499, 20: 499, 34: 499, 499, 42: 499, 499, 45: 499, 49: 499, 68: 499, 102: 499, 105: 499, 113: 499, 115: 499, 118: 499, 122: 499, 124: 499, 127: 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 138: 499, 499, 499, 499, 143: 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 165: 499, 172: 499, 174: 499},
		{565, 3: 566},
		{176, 3: 176},
		{173, 3: 173, 172: 563, 174: 564, 347: 562},
		{174, 3: 174},
		// 50
		{172, 3: 172},
		{171, 3: 171},
		{170, 170, 170, 46: 170, 170, 50: 170, 170, 269: 568},
		{40: 528, 527, 44: 558, 86: 561, 267: 567},
		{175, 3: 175},
		// 55
		{179, 179, 179, 46: 179, 179, 50: 179, 179},
		{14: 496, 496, 17: 496, 22: 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 42: 496, 63: 496, 496, 496, 496, 496, 160: 663},
		{14: 591, 590, 17: 587, 22: 594, 595, 580, 575, 578, 576, 579, 573, 574, 599, 585, 42: 584, 63: 596, 598, 588, 597, 589, 116: 571, 577, 125: 583, 572, 265: 582, 586, 283: 593, 592, 364: 581},
		{320, 320, 320, 10: 320, 320, 14: 320, 320, 320, 320, 20: 320, 22: 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 34: 320, 320, 39: 320, 42: 320, 46: 320, 320, 50: 320, 320, 63: 320, 320, 320, 320, 320},
		{203, 203, 203, 14: 203, 203, 17: 203, 22: 203, 203, 203, 575, 203, 576, 203, 573, 574, 599, 203, 42: 203, 46: 203, 203, 50: 203, 203, 63: 203, 203, 203, 203, 203, 116: 662, 577},
		// 60
		{48: 661},
		{48: 660},
		{48: 659},
		{48: 658},
		{314, 314, 314, 10: 314, 314, 14: 314, 314, 314, 314, 20: 314, 22: 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 34: 314, 314, 39: 314, 42: 314, 46: 314, 314, 50: 314, 314, 63: 314, 314, 314, 314, 314},
		// 65
		{313, 313, 313, 10: 313, 313, 14: 313, 313, 313, 313, 20: 313, 22: 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 34: 313, 313, 39: 313, 42: 313, 46: 313, 313, 50: 313, 313, 63: 313, 313, 313, 313, 313},
		{312, 312, 312, 10: 312, 312, 14: 312, 312, 312, 312, 20: 312, 22: 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 34: 312, 312, 39: 312, 42: 312, 46: 312, 312, 50: 312, 312, 63: 312, 312, 312, 312, 312},
		{311, 311, 311, 10: 311, 311, 14: 311, 311, 311, 311, 20: 311, 22: 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 34: 311, 311, 39: 311, 42: 311, 46: 311, 311, 50: 311, 311, 63: 311, 311, 311, 311, 311},
		{206, 206, 206, 14: 591, 590, 17: 587, 22: 594, 595, 580, 575, 578, 576, 579, 573, 574, 599, 585, 42: 584, 46: 206, 206, 50: 206, 206, 63: 596, 598, 588, 597, 589, 116: 571, 577, 125: 583, 572, 265: 657, 586, 283: 593, 592},
		{205, 205, 205, 14: 205, 205, 17: 205, 22: 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 42: 205, 46: 205, 205, 50: 205, 205, 63: 205, 205, 205, 205, 205},
		// 70
		{202, 202, 202, 14: 202, 202, 17: 202, 22: 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 42: 202, 46: 202, 202, 50: 202, 202, 63: 202, 202, 202, 202, 202},
		{201, 201, 201, 14: 201, 201, 17: 201, 22: 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 42: 201, 46: 201, 201, 50: 201, 201, 63: 201, 201, 201, 201, 201},
		{21: 656, 40: 528, 527, 44: 655},
		{198, 198, 198, 14: 198, 198, 17: 198, 22: 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 42: 198, 46: 198, 198, 50: 198, 198, 63: 198, 198, 198, 198, 198},
		{197, 197, 197, 14: 197, 197, 17: 197, 22: 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 42: 197, 46: 197, 197, 50: 197, 197, 63: 197, 197, 197, 197, 197},
		// 75
		{196, 196, 196, 14: 196, 196, 17: 196, 22: 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 42: 196, 46: 196, 196, 50: 196, 196, 63: 196, 196, 196, 196, 196},
		{195, 195, 195, 14: 195, 195, 17: 195, 22: 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 42: 195, 46: 195, 195, 50: 195, 195, 63: 195, 195, 195, 195, 195},
		{194, 194, 194, 14: 194, 194, 17: 194, 22: 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 42: 194, 46: 194, 194, 50: 194, 194, 63: 194, 194, 194, 194, 194},
		{193, 193, 193, 14: 193, 193, 17: 193, 22: 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 42: 193, 46: 193, 193, 50: 193, 193, 63: 193, 193, 193, 193, 193},
		{192, 192, 192, 14: 192, 192, 17: 192, 22: 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 42: 192, 46: 192, 192, 50: 192, 192, 63: 192, 192, 192, 192, 192},
		// 80
		{191, 191, 191, 14: 191, 191, 17: 191, 22: 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 42: 191, 46: 191, 191, 50: 191, 191, 63: 191, 191, 191, 191, 191},
		{190, 190, 190, 14: 190, 190, 17: 190, 22: 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 42: 190, 46: 190, 190, 651, 50: 190, 190, 63: 190, 190, 190, 190, 190, 214: 652},
		{185, 185, 185, 14: 185, 185, 17: 185, 22: 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 42: 185, 46: 185, 185, 50: 185, 185, 63: 185, 185, 185, 185, 185},
		{307: 650, 321: 649},
		{182, 182, 182, 14: 182, 182, 17: 182, 22: 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 42: 182, 46: 182, 182, 648, 50: 182, 182, 63: 182, 182, 182, 182, 182},
		// 85
		{180, 180, 180, 14: 180, 180, 17: 180, 22: 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 42: 180, 46: 180, 180, 50: 180, 180, 63: 180, 180, 180, 180, 180},
		{37: 600},
		{13: 615, 69: 612, 614, 613, 610, 609, 603, 606, 607, 605, 604, 611, 608, 288: 602, 406: 601},
		{646, 13: 615, 69: 612, 614, 613, 610, 609, 603, 606, 607, 605, 604, 611, 608, 288: 647},
		{45, 13: 45, 69: 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45},
		// 90
		{48: 627, 187: 645},
		{48: 627, 187: 644},
		{48: 643},
		{48: 641, 243: 642},
		{48: 627, 187: 640, 243: 639},
		// 95
		{48: 638},
		{48: 637},
		{310: 635},
		{33, 8: 626, 13: 33, 48: 627, 69: 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 187: 625},
		{21: 624, 106: 622, 325: 623},
		// 100
		{21: 621, 106: 619, 163: 620},
		{21: 618, 106: 616, 163: 617},
		{21, 13: 21, 69: 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21},
		{24, 13: 24, 69: 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24},
		{23, 13: 23, 69: 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23},
		// 105
		{22, 13: 22, 69: 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22},
		{27, 13: 27, 69: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27},
		{26, 13: 26, 69: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26},
		{25, 13: 25, 69: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25},
		{30, 13: 30, 69: 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30},
		// 110
		{29, 13: 29, 69: 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29},
		{28, 13: 28, 69: 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
		{32, 13: 32, 69: 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32},
		{31, 13: 31, 69: 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31},
		{19, 13: 19, 69: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 304: 634, 308: 631, 315: 629, 317: 630, 320: 633, 329: 632, 402: 628},
		// 115
		{20, 13: 20, 69: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
		{18, 13: 18, 69: 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18},
		{17, 13: 17, 69: 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17},
		{16, 13: 16, 69: 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
		{15, 13: 15, 69: 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
		// 120
		{14, 13: 14, 69: 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
		{13, 13: 13, 69: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13},
		{48: 636},
		{34, 13: 34, 69: 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34},
		{35, 13: 35, 69: 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35},
		// 125
		{36, 13: 36, 69: 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36},
		{38, 13: 38, 69: 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38},
		{37, 13: 37, 69: 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
		{40, 13: 40, 69: 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{39, 13: 39, 69: 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39},
		// 130
		{41, 13: 41, 69: 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41},
		{42, 13: 42, 69: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42},
		{43, 13: 43, 69: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43},
		{46, 46, 46, 10: 46, 46, 14: 46, 46, 46, 46, 20: 46, 22: 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 34: 46, 46, 39: 46, 42: 46, 46: 46, 46, 50: 46, 46, 63: 46, 46, 46, 46, 46},
		{44, 13: 44, 69: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
		// 135
		{181, 181, 181, 14: 181, 181, 17: 181, 22: 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 42: 181, 46: 181, 181, 50: 181, 181, 63: 181, 181, 181, 181, 181},
		{184, 184, 184, 14: 184, 184, 17: 184, 22: 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 42: 184, 46: 184, 184, 50: 184, 184, 63: 184, 184, 184, 184, 184},
		{183, 183, 183, 14: 183, 183, 17: 183, 22: 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 42: 183, 46: 183, 183, 50: 183, 183, 63: 183, 183, 183, 183, 183},
		{189, 189, 189, 14: 189, 189, 17: 189, 22: 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 42: 189, 46: 189, 189, 50: 189, 189, 63: 189, 189, 189, 189, 189},
		{188, 188, 188, 14: 188, 188, 17: 188, 22: 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 42: 188, 46: 188, 188, 50: 188, 188, 63: 188, 188, 188, 188, 188, 137: 654, 142: 653},
		// 140
		{187, 187, 187, 14: 187, 187, 17: 187, 22: 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 42: 187, 46: 187, 187, 50: 187, 187, 63: 187, 187, 187, 187, 187},
		{186, 186, 186, 14: 186, 186, 17: 186, 22: 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 42: 186, 46: 186, 186, 50: 186, 186, 63: 186, 186, 186, 186, 186},
		{200, 200, 200, 14: 200, 200, 17: 200, 22: 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 42: 200, 46: 200, 200, 50: 200, 200, 63: 200, 200, 200, 200, 200},
		{199, 199, 199, 14: 199, 199, 17: 199, 22: 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 42: 199, 46: 199, 199, 50: 199, 199, 63: 199, 199, 199, 199, 199},
		{204, 204, 204, 14: 204, 204, 17: 204, 22: 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 42: 204, 46: 204, 204, 50: 204, 204, 63: 204, 204, 204, 204, 204},
		// 145
		{315, 315, 315, 10: 315, 315, 14: 315, 315, 315, 315, 20: 315, 22: 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 34: 315, 315, 39: 315, 42: 315, 46: 315, 315, 50: 315, 315, 63: 315, 315, 315, 315, 315},
		{316, 316, 316, 10: 316, 316, 14: 316, 316, 316, 316, 20: 316, 22: 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 34: 316, 316, 39: 316, 42: 316, 46: 316, 316, 50: 316, 316, 63: 316, 316, 316, 316, 316},
		{317, 317, 317, 10: 317, 317, 14: 317, 317, 317, 317, 20: 317, 22: 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 34: 317, 317, 39: 317, 42: 317, 46: 317, 317, 50: 317, 317, 63: 317, 317, 317, 317, 317},
		{318, 318, 318, 10: 318, 318, 14: 318, 318, 318, 318, 20: 318, 22: 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 34: 318, 318, 39: 318, 42: 318, 46: 318, 318, 50: 318, 318, 63: 318, 318, 318, 318, 318},
		{319, 319, 319, 10: 319, 319, 14: 319, 319, 319, 319, 20: 319, 22: 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 34: 319, 319, 39: 319, 42: 319, 46: 319, 319, 50: 319, 319, 63: 319, 319, 319, 319, 319},
		// 150
		{40: 528, 527, 44: 664},
		{14: 495, 495, 17: 495, 22: 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 42: 495, 63: 495, 495, 495, 495, 495},
		{165, 165, 165, 46: 669, 670, 349: 668},
		{167, 167, 167, 46: 167, 167},
		{166, 166, 166, 46: 166, 166},
		// 155
		{217, 217, 217},
		{226: 672},
		{226: 671},
		{163, 163, 163},
		{164, 164, 164},
		// 160
		{40: 528, 527, 44: 526, 121: 683},
		{241: 682},
		{241: 681},
		{40: 362, 362},
		{40: 361, 361},
		// 165
		{40: 360, 360, 219: 680},
		{40: 359, 359},
		{40: 358, 358},
		{40: 363, 363},
		{40: 364, 364},
		// 170
		{1: 357, 357, 10: 357, 357, 16: 357, 21: 357, 357, 357, 357, 357, 357, 357, 357, 357, 357, 357, 357, 37: 357, 39: 357, 83: 357, 357, 357, 87: 357, 357, 164: 685, 401: 684},
		{1: 223, 223, 10: 223, 223, 16: 223, 21: 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 37: 695, 39: 223, 83: 223, 223, 223, 87: 223, 223, 396: 693, 398: 694, 408: 692},
		{290: 686},
		{163: 690, 223: 688, 306: 689, 319: 687},
		{1: 356, 356, 10: 356, 356, 16: 356, 21: 356, 356, 356, 356, 356, 356, 356, 356, 356, 356, 356, 356, 37: 356, 39: 356, 83: 356, 356, 356, 87: 356, 356},
		// 175
		{1: 355, 355, 10: 355, 355, 16: 355, 21: 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 37: 355, 39: 355, 83: 355, 355, 355, 87: 355, 355},
		{223: 691},
		{1: 353, 353, 10: 353, 353, 16: 353, 21: 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 37: 353, 39: 353, 83: 353, 353, 353, 87: 353, 353},
		{1: 354, 354, 10: 354, 354, 16: 354, 21: 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 37: 354, 39: 354, 83: 354, 354, 354, 87: 354, 354},
		{1: 6, 6, 10: 1216, 6, 276: 1215, 379: 1214},
		// 180
		{1: 350, 350, 10: 350, 350},
		{1: 348, 348, 10: 348, 348, 16: 348, 21: 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 39: 348, 83: 348, 348, 348, 87: 348, 348, 363: 1034},
		{4: 86, 86, 702, 40: 528, 527, 44: 558, 55: 86, 86: 697, 120: 703, 176: 700, 185: 701, 696, 285: 699, 397: 698},
		{479, 3: 479},
		{113: 778, 118: 795, 122: 797, 124: 787, 127: 794, 785, 784, 791, 792, 788, 802, 801, 806, 783, 138: 804, 803, 790, 786, 143: 799, 780, 793, 782, 800, 781, 807, 805, 789, 796, 798, 779, 195: 771, 772, 200: 769, 775, 207: 776, 774, 773, 770, 212: 777},
		// 185
		{766, 3: 767},
		{221, 3: 221},
		{219, 3: 219},
		{218, 3: 218},
		{40: 528, 527, 44: 765},
		// 190
		{4: 704, 705, 55: 706},
		{37: 761},
		{162: 756},
		{162: 707},
		{37: 708},
		// 195
		{40: 528, 527, 44: 558, 86: 709, 108: 710},
		{501, 3: 501},
		{712, 3: 711},
		{40: 528, 527, 44: 558, 86: 755},
		{9: 713, 211: 714},
		// 200
		{40: 528, 527, 44: 526, 121: 744},
		{72, 72, 72, 72, 72, 72, 72, 718, 52: 717, 724, 723, 72, 728, 729, 719, 721, 726, 720, 725, 110: 716, 727, 722, 156: 715, 730},
		{71, 71, 71, 71, 71, 71, 71, 718, 71, 71, 52: 717, 724, 723, 71, 728, 729, 719, 721, 726, 720, 725, 110: 743, 727, 722},
		{70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 52: 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70},
		{68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 52: 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68: 68},
		// 205
		{52: 742},
		{46: 740, 741},
		{64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 52: 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 68: 64},
		{63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 52: 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 68: 63},
		{62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 52: 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 68: 62},
		// 210
		{61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 52: 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 68: 61},
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 52: 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 68: 60},
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 52: 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 68: 59},
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 52: 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 68: 58},
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 52: 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 68: 57},
		// 215
		{114: 733},
		{313: 731},
		{47, 47, 47, 47, 47, 47, 47, 55: 47},
		{40: 528, 527, 44: 526, 121: 732},
		{53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 52: 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 68: 53},
		// 220
		{170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 37: 735, 40: 528, 527, 44: 544, 52: 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 68: 170, 268: 734, 736},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 52: 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 68: 56},
		{189: 737, 199: 738},
		{54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 52: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 68: 54},
		{4: 539, 114: 216, 218: 540, 232: 541, 270: 538},
		// 225
		{739},
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 52: 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 68: 55},
		{66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 52: 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 68: 66},
		{65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 52: 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 68: 65},
		{67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 52: 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 68: 67},
		// 230
		{69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 52: 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69},
		{77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 37: 746, 52: 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 84: 77, 345: 745},
		{75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 52: 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 84: 750, 395: 749},
		{40: 528, 527, 44: 558, 86: 709, 108: 747},
		{748, 3: 711},
		// 235
		{76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 52: 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 84: 76},
		{78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 52: 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78},
		{190: 751},
		{43: 753, 68: 752},
		{74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 52: 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74},
		// 240
		{8: 754},
		{73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 52: 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73},
		{500, 3: 500},
		{37: 757},
		{40: 528, 527, 44: 558, 86: 709, 108: 758},
		// 245
		{759, 3: 711},
		{72, 72, 72, 72, 72, 72, 72, 718, 52: 717, 724, 723, 72, 728, 729, 719, 721, 726, 720, 725, 110: 716, 727, 722, 156: 715, 760},
		{48, 48, 48, 48, 48, 48, 48, 55: 48},
		{40: 528, 527, 44: 558, 86: 709, 108: 762},
		{763, 3: 711},
		// 250
		{72, 72, 72, 72, 72, 72, 72, 718, 52: 717, 724, 723, 72, 728, 729, 719, 721, 726, 720, 725, 110: 716, 727, 722, 156: 715, 764},
		{49, 49, 49, 49, 49, 49, 49, 55: 49},
		{4: 85, 85, 7: 85, 85, 85, 55: 85},
		{1: 222, 222, 10: 222, 222, 16: 222, 21: 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 39: 222, 83: 222, 222, 222, 87: 222, 222},
		{4: 86, 86, 702, 40: 528, 527, 44: 558, 55: 86, 86: 697, 120: 703, 176: 700, 185: 701, 696, 285: 768},
		// 255
		{220, 3: 220},
		{477, 3: 477, 477, 477, 477, 477, 477, 477, 13: 477, 477, 477, 17: 477, 477, 477, 21: 477, 36: 477, 38: 932, 197: 931, 249: 930},
		{157, 3: 157, 157, 157, 157, 157, 157, 157, 12: 157, 157, 157, 157, 17: 157, 157, 157, 21: 157, 33: 157, 36: 157, 38: 157},
		{156, 3: 156, 156, 156, 156, 156, 156, 156, 12: 156, 156, 156, 156, 17: 156, 156, 156, 21: 156, 33: 156, 36: 156, 38: 156},
		{153, 3: 153, 153, 153, 153, 153, 153, 153, 12: 153, 153, 153, 153, 17: 153, 153, 153, 21: 153, 33: 153, 36: 153, 38: 153},
		// 260
		{152, 3: 152, 152, 152, 152, 152, 152, 152, 12: 152, 152, 152, 152, 17: 152, 152, 152, 21: 152, 33: 152, 36: 152, 38: 152},
		{151, 3: 151, 151, 151, 151, 151, 151, 151, 12: 151, 151, 151, 151, 17: 151, 151, 151, 21: 151, 33: 151, 36: 151, 38: 151},
		{150, 3: 150, 150, 150, 150, 150, 150, 150, 12: 150, 150, 150, 150, 17: 150, 150, 150, 21: 150, 33: 150, 36: 150, 38: 150},
		{149, 3: 149, 149, 149, 149, 149, 149, 149, 12: 149, 149, 149, 149, 17: 149, 149, 149, 21: 149, 33: 149, 36: 149, 38: 149},
		{148, 3: 148, 148, 148, 148, 148, 148, 148, 12: 148, 148, 148, 148, 17: 148, 148, 148, 21: 148, 33: 148, 36: 148, 38: 148},
		// 265
		{147, 3: 147, 147, 147, 147, 147, 147, 147, 12: 147, 147, 147, 147, 17: 147, 147, 147, 21: 147, 33: 147, 36: 147, 919, 147, 166: 920},
		{37: 912},
		{140, 3: 140, 140, 140, 140, 140, 140, 140, 12: 140, 140, 140, 140, 17: 140, 140, 140, 21: 140, 33: 140, 36: 140, 905, 140, 166: 906},
		{37: 902},
		{137, 3: 137, 137, 137, 137, 137, 137, 137, 12: 137, 137, 137, 137, 17: 137, 137, 137, 21: 137, 33: 137, 36: 137, 896, 137},
		// 270
		{134, 3: 134, 134, 134, 134, 134, 134, 134, 12: 134, 134, 134, 134, 17: 134, 134, 134, 21: 134, 33: 134, 36: 134, 893, 134},
		{132, 3: 132, 132, 132, 132, 132, 132, 132, 12: 132, 132, 132, 132, 17: 132, 132, 132, 21: 132, 33: 132, 36: 132, 38: 132},
		{131, 3: 131, 131, 131, 131, 131, 131, 131, 12: 131, 131, 131, 131, 17: 131, 131, 131, 21: 131, 33: 131, 36: 131, 38: 131},
		{130, 3: 130, 130, 130, 130, 130, 130, 130, 12: 130, 130, 130, 130, 17: 130, 130, 130, 21: 130, 33: 130, 36: 130, 38: 130, 124: 892},
		{37: 889},
		// 275
		{127, 3: 127, 127, 127, 127, 127, 127, 127, 12: 127, 127, 127, 127, 17: 127, 127, 127, 21: 127, 33: 127, 36: 127, 38: 127},
		{126, 3: 126, 126, 126, 126, 126, 126, 126, 12: 126, 126, 126, 126, 17: 126, 126, 126, 21: 126, 33: 126, 36: 126, 880, 126},
		{299: 859, 331: 858},
		{116, 3: 116, 116, 116, 116, 116, 116, 116, 12: 116, 116, 116, 116, 17: 116, 116, 116, 21: 116, 33: 116, 36: 116, 38: 116},
		{115, 3: 115, 115, 115, 115, 115, 115, 115, 12: 115, 115, 115, 115, 17: 115, 115, 115, 21: 115, 33: 115, 36: 115, 38: 115},
		// 280
		{114, 3: 114, 114, 114, 114, 114, 114, 114, 12: 114, 114, 114, 114, 17: 114, 114, 114, 21: 114, 33: 114, 36: 114, 38: 114},
		{113, 3: 113, 113, 113, 113, 113, 113, 113, 12: 113, 113, 113, 113, 17: 113, 113, 113, 21: 113, 33: 113, 36: 113, 38: 113},
		{112, 3: 112, 112, 112, 112, 112, 112, 112, 12: 112, 112, 112, 112, 17: 112, 112, 112, 21: 112, 33: 112, 36: 112, 38: 112},
		{111, 3: 111, 111, 111, 111, 111, 111, 111, 12: 111, 111, 111, 111, 17: 111, 111, 111, 21: 111, 33: 111, 36: 111, 855, 111},
		{37: 848, 166: 849},
		// 285
		{37: 845},
		{113: 830, 122: 829},
		{100, 3: 100, 100, 100, 100, 100, 100, 100, 12: 100, 100, 100, 100, 17: 100, 100, 100, 21: 100, 33: 100, 36: 100, 823, 100},
		{97, 3: 97, 97, 97, 97, 97, 97, 97, 12: 97, 97, 97, 97, 17: 97, 97, 97, 21: 97, 33: 97, 36: 97, 817, 97},
		{94, 3: 94, 94, 94, 94, 94, 94, 94, 12: 94, 94, 94, 94, 17: 94, 94, 94, 21: 94, 33: 94, 36: 94, 809, 94},
		// 290
		{91, 3: 91, 91, 91, 91, 91, 91, 91, 12: 91, 91, 91, 91, 17: 91, 91, 91, 21: 91, 33: 91, 36: 91, 38: 91},
		{90, 3: 90, 90, 90, 90, 90, 90, 90, 12: 90, 90, 90, 90, 17: 90, 90, 90, 21: 90, 33: 90, 36: 90, 38: 90},
		{89, 3: 89, 89, 89, 89, 89, 89, 89, 12: 89, 89, 89, 89, 17: 89, 89, 89, 21: 89, 33: 89, 36: 89, 38: 89},
		{322: 808},
		{87, 3: 87, 87, 87, 87, 87, 87, 87, 12: 87, 87, 87, 87, 17: 87, 87, 87, 21: 87, 33: 87, 36: 87, 38: 87},
		// 295
		{88, 3: 88, 88, 88, 88, 88, 88, 88, 12: 88, 88, 88, 88, 17: 88, 88, 88, 21: 88, 33: 88, 36: 88, 38: 88},
		{48: 810, 159: 811, 168: 812},
		{155, 3: 155},
		{154, 3: 154},
		{813, 3: 814},
		// 300
		{93, 3: 93, 93, 93, 93, 93, 93, 93, 12: 93, 93, 93, 93, 17: 93, 93, 93, 21: 93, 33: 93, 36: 93, 38: 93},
		{48: 815},
		{816},
		{92, 3: 92, 92, 92, 92, 92, 92, 92, 12: 92, 92, 92, 92, 17: 92, 92, 92, 21: 92, 33: 92, 36: 92, 38: 92},
		{48: 810, 159: 811, 168: 818},
		// 305
		{819, 3: 820},
		{96, 3: 96, 96, 96, 96, 96, 96, 96, 12: 96, 96, 96, 96, 17: 96, 96, 96, 21: 96, 33: 96, 36: 96, 38: 96},
		{48: 821},
		{822},
		{95, 3: 95, 95, 95, 95, 95, 95, 95, 12: 95, 95, 95, 95, 17: 95, 95, 95, 21: 95, 33: 95, 36: 95, 38: 95},
		// 310
		{48: 810, 159: 811, 168: 824},
		{825, 3: 826},
		{99, 3: 99, 99, 99, 99, 99, 99, 99, 12: 99, 99, 99, 99, 17: 99, 99, 99, 21: 99, 33: 99, 36: 99, 38: 99},
		{48: 827},
		{828},
		// 315
		{98, 3: 98, 98, 98, 98, 98, 98, 98, 12: 98, 98, 98, 98, 17: 98, 98, 98, 21: 98, 33: 98, 36: 98, 38: 98},
		{37: 838, 166: 839},
		{37: 831, 166: 832},
		{48: 836},
		{37: 833},
		// 320
		{48: 834},
		{835},
		{101, 3: 101, 101, 101, 101, 101, 101, 101, 12: 101, 101, 101, 101, 17: 101, 101, 101, 21: 101, 33: 101, 36: 101, 38: 101},
		{837},
		{102, 3: 102, 102, 102, 102, 102, 102, 102, 12: 102, 102, 102, 102, 17: 102, 102, 102, 21: 102, 33: 102, 36: 102, 38: 102},
		// 325
		{48: 843},
		{37: 840},
		{48: 841},
		{842},
		{103, 3: 103, 103, 103, 103, 103, 103, 103, 12: 103, 103, 103, 103, 17: 103, 103, 103, 21: 103, 33: 103, 36: 103, 38: 103},
		// 330
		{844},
		{104, 3: 104, 104, 104, 104, 104, 104, 104, 12: 104, 104, 104, 104, 17: 104, 104, 104, 21: 104, 33: 104, 36: 104, 38: 104},
		{48: 846},
		{847},
		{105, 3: 105, 105, 105, 105, 105, 105, 105, 12: 105, 105, 105, 105, 17: 105, 105, 105, 21: 105, 33: 105, 36: 105, 38: 105},
		// 335
		{48: 853},
		{37: 850},
		{48: 851},
		{852},
		{108, 3: 108, 108, 108, 108, 108, 108, 108, 12: 108, 108, 108, 108, 17: 108, 108, 108, 21: 108, 33: 108, 36: 108, 38: 108},
		// 340
		{854},
		{109, 3: 109, 109, 109, 109, 109, 109, 109, 12: 109, 109, 109, 109, 17: 109, 109, 109, 21: 109, 33: 109, 36: 109, 38: 109},
		{48: 856},
		{857},
		{110, 3: 110, 110, 110, 110, 110, 110, 110, 12: 110, 110, 110, 110, 17: 110, 110, 110, 21: 110, 33: 110, 36: 110, 38: 110},
		// 345
		{37: 874, 115: 873},
		{37: 861, 115: 860},
		{239: 869},
		{48: 862},
		{863},
		// 350
		{115: 864},
		{239: 865},
		{119, 3: 119, 119, 119, 119, 119, 119, 119, 12: 119, 119, 119, 119, 17: 119, 119, 119, 21: 119, 33: 119, 36: 119, 866, 119},
		{48: 867},
		{868},
		// 355
		{118, 3: 118, 118, 118, 118, 118, 118, 118, 12: 118, 118, 118, 118, 17: 118, 118, 118, 21: 118, 33: 118, 36: 118, 38: 118},
		{120, 3: 120, 120, 120, 120, 120, 120, 120, 12: 120, 120, 120, 120, 17: 120, 120, 120, 21: 120, 33: 120, 36: 120, 870, 120},
		{48: 871},
		{872},
		{117, 3: 117, 117, 117, 117, 117, 117, 117, 12: 117, 117, 117, 117, 17: 117, 117, 117, 21: 117, 33: 117, 36: 117, 38: 117},
		// 360
		{231: 879},
		{48: 875},
		{876},
		{115: 877},
		{231: 878},
		// 365
		{121, 3: 121, 121, 121, 121, 121, 121, 121, 12: 121, 121, 121, 121, 17: 121, 121, 121, 21: 121, 33: 121, 36: 121, 38: 121},
		{122, 3: 122, 122, 122, 122, 122, 122, 122, 12: 122, 122, 122, 122, 17: 122, 122, 122, 21: 122, 33: 122, 36: 122, 38: 122},
		{48: 881},
		{882},
		{125, 3: 125, 125, 125, 125, 125, 125, 125, 12: 125, 125, 125, 125, 17: 125, 883, 125, 21: 125, 33: 125, 36: 125, 38: 125},
		// 370
		{242: 884, 316: 885},
		{245: 888},
		{242: 886},
		{245: 887},
		{123, 3: 123, 123, 123, 123, 123, 123, 123, 12: 123, 123, 123, 123, 17: 123, 123, 123, 21: 123, 33: 123, 36: 123, 38: 123},
		// 375
		{124, 3: 124, 124, 124, 124, 124, 124, 124, 12: 124, 124, 124, 124, 17: 124, 124, 124, 21: 124, 33: 124, 36: 124, 38: 124},
		{48: 890},
		{891},
		{128, 3: 128, 128, 128, 128, 128, 128, 128, 12: 128, 128, 128, 128, 17: 128, 128, 128, 21: 128, 33: 128, 36: 128, 38: 128},
		{129, 3: 129, 129, 129, 129, 129, 129, 129, 12: 129, 129, 129, 129, 17: 129, 129, 129, 21: 129, 33: 129, 36: 129, 38: 129},
		// 380
		{48: 810, 159: 811, 168: 894},
		{895},
		{133, 3: 133, 133, 133, 133, 133, 133, 133, 12: 133, 133, 133, 133, 17: 133, 133, 133, 21: 133, 33: 133, 36: 133, 38: 133},
		{48: 810, 159: 811, 168: 897},
		{898, 3: 899},
		// 385
		{136, 3: 136, 136, 136, 136, 136, 136, 136, 12: 136, 136, 136, 136, 17: 136, 136, 136, 21: 136, 33: 136, 36: 136, 38: 136},
		{48: 900},
		{901},
		{135, 3: 135, 135, 135, 135, 135, 135, 135, 12: 135, 135, 135, 135, 17: 135, 135, 135, 21: 135, 33: 135, 36: 135, 38: 135},
		{48: 903},
		// 390
		{904},
		{138, 3: 138, 138, 138, 138, 138, 138, 138, 12: 138, 138, 138, 138, 17: 138, 138, 138, 21: 138, 33: 138, 36: 138, 38: 138},
		{48: 910},
		{37: 907},
		{48: 908},
		// 395
		{909},
		{106, 3: 106, 106, 106, 106, 106, 106, 106, 12: 106, 106, 106, 106, 17: 106, 106, 106, 21: 106, 33: 106, 36: 106, 38: 106},
		{911},
		{139, 3: 139, 139, 139, 139, 139, 139, 139, 12: 139, 139, 139, 139, 17: 139, 139, 139, 21: 139, 33: 139, 36: 139, 38: 139},
		{48: 913},
		// 400
		{914, 113: 916, 220: 915},
		{143, 3: 143, 143, 143, 143, 143, 143, 143, 12: 143, 143, 143, 143, 17: 143, 143, 143, 21: 143, 33: 143, 36: 143, 38: 143},
		{918},
		{917},
		{141, 3: 141, 141, 141, 141, 141, 141, 141, 12: 141, 141, 141, 141, 17: 141, 141, 141, 21: 141, 33: 141, 36: 141, 38: 141},
		// 405
		{142, 3: 142, 142, 142, 142, 142, 142, 142, 12: 142, 142, 142, 142, 17: 142, 142, 142, 21: 142, 33: 142, 36: 142, 38: 142},
		{48: 924},
		{37: 921},
		{48: 922},
		{923},
		// 410
		{107, 3: 107, 107, 107, 107, 107, 107, 107, 12: 107, 107, 107, 107, 17: 107, 107, 107, 21: 107, 33: 107, 36: 107, 38: 107},
		{925, 113: 927, 220: 926},
		{146, 3: 146, 146, 146, 146, 146, 146, 146, 12: 146, 146, 146, 146, 17: 146, 146, 146, 21: 146, 33: 146, 36: 146, 38: 146},
		{929},
		{928},
		// 415
		{144, 3: 144, 144, 144, 144, 144, 144, 144, 12: 144, 144, 144, 144, 17: 144, 144, 144, 21: 144, 33: 144, 36: 144, 38: 144},
		{145, 3: 145, 145, 145, 145, 145, 145, 145, 12: 145, 145, 145, 145, 17: 145, 145, 145, 21: 145, 33: 145, 36: 145, 38: 145},
		{474, 3: 474, 474, 474, 474, 474, 474, 474, 13: 474, 474, 474, 17: 935, 474, 474, 21: 474, 36: 474, 403: 934},
		{476, 3: 476, 476, 476, 476, 476, 476, 476, 12: 476, 476, 476, 476, 17: 476, 476, 476, 21: 476, 33: 476, 36: 476},
		{40: 528, 527, 44: 933},
		// 420
		{475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 21: 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 36: 475, 39: 475, 83: 475, 475, 475, 87: 475, 475},
		{472, 3: 472, 472, 472, 472, 472, 472, 472, 13: 472, 938, 939, 18: 472, 472, 21: 472, 36: 472, 205: 937, 378: 936},
		{473, 3: 473, 473, 473, 473, 473, 473, 473, 13: 473, 473, 473, 18: 473, 473, 21: 473, 36: 473},
		{468, 3: 468, 468, 468, 468, 468, 468, 468, 13: 468, 18: 468, 468, 21: 943, 36: 944, 251: 941, 940, 262: 942},
		{471, 3: 471, 471, 471, 471, 471, 471, 471, 13: 471, 18: 471, 471, 21: 471, 36: 471},
		// 425
		{470, 3: 470, 470, 470, 470, 470, 470, 470, 13: 470, 18: 470, 470, 21: 470, 36: 470},
		{469, 3: 469, 469, 469, 469, 469, 469, 469, 13: 469, 18: 469, 469, 21: 469, 36: 469},
		{440, 3: 440, 440, 440, 440, 440, 440, 440, 13: 995, 18: 440, 440, 259: 994},
		{467, 3: 467, 467, 467, 467, 467, 467, 467, 13: 467, 18: 467, 467, 33: 467},
		{466, 3: 466, 466, 466, 466, 466, 466, 466, 13: 466, 18: 466, 466, 33: 466},
		// 430
		{20: 989, 40: 991, 48: 990, 260: 988},
		{171: 945, 173: 947, 291: 946},
		{161: 986},
		{171: 983},
		{21: 948},
		// 435
		{84: 950, 171: 949},
		{161: 981},
		{8: 951},
		{171: 952},
		{161: 953},
		// 440
		{458, 3: 458, 458, 458, 458, 458, 458, 458, 13: 458, 18: 458, 458, 33: 458, 37: 955, 177: 954},
		{459, 3: 459, 459, 459, 459, 459, 459, 459, 13: 459, 18: 459, 459, 33: 459},
		{456, 89: 966, 964, 92: 959, 960, 962, 967, 965, 961, 963, 969, 968, 958, 263: 957, 362: 956},
		{979, 89: 966, 964, 92: 959, 960, 962, 967, 965, 961, 963, 969, 968, 958, 263: 980},
		{455, 89: 455, 455, 92: 455, 455, 455, 455, 455, 455, 455, 455, 455, 455},
		// 445
		{18: 975},
		{173: 973},
		{48: 972},
		{449, 89: 449, 449, 92: 449, 449, 449, 449, 449, 449, 449, 449, 449, 449},
		{48: 971},
		// 450
		{447, 89: 447, 447, 92: 447, 447, 447, 447, 447, 447, 447, 447, 447, 447},
		{446, 89: 446, 446, 92: 446, 446, 446, 446, 446, 446, 446, 446, 446, 446},
		{445, 89: 445, 445, 92: 445, 445, 445, 445, 445, 445, 445, 445, 445, 445},
		{48: 970},
		{443, 89: 443, 443, 92: 443, 443, 443, 443, 443, 443, 443, 443, 443, 443},
		// 455
		{442, 89: 442, 442, 92: 442, 442, 442, 442, 442, 442, 442, 442, 442, 442},
		{441, 89: 441, 441, 92: 441, 441, 441, 441, 441, 441, 441, 441, 441, 441},
		{444, 89: 444, 444, 92: 444, 444, 444, 444, 444, 444, 444, 444, 444, 444},
		{448, 89: 448, 448, 92: 448, 448, 448, 448, 448, 448, 448, 448, 448, 448},
		{450, 89: 450, 450, 92: 450, 450, 450, 450, 450, 450, 450, 450, 450, 450},
		// 460
		{48: 974},
		{451, 89: 451, 451, 92: 451, 451, 451, 451, 451, 451, 451, 451, 451, 451},
		{48: 976, 229: 977},
		{453, 89: 453, 453, 92: 453, 453, 453, 453, 453, 453, 453, 453, 453, 453},
		{330: 978},
		// 465
		{452, 89: 452, 452, 92: 452, 452, 452, 452, 452, 452, 452, 452, 452, 452},
		{457, 3: 457, 457, 457, 457, 457, 457, 457, 13: 457, 18: 457, 457, 33: 457},
		{454, 89: 454, 454, 92: 454, 454, 454, 454, 454, 454, 454, 454, 454, 454},
		{458, 3: 458, 458, 458, 458, 458, 458, 458, 13: 458, 18: 458, 458, 33: 458, 37: 955, 177: 982},
		{460, 3: 460, 460, 460, 460, 460, 460, 460, 13: 460, 18: 460, 460, 33: 460},
		// 470
		{161: 984},
		{458, 3: 458, 458, 458, 458, 458, 458, 458, 13: 458, 18: 458, 458, 33: 458, 37: 955, 177: 985},
		{462, 3: 462, 462, 462, 462, 462, 462, 462, 13: 462, 18: 462, 462, 33: 462},
		{458, 3: 458, 458, 458, 458, 458, 458, 458, 13: 458, 18: 458, 458, 33: 458, 37: 955, 177: 987},
		{463, 3: 463, 463, 463, 463, 463, 463, 463, 13: 463, 18: 463, 463, 33: 463},
		// 475
		{465, 3: 465, 465, 465, 465, 465, 465, 465, 13: 465, 18: 465, 465, 33: 465},
		{8: 992},
		{2, 3: 2, 2, 2, 2, 2, 2, 2, 13: 2, 18: 2, 2, 33: 2},
		{1, 3: 1, 1, 1, 1, 1, 1, 1, 13: 1, 18: 1, 1, 33: 1},
		{40: 991, 48: 990, 260: 993},
		// 480
		{464, 3: 464, 464, 464, 464, 464, 464, 464, 13: 464, 18: 464, 464, 33: 464},
		{428, 3: 428, 86, 86, 702, 86, 86, 86, 18: 1016, 1015, 120: 1014, 182: 1013, 271: 1012, 343: 1010, 369: 1011},
		{437, 3: 437, 437, 437, 437, 437, 437, 437, 18: 437, 437, 437, 56: 998, 109: 437, 119: 437, 191: 437, 356: 997, 358: 996},
		{439, 3: 439, 439, 439, 439, 439, 439, 439, 18: 439, 439},
		{435, 3: 435, 435, 435, 435, 435, 435, 435, 18: 435, 435, 435, 109: 435, 119: 435, 191: 1001, 361: 1000},
		// 485
		{119: 999},
		{436, 3: 436, 436, 436, 436, 436, 436, 436, 18: 436, 436, 436, 109: 436, 119: 436, 191: 436},
		{433, 3: 433, 433, 433, 433, 433, 433, 433, 18: 433, 433, 433, 109: 433, 119: 1005, 377: 1004},
		{173: 1002},
		{40: 528, 527, 44: 1003},
		// 490
		{434, 3: 434, 434, 434, 434, 434, 434, 434, 18: 434, 434, 434, 109: 434, 119: 434},
		{431, 3: 431, 431, 431, 431, 431, 431, 431, 18: 431, 431, 1008, 109: 1007, 400: 1006},
		{432, 3: 432, 432, 432, 432, 432, 432, 432, 18: 432, 432, 432, 109: 432},
		{438, 3: 438, 438, 438, 438, 438, 438, 438, 18: 438, 438},
		{430, 3: 430, 430, 430, 430, 430, 430, 430, 18: 430, 430},
		// 495
		{109: 1009},
		{429, 3: 429, 429, 429, 429, 429, 429, 429, 18: 429, 429},
		{478, 3: 478},
		{427, 3: 427},
		{426, 3: 426, 86, 86, 702, 86, 86, 86, 120: 1031, 182: 1030},
		// 500
		{425, 3: 425, 425, 425, 425, 425, 425, 425},
		{4: 1024, 1025, 7: 1023, 1022, 713, 211: 1021, 272: 1020},
		{314: 1018},
		{118: 1017},
		{51, 3: 51},
		// 505
		{40: 528, 527, 44: 526, 121: 1019},
		{52, 3: 52},
		{72, 3: 72, 72, 72, 72, 718, 72, 72, 52: 717, 724, 723, 56: 728, 729, 719, 721, 726, 720, 725, 110: 716, 727, 722, 156: 715, 1029},
		{72, 3: 72, 72, 72, 72, 718, 72, 72, 52: 717, 724, 723, 56: 728, 729, 719, 721, 726, 720, 725, 110: 716, 727, 722, 156: 715, 1028},
		{82, 3: 82, 82, 82, 82, 82, 82, 82, 52: 82, 82, 82, 56: 82, 82, 82, 82, 82, 82, 82},
		// 510
		{8: 1027},
		{80, 3: 80, 80, 80, 80, 80, 80, 80, 52: 80, 80, 80, 56: 80, 80, 80, 80, 80, 80, 80},
		{162: 1026},
		{79, 3: 79, 79, 79, 79, 79, 79, 79, 52: 79, 79, 79, 56: 79, 79, 79, 79, 79, 79, 79},
		{81, 3: 81, 81, 81, 81, 81, 81, 81, 52: 81, 81, 81, 56: 81, 81, 81, 81, 81, 81, 81},
		// 515
		{83, 3: 83, 83, 83, 83, 83, 83, 83},
		{84, 3: 84, 84, 84, 84, 84, 84, 84},
		{424, 3: 424, 424, 424, 424, 424, 424, 424},
		{4: 1024, 1025, 7: 1023, 1022, 713, 211: 1032, 272: 1020},
		{72, 3: 72, 72, 72, 72, 718, 72, 72, 52: 717, 724, 723, 56: 728, 729, 719, 721, 726, 720, 725, 110: 716, 727, 722, 156: 715, 1033},
		// 520
		{83, 3: 83, 83, 83, 83, 83, 83, 83},
		{1: 347, 347, 10: 347, 347, 16: 347, 21: 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 39: 347, 83: 347, 347, 347, 87: 347, 347, 334: 1035},
		{1: 346, 346, 10: 346, 346, 16: 346, 21: 1037, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 39: 346, 83: 346, 346, 346, 87: 346, 346, 351: 1036},
		{1: 343, 343, 10: 343, 343, 16: 343, 22: 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 39: 343, 83: 343, 1041, 343, 87: 343, 343, 385: 1039, 1040},
		{38: 932, 197: 1038},
		// 525
		{1: 345, 345, 10: 345, 345, 16: 345, 22: 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 39: 345, 83: 345, 345, 345, 87: 345, 345},
		{1: 337, 337, 10: 337, 337, 16: 332, 22: 332, 332, 332, 332, 332, 332, 332, 332, 332, 332, 332, 39: 332, 83: 332, 85: 332, 87: 1056, 1057, 353: 1055, 393: 1054},
		{1: 340, 340, 10: 340, 340, 16: 340, 22: 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 39: 340, 83: 340, 1048, 340, 87: 340, 340, 387: 1047},
		{221: 1042},
		{12: 1043, 234: 1044},
		// 530
		{224: 1046},
		{224: 1045},
		{1: 341, 341, 10: 341, 341, 16: 341, 22: 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 39: 341, 83: 341, 341, 341, 87: 341, 341},
		{1: 342, 342, 10: 342, 342, 16: 342, 22: 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 342, 39: 342, 83: 342, 342, 342, 87: 342, 342},
		{1: 344, 344, 10: 344, 344, 16: 344, 22: 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 39: 344, 83: 344, 85: 344, 87: 344, 344},
		// 535
		{221: 1049},
		{190: 1050, 234: 1051},
		{238: 1053},
		{238: 1052},
		{1: 338, 338, 10: 338, 338, 16: 338, 22: 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 338, 39: 338, 83: 338, 85: 338, 87: 338, 338},
		// 540
		{1: 339, 339, 10: 339, 339, 16: 339, 22: 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 39: 339, 83: 339, 85: 339, 87: 339, 339},
		{1: 224, 224, 10: 224, 224, 410: 1213},
		{16: 1075, 22: 1073, 1076, 580, 575, 578, 576, 579, 573, 574, 599, 1070, 39: 1074, 83: 1077, 85: 1066, 116: 571, 577, 125: 1071, 1069, 158: 1072, 169: 1068, 213: 1065, 359: 1067},
		{40: 528, 527, 44: 1061},
		{297: 1058},
		// 545
		{46: 1060, 1059},
		{16: 331, 22: 331, 331, 331, 331, 331, 331, 331, 331, 331, 331, 331, 39: 331, 83: 331, 85: 331},
		{16: 330, 22: 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 39: 330, 83: 330, 85: 330},
		{37: 1062},
		{40: 528, 527, 44: 558, 86: 709, 108: 1063},
		// 550
		{1064, 3: 711},
		{1: 333, 333, 10: 333, 333},
		{1: 310, 310, 10: 310, 310, 16: 1075, 20: 310, 22: 1073, 1076, 580, 575, 578, 576, 579, 573, 574, 599, 1070, 34: 310, 310, 39: 1074, 116: 571, 577, 125: 1071, 1069, 158: 1210, 169: 1116, 289: 1209},
		{83: 1111, 114: 1110, 311: 1109, 389: 1108},
		{1: 334, 334, 10: 334, 334},
		// 555
		{1: 327, 327, 10: 327, 327, 16: 327, 20: 327, 22: 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 34: 327, 327, 39: 327},
		{1: 325, 325, 10: 325, 325, 16: 325, 20: 325, 22: 325, 325, 325, 575, 325, 576, 325, 573, 574, 599, 325, 34: 325, 325, 39: 325, 116: 662, 577},
		{40: 528, 527, 43: 1106, 1105},
		{1: 322, 322, 10: 322, 322, 16: 322, 20: 322, 22: 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 34: 322, 322, 39: 322},
		{1: 321, 321, 10: 321, 321, 16: 321, 20: 321, 22: 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 34: 321, 321, 39: 321},
		// 560
		{1: 308, 308, 10: 308, 308, 16: 308, 20: 308, 22: 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 34: 308, 308, 39: 308},
		{240: 1101},
		{240: 1083},
		{1: 303, 303, 10: 303, 303, 16: 303, 20: 303, 22: 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 34: 303, 303, 39: 303},
		{233: 1078},
		// 565
		{293: 1079},
		{1: 227, 227, 10: 227, 227, 237: 227, 261: 1080},
		{1: 226, 226, 10: 226, 226, 237: 1081},
		{229: 1082},
		{1: 225, 225, 10: 225, 225},
		// 570
		{22: 1084},
		{1: 302, 302, 10: 302, 302, 16: 302, 20: 302, 22: 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 34: 302, 302, 39: 302, 104: 1086, 341: 1085},
		{1: 295, 295, 10: 295, 295, 16: 295, 20: 1095, 22: 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 34: 295, 295, 39: 1094, 340: 1093},
		{235: 1087, 292: 1088},
		{1: 301, 301, 10: 301, 301, 16: 301, 20: 301, 22: 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 34: 301, 301, 39: 301, 137: 1092, 142: 1091},
		// 575
		{1: 298, 298, 10: 298, 298, 16: 298, 20: 298, 22: 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 34: 298, 298, 39: 298, 137: 1090, 142: 1089},
		{1: 297, 297, 10: 297, 297, 16: 297, 20: 297, 22: 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 34: 297, 297, 39: 297},
		{1: 296, 296, 10: 296, 296, 16: 296, 20: 296, 22: 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 34: 296, 296, 39: 296},
		{1: 300, 300, 10: 300, 300, 16: 300, 20: 300, 22: 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 34: 300, 300, 39: 300},
		{1: 299, 299, 10: 299, 299, 16: 299, 20: 299, 22: 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 34: 299, 299, 39: 299},
		// 580
		{1: 304, 304, 10: 304, 304, 16: 304, 20: 304, 22: 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 34: 304, 304, 39: 304},
		{227: 1099},
		{39: 1096},
		{227: 1097},
		{230: 1098},
		// 585
		{1: 293, 293, 10: 293, 293, 16: 293, 20: 293, 22: 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 34: 293, 293, 39: 293},
		{230: 1100},
		{1: 294, 294, 10: 294, 294, 16: 294, 20: 294, 22: 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 34: 294, 294, 39: 294},
		{22: 1102},
		{1: 307, 307, 10: 307, 307, 16: 307, 20: 307, 22: 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 34: 307, 307, 39: 307, 214: 1104, 294: 1103},
		// 590
		{1: 306, 306, 10: 306, 306, 16: 306, 20: 306, 22: 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 34: 306, 306, 39: 306},
		{1: 305, 305, 10: 305, 305, 16: 305, 20: 305, 22: 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 34: 305, 305, 39: 305},
		{1: 324, 324, 10: 324, 324, 16: 324, 20: 324, 22: 324, 324, 324, 324, 324, 324, 324, 324, 324, 324, 324, 34: 324, 324, 39: 324},
		{40: 528, 527, 44: 1107},
		{1: 323, 323, 10: 323, 323, 16: 323, 20: 323, 22: 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 34: 323, 323, 39: 323},
		// 595
		{1: 335, 335, 10: 335, 335},
		{1: 329, 329, 10: 329, 329, 16: 1075, 20: 329, 22: 1073, 1076, 580, 575, 578, 576, 579, 573, 574, 599, 1070, 34: 329, 329, 39: 1074, 116: 571, 577, 125: 1071, 1069, 158: 1072, 169: 1068, 213: 1113, 286: 1117},
		{1: 329, 329, 10: 329, 329, 16: 1075, 22: 1073, 1076, 580, 575, 578, 576, 579, 573, 574, 599, 1070, 39: 1074, 116: 571, 577, 125: 1071, 1069, 158: 1072, 169: 1068, 213: 1113, 286: 1114},
		{1: 227, 227, 10: 227, 227, 261: 1112},
		{1: 230, 230, 10: 230, 230},
		// 600
		{1: 328, 328, 10: 328, 328, 16: 1075, 20: 328, 22: 1073, 1076, 580, 575, 578, 576, 579, 573, 574, 599, 1070, 34: 328, 328, 39: 1074, 116: 571, 577, 125: 1071, 1069, 158: 1072, 169: 1116},
		{1: 228, 228, 10: 228, 228, 368: 1115},
		{1: 231, 231, 10: 231, 231},
		{1: 326, 326, 10: 326, 326, 16: 326, 20: 326, 22: 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 34: 326, 326, 39: 326},
		{1: 310, 310, 10: 310, 310, 16: 1075, 20: 310, 22: 1073, 1076, 34: 310, 310, 39: 1074, 158: 1118, 289: 1120, 360: 1119},
		// 605
		{1: 309, 309, 10: 309, 309, 20: 309, 34: 309, 309},
		{1: 232, 232, 10: 232, 232},
		{1: 292, 292, 10: 292, 292, 20: 1122, 34: 292, 1121, 167: 1125, 183: 1124, 1123, 274: 1126},
		{1: 287, 287, 10: 287, 287, 20: 1155, 34: 287, 287, 37: 1156, 81: 287, 287, 91: 287, 107: 287, 192: 1154, 273: 1176, 370: 1175},
		{35: 1173},
		// 610
		{1: 289, 289, 10: 289, 289, 34: 289},
		{1: 252, 252, 10: 252, 252, 20: 1149, 34: 252, 1148, 167: 1147},
		{1: 251, 251, 10: 251, 251, 20: 251, 34: 251, 251},
		{1: 246, 246, 10: 246, 246, 34: 1127, 264: 1128},
		{45: 1129, 53: 1132, 1131, 190: 1130, 300: 1133, 1135, 305: 1134},
		// 615
		{1: 229, 229, 10: 229, 229},
		{175: 1145},
		{175: 1143},
		{175: 1141},
		{175: 1136},
		// 620
		{1: 241, 241, 10: 241, 241},
		{1: 240, 240, 10: 240, 240},
		{1: 239, 239, 10: 239, 239},
		{1: 235, 235, 10: 235, 235, 178: 1138, 1140, 1137, 1139},
		{1: 242, 242, 10: 242, 242},
		// 625
		{1: 238, 238, 10: 238, 238},
		{1: 237, 237, 10: 237, 237},
		{1: 236, 236, 10: 236, 236},
		{1: 235, 235, 10: 235, 235, 178: 1138, 1140, 1142, 1139},
		{1: 243, 243, 10: 243, 243},
		// 630
		{1: 235, 235, 10: 235, 235, 178: 1138, 1140, 1144, 1139},
		{1: 244, 244, 10: 244, 244},
		{1: 235, 235, 10: 235, 235, 178: 1138, 1140, 1146, 1139},
		{1: 245, 245, 10: 245, 245},
		{1: 250, 250, 10: 250, 250, 20: 250, 34: 250, 250},
		// 635
		{20: 1155, 37: 1156, 192: 1154, 273: 1157},
		{35: 1150},
		{37: 1151},
		{40: 528, 527, 44: 558, 86: 709, 108: 1152},
		{1153, 3: 711},
		// 640
		{1: 247, 247, 10: 247, 247, 20: 247, 34: 247, 247},
		{104: 1164, 217: 1165},
		{192: 1163},
		{40: 528, 527, 44: 558, 86: 709, 108: 1161},
		{37: 1158},
		// 645
		{40: 528, 527, 44: 558, 86: 709, 108: 1159},
		{1160, 3: 711},
		{1: 248, 248, 10: 248, 248, 20: 248, 34: 248, 248},
		{1162, 3: 711},
		{1: 249, 249, 10: 249, 249, 20: 249, 34: 249, 249},
		// 650
		{1: 279, 279, 10: 279, 279, 20: 279, 34: 279, 279, 37: 279, 81: 279, 279, 91: 279, 107: 279},
		{235: 1167, 295: 1168, 302: 1166},
		{1: 278, 278, 10: 278, 278, 20: 278, 34: 278, 278, 37: 278, 81: 278, 278, 91: 278, 107: 278},
		{1: 286, 286, 10: 286, 286, 20: 286, 34: 286, 286, 37: 286, 81: 286, 286, 91: 286, 107: 286},
		{1: 285, 285, 10: 285, 285, 20: 285, 34: 285, 285, 37: 285, 81: 285, 285, 91: 285, 107: 285, 137: 1172, 142: 1171},
		// 655
		{1: 282, 282, 10: 282, 282, 20: 282, 34: 282, 282, 37: 282, 81: 282, 282, 91: 282, 107: 282, 137: 1170, 142: 1169},
		{1: 281, 281, 10: 281, 281, 20: 281, 34: 281, 281, 37: 281, 81: 281, 281, 91: 281, 107: 281},
		{1: 280, 280, 10: 280, 280, 20: 280, 34: 280, 280, 37: 280, 81: 280, 280, 91: 280, 107: 280},
		{1: 284, 284, 10: 284, 284, 20: 284, 34: 284, 284, 37: 284, 81: 284, 284, 91: 284, 107: 284},
		{1: 283, 283, 10: 283, 283, 20: 283, 34: 283, 283, 37: 283, 81: 283, 283, 91: 283, 107: 283},
		// 660
		{1: 253, 253, 10: 253, 253, 20: 1149, 34: 253, 1148, 37: 1151, 167: 1125, 183: 1124, 1174},
		{1: 290, 290, 10: 290, 290, 34: 290},
		{1: 253, 253, 10: 253, 253, 20: 1149, 34: 253, 1148, 167: 1125, 183: 1124, 1208},
		{1: 277, 277, 10: 277, 277, 20: 277, 34: 277, 277, 37: 1158, 81: 277, 277, 91: 277, 107: 1178, 375: 1177},
		{1: 271, 271, 10: 271, 271, 20: 271, 34: 271, 271, 81: 271, 271, 91: 1185, 371: 1184},
		// 665
		{137: 1182, 142: 1180, 163: 1179, 298: 1183, 318: 1181},
		{1: 276, 276, 10: 276, 276, 20: 276, 34: 276, 276, 81: 276, 276, 91: 276},
		{1: 275, 275, 10: 275, 275, 20: 275, 34: 275, 275, 81: 275, 275, 91: 275},
		{1: 274, 274, 10: 274, 274, 20: 274, 34: 274, 274, 81: 274, 274, 91: 274},
		{1: 273, 273, 10: 273, 273, 20: 273, 34: 273, 273, 81: 273, 273, 91: 273},
		// 670
		{1: 272, 272, 10: 272, 272, 20: 272, 34: 272, 272, 81: 272, 272, 91: 272},
		{1: 259, 259, 10: 259, 259, 20: 1202, 34: 259, 259, 81: 259, 1201, 374: 1200},
		{1: 269, 269, 10: 269, 269, 20: 269, 34: 269, 269, 81: 269, 269, 104: 269, 173: 1188, 217: 1187, 372: 1186},
		{1: 264, 264, 10: 264, 264, 20: 264, 34: 264, 264, 81: 264, 264, 104: 1194, 373: 1193},
		{1: 268, 268, 10: 268, 268, 20: 268, 34: 268, 268, 81: 268, 268, 104: 268},
		// 675
		{118: 1189, 233: 1190, 328: 1191},
		{324: 1192},
		{1: 266, 266, 10: 266, 266, 20: 266, 34: 266, 266, 81: 266, 266, 104: 266},
		{1: 265, 265, 10: 265, 265, 20: 265, 34: 265, 265, 81: 265, 265, 104: 265},
		{1: 267, 267, 10: 267, 267, 20: 267, 34: 267, 267, 81: 267, 267, 104: 267},
		// 680
		{1: 270, 270, 10: 270, 270, 20: 270, 34: 270, 270, 81: 270, 270},
		{326: 1195},
		{21: 1196, 40: 528, 527, 44: 1198, 163: 1199, 170: 1197},
		{1: 263, 263, 10: 263, 263, 20: 263, 34: 263, 263, 81: 263, 263},
		{1: 262, 262, 10: 262, 262, 20: 262, 34: 262, 262, 81: 262, 262},
		// 685
		{1: 261, 261, 10: 261, 261, 20: 261, 34: 261, 261, 81: 261, 261},
		{1: 260, 260, 10: 260, 260, 20: 260, 34: 260, 260, 81: 260, 260},
		{1: 255, 255, 10: 255, 255, 20: 255, 34: 255, 255, 81: 1206, 376: 1205},
		{1: 258, 258, 10: 258, 258, 20: 258, 34: 258, 258, 81: 258, 170: 1204},
		{82: 1203},
		// 690
		{1: 256, 256, 10: 256, 256, 20: 256, 34: 256, 256, 81: 256},
		{1: 257, 257, 10: 257, 257, 20: 257, 34: 257, 257, 81: 257},
		{1: 288, 288, 10: 288, 288, 20: 288, 34: 288, 288},
		{40: 528, 527, 44: 558, 86: 1207},
		{1: 254, 254, 10: 254, 254, 20: 254, 34: 254, 254},
		// 695
		{1: 291, 291, 10: 291, 291, 34: 291},
		{1: 292, 292, 10: 292, 292, 20: 1122, 34: 292, 1121, 167: 1125, 183: 1124, 1123, 274: 1211},
		{1: 321, 321, 10: 321, 321, 16: 321, 20: 321, 22: 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 34: 321, 321, 39: 321},
		{1: 246, 246, 10: 246, 246, 34: 1127, 264: 1212},
		{1: 336, 336, 10: 336, 336},
		// 700
		{1: 349, 349, 10: 349, 349},
		{1: 352, 352, 11: 1224, 392: 1223},
		{1: 4, 4, 10: 1220, 4, 277: 1219},
		{104: 1217},
		{236: 1218},
		// 705
		{1: 5, 5, 10: 5, 5, 5, 16: 5, 20: 5, 43: 5, 45: 5, 49: 5, 103: 5},
		{1: 7, 7, 11: 7},
		{104: 1221},
		{244: 1222},
		{1: 3, 3, 11: 3, 3, 16: 3, 43: 3, 45: 3, 49: 3, 103: 3},
		// 710
		{1: 366, 366},
		{40: 528, 527, 44: 526, 121: 1225},
		{1: 351, 351},
		{40: 528, 527, 44: 526, 121: 1227},
		{10: 1216, 12: 6, 16: 6, 20: 1231, 43: 6, 45: 6, 49: 6, 103: 6, 276: 1230, 380: 1228, 1229},
		// 715
		{12: 1255, 16: 1253, 43: 1254, 45: 1250, 49: 1251, 103: 1256, 246: 1247, 248: 1246, 253: 1249, 256: 1258, 278: 1248, 280: 1252, 332: 1241, 336: 1244, 339: 1242, 348: 1243, 355: 1257, 399: 1245},
		{10: 1220, 12: 4, 16: 4, 20: 1237, 43: 4, 45: 4, 49: 4, 103: 4, 277: 1236, 382: 1235},
		{10: 11, 12: 11, 16: 11, 20: 11, 43: 11, 45: 11, 49: 11, 103: 11},
		{10: 1232},
		{104: 1233},
		// 720
		{236: 1234},
		{10: 10, 12: 10, 16: 10, 20: 10, 43: 10, 45: 10, 49: 10, 103: 10},
		{12: 12, 16: 12, 43: 12, 45: 12, 49: 12, 103: 12},
		{12: 9, 16: 9, 43: 9, 45: 9, 49: 9, 103: 9},
		{10: 1238},
		// 725
		{104: 1239},
		{244: 1240},
		{12: 8, 16: 8, 43: 8, 45: 8, 49: 8, 103: 8},
		{1: 494, 494},
		{1: 493, 493},
		// 730
		{1: 492, 492},
		{1: 491, 491, 12: 1384, 16: 1253, 43: 1254, 45: 1382, 49: 1383, 246: 1247, 248: 1381, 253: 1249, 278: 1248, 280: 1252},
		{1: 490, 490},
		{1: 489, 489, 12: 489, 16: 489, 43: 489, 45: 489, 49: 489},
		{1: 487, 487, 12: 487, 16: 487, 43: 487, 45: 487, 49: 487},
		// 735
		{1: 486, 486, 12: 486, 16: 486, 43: 486, 45: 486, 49: 486},
		{1: 485, 485, 12: 485, 16: 485, 43: 485, 45: 485, 49: 485},
		{4: 86, 86, 702, 37: 1370, 55: 86, 120: 703, 185: 1372, 390: 1371},
		{4: 1332, 1331, 1330, 37: 1329},
		{1: 421, 421, 12: 421, 16: 421, 43: 421, 45: 421, 49: 421},
		// 740
		{40: 528, 527, 44: 558, 86: 1316},
		{194: 1311},
		{4: 1262, 1261, 1263, 16: 1292, 37: 1293, 188: 1291, 194: 1290, 198: 1289},
		{6: 1282, 16: 1281},
		{1: 381, 381, 12: 1260, 256: 1259},
		// 745
		{1: 378, 378, 12: 378},
		{1: 377, 377, 12: 377},
		{4: 1262, 1261, 1263},
		{162: 1278},
		{37: 1273},
		// 750
		{40: 528, 527, 44: 1264},
		{1: 373, 373, 12: 373, 42: 373, 68: 1266, 106: 373, 155: 1265},
		{1: 370, 370, 12: 370, 42: 370, 106: 1269, 204: 1267, 206: 1268},
		{1: 372, 372, 12: 372, 42: 372, 106: 372},
		{1: 374, 374, 12: 374},
		// 755
		{1: 368, 368, 12: 368, 42: 1272, 388: 1271},
		{114: 1270},
		{1: 369, 369, 12: 369, 42: 369},
		{1: 371, 371, 12: 371},
		{1: 367, 367, 12: 367},
		// 760
		{40: 528, 527, 44: 558, 86: 709, 108: 1274},
		{1275, 3: 711},
		{1: 373, 373, 12: 373, 42: 373, 68: 1266, 106: 373, 155: 1276},
		{1: 370, 370, 12: 370, 42: 370, 106: 1269, 204: 1277, 206: 1268},
		{1: 375, 375, 12: 375},
		// 765
		{1: 373, 373, 12: 373, 42: 373, 68: 1266, 106: 373, 155: 1279},
		{1: 370, 370, 12: 370, 42: 370, 106: 1269, 204: 1280, 206: 1268},
		{1: 376, 376, 12: 376},
		{40: 528, 527, 44: 558, 86: 1286},
		{40: 528, 527, 44: 1283},
		// 770
		{115: 1284},
		{40: 528, 527, 44: 1285},
		{1: 382, 382},
		{115: 1287},
		{40: 528, 527, 44: 558, 86: 1288},
		// 775
		{1: 387, 387},
		{1: 397, 397, 12: 397, 16: 397, 43: 397, 45: 397, 49: 397, 68: 1306, 102: 397, 105: 1307, 203: 1305, 254: 1304, 1303},
		{188: 1301},
		{296: 1297},
		{40: 528, 527, 44: 558, 86: 1296},
		// 780
		{40: 528, 527, 44: 558, 86: 709, 108: 1294},
		{1295, 3: 711},
		{1: 398, 398, 12: 398, 16: 398, 42: 398, 398, 45: 398, 49: 398, 68: 398, 102: 398, 105: 398},
		{1: 399, 399, 12: 399, 16: 399, 42: 399, 399, 45: 399, 49: 399, 68: 399, 102: 399, 105: 399},
		{1: 389, 389, 12: 389, 16: 389, 43: 389, 45: 389, 49: 389, 102: 1299, 202: 1298},
		// 785
		{1: 400, 400, 12: 400, 16: 400, 43: 400, 45: 400, 49: 400},
		{48: 1300},
		{1: 388, 388, 12: 388, 16: 388, 43: 388, 45: 388, 49: 388},
		{1: 389, 389, 12: 389, 16: 389, 43: 389, 45: 389, 49: 389, 102: 1299, 202: 1302},
		{1: 401, 401, 12: 401, 16: 401, 43: 401, 45: 401, 49: 401},
		// 790
		{1: 389, 389, 12: 389, 16: 389, 43: 389, 45: 389, 49: 389, 102: 1299, 202: 1310},
		{1: 396, 396, 12: 396, 16: 396, 42: 396, 396, 45: 396, 49: 396, 68: 1306, 102: 396, 105: 1307, 203: 1309},
		{1: 395, 395, 12: 395, 16: 395, 42: 395, 395, 45: 395, 49: 395, 68: 395, 102: 395, 105: 395},
		{222: 1308},
		{1: 392, 392, 12: 392, 16: 392, 42: 392, 392, 45: 392, 49: 392, 68: 392, 102: 392, 105: 392},
		// 795
		{1: 393, 393, 12: 393, 16: 393, 42: 393, 393, 45: 393, 49: 393, 68: 393, 102: 393, 105: 393},
		{1: 394, 394, 12: 394, 16: 394, 42: 394, 394, 45: 394, 49: 394, 68: 394, 102: 394, 105: 394},
		{1: 402, 402, 12: 402, 16: 402, 43: 402, 45: 402, 49: 402},
		{16: 1292, 37: 1293, 198: 1312},
		{1: 397, 397, 12: 397, 16: 397, 42: 397, 397, 45: 397, 49: 397, 68: 1306, 105: 1307, 203: 1305, 254: 1304, 1313},
		// 800
		{1: 391, 391, 12: 391, 16: 391, 42: 1315, 391, 45: 391, 49: 391, 354: 1314},
		{1: 403, 403, 12: 403, 16: 403, 43: 403, 45: 403, 49: 403},
		{1: 390, 390, 12: 390, 16: 390, 43: 390, 45: 390, 49: 390},
		{7: 1318, 165: 1317},
		{216: 1325},
		// 805
		{165: 1319},
		{216: 1320},
		{170: 1321},
		{228: 1322},
		{1: 405, 405, 12: 405, 16: 405, 43: 405, 45: 405, 49: 405, 225: 1324, 275: 1323},
		// 810
		{1: 406, 406, 12: 406, 16: 406, 43: 406, 45: 406, 49: 406},
		{1: 404, 404, 12: 404, 16: 404, 43: 404, 45: 404, 49: 404},
		{170: 1326},
		{228: 1327},
		{1: 405, 405, 12: 405, 16: 405, 43: 405, 45: 405, 49: 405, 225: 1324, 275: 1328},
		// 815
		{1: 407, 407, 12: 407, 16: 407, 43: 407, 45: 407, 49: 407},
		{40: 528, 527, 44: 558, 86: 1348, 279: 1346, 281: 1349, 1347, 383: 1344, 1345},
		{40: 528, 527, 44: 1341},
		{162: 1338},
		{37: 1333},
		// 820
		{40: 528, 527, 44: 558, 86: 709, 108: 1334},
		{1335, 3: 711},
		{7: 718, 52: 717, 724, 723, 56: 728, 729, 719, 721, 726, 720, 725, 110: 1336, 727, 722},
		{1: 373, 373, 68: 1266, 155: 1337},
		{1: 383, 383},
		// 825
		{7: 718, 52: 717, 724, 723, 56: 728, 729, 719, 721, 726, 720, 725, 110: 1339, 727, 722},
		{1: 373, 373, 68: 1266, 155: 1340},
		{1: 384, 384},
		{7: 718, 52: 717, 724, 723, 56: 728, 729, 719, 721, 726, 720, 725, 110: 1342, 727, 722},
		{1: 373, 373, 68: 1266, 155: 1343},
		// 830
		{1: 385, 385},
		{1366, 3: 1367},
		{1362, 3: 1363},
		{420, 3: 420},
		{418, 3: 418},
		// 835
		{14: 938, 939, 113: 778, 118: 795, 122: 797, 124: 787, 127: 794, 785, 784, 791, 792, 788, 802, 801, 806, 783, 138: 804, 803, 790, 786, 143: 799, 780, 793, 782, 800, 781, 807, 805, 789, 796, 798, 779, 195: 771, 772, 200: 1350, 775, 205: 1351, 207: 776, 774, 773, 770, 212: 777},
		{410, 3: 410},
		{477, 3: 477, 477, 477, 477, 477, 477, 477, 12: 477, 477, 21: 477, 33: 477, 36: 477, 38: 932, 197: 931, 249: 1352},
		{408, 3: 408},
		{468, 3: 468, 468, 468, 468, 468, 468, 468, 12: 1354, 468, 21: 943, 33: 468, 36: 944, 251: 941, 1355, 262: 942, 352: 1353},
		// 840
		{440, 3: 440, 440, 440, 440, 440, 440, 440, 13: 995, 33: 1358, 259: 1359, 357: 1357},
		{161: 1356},
		{415, 3: 415, 415, 415, 415, 415, 415, 415, 13: 415, 33: 415},
		{416, 3: 416, 416, 416, 416, 416, 416, 416, 13: 416, 33: 416},
		{412, 3: 412, 86, 86, 702, 86, 86, 86, 120: 1031, 182: 1013, 271: 1360, 342: 1361},
		// 845
		{414, 3: 414, 414, 414, 414, 414, 414, 414},
		{413, 3: 413, 413, 413, 413, 413, 413, 413},
		{411, 3: 411, 86, 86, 702, 86, 86, 86, 120: 1031, 182: 1030},
		{417, 3: 417},
		{1: 422, 422, 12: 422, 16: 422, 43: 422, 45: 422, 49: 422},
		// 850
		{40: 528, 527, 44: 558, 86: 1365, 281: 1364},
		{409, 3: 409},
		{14: 938, 939, 205: 1351},
		{1: 423, 423, 12: 423, 16: 423, 43: 423, 45: 423, 49: 423},
		{40: 528, 527, 44: 558, 86: 1369, 279: 1368, 282: 1347},
		// 855
		{419, 3: 419},
		{113: 778, 118: 795, 122: 797, 124: 787, 127: 794, 785, 784, 791, 792, 788, 802, 801, 806, 783, 138: 804, 803, 790, 786, 143: 799, 780, 793, 782, 800, 781, 807, 805, 789, 796, 798, 779, 195: 771, 772, 200: 1350, 775, 207: 776, 774, 773, 770, 212: 777},
		{40: 528, 527, 44: 558, 86: 697, 176: 1375, 186: 696, 344: 1374},
		{1: 386, 386, 4: 86, 86, 702, 55: 86, 120: 703, 185: 1373},
		{1: 380, 380, 4: 380, 380, 380, 55: 380},
		// 860
		{1: 379, 379, 4: 379, 379, 379, 55: 379},
		{1376, 3: 1377},
		{481, 3: 481},
		{1: 483, 483, 12: 483, 16: 483, 43: 483, 45: 483, 49: 483, 346: 1379},
		{40: 528, 527, 44: 558, 86: 697, 176: 1378, 186: 696},
		// 865
		{480, 3: 480},
		{1: 482, 482, 12: 482, 16: 482, 43: 482, 45: 482, 49: 482, 391: 1380},
		{1: 484, 484, 12: 484, 16: 484, 43: 484, 45: 484, 49: 484},
		{1: 488, 488, 12: 488, 16: 488, 43: 488, 45: 488, 49: 488},
		{37: 1370},
		// 870
		{37: 1329},
		{16: 1292, 37: 1293, 188: 1291, 194: 1290, 198: 1289},
		{1: 504, 504, 12: 524, 189: 523, 199: 520, 215: 522, 247: 518, 250: 519, 257: 521, 517, 287: 1386},
		{1: 510, 510},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 415

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			if yyS[yypt-0].node != nil {
				stmt := yyS[yypt-0].node
				stmt.SetText(nextQuery(yylex))
				yylex.(*yyLexImpl).result = append(yylex.(*yyLexImpl).result, stmt)
			}
		}
	case 3:
		{
			if yyS[yypt-0].node != nil {
				stmt := yyS[yypt-0].node
				stmt.SetText(nextQuery(yylex))
				yylex.(*yyLexImpl).result = append(yylex.(*yyLexImpl).result, stmt)
			}
		}
	case 9:
		{
			yyVAL.node = nil
		}
	case 10:
		{
			yyVAL.anything = &ast.TableName{
				Table: yyS[yypt-0].anything.(*element.Identifier),
			}
		}
	case 11:
		{
			yyVAL.anything = &ast.TableName{
				Schema: yyS[yypt-2].anything.(*element.Identifier),
				Table:  yyS[yypt-0].anything.(*element.Identifier),
			}
		}
	case 12:
		{
			yyVAL.anything = []*element.Identifier{yyS[yypt-0].anything.(*element.Identifier)}
		}
	case 13:
		{
			yyVAL.anything = append(yyS[yypt-2].anything.([]*element.Identifier), yyS[yypt-0].anything.(*element.Identifier))
		}
	case 14:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 15:
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeNonQuoted,
				Value: yyS[yypt-0].str,
			}
		}
	case 16:
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeQuoted,
				Value: yyS[yypt-0].str,
			}
		}
	case 19:
		{
			yyVAL.node = &ast.AlterTableStmt{
				TableName:         yyS[yypt-2].anything.(*ast.TableName),
				AlterTableClauses: yyS[yypt-0].anything.([]ast.AlterTableClause),
			}
		}
	case 20:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 21:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 22:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 23:
		{
			yyVAL.anything = []ast.AlterTableClause{yyS[yypt-0].anything.(ast.AlterTableClause)}
		}
	case 24:
		{
			yyVAL.anything = []ast.AlterTableClause{yyS[yypt-0].anything.(ast.AlterTableClause)}
		}
	case 25:
		{
			yyVAL.anything = append(yyS[yypt-1].anything.([]ast.AlterTableClause), yyS[yypt-0].anything.(ast.AlterTableClause))
		}
	case 29:
		{
			yyVAL.anything = &ast.AddColumnClause{
				Columns: yyS[yypt-3].anything.([]*ast.ColumnDef),
			}
		}
	case 30:
		{
			// TODO
		}
	case 31:
		{
			// TODO
		}
	case 32:
		{
			yyVAL.anything = []*ast.ColumnDef{yyS[yypt-0].anything.(*ast.ColumnDef)}
		}
	case 33:
		{
			yyVAL.anything = append(yyS[yypt-2].anything.([]*ast.ColumnDef), yyS[yypt-0].anything.(*ast.ColumnDef))
		}
	case 34:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 35:
		{
			var collation *ast.Collation
			if yyS[yypt-5].anything != nil {
				collation = yyS[yypt-5].anything.(*ast.Collation)
			}
			props := []ast.ColumnProp{}
			sort := ast.ColumnProp(yyS[yypt-4].i)
			if sort != ast.ColumnPropEmpty {
				props = append(props, sort)
			}
			invisible := ast.ColumnProp(yyS[yypt-3].i)
			if invisible != ast.ColumnPropEmpty {
				props = append(props, invisible)
			}

			var constraints []*ast.InlineConstraint
			if yyS[yypt-0].anything != nil {
				constraints = yyS[yypt-0].anything.([]*ast.InlineConstraint)
			}

			yyVAL.anything = &ast.ColumnDef{
				ColumnName:  yyS[yypt-7].anything.(*element.Identifier),
				Datatype:    yyS[yypt-6].anything.(element.Datatype),
				Collation:   collation,
				Props:       props,
				Constraints: constraints,
			}
		}
	case 36:
		{
			yyVAL.anything = nil
		}
	case 37:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 38:
		{
			yyVAL.anything = &ast.Collation{Name: yyS[yypt-0].anything.(*element.Identifier)}
		}
	case 39:
		{
			yyVAL.i = int(ast.ColumnPropEmpty)
		}
	case 40:
		{
			yyVAL.i = int(ast.ColumnPropSort)
		}
	case 41:
		{
			yyVAL.i = int(ast.ColumnPropEmpty)
		}
	case 43:
		{
			yyVAL.i = int(ast.ColumnPropInvisible)
		}
	case 44:
		{
			yyVAL.i = int(ast.ColumnPropVisible)
		}
	case 45:
		{
			// empty
		}
	case 55:
		{
			// empty
		}
	case 57:
		{
			// empty
		}
	case 73:
		{
			// empty
		}
	case 76:
		{
			// empty
		}
	case 78:
		{
			// empty
		}
	case 80:
		{
			// empty
		}
	case 82:
		{
			// empty
		}
	case 85:
		{
			yyVAL.anything = nil
		}
	case 86:
		{
			yyVAL.anything = nil
		}
	case 87:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 88:
		{
			yyVAL.anything = []*ast.InlineConstraint{yyS[yypt-0].anything.(*ast.InlineConstraint)}
		}
	case 89:
		{
			yyVAL.anything = append(yyS[yypt-1].anything.([]*ast.InlineConstraint), yyS[yypt-0].anything.(*ast.InlineConstraint))
		}
	case 90:
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyS[yypt-1].anything.([]*ast.ColumnDef),
			}
		}
	case 91:
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyS[yypt-1].anything.([]*ast.ColumnDef),
			}
		}
	case 92:
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyS[yypt-0].anything.([]*ast.ColumnDef),
			}
		}
	case 93:
		{
			yyVAL.anything = []*ast.ColumnDef{yyS[yypt-0].anything.(*ast.ColumnDef)}
		}
	case 94:
		{
			yyVAL.anything = append(yyS[yypt-2].anything.([]*ast.ColumnDef), yyS[yypt-0].anything.(*ast.ColumnDef))
		}
	case 96:
		{
			var collation *ast.Collation
			if yyS[yypt-3].anything != nil {
				collation = yyS[yypt-3].anything.(*ast.Collation)
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyS[yypt-5].anything.(*element.Identifier),
				Datatype:   yyS[yypt-4].anything.(element.Datatype),
				Collation:  collation,
				Props:      []ast.ColumnProp{},
			}
		}
	case 101:
		{
			// empty
		}
	case 103:
		{
			yyVAL.anything = []*ast.ColumnDef{yyS[yypt-0].anything.(*ast.ColumnDef)}
		}
	case 104:
		{
			yyVAL.anything = append(yyS[yypt-2].anything.([]*ast.ColumnDef), yyS[yypt-0].anything.(*ast.ColumnDef))
		}
	case 105:
		{
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyS[yypt-1].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{ast.ColumnProp(yyS[yypt-0].i)},
			}
		}
	case 106:
		{
			prop := ast.ColumnPropSubstitutable
			if yyS[yypt-0].b {
				prop = ast.ColumnPropSubstitutableForce
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyS[yypt-5].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{prop},
			}
		}
	case 107:
		{
			prop := ast.ColumnPropNotSubstitutable
			if yyS[yypt-0].b {
				prop = ast.ColumnPropNotSubstitutableForce
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyS[yypt-6].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{prop},
			}
		}
	case 108:
		{
			yyVAL.b = false
		}
	case 109:
		{
			yyVAL.b = true
		}
	case 110:
		{
			props := []ast.DropColumnProp{}
			if yyS[yypt-1].anything != nil {
				props = append(props, yyS[yypt-1].anything.([]ast.DropColumnProp)...)
			}
			online := ast.DropColumnProp(yyS[yypt-0].i)
			if online != ast.DropColumnPropEmpty {
				props = append(props, online)
			}
			yyVAL.anything = &ast.DropColumnClause{
				Type:    ast.DropColumnTypeSetUnused,
				Columns: yyS[yypt-2].anything.([]*element.Identifier),
				Props:   props,
			}
		}
	case 111:
		{
			props := []ast.DropColumnProp{}
			if yyS[yypt-1].anything != nil {
				props = append(props, yyS[yypt-1].anything.([]ast.DropColumnProp)...)
			}
			cc := &ast.DropColumnClause{
				Type:    ast.DropColumnTypeDrop,
				Columns: yyS[yypt-2].anything.([]*element.Identifier),
				Props:   props,
			}
			var checkout int
			if yyS[yypt-0].anything != nil {
				checkout = yyS[yypt-0].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 112:
		{
			cc := &ast.DropColumnClause{
				Type: ast.DropColumnTypeDropUnusedColumns,
			}
			var checkout int
			if yyS[yypt-0].anything != nil {
				checkout = yyS[yypt-0].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 113:
		{
			cc := &ast.DropColumnClause{
				Type: ast.DropColumnTypeDropColumnsContinue,
			}
			var checkout int
			if yyS[yypt-0].anything != nil {
				checkout = yyS[yypt-0].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 114:
		{
			yyVAL.anything = []*element.Identifier{yyS[yypt-0].anything.(*element.Identifier)}
		}
	case 115:
		{
			yyVAL.anything = yyS[yypt-1].anything
		}
	case 116:
		{
			yyVAL.anything = nil
		}
	case 118:
		{
			yyVAL.anything = []ast.DropColumnProp{ast.DropColumnProp(yyS[yypt-0].i)}
		}
	case 119:
		{
			yyVAL.anything = append(yyS[yypt-1].anything.([]ast.DropColumnProp), ast.DropColumnProp(yyS[yypt-0].i))
		}
	case 120:
		{
			yyVAL.i = int(ast.DropColumnPropCascade)
		}
	case 121:
		{
			yyVAL.i = int(ast.DropColumnPropInvalidate)
		}
	case 122:
		{
			yyVAL.i = int(ast.DropColumnPropEmpty)
		}
	case 123:
		{
			yyVAL.i = int(ast.DropColumnPropOnline)
		}
	case 124:
		{
			yyVAL.anything = nil
		}
	case 125:
		{
			yyVAL.anything = yyS[yypt-0].i
		}
	case 126:
		{
			yyVAL.anything = &ast.RenameColumnClause{
				OldName: yyS[yypt-2].anything.(*element.Identifier),
				NewName: yyS[yypt-0].anything.(*element.Identifier),
			}
		}
	case 127:
		{
			yyVAL.anything = []ast.AlterTableClause{&ast.AddConstraintClause{}}
		}
	case 128:
		{
			yyVAL.anything = []ast.AlterTableClause{&ast.ModifyConstraintClause{}}
		}
	case 129:
		{
			yyVAL.anything = []ast.AlterTableClause{&ast.ModifyConstraintClause{}}
		}
	case 130:
		{
			yyVAL.anything = []ast.AlterTableClause{&ast.ModifyConstraintClause{}}
		}
	case 131:
		{
			yyVAL.anything = []ast.AlterTableClause{&ast.RenameConstraintClause{}}
		}
	case 132:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 135:
		{
			yyVAL.anything = []ast.AlterTableClause{yyS[yypt-0].anything.(ast.AlterTableClause)}
		}
	case 136:
		{
			yyVAL.anything = append(yyS[yypt-1].anything.([]ast.AlterTableClause), yyS[yypt-0].anything.(ast.AlterTableClause))
		}
	case 137:
		{
			yyVAL.anything = &ast.DropConstraintClause{}
		}
	case 138:
		{
			yyVAL.anything = &ast.DropConstraintClause{}
		}
	case 139:
		{
			yyVAL.anything = &ast.DropConstraintClause{}
		}
	case 140:
		{
			// empty
		}
	case 143:
		{
			// empty
		}
	case 145:
		{
			// empty
		}
	case 147:
		{
			yyVAL.node = &ast.CreateTableStmt{
				TableName: yyS[yypt-4].anything.(*ast.TableName),
				RelTable:  yyS[yypt-2].anything.(*ast.RelTableDef),
			}
		}
	case 148:
		{
			// empty
		}
	case 156:
		{
			// empty
		}
	case 161:
		{
			// empty
		}
	case 164:
		{
			rd := &ast.RelTableDef{}
			if yyS[yypt-6].anything != nil {
				rd.TableStructs = yyS[yypt-6].anything.([]ast.TableStructDef)
			}
			yyVAL.anything = rd
		}
	case 167:
		{
			yyVAL.anything = nil
		}
	case 168:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 170:
		{
			// empty
		}
	case 173:
		{
			// empty
		}
	case 176:
		{
			// empty
		}
	case 181:
		{
			// empty
		}
	case 184:
		{
			// empty
		}
	case 203:
		{
			// empty
		}
	case 211:
		{
			// empty
		}
	case 218:
		{
			// empty
		}
	case 221:
		{
			// empty
		}
	case 226:
		{
			// empty
		}
	case 236:
		{
			// empty
		}
	case 242:
		{
			// empty
		}
	case 244:
		{
			// empty
		}
	case 249:
		{
			// empty
		}
	case 254:
		{
			// empty
		}
	case 258:
		{
			// empty
		}
	case 260:
		{
			// empty
		}
	case 267:
		{
			// empty
		}
	case 290:
		{
			yyVAL.anything = nil
		}
	case 291:
		{
			yyVAL.anything = yyS[yypt-1].anything
		}
	case 292:
		{
			yyVAL.anything = []ast.TableStructDef{yyS[yypt-0].anything.(ast.TableStructDef)}
		}
	case 293:
		{
			yyVAL.anything = append(yyS[yypt-2].anything.([]ast.TableStructDef), yyS[yypt-0].anything.(ast.TableStructDef))
		}
	case 294:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 295:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 296:
		{
			yyVAL.node = &ast.CreateIndexStmt{}
		}
	case 297:
		{
			// empty
		}
	case 335:
		{
			// empty
		}
	case 340:
		{
			// empty
		}
	case 345:
		{
			// empty
		}
	case 348:
		{
			// empty
		}
	case 351:
		{
			yyVAL.node = &ast.DropTableStmt{
				TableName: yyS[yypt-2].anything.(*ast.TableName),
			}
		}
	case 352:
		{
			// empty
		}
	case 354:
		{
			// empty
		}
	case 356:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 357:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 358:
		{
			yyVAL.anything = &element.NumberOrAsterisk{Number: yyS[yypt-0].i}
		}
	case 359:
		{
			yyVAL.anything = &element.NumberOrAsterisk{IsAsterisk: true}
		}
	case 360:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 361:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 362:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 363:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 364:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 365:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 366:
		{
			d := &element.Char{}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 367:
		{
			size := yyS[yypt-1].i
			d := &element.Char{Size: &size}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 368:
		{
			size := yyS[yypt-2].i
			d := &element.Char{Size: &size, IsByteSize: true}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 369:
		{
			size := yyS[yypt-2].i
			d := &element.Char{Size: &size, IsCharSize: true}
			d.SetDataDef(element.DataDefChar)
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 370:
		{
			size := yyS[yypt-1].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 371:
		{
			size := yyS[yypt-2].i
			d := &element.Varchar2{}
			d.Size = &size
			d.IsByteSize = true
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 372:
		{
			size := yyS[yypt-2].i
			d := &element.Varchar2{}
			d.Size = &size
			d.IsCharSize = true
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 373:
		{
			d := &element.NChar{}
			d.SetDataDef(element.DataDefNChar)
			yyVAL.anything = d
		}
	case 374:
		{
			size := yyS[yypt-1].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNChar)
			yyVAL.anything = d
		}
	case 375:
		{
			size := yyS[yypt-1].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNVarChar2)
			yyVAL.anything = d
		}
	case 376:
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 377:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 378:
		{
			precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
			scale := yyS[yypt-1].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 379:
		{
			d := &element.Float{}
			d.SetDataDef(element.DataDefFloat)
			yyVAL.anything = d
		}
	case 380:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefFloat)
			yyVAL.anything = d
		}
	case 381:
		{
			d := &element.BinaryFloat{}
			d.SetDataDef(element.DataDefBinaryFloat)
			yyVAL.anything = d
		}
	case 382:
		{
			d := &element.BinaryDouble{}
			d.SetDataDef(element.DataDefBinaryDouble)
			yyVAL.anything = d
		}
	case 383:
		{
			d := &element.Long{}
			d.SetDataDef(element.DataDefLong)
			yyVAL.anything = d
		}
	case 384:
		{
			d := &element.LongRaw{}
			d.SetDataDef(element.DataDefLongRaw)
			yyVAL.anything = d
		}
	case 385:
		{
			size := yyS[yypt-1].i
			d := &element.Raw{Size: &size}
			d.SetDataDef(element.DataDefRaw)
			yyVAL.anything = d
		}
	case 386:
		{
			d := &element.Date{}
			d.SetDataDef(element.DataDefDate)
			yyVAL.anything = d
		}
	case 387:
		{
			d := &element.Timestamp{}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 388:
		{
			precision := yyS[yypt-1].i
			d := &element.Timestamp{FractionalSecondsPrecision: &precision}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 389:
		{
			precision := yyS[yypt-4].i
			d := &element.Timestamp{FractionalSecondsPrecision: &precision, WithTimeZone: true}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 390:
		{
			precision := yyS[yypt-5].i
			d := &element.Timestamp{FractionalSecondsPrecision: &precision, WithLocalTimeZone: true}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 391:
		{
			d := &element.IntervalYear{}
			d.SetDataDef(element.DataDefIntervalYear)
			yyVAL.anything = d
		}
	case 392:
		{
			precision := yyS[yypt-3].i
			d := &element.IntervalYear{Precision: &precision}
			d.SetDataDef(element.DataDefIntervalYear)
			yyVAL.anything = d
		}
	case 393:
		{
			d := &element.IntervalDay{}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 394:
		{
			precision := yyS[yypt-3].i
			d := &element.IntervalDay{Precision: &precision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 395:
		{
			precision := yyS[yypt-6].i
			sPrecision := yyS[yypt-1].i
			d := &element.IntervalDay{Precision: &precision, FractionalSecondsPrecision: &sPrecision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 396:
		{
			sPrecision := yyS[yypt-1].i
			d := &element.IntervalDay{FractionalSecondsPrecision: &sPrecision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 397:
		{
			d := &element.Blob{}
			d.SetDataDef(element.DataDefBlob)
			yyVAL.anything = d
		}
	case 398:
		{
			d := &element.Clob{}
			d.SetDataDef(element.DataDefClob)
			yyVAL.anything = d
		}
	case 399:
		{
			d := &element.NClob{}
			d.SetDataDef(element.DataDefNClob)
			yyVAL.anything = d
		}
	case 400:
		{
			d := &element.BFile{}
			d.SetDataDef(element.DataDefBFile)
			yyVAL.anything = d
		}
	case 401:
		{
			d := &element.RowId{}
			d.SetDataDef(element.DataDefRowId)
			yyVAL.anything = d
		}
	case 402:
		{
			d := &element.URowId{}
			d.SetDataDef(element.DataDefURowId)
			yyVAL.anything = d
		}
	case 403:
		{
			size := yyS[yypt-1].i
			d := &element.URowId{Size: &size}
			d.SetDataDef(element.DataDefURowId)
			yyVAL.anything = d
		}
	case 404:
		{
			d := &element.Char{}
			d.SetDataDef(element.DataDefCharacter)
			yyVAL.anything = d
		}
	case 405:
		{
			size := yyS[yypt-1].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharacterVarying)
			yyVAL.anything = d
		}
	case 406:
		{
			size := yyS[yypt-1].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharVarying)
			yyVAL.anything = d
		}
	case 407:
		{
			size := yyS[yypt-1].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNCharVarying)
			yyVAL.anything = d
		}
	case 408:
		{
			size := yyS[yypt-1].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefVarchar)
			yyVAL.anything = d
		}
	case 409:
		{
			size := yyS[yypt-1].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNationalCharacter)
			yyVAL.anything = d
		}
	case 410:
		{
			size := yyS[yypt-1].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNationalCharacterVarying)
			yyVAL.anything = d
		}
	case 411:
		{
			size := yyS[yypt-1].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNationalChar)
			yyVAL.anything = d
		}
	case 412:
		{
			size := yyS[yypt-1].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNationalCharVarying)
			yyVAL.anything = d
		}
	case 413:
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 414:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 415:
		{
			precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
			scale := yyS[yypt-1].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 416:
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 417:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 418:
		{
			precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
			scale := yyS[yypt-1].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 419:
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 420:
		{
			precision := yyS[yypt-1].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 421:
		{
			precision := yyS[yypt-3].anything.(*element.NumberOrAsterisk)
			scale := yyS[yypt-1].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 422:
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefInteger)
			yyVAL.anything = d
		}
	case 423:
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefInt)
			yyVAL.anything = d
		}
	case 424:
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefSmallInt)
			yyVAL.anything = d
		}
	case 425:
		{
			precision := &element.NumberOrAsterisk{Number: 126}
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefDoublePrecision)
			yyVAL.anything = d
		}
	case 426:
		{
			precision := &element.NumberOrAsterisk{Number: 63}
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefReal)
			yyVAL.anything = d
		}
	case 427:
		{
			yyVAL.anything = nil
		}
	case 428:
		{
			yyVAL.anything = yyS[yypt-0].anything
		}
	case 429:
		{
			constraint := &ast.InlineConstraint{}
			if yyS[yypt-2].anything != nil {
				constraint.Name = yyS[yypt-2].anything.(*element.Identifier)
			}
			constraint.Type = ast.ConstraintType(yyS[yypt-1].i)
			yyVAL.anything = constraint
		}
	case 430:
		{
			constraint := &ast.InlineConstraint{}
			if yyS[yypt-2].anything != nil {
				constraint.Name = yyS[yypt-2].anything.(*element.Identifier)
			}
			constraint.Type = ast.ConstraintTypeReferences
			yyVAL.anything = constraint
		}
	case 431:
		{
			yyVAL.i = int(ast.ConstraintTypeNull)
		}
	case 432:
		{
			yyVAL.i = int(ast.ConstraintTypeNotNull)
		}
	case 433:
		{
			yyVAL.i = int(ast.ConstraintTypeUnique)
		}
	case 434:
		{
			yyVAL.i = int(ast.ConstraintTypePK)
		}
	case 436:
		{
			// empty
		}
	case 438:
		{
			// empty
		}
	case 441:
		{
			// empty
		}
	case 464:
		{
			constraint := &ast.OutOfLineConstraint{}
			if yyS[yypt-5].anything != nil {
				constraint.Name = yyS[yypt-5].anything.(*element.Identifier)
			}
			constraint.Type = ast.ConstraintTypeUnique
			constraint.Columns = yyS[yypt-2].anything.([]*element.Identifier)
			yyVAL.anything = constraint
		}
	case 465:
		{
			constraint := &ast.OutOfLineConstraint{}
			if yyS[yypt-6].anything != nil {
				constraint.Name = yyS[yypt-6].anything.(*element.Identifier)
			}
			constraint.Type = ast.ConstraintTypePK
			constraint.Columns = yyS[yypt-2].anything.([]*element.Identifier)
			yyVAL.anything = constraint
		}
	case 466:
		{
			constraint := &ast.OutOfLineConstraint{}
			if yyS[yypt-7].anything != nil {
				constraint.Name = yyS[yypt-7].anything.(*element.Identifier)
			}
			constraint.Type = ast.ConstraintTypeReferences
			constraint.Columns = yyS[yypt-3].anything.([]*element.Identifier)
			yyVAL.anything = constraint
		}
	case 494:
		{
			// empty
		}
	case 507:
		{
			// empty
		}
	case 509:
		{
			// empty
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

// Code generated by goyacc -o sql.go -l sql.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

import (
	"strings"

	"github.com/codeindex2937/oracle-sql-parser/ast"
	"github.com/codeindex2937/oracle-sql-parser/ast/element"
)

func nextQuery(yylex interface{}) string {
	lex := yylex.(*yyLexImpl)
	tc := lex.scanner.TC
	query := string(lex.scanner.Text[lex.lastPos:tc])
	lex.lastPos = tc
	return strings.TrimSpace(query)
}

type yySymType struct {
	yys      int
	nothing  struct{}
	i        int
	b        bool
	str      string
	node     ast.Node
	anything interface{}
}

const _action = 57346
const _add = 57347
const _all = 57348
const _alter = 57349
const _as = 57350
const _asc = 57351
const _by = 57352
const _char = 57353
const _cluster = 57354
const _column = 57355
const _comment = 57356
const _compress = 57357
const _create = 57358
const _date = 57359
const _decimal = 57360
const _default = 57361
const _delete = 57362
const _desc = 57363
const _drop = 57364
const _float = 57365
const _for = 57366
const _from = 57367
const _grant = 57368
const _identified = 57369
const _immediate = 57370
const _increment = 57371
const _index = 57372
const _initial = 57373
const _insert = 57374
const _integer = 57375
const _into = 57376
const _is = 57377
const _level = 57378
const _long = 57379
const _maxextents = 57380
const _modify = 57381
const _nocompress = 57382
const _not = 57383
const _null = 57384
const _number = 57385
const _on = 57386
const _online = 57387
const _optimal = 57388
const _order = 57389
const _pctfree = 57390
const _raw = 57391
const _rename = 57392
const _restrict = 57393
const _row = 57394
const _rowid = 57395
const _rows = 57396
const _select = 57397
const _sequence = 57398
const _set = 57399
const _smallInt = 57400
const _start = 57401
const _table = 57402
const _to = 57403
const _unique = 57404
const _update = 57405
const _validate = 57406
const _varchar = 57407
const _varchar2 = 57408
const _with = 57409
const _advanced = 57410
const _always = 57411
const _archive = 57412
const _at = 57413
const _attributes = 57414
const _auto = 57415
const _basic = 57416
const _bfile = 57417
const _binaryDouble = 57418
const _binaryFloat = 57419
const _bitmap = 57420
const _blob = 57421
const _blockchain = 57422
const _buffer_pool = 57423
const _byte = 57424
const _cache = 57425
const _capacity = 57426
const _cascade = 57427
const _cell_flash_cache = 57428
const _character = 57429
const _check = 57430
const _checkpoint = 57431
const _clob = 57432
const _collate = 57433
const _columns = 57434
const _commit = 57435
const _constraint = 57436
const _constraints = 57437
const _continue = 57438
const _creation = 57439
const _critical = 57440
const _cycle = 57441
const _data = 57442
const _day = 57443
const _dec = 57444
const _decrypt = 57445
const _deferrable = 57446
const _deferred = 57447
const _definition = 57448
const _delete_all = 57449
const _disable = 57450
const _disable_all = 57451
const _distribute = 57452
const _dml = 57453
const _double = 57454
const _duplicate = 57455
const _duplicated = 57456
const _E = 57457
const _enable = 57458
const _enable_all = 57459
const _encrypt = 57460
const _exceptions = 57461
const _extended = 57462
const _external = 57463
const _filesystem_like_logging = 57464
const _flash_cache = 57465
const _force = 57466
const _foreign = 57467
const _freelist = 57468
const _freelists = 57469
const _full = 57470
const _G = 57471
const _generated = 57472
const _global = 57473
const _groups = 57474
const _heap = 57475
const _high = 57476
const _identity = 57477
const _ilm = 57478
const _immutable = 57479
const _indexing = 57480
const _initially = 57481
const _initrans = 57482
const _inmemory = 57483
const _int = 57484
const _interval = 57485
const _invalidate = 57486
const _invalidation = 57487
const _invisible = 57488
const _K = 57489
const _keep = 57490
const _key = 57491
const _levels = 57492
const _limit = 57493
const _local = 57494
const _locking = 57495
const _logging = 57496
const _low = 57497
const _M = 57498
const _maxsize = 57499
const _maxtrans = 57500
const _maxvalue = 57501
const _medium = 57502
const _memcompress = 57503
const _memoptimize = 57504
const _metadata = 57505
const _minextents = 57506
const _minvalue = 57507
const _month = 57508
const _multivalue = 57509
const _national = 57510
const _nchar = 57511
const _nclob = 57512
const _next = 57513
const _no = 57514
const _nocache = 57515
const _nocycle = 57516
const _nologging = 57517
const _nomaxvalue = 57518
const _nominvalue = 57519
const _none = 57520
const _noorder = 57521
const _noparallel = 57522
const _norely = 57523
const _nosort = 57524
const _novalidate = 57525
const _numeric = 57526
const _nvarchar2 = 57527
const _organization = 57528
const _P = 57529
const _parallel = 57530
const _parent = 57531
const _partial = 57532
const _partition = 57533
const _pctincrease = 57534
const _pctused = 57535
const _peverse = 57536
const _policy = 57537
const _precision = 57538
const _preserve = 57539
const _primary = 57540
const _priority = 57541
const _private = 57542
const _purge = 57543
const _query = 57544
const _range = 57545
const _read = 57546
const _real = 57547
const _recycle = 57548
const _references = 57549
const _reject = 57550
const _rely = 57551
const _salt = 57552
const _scope = 57553
const _second = 57554
const _segment = 57555
const _service = 57556
const _sharded = 57557
const _sharding = 57558
const _sort = 57559
const _spatial = 57560
const _storage = 57561
const _store = 57562
const _subpartition = 57563
const _substitutable = 57564
const _T = 57565
const _tablespace = 57566
const _temporary = 57567
const _time = 57568
const _timestamp = 57569
const _unlimited = 57570
const _unusable = 57571
const _unused = 57572
const _urowid = 57573
const _usable = 57574
const _using = 57575
const _value = 57576
const _varying = 57577
const _visible = 57578
const _write = 57579
const _XMLType = 57580
const _year = 57581
const _zone = 57582
const _singleQuoteStr = 57583
const _doubleQuoteStr = 57584
const _nonquotedIdentifier = 57585
const _not_deferrable = 57586
const _no_inmemory = 57587
const _no_duplicate = 57588
const _row_level_locking = 57589
const _drop_index = 57590
const _intNumber = 57591

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"_action",
	"_add",
	"_all",
	"_alter",
	"_as",
	"_asc",
	"_by",
	"_char",
	"_cluster",
	"_column",
	"_comment",
	"_compress",
	"_create",
	"_date",
	"_decimal",
	"_default",
	"_delete",
	"_desc",
	"_drop",
	"_float",
	"_for",
	"_from",
	"_grant",
	"_identified",
	"_immediate",
	"_increment",
	"_index",
	"_initial",
	"_insert",
	"_integer",
	"_into",
	"_is",
	"_level",
	"_long",
	"_maxextents",
	"_modify",
	"_nocompress",
	"_not",
	"_null",
	"_number",
	"_on",
	"_online",
	"_optimal",
	"_order",
	"_pctfree",
	"_raw",
	"_rename",
	"_restrict",
	"_row",
	"_rowid",
	"_rows",
	"_select",
	"_sequence",
	"_set",
	"_smallInt",
	"_start",
	"_table",
	"_to",
	"_unique",
	"_update",
	"_validate",
	"_varchar",
	"_varchar2",
	"_with",
	"_advanced",
	"_always",
	"_archive",
	"_at",
	"_attributes",
	"_auto",
	"_basic",
	"_bfile",
	"_binaryDouble",
	"_binaryFloat",
	"_bitmap",
	"_blob",
	"_blockchain",
	"_buffer_pool",
	"_byte",
	"_cache",
	"_capacity",
	"_cascade",
	"_cell_flash_cache",
	"_character",
	"_check",
	"_checkpoint",
	"_clob",
	"_collate",
	"_columns",
	"_commit",
	"_constraint",
	"_constraints",
	"_continue",
	"_creation",
	"_critical",
	"_cycle",
	"_data",
	"_day",
	"_dec",
	"_decrypt",
	"_deferrable",
	"_deferred",
	"_definition",
	"_delete_all",
	"_disable",
	"_disable_all",
	"_distribute",
	"_dml",
	"_double",
	"_duplicate",
	"_duplicated",
	"_E",
	"_enable",
	"_enable_all",
	"_encrypt",
	"_exceptions",
	"_extended",
	"_external",
	"_filesystem_like_logging",
	"_flash_cache",
	"_force",
	"_foreign",
	"_freelist",
	"_freelists",
	"_full",
	"_G",
	"_generated",
	"_global",
	"_groups",
	"_heap",
	"_high",
	"_identity",
	"_ilm",
	"_immutable",
	"_indexing",
	"_initially",
	"_initrans",
	"_inmemory",
	"_int",
	"_interval",
	"_invalidate",
	"_invalidation",
	"_invisible",
	"_K",
	"_keep",
	"_key",
	"_levels",
	"_limit",
	"_local",
	"_locking",
	"_logging",
	"_low",
	"_M",
	"_maxsize",
	"_maxtrans",
	"_maxvalue",
	"_medium",
	"_memcompress",
	"_memoptimize",
	"_metadata",
	"_minextents",
	"_minvalue",
	"_month",
	"_multivalue",
	"_national",
	"_nchar",
	"_nclob",
	"_next",
	"_no",
	"_nocache",
	"_nocycle",
	"_nologging",
	"_nomaxvalue",
	"_nominvalue",
	"_none",
	"_noorder",
	"_noparallel",
	"_norely",
	"_nosort",
	"_novalidate",
	"_numeric",
	"_nvarchar2",
	"_organization",
	"_P",
	"_parallel",
	"_parent",
	"_partial",
	"_partition",
	"_pctincrease",
	"_pctused",
	"_peverse",
	"_policy",
	"_precision",
	"_preserve",
	"_primary",
	"_priority",
	"_private",
	"_purge",
	"_query",
	"_range",
	"_read",
	"_real",
	"_recycle",
	"_references",
	"_reject",
	"_rely",
	"_salt",
	"_scope",
	"_second",
	"_segment",
	"_service",
	"_sharded",
	"_sharding",
	"_sort",
	"_spatial",
	"_storage",
	"_store",
	"_subpartition",
	"_substitutable",
	"_T",
	"_tablespace",
	"_temporary",
	"_time",
	"_timestamp",
	"_unlimited",
	"_unusable",
	"_unused",
	"_urowid",
	"_usable",
	"_using",
	"_value",
	"_varying",
	"_visible",
	"_write",
	"_XMLType",
	"_year",
	"_zone",
	"_singleQuoteStr",
	"_doubleQuoteStr",
	"_nonquotedIdentifier",
	"_not_deferrable",
	"_no_inmemory",
	"_no_duplicate",
	"_row_level_locking",
	"_drop_index",
	"_intNumber",
	"';'",
	"'.'",
	"','",
	"'('",
	"')'",
	"'='",
	"'*'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 14,
	60, 330,
	-2, 464,
	-1, 377,
	254, 724,
	-2, 727,
	-1, 685,
	1, 359,
	162, 359,
	189, 359,
	250, 359,
	-2, 364,
}

const yyPrivate = 57344

const yyLast = 1981

var yyAct = [...]int16{
	35, 913, 401, 990, 400, 961, 923, 604, 1004, 603,
	850, 347, 993, 971, 1012, 221, 822, 929, 1001, 490,
	821, 602, 925, 7, 824, 754, 751, 34, 705, 868,
	842, 779, 222, 1002, 264, 226, 672, 687, 585, 507,
	829, 487, 536, 647, 230, 844, 307, 823, 492, 413,
	493, 380, 535, 243, 381, 414, 389, 501, 391, 486,
	241, 323, 337, 283, 282, 415, 343, 648, 780, 998,
	973, 343, 731, 1083, 649, 783, 325, 714, 357, 511,
	623, 1092, 511, 788, 1075, 511, 988, 1053, 982, 332,
	511, 794, 1018, 793, 734, 728, 733, 727, 1039, 726,
	972, 725, 328, 958, 724, 624, 723, 511, 324, 667,
	605, 898, 511, 615, 666, 341, 897, 511, 789, 589,
	511, 330, 581, 791, 980, 511, 973, 562, 521, 511,
	520, 512, 485, 483, 484, 482, 433, 896, 432, 327,
	978, 895, 894, 730, 982, 339, 893, 342, 713, 817,
	339, 815, 1038, 343, 812, 792, 972, 811, 806, 804,
	790, 803, 802, 787, 786, 801, 800, 799, 744, 743,
	736, 735, 732, 999, 718, 716, 710, 661, 565, 659,
	980, 997, 914, 1038, 646, 997, 644, 622, 1010, 543,
	939, 541, 539, 903, 784, 816, 978, 722, 720, 702,
	974, 782, 645, 625, 643, 617, 976, 542, 781, 540,
	538, 612, 326, 641, 981, 979, 639, 975, 977, 620,
	983, 637, 630, 618, 222, 331, 561, 560, 233, 785,
	556, 554, 553, 552, 551, 222, 34, 549, 548, 246,
	621, 547, 544, 377, 266, 627, 222, 609, 222, 272,
	269, 340, 271, 626, 478, 477, 974, 296, 616, 610,
	397, 386, 976, 374, 329, 320, 356, 320, 234, 429,
	981, 979, 922, 975, 977, 306, 983, 629, 755, 431,
	329, 315, 608, 338, 628, 263, 245, 232, 338, 606,
	13, 866, 1061, 346, 858, 1023, 856, 18, 874, 14,
	880, 611, 19, 873, 757, 16, 344, 38, 37, 17,
	698, 344, 756, 250, 364, 729, 366, 1062, 841, 869,
	712, 859, 1054, 371, 872, 373, 322, 367, 1029, 615,
	1028, 384, 383, 857, 1027, 388, 387, 954, 900, 877,
	876, 316, 871, 398, 321, 335, 399, 757, 869, 813,
	810, 969, 809, 808, 807, 756, 805, 587, 742, 371,
	740, 721, 719, 717, 715, 1080, 711, 1098, 701, 662,
	222, 660, 696, 695, 428, 694, 369, 693, 664, 476,
	481, 663, 656, 653, 372, 652, 642, 640, 638, 1087,
	1060, 498, 636, 344, 584, 360, 359, 305, 304, 303,
	926, 936, 509, 622, 322, 497, 1115, 410, 402, 998,
	494, 494, 692, 967, 409, 38, 37, 373, 911, 1114,
	707, 617, 926, 531, 365, 814, 737, 559, 527, 529,
	530, 434, 532, 240, 406, 620, 371, 351, 510, 618,
	1079, 407, 488, 352, 1084, 496, 214, 832, 678, 503,
	345, 525, 505, 506, 524, 738, 621, 588, 33, 513,
	658, 228, 227, 518, 1108, 515, 404, 407, 938, 937,
	352, 1104, 634, 298, 616, 1112, 235, 959, 771, 741,
	1059, 1077, 563, 564, 575, 1021, 568, 883, 570, 534,
	1113, 697, 747, 1074, 1082, 953, 826, 825, 311, 957,
	628, 583, 582, 934, 927, 853, 550, 869, 865, 950,
	863, 700, 574, 999, 591, 341, 517, 827, 865, 858,
	1072, 856, 1088, 1020, 371, 739, 927, 948, 1071, 222,
	572, 15, 489, 596, 657, 567, 949, 580, 635, 571,
	569, 293, 577, 576, 244, 994, 859, 342, 348, 590,
	495, 495, 293, 838, 615, 1042, 995, 325, 857, 421,
	826, 825, 292, 300, 1070, 558, 244, 952, 294, 322,
	600, 599, 601, 699, 1102, 889, 242, 886, 1117, 422,
	1097, 827, 665, 328, 30, 1068, 38, 37, 1100, 768,
	1069, 683, 650, 651, 1096, 1101, 1094, 654, 655, 908,
	31, 679, 1109, 951, 777, 376, 375, 691, 1067, 1099,
	396, 1073, 445, 324, 385, 1095, 881, 1093, 466, 450,
	327, 362, 420, 690, 461, 776, 1081, 851, 622, 682,
	703, 680, 1110, 706, 452, 38, 37, 423, 464, 23,
	496, 689, 38, 37, 460, 30, 617, 403, 392, 361,
	465, 340, 991, 828, 473, 1063, 985, 932, 915, 454,
	620, 31, 747, 29, 618, 834, 447, 458, 753, 878,
	675, 265, 839, 291, 882, 709, 472, 463, 462, 772,
	469, 621, 270, 247, 675, 864, 745, 671, 444, 32,
	919, 470, 848, 326, 750, 942, 752, 27, 1065, 616,
	858, 945, 856, 451, 887, 943, 884, 393, 746, 752,
	522, 940, 309, 455, 24, 763, 579, 828, 767, 765,
	28, 766, 1013, 762, 773, 628, 747, 859, 1015, 861,
	853, 1033, 395, 1035, 888, 615, 885, 504, 333, 857,
	312, 1034, 862, 453, 468, 798, 775, 488, 933, 394,
	32, 537, 502, 944, 623, 546, 1014, 508, 268, 222,
	931, 229, 1050, 819, 1040, 843, 818, 1091, 1049, 448,
	446, 471, 860, 1005, 595, 758, 514, 760, 854, 624,
	852, 676, 1025, 25, 605, 449, 459, 615, 941, 308,
	557, 301, 901, 578, 899, 676, 500, 706, 26, 963,
	555, 945, 499, 845, 847, 223, 456, 313, 212, 622,
	867, 870, 20, 1041, 875, 946, 237, 252, 879, 334,
	231, 218, 593, 891, 890, 892, 1011, 617, 475, 902,
	1090, 545, 474, 216, 916, 261, 759, 489, 904, 457,
	774, 620, 962, 1016, 906, 618, 688, 251, 905, 358,
	219, 1057, 317, 986, 935, 854, 215, 852, 924, 912,
	290, 622, 621, 236, 217, 920, 690, 907, 764, 319,
	917, 259, 669, 668, 1056, 833, 748, 625, 631, 617,
	616, 566, 681, 430, 278, 612, 318, 257, 314, 987,
	224, 910, 290, 620, 1107, 1052, 405, 618, 796, 350,
	349, 287, 295, 336, 289, 780, 628, 963, 964, 836,
	797, 853, 783, 956, 621, 3, 598, 984, 279, 627,
	788, 609, 921, 989, 1008, 965, 1007, 626, 1026, 280,
	968, 302, 616, 610, 1031, 220, 289, 1006, 835, 854,
	854, 852, 852, 1105, 1009, 684, 1000, 253, 594, 1058,
	996, 1003, 480, 255, 239, 789, 608, 947, 628, 778,
	791, 260, 258, 606, 254, 256, 479, 262, 918, 1022,
	837, 761, 677, 904, 573, 611, 491, 363, 1017, 310,
	267, 614, 613, 607, 1024, 425, 523, 1030, 299, 1047,
	1045, 928, 792, 1106, 1089, 1103, 1086, 790, 1064, 222,
	787, 786, 1043, 1032, 1037, 992, 1078, 1051, 1046, 619,
	854, 1044, 852, 924, 1048, 1036, 855, 1055, 849, 930,
	770, 686, 846, 769, 685, 519, 411, 516, 408, 297,
	21, 784, 586, 820, 749, 670, 1019, 966, 782, 909,
	831, 830, 970, 1066, 674, 781, 673, 632, 533, 238,
	1076, 39, 840, 526, 1, 213, 249, 248, 704, 528,
	426, 424, 960, 281, 955, 1085, 785, 412, 355, 354,
	353, 390, 597, 286, 368, 370, 288, 379, 382, 378,
	285, 284, 277, 276, 275, 274, 273, 437, 436, 443,
	442, 467, 441, 440, 439, 438, 435, 225, 2, 12,
	11, 10, 9, 8, 6, 5, 4, 1111, 795, 325,
	22, 36, 592, 1116, 708, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 419, 61, 62, 63, 64,
	65, 416, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 418, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 138, 139, 140, 141, 142, 143, 144,
	145, 146, 147, 148, 149, 150, 151, 152, 153, 154,
	155, 156, 157, 158, 159, 160, 161, 162, 163, 164,
	165, 166, 167, 168, 169, 417, 171, 172, 173, 174,
	175, 176, 177, 178, 179, 180, 181, 182, 183, 184,
	185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
	195, 196, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 206, 207, 208, 209, 39, 210, 211, 633, 38,
	37, 0, 0, 427, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 40,
	41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
	141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
	161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
	191, 192, 193, 194, 195, 196, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 206, 207, 208, 209, 39,
	210, 211, 0, 38, 37, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 81, 82, 83, 84, 85, 86,
	87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
	147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 164, 165, 166,
	167, 168, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 186,
	187, 188, 189, 190, 191, 192, 193, 194, 195, 196,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
	207, 208, 209, 445, 210, 211, 0, 38, 37, 466,
	450, 0, 0, 0, 0, 461, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 452, 0, 0, 0, 464,
	0, 0, 0, 0, 0, 460, 0, 0, 0, 0,
	0, 465, 0, 0, 0, 473, 0, 0, 0, 0,
	454, 0, 0, 0, 0, 0, 0, 447, 458, 0,
	0, 0, 0, 0, 0, 0, 0, 472, 463, 462,
	0, 469, 0, 0, 0, 0, 0, 0, 0, 444,
	0, 0, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 455, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 453, 468, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	448, 446, 471, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 449, 459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 475,
	0, 0, 0, 474, 0, 0, 0, 0, 0, 0,
	457,
}

var yyPact = [...]int16{
	283, -1000, 52, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 752, 583, 1515, 748, 801, 806, 283,
	1515, 745, 860, 1515, 237, 236, -1000, -1000, 681, -1000,
	-1000, -1000, -1000, 775, 36, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1515, 224, -1000, -1000, -1000, -1000, -1000, 803,
	-1000, 404, 35, 1515, 1515, 788, 34, -1000, -1000, -1000,
	547, -1000, 1515, 673, 1515, 801, 1515, 1515, 879, 390,
	-1000, -1000, 406, -1000, 878, 1515, 257, -1000, -1000, 788,
	-1000, 724, 921, 150, -1000, 149, -1000, -1000, -1000, 148,
	-1000, -1000, -1000, 1515, 684, -1000, -1000, 297, 645, 746,
	-1000, 853, 30, -1000, -1000, -1000, 847, -1000, 14, 27,
	725, 881, -1000, -1000, -1000, -1000, -1000, 53, -1000, 220,
	1515, -1000, 386, 876, 875, 233, -1000, 13, -177, 805,
	-1000, 147, 146, -1000, -1000, -1000, -1000, -1000, 504, 476,
	-1000, -1000, -1000, 173, 183, 1515, -1000, 12, 11, 58,
	1515, -1000, 495, -1000, 173, 10, 457, 456, -10, 1515,
	173, 465, 8, 1515, 173, -1000, 453, 563, 657, 636,
	461, 7, 173, 1515, 1515, 140, 425, -1000, 872, 206,
	230, -1000, -1000, 382, -1000, -1000, 1047, 459, 1281, -1000,
	-1000, -1000, -1000, 17, -1000, -1000, 848, 28, -116, -1000,
	-1000, 1742, -1000, -1000, 1515, 2, 1, 1515, -119, -120,
	-1000, -1000, -1000, 601, 306, 306, 1515, 741, 735, 663,
	563, -1000, 642, -1000, 663, 663, 672, 1515, 672, -1000,
	-123, -1000, 563, 705, 243, 204, -1000, -1000, 327, 379,
	-1000, -1000, -124, -1000, -1000, -1000, 173, 457, 456, -10,
	-1000, -1000, 610, -1000, 222, -1000, -1000, 173, 173, 173,
	182, 173, -1000, 1515, 660, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -43, -44, -46, -11, 744, -12,
	-15, -16, -1000, -1000, -1000, 310, -1000, -1000, -19, -20,
	-21, -22, -1000, -1000, 751, -23, -1000, 723, 326, -1000,
	-1000, -1000, -1000, -1000, -26, -27, -127, 1515, 1515, -76,
	846, -1000, -1000, 1515, -1000, 1515, 660, -1000, -1000, -1000,
	672, 303, 501, 307, -1000, -1000, 688, 672, -132, 1515,
	173, -1000, 145, -1000, -1000, -1000, -1000, 209, -1000, -135,
	209, 1515, -1000, 777, 942, 703, -1000, 1515, -1000, 897,
	-1000, 1047, -1000, 684, -1000, -1000, 739, 26, -31, -1000,
	-1000, -1000, 843, -1000, -1000, 255, -1000, 173, 143, -32,
	139, -37, 138, -40, 137, -49, -51, -182, -182, -182,
	-1000, 136, 134, -182, -182, -1000, 133, 308, 118, 116,
	132, 129, 306, -140, -145, -1000, 831, -1000, 1742, -1000,
	296, 665, -1000, 215, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 306, -1000, -1000, -1000, -1000, 775, 852, -1000, 672,
	-1000, -1000, -1000, -1000, 441, 939, -1000, 802, 660, -1000,
	-1000, 739, -1000, -1000, -1000, -1000, 393, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 128, 126, 124, 123, -1000,
	-1000, -1000, -1000, 242, -1000, 383, 119, -1000, -54, 173,
	1515, 179, -1000, 296, -1000, -1000, -78, 117, 66, 115,
	-79, 114, -80, 113, -55, 112, -56, -148, -1000, -1000,
	-153, -157, 61, -82, -158, -83, -84, 186, 229, 359,
	111, 267, 109, -85, -86, -1000, 306, 285, -1000, 834,
	591, 533, -1000, -1000, -1000, 106, 767, 607, 838, 672,
	-1000, -1000, 209, 547, 439, 466, 796, -1000, 653, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 470, -1000,
	-1000, -1000, 874, -1000, -161, -1000, 889, -1000, 651, -1000,
	-1000, -87, -1000, -88, -89, -92, -1000, -93, -1000, -95,
	107, -96, 105, -1000, 104, -1000, 103, -1000, 101, -1000,
	-97, -100, -1000, -1000, 100, -1000, -1000, -1000, 185, -1000,
	-103, -58, -105, -1000, -1000, -1000, 306, 1515, -1000, 519,
	-1000, -1000, 214, -1000, -1000, 833, -1000, -1000, 530, 930,
	890, 489, -1000, -1000, 65, -1000, -1000, -1000, 547, -1000,
	506, 173, 632, -1000, 649, 488, -1000, -1000, 37, -1000,
	99, 99, 93, 75, 70, 91, 90, 537, 258, 468,
	558, 556, -1000, 739, 1515, -1000, -1000, -1000, 578, -1000,
	-1000, -1000, -1000, -1000, -1000, -108, -1000, -112, -113, -117,
	-138, -1000, -1000, -143, -1000, 733, 89, 731, 785, -60,
	-1000, 519, -1000, 455, 306, -1000, 825, -1000, 450, -1000,
	-1000, 864, 177, 63, -71, 523, 826, 571, -1000, -1000,
	-1000, 906, -1000, 21, 739, -1000, -1000, 281, 627, -1000,
	-1000, 312, -1000, 344, -1000, -1000, -1000, 249, 248, -1000,
	-63, 683, 498, 599, 647, 761, -1000, -1000, -1000, 380,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 88, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 519, -1000, -1000, -1000, -1000, -1000, -1000, 333,
	-151, 265, 779, 1515, -1000, 306, -1000, -1000, -1000, 172,
	920, -1000, -1000, -1000, 97, -71, 521, 811, -1000, 855,
	-168, 522, 173, 516, -1000, -1000, 384, -72, 268, -1000,
	-1000, 687, 687, -1000, 701, -1000, 173, 911, 909, 1515,
	-1000, -1000, 747, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 519, -1000, -1000, -65,
	782, -1000, 671, 671, -162, -1000, 313, -1000, 173, -1000,
	41, -1000, 715, 918, 85, -1000, 81, -1000, -1000, -1000,
	79, -1000, -1000, -1000, -1000, -71, 926, 1515, -1000, -1000,
	-1000, 624, 268, -101, 740, 394, -1000, 1515, 384, -68,
	-1000, 259, 687, -1000, -1000, -1000, -1000, 694, 871, -167,
	73, 887, -1000, -1000, -1000, 832, 945, -1000, -1000, -1000,
	-1000, 270, -1000, -1000, -1000, 141, 68, -1000, -1000, -1000,
	-1000, 520, -1000, -1000, -1000, -1000, -1000, 588, 1515, 430,
	409, -1000, -1000, -170, -70, -1000, 516, -1000, 273, -1000,
	-1000, 193, 424, -1000, -181, -1000, -1000, -1000, -1000, -1000,
	-1000, 210, -1000, -71, 276, 757, -173, -1000, -1000, -1000,
	-1000, -1000, -1000, 462, 460, -1000, -1000, 429, -1000, -1000,
	120, 454, 440, -1000, -1000, -1000, 253, 937, -1000, 870,
	-1000, 411, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1515, -1000, -1000, 261, 287, -1000,
	-1000, -1000, 400, -1000, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1288, 41, 1114, 58, 1112, 34, 1111, 1110, 1108,
	446, 1106, 915, 1105, 1104, 23, 1103, 1102, 1101, 1100,
	1099, 1098, 15, 458, 1097, 0, 11, 2, 59, 1096,
	1095, 1094, 1093, 1092, 1091, 1090, 1089, 1088, 1087, 1086,
	1085, 1084, 1083, 64, 1082, 1081, 1080, 1079, 51, 1078,
	1077, 54, 1076, 1075, 1074, 55, 1073, 43, 52, 42,
	1072, 4, 62, 57, 1071, 56, 1070, 1069, 1068, 1067,
	49, 65, 61, 47, 1064, 20, 16, 24, 1063, 63,
	40, 1062, 5, 14, 1061, 1060, 1059, 1058, 28, 1057,
	1056, 1055, 1054, 1053, 1052, 1049, 1048, 1047, 36, 26,
	1046, 1044, 25, 1, 1042, 13, 1041, 1040, 1039, 1037,
	1036, 1035, 1034, 1033, 19, 39, 38, 1032, 44, 1030,
	1029, 1028, 1027, 1026, 1025, 1024, 1023, 1022, 1021, 37,
	1020, 33, 6, 3, 1019, 1018, 18, 10, 9, 7,
	1016, 1009, 1007, 1006, 22, 1005, 12, 1004, 998, 996,
	995, 994, 993, 991, 17, 990, 989, 8, 988, 986,
	46, 985, 45, 21, 983, 982, 981, 30, 980, 979,
	313, 977, 976, 974, 972, 971, 970, 968, 48, 50,
	966, 959, 31, 29, 957, 954, 433, 60, 53, 952,
}

var yyR1 = [...]uint8{
	0, 92, 21, 21, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 11, 22, 22, 61, 61, 27, 93,
	93, 23, 23, 94, 94, 24, 24, 26, 26, 25,
	25, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 13, 39, 39, 40, 40, 42,
	42, 43, 43, 43, 45, 96, 97, 54, 54, 55,
	53, 58, 58, 59, 1, 1, 3, 3, 2, 2,
	98, 98, 98, 100, 100, 101, 101, 101, 101, 103,
	103, 103, 104, 104, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 99, 99, 106,
	107, 107, 108, 108, 109, 109, 110, 110, 110, 74,
	74, 75, 75, 46, 46, 46, 47, 47, 48, 49,
	111, 111, 112, 112, 113, 113, 50, 50, 51, 52,
	52, 6, 6, 56, 56, 56, 56, 62, 62, 65,
	65, 64, 64, 4, 4, 5, 5, 63, 63, 44,
	41, 41, 41, 41, 41, 41, 78, 78, 79, 79,
	79, 115, 115, 116, 117, 117, 117, 118, 118, 14,
	119, 119, 119, 119, 119, 119, 119, 119, 120, 120,
	120, 120, 120, 122, 122, 66, 67, 123, 124, 60,
	60, 125, 125, 125, 125, 128, 128, 129, 129, 126,
	126, 126, 126, 126, 130, 130, 130, 136, 136, 131,
	131, 137, 137, 137, 137, 137, 138, 138, 138, 138,
	138, 139, 139, 139, 140, 140, 140, 140, 140, 140,
	140, 142, 142, 142, 142, 142, 142, 142, 143, 143,
	132, 132, 132, 145, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 147, 147, 147, 147, 147, 147,
	148, 148, 151, 151, 151, 151, 151, 152, 152, 152,
	152, 152, 149, 149, 149, 149, 150, 150, 144, 144,
	153, 153, 154, 154, 133, 133, 133, 133, 134, 134,
	134, 155, 156, 157, 135, 135, 127, 68, 68, 69,
	69, 70, 70, 15, 8, 8, 8, 8, 158, 84,
	84, 161, 162, 162, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 164, 164, 164,
	164, 164, 164, 165, 165, 166, 166, 166, 85, 86,
	86, 87, 87, 88, 9, 9, 9, 167, 167, 159,
	159, 159, 160, 160, 160, 16, 17, 18, 89, 89,
	90, 90, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 19, 20, 20, 20, 91, 91,
	10, 10, 10, 10, 171, 171, 168, 168, 169, 169,
	28, 28, 28, 57, 57, 29, 29, 29, 29, 29,
	29, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 31, 31, 31, 31, 31, 31, 31, 32, 32,
	32, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 34, 34, 35, 35, 35, 35, 36, 36, 36,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 38, 73, 76, 76, 77, 77, 77,
	77, 77, 114, 172, 172, 172, 172, 172, 178, 178,
	179, 179, 173, 173, 173, 174, 174, 174, 174, 175,
	175, 175, 176, 176, 176, 177, 177, 80, 81, 82,
	83, 83, 83, 83, 83, 71, 71, 72, 72, 72,
	72, 72, 72, 72, 141, 181, 181, 182, 182, 182,
	182, 182, 182, 182, 182, 182, 182, 182, 182, 182,
	182, 182, 182, 182, 182, 182, 182, 182, 182, 182,
	183, 184, 184, 184, 184, 184, 184, 184, 95, 95,
	95, 95, 185, 185, 186, 186, 121, 121, 121, 121,
	187, 188, 102, 102, 180, 180, 180, 189, 189,
}

var yyR2 = [...]int8{
	0, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 3, 1, 3, 1, 1,
	3, 1, 3, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 5, 1, 1, 1, 1, 1,
	2, 1, 1, 1, 6, 0, 0, 1, 3, 1,
	8, 0, 1, 2, 0, 1, 0, 1, 1, 1,
	0, 1, 1, 2, 4, 4, 5, 6, 8, 0,
	2, 3, 1, 2, 3, 4, 3, 2, 1, 2,
	1, 1, 1, 2, 1, 1, 1, 0, 2, 4,
	0, 2, 0, 3, 0, 1, 0, 1, 2, 0,
	1, 1, 2, 4, 4, 1, 1, 3, 1, 6,
	2, 1, 1, 1, 0, 1, 1, 3, 2, 7,
	8, 0, 1, 5, 4, 4, 4, 2, 3, 0,
	1, 1, 2, 2, 1, 0, 1, 0, 2, 5,
	2, 5, 5, 7, 5, 1, 1, 2, 5, 7,
	5, 0, 1, 2, 0, 2, 1, 0, 1, 8,
	0, 2, 2, 1, 1, 1, 1, 2, 0, 3,
	3, 4, 3, 0, 2, 1, 7, 0, 0, 0,
	2, 0, 1, 1, 2, 4, 4, 4, 4, 0,
	4, 3, 2, 5, 0, 3, 3, 0, 1, 1,
	2, 1, 2, 3, 1, 1, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 3, 4, 4, 5, 4,
	1, 0, 2, 3, 3, 2, 3, 3, 1, 2,
	1, 3, 2, 5, 0, 3, 3, 4, 4, 3,
	4, 4, 2, 2, 0, 2, 2, 2, 2, 2,
	0, 3, 0, 1, 3, 2, 2, 0, 3, 3,
	3, 3, 0, 1, 2, 1, 0, 2, 0, 1,
	1, 2, 5, 4, 0, 2, 2, 2, 3, 3,
	2, 2, 0, 0, 4, 6, 0, 0, 3, 1,
	3, 1, 1, 9, 0, 1, 1, 1, 0, 1,
	1, 3, 1, 2, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 6, 0,
	1, 1, 3, 2, 0, 1, 1, 0, 1, 0,
	1, 1, 0, 2, 2, 5, 5, 4, 0, 1,
	1, 2, 3, 3, 2, 1, 2, 1, 1, 1,
	2, 1, 1, 1, 6, 6, 8, 10, 1, 3,
	1, 1, 1, 1, 1, 3, 0, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 5, 5, 4, 5, 5, 1, 4,
	4, 1, 4, 6, 1, 4, 1, 1, 1, 2,
	4, 1, 1, 4, 5, 4, 7, 4, 7, 10,
	7, 1, 4, 1, 1, 1, 1, 1, 1, 4,
	4, 5, 5, 5, 4, 5, 6, 5, 6, 1,
	4, 6, 1, 4, 6, 1, 4, 6, 1, 1,
	1, 2, 1, 1, 2, 3, 2, 1, 2, 1,
	2, 1, 6, 0, 1, 2, 1, 2, 1, 1,
	2, 2, 0, 1, 1, 0, 3, 5, 3, 0,
	1, 1, 0, 1, 1, 0, 3, 5, 2, 2,
	1, 1, 2, 2, 2, 2, 1, 5, 6, 7,
	9, 9, 11, 4, 4, 1, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 3, 1, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	2, 0, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 2, 1, 4, 1, 4, 0, 1, 1, 2,
	3, 3, 1, 1, 0, 3, 4, 0, 1,
}

var yyChk = [...]int16{
	-1000, -92, -21, -12, -11, -13, -14, -15, -16, -17,
	-18, -19, -20, 7, 16, 248, 22, 26, 14, 250,
	60, -119, -8, 56, 131, 200, 215, 114, 137, 80,
	62, 78, 167, -23, -26, -25, -7, 243, 242, 4,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 80, 81, 82, 83, 84, 85, 86, 87,
	88, 89, 90, 91, 92, 93, 94, 95, 96, 97,
	98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 141, 142, 143, 144, 145, 146, 147,
	148, 149, 150, 151, 152, 153, 154, 155, 156, 157,
	158, 159, 160, 161, 162, 163, 164, 165, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 176, 177,
	178, 179, 180, 181, 182, 183, 184, 185, 186, 187,
	188, 189, 190, 191, 192, 193, 194, 195, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
	208, 209, 210, 211, 212, 213, 214, 215, 216, 217,
	218, 219, 220, 221, 222, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 233, 234, 235, 236, 237,
	239, 240, 60, -91, -10, 55, 32, 63, 20, 44,
	-12, -22, -26, 60, 30, -24, -26, 225, 225, 80,
	-118, 45, 251, -22, 44, 252, 60, 13, -95, -185,
	-186, -187, 172, -188, 162, 251, -22, -23, -89, -90,
	-170, 59, 29, 159, 176, 165, 177, 99, 174, 83,
	173, 47, 179, 251, -6, 124, -26, -168, 85, -22,
	-10, -22, -26, -39, -40, -41, -42, -44, 5, 39,
	50, -78, -43, -79, -45, -46, -56, 22, -52, 57,
	13, -186, 172, 162, 162, 24, -26, -120, 216, -158,
	-170, 67, 10, 249, 249, 249, -26, -160, 105, 28,
	-169, 201, 95, 61, 35, 251, -43, 5, 39, 22,
	253, -71, -73, -72, 94, 62, 198, 125, 88, 253,
	94, 198, 62, 13, 94, -79, 22, -62, 230, 92,
	198, 62, 94, 13, 253, 230, -27, -26, 162, 24,
	24, 204, 237, -66, -67, -68, 253, 255, 44, 249,
	249, 145, 145, -171, -25, 241, -25, -26, -54, -55,
	-53, -27, -72, -25, 253, 149, 149, 253, -47, -50,
	-48, -51, -49, -27, -25, 149, 253, -27, -25, -65,
	-64, -4, 85, 144, 92, 96, 149, 253, -25, -27,
	-61, -27, -62, 222, 41, 24, 204, 237, -121, -187,
	-188, -123, -69, -70, -55, -71, 94, 198, 125, 88,
	163, 100, 120, 178, -84, -161, -85, 12, -22, 252,
	35, 251, 254, 252, -28, -29, -37, -38, -30, -31,
	-32, -33, -35, -36, 87, 11, 169, 65, 168, 184,
	18, 102, 33, 142, 58, 112, 205, 238, 66, 185,
	43, 23, 77, 76, 37, 49, 17, -34, 143, 79,
	90, 170, 75, 53, 231, 227, -61, 253, 253, -180,
	-189, -27, 254, 252, 254, 252, -28, -2, 146, 236,
	-114, -172, -178, -179, 104, 244, 139, -114, -61, 61,
	61, -63, 89, -4, 95, -63, -63, -115, 85, -61,
	-115, 252, 254, -65, 71, 222, -122, 189, -188, -124,
	254, 252, 100, -159, 232, 229, -93, -25, -86, -25,
	-25, 241, -25, -96, -55, -58, -59, 91, 253, 235,
	253, 235, 253, 235, 253, 87, 11, 253, 253, 253,
	196, 253, 253, 253, 253, 49, 253, 67, 239, 101,
	253, 253, 254, -61, -61, 254, 35, -48, -27, -51,
	-27, -58, -115, -173, 209, 181, -179, -178, 105, 28,
	-115, 254, -27, -25, 249, -116, -117, 148, 248, 254,
	-116, -27, -5, 45, 6, 71, -22, -60, 19, -70,
	-160, -162, -163, -138, -139, 45, 224, -164, 217, 182,
	194, 236, 146, -165, -166, 48, 193, 140, 158, -141,
	154, 175, 122, 15, 40, 138, 188, 180, 219, 251,
	253, 35, -97, -1, 217, -25, 249, 253, 249, 253,
	249, 253, 249, 253, 235, 253, 235, -57, 249, 256,
	-57, -57, 249, 249, -57, -57, 249, 226, 152, 61,
	253, 61, 253, 249, 249, -114, 254, 254, 42, 41,
	-111, 22, -98, -100, -101, 19, 130, -174, 233, -114,
	-118, 30, -115, 150, 6, -125, -128, -129, 44, -59,
	-163, -25, 19, 249, 249, 249, 249, 249, 68, 190,
	128, 249, 253, -25, -87, -88, -27, 241, -3, -2,
	254, 249, 254, 82, 11, 249, 254, 249, 254, 249,
	253, 249, 253, 254, 252, 254, 252, 254, 252, 254,
	82, 11, 254, 254, 252, 254, 254, 240, 226, 166,
	249, 212, 249, 254, 254, -114, -80, 207, 42, -112,
	103, -99, 118, 135, -102, 172, 249, 241, 8, 69,
	10, -175, 116, 108, 30, -115, -116, -6, 150, -126,
	-130, 12, 213, -129, 44, 93, 155, 134, -181, -182,
	31, 171, 164, 38, 157, 192, 127, 126, 46, 81,
	123, 86, 118, 254, 252, -9, 9, 21, -98, 254,
	254, 254, 254, 254, 254, 249, 254, 249, 249, 249,
	249, 254, 254, 249, 240, 254, 253, 254, -114, -22,
	-113, -75, -76, -73, -77, 42, 41, 62, 198, -80,
	-106, -107, 233, 42, 135, 8, 19, -176, 64, 183,
	-94, 253, -167, -25, -162, -6, -127, -131, 186, -135,
	-137, 121, -138, 224, -139, -140, 15, 52, 13, 40,
	-25, 97, 93, 22, 197, 20, 254, -182, -183, 249,
	-183, 249, 249, 228, 228, -183, 249, 249, 132, -183,
	42, 148, 206, 19, 148, 178, 19, 148, 178, 19,
	-167, -88, -99, 254, 254, 254, 254, 254, 254, 61,
	249, 61, 44, 253, -76, -77, -114, 42, 149, -108,
	27, 241, -102, -103, 253, 135, 8, 44, -177, 119,
	-15, 16, 251, -132, -137, -144, 141, 245, -153, -154,
	-134, 133, 30, 121, 191, -25, 57, 220, 220, 253,
	28, 105, 197, 106, 106, 54, 54, -184, 147, 156,
	129, 223, 187, 115, 249, -74, -75, 166, 254, 212,
	-81, -82, 63, 20, -61, -114, -109, 241, 10, 254,
	-104, -105, 59, 29, 159, 176, 165, 177, 99, 174,
	83, 173, 47, 179, -103, 135, 42, 34, 254, -25,
	-133, 136, -145, -146, 161, 172, -144, 253, 141, 245,
	-154, -136, -131, -136, -157, 72, -25, 15, 15, -61,
	253, 44, -83, 51, 85, 57, 172, -83, 254, -110,
	210, 172, -25, 254, -105, 67, 10, 249, 249, 249,
	-103, 8, -22, 107, 117, 109, -144, -147, 253, 199,
	24, 73, 161, -61, -146, -155, -132, -156, -157, 74,
	68, -142, 24, 254, 249, -82, 42, 19, 4, 210,
	249, 151, 249, 135, -148, 110, -61, 178, 155, 160,
	134, 98, 111, 202, 84, 254, -133, 208, -143, 247,
	172, 202, 70, 254, 234, -103, -149, 113, 246, -151,
	73, 10, 254, 155, 134, 155, 134, 151, 247, 155,
	134, 155, 134, -150, 218, 6, -152, 24, 53, 191,
	221, -27, 214, 203, 19, 6, -25, 178,
}

var yyDef = [...]int16{
	13, -2, 1, 2, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 0, -2, 0, 0, 0, 0, 13,
	0, 0, 0, 0, 0, 0, 333, 334, 335, 336,
	465, 466, 467, 327, 21, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 0, 0, 538, 540, 541, 542, 543, 0,
	3, 708, 14, 0, 0, 518, 25, 331, 332, 337,
	291, 328, 0, 546, 0, 0, 0, 0, 0, 709,
	710, 712, 0, 714, 0, 0, 338, 468, 517, 519,
	520, 0, 0, 0, 525, 0, 527, 528, 529, 0,
	531, 532, 533, 0, 512, 292, 22, 548, 0, 0,
	539, 0, 0, 204, 205, 206, 207, 208, 0, 0,
	0, 315, 209, 316, 211, 212, 213, 0, 275, 0,
	0, 711, 0, 0, 0, 0, 15, 457, 0, 0,
	521, 0, 0, 524, 526, 530, 26, 515, 0, 0,
	516, 549, 547, 0, 0, 0, 210, 0, 0, 0,
	0, 310, 0, 666, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 317, 0, 299, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 18, 0, 0,
	0, 720, 721, 716, 345, 347, 0, 0, 0, 522,
	523, 513, 514, 534, 544, 535, 27, 0, 0, 217,
	219, 0, 665, 624, 0, 0, 0, -2, 0, 0,
	276, 286, 278, 0, 633, 633, 0, 0, 0, 307,
	300, 301, 0, 304, 307, 307, 321, 0, 321, 297,
	0, 16, 299, 0, 0, 0, 713, 715, 343, 717,
	718, 348, 0, 459, 461, 462, 58, 162, 89, 52,
	339, 340, 0, 342, 509, 469, 470, 0, 499, 0,
	0, 0, 215, 0, 221, 550, 551, 552, 555, 556,
	557, 558, 559, 560, 0, 561, 568, 0, 0, 609,
	612, 615, 618, 619, 620, 0, 622, 623, 0, 0,
	571, 574, 576, 577, 578, 0, 581, 582, 0, 593,
	594, 595, 596, 597, 598, 591, 0, 0, 0, 0,
	0, 728, 273, 0, 274, 0, 221, 288, 228, 229,
	321, 642, 634, 636, 638, 639, 0, 321, 0, 0,
	0, 294, 0, 302, 303, 295, 296, 324, 322, 0,
	324, 0, 298, 305, 0, 0, 329, 0, 719, 349,
	458, 0, 341, 512, 510, 511, 0, 19, 0, 500,
	545, 536, 0, 216, 218, 224, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	621, 0, 0, 0, 0, 579, 0, 0, 0, 0,
	0, 0, 633, 0, 0, 673, 0, 277, 0, 287,
	0, 230, 311, 645, 643, 644, 635, 637, 640, 641,
	312, 633, 309, 314, 308, 318, 327, 0, 326, 321,
	320, 17, 293, 306, 0, 0, 344, 351, 0, 460,
	463, 471, 472, 474, 475, 476, 0, 479, 480, 481,
	482, 483, 484, 485, 486, 0, 0, 0, 0, 380,
	381, 382, 383, 487, 492, 0, 495, 497, 0, 0,
	0, 0, 214, 226, 225, 223, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 553, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 667, 633, 0, 725, 0,
	257, 0, 281, 231, 232, 0, 0, 649, 0, 321,
	323, 325, 324, 291, 0, -2, 352, 353, 0, 350,
	473, 477, 478, 376, 377, 378, 379, 488, 489, 493,
	494, 496, 0, 20, 0, 501, 504, 537, 230, 227,
	600, 0, 562, 0, 0, 0, 569, 0, 604, 0,
	0, 0, 0, 610, 0, 613, 0, 616, 0, 565,
	0, 0, 570, 572, 0, 575, 580, 583, 0, 585,
	0, 587, 0, 599, 592, 668, 633, 0, 726, 284,
	282, 283, 260, 280, 233, 0, 722, 723, 0, 0,
	0, 652, 650, 651, 507, 313, 319, 289, 291, 456,
	0, 0, 0, 354, 0, 0, 490, 491, 0, 675,
	0, 0, 0, 0, 0, 0, 0, 0, 687, 0,
	0, 0, 699, 507, 0, 503, 505, 506, 257, 601,
	563, 564, 602, 603, 605, 0, 607, 0, 0, 0,
	0, 566, 567, 0, 584, 0, 0, 0, 669, 0,
	279, 285, 271, 0, 633, 627, 0, 629, 0, 631,
	258, 262, 0, 0, 239, 0, 0, 655, 653, 654,
	646, 0, 648, 23, 508, 290, 346, 438, 0, 362,
	369, 0, 371, 0, 374, 375, 384, 0, 0, 390,
	0, 0, 0, 0, 0, 0, 674, 676, 677, 701,
	678, 679, 680, 681, 682, 683, 684, 685, 0, 688,
	689, 690, 691, 692, 693, 694, 695, 696, 697, 698,
	498, 502, 269, 606, 608, 611, 614, 617, 573, 0,
	0, 0, 0, 0, 272, 633, 626, 628, 630, 264,
	0, 261, 234, 235, 0, 239, 0, 0, 632, 0,
	0, 464, 0, 444, 370, 400, 404, 438, 439, 440,
	361, 367, 367, 453, 0, 372, 0, 0, 0, 0,
	365, 366, 0, 355, 356, 358, 357, 700, 702, 703,
	704, 705, 706, 707, 686, 220, 270, 586, 590, 588,
	670, 671, 0, 0, 0, 625, 266, 265, 0, 240,
	0, 242, 0, 0, 0, 248, 0, 250, 251, 252,
	0, 254, 255, 256, 236, 239, 0, 0, 647, 24,
	360, 0, 438, 414, 0, 0, 402, 0, 404, 0,
	441, 438, 368, 452, 450, 453, 373, 385, 391, 0,
	0, 0, 658, 660, 661, 0, 0, 659, 657, 259,
	267, 0, 263, 241, 243, 0, 0, 247, 249, 253,
	237, 0, 656, 445, 446, 447, 401, 420, 0, 0,
	0, 413, 412, 0, 0, 448, 444, 449, 454, 386,
	387, 389, 0, 363, 0, 672, 662, 664, 663, 268,
	244, 0, 246, 239, 432, 422, 0, 415, 416, 417,
	418, 419, 405, 406, 409, 443, 451, 0, 388, 398,
	0, 392, 395, 589, 245, 238, 436, 433, 435, 427,
	423, 0, 442, 407, 408, 410, 411, 455, 399, 393,
	394, 396, 397, 403, 0, 434, 421, 0, 0, 425,
	426, 437, 0, 424, 428, 429, 430, 431,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	253, 254, 256, 3, 252, 3, 251, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 250,
	3, 255,
}

var yyTok2 = [...]uint8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if yyDollar[1].node != nil {
				stmt := yyDollar[1].node
				stmt.SetText(nextQuery(yylex))
				yylex.(*yyLexImpl).result = append(yylex.(*yyLexImpl).result, stmt)
			}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if yyDollar[3].node != nil {
				stmt := yyDollar[3].node
				stmt.SetText(nextQuery(yylex))
				yylex.(*yyLexImpl).result = append(yylex.(*yyLexImpl).result, stmt)
			}
		}
	case 13:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.node = nil
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.TableName{
				Table: yyDollar[1].anything.(*element.Identifier),
			}
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = &ast.TableName{
				Schema: yyDollar[1].anything.(*element.Identifier),
				Table:  yyDollar[3].anything.(*element.Identifier),
			}
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*element.Identifier{yyDollar[1].anything.(*element.Identifier)}
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*element.Identifier), yyDollar[3].anything.(*element.Identifier))
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.IndexName{
				Index: yyDollar[1].anything.(*element.Identifier),
			}
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = &ast.IndexName{
				Schema: yyDollar[1].anything.(*element.Identifier),
				Index:  yyDollar[3].anything.(*element.Identifier),
			}
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.SequenceName{
				Sequence: yyDollar[1].anything.(*element.Identifier),
			}
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = &ast.SequenceName{
				Schema:   yyDollar[1].anything.(*element.Identifier),
				Sequence: yyDollar[3].anything.(*element.Identifier),
			}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeNonQuoted,
				Value: yyDollar[1].str,
			}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeNonQuoted,
				Value: yyDollar[1].str,
			}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.Identifier{
				Typ:   element.IdentifierTypeQuoted,
				Value: yyDollar[1].str,
			}
		}
	case 204:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.AlterTableStmt{
				TableName:         yyDollar[3].anything.(*ast.TableName),
				AlterTableClauses: yyDollar[5].anything.([]ast.AlterTableClause),
			}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{yyDollar[1].anything.(ast.AlterTableClause)}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{yyDollar[1].anything.(ast.AlterTableClause)}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.AlterTableClause), yyDollar[2].anything.(ast.AlterTableClause))
		}
	case 214:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.anything = &ast.AddColumnClause{
				Columns: yyDollar[3].anything.([]*ast.ColumnDef),
			}
		}
	case 215:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// TODO
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// TODO
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*ast.ColumnDef{yyDollar[1].anything.(*ast.ColumnDef)}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*ast.ColumnDef), yyDollar[3].anything.(*ast.ColumnDef))
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 220:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			var collation *ast.Collation
			if yyDollar[3].anything != nil {
				collation = yyDollar[3].anything.(*ast.Collation)
			}
			props := []ast.ColumnProp{}
			sort := ast.ColumnProp(yyDollar[4].i)
			if sort != ast.ColumnPropEmpty {
				props = append(props, sort)
			}
			invisible := ast.ColumnProp(yyDollar[5].i)
			if invisible != ast.ColumnPropEmpty {
				props = append(props, invisible)
			}

			var constraints []*ast.InlineConstraint
			if yyDollar[8].anything != nil {
				constraints = yyDollar[8].anything.([]*ast.InlineConstraint)
			}

			yyVAL.anything = &ast.ColumnDef{
				ColumnName:  yyDollar[1].anything.(*element.Identifier),
				Datatype:    yyDollar[2].anything.(element.Datatype),
				Collation:   collation,
				Props:       props,
				Constraints: constraints,
			}
		}
	case 221:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.Collation{Name: yyDollar[2].anything.(*element.Identifier)}
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropEmpty)
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropSort)
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropEmpty)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropInvisible)
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.ColumnPropVisible)
		}
	case 230:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*ast.InlineConstraint{yyDollar[1].anything.(*ast.InlineConstraint)}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*ast.InlineConstraint), yyDollar[2].anything.(*ast.InlineConstraint))
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyDollar[3].anything.([]*ast.ColumnDef),
			}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyDollar[3].anything.([]*ast.ColumnDef),
			}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.ModifyColumnClause{
				Columns: yyDollar[1].anything.([]*ast.ColumnDef),
			}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*ast.ColumnDef{yyDollar[1].anything.(*ast.ColumnDef)}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*ast.ColumnDef), yyDollar[3].anything.(*ast.ColumnDef))
		}
	case 279:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			var collation *ast.Collation
			if yyDollar[3].anything != nil {
				collation = yyDollar[3].anything.(*ast.Collation)
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyDollar[1].anything.(*element.Identifier),
				Datatype:   yyDollar[2].anything.(element.Datatype),
				Collation:  collation,
				Props:      []ast.ColumnProp{},
			}
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []*ast.ColumnDef{yyDollar[1].anything.(*ast.ColumnDef)}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]*ast.ColumnDef), yyDollar[3].anything.(*ast.ColumnDef))
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyDollar[1].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{ast.ColumnProp(yyDollar[2].i)},
			}
		}
	case 289:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			prop := ast.ColumnPropSubstitutable
			if yyDollar[7].b {
				prop = ast.ColumnPropSubstitutableForce
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyDollar[2].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{prop},
			}
		}
	case 290:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			prop := ast.ColumnPropNotSubstitutable
			if yyDollar[8].b {
				prop = ast.ColumnPropNotSubstitutableForce
			}
			yyVAL.anything = &ast.ColumnDef{
				ColumnName: yyDollar[2].anything.(*element.Identifier),
				Props:      []ast.ColumnProp{prop},
			}
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.b = false
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.b = true
		}
	case 293:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			props := []ast.DropColumnProp{}
			if yyDollar[4].anything != nil {
				props = append(props, yyDollar[4].anything.([]ast.DropColumnProp)...)
			}
			online := ast.DropColumnProp(yyDollar[5].i)
			if online != ast.DropColumnPropEmpty {
				props = append(props, online)
			}
			yyVAL.anything = &ast.DropColumnClause{
				Type:    ast.DropColumnTypeSetUnused,
				Columns: yyDollar[3].anything.([]*element.Identifier),
				Props:   props,
			}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			props := []ast.DropColumnProp{}
			if yyDollar[3].anything != nil {
				props = append(props, yyDollar[3].anything.([]ast.DropColumnProp)...)
			}
			cc := &ast.DropColumnClause{
				Type:    ast.DropColumnTypeDrop,
				Columns: yyDollar[2].anything.([]*element.Identifier),
				Props:   props,
			}
			var checkout int
			if yyDollar[4].anything != nil {
				checkout = yyDollar[4].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			cc := &ast.DropColumnClause{
				Type: ast.DropColumnTypeDropUnusedColumns,
			}
			var checkout int
			if yyDollar[4].anything != nil {
				checkout = yyDollar[4].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			cc := &ast.DropColumnClause{
				Type: ast.DropColumnTypeDropColumnsContinue,
			}
			var checkout int
			if yyDollar[4].anything != nil {
				checkout = yyDollar[4].anything.(int)
				cc.CheckPoint = &checkout
			}
			yyVAL.anything = cc
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = []*element.Identifier{yyDollar[2].anything.(*element.Identifier)}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].anything
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.DropColumnProp{ast.DropColumnProp(yyDollar[1].i)}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.DropColumnProp), ast.DropColumnProp(yyDollar[2].i))
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.i = int(ast.DropColumnPropCascade)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.DropColumnPropInvalidate)
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.i = int(ast.DropColumnPropEmpty)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.i = int(ast.DropColumnPropOnline)
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].i
		}
	case 309:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.anything = &ast.RenameColumnClause{
				OldName: yyDollar[3].anything.(*element.Identifier),
				NewName: yyDollar[5].anything.(*element.Identifier),
			}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{&ast.AddConstraintClause{
				Constraints: []*ast.OutOfLineConstraint{yyDollar[2].anything.(*ast.OutOfLineConstraint)},
			}}
		}
	case 311:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Name = yyDollar[3].anything.(*element.Identifier)
			yyVAL.anything = []ast.AlterTableClause{&ast.ModifyConstraintClause{
				Constraint: constraint,
			}}
		}
	case 312:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypePK
			yyVAL.anything = []ast.AlterTableClause{&ast.ModifyConstraintClause{
				Constraint: constraint,
			}}
		}
	case 313:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeUnique
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			yyVAL.anything = []ast.AlterTableClause{&ast.ModifyConstraintClause{
				Constraint: constraint,
			}}
		}
	case 314:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{&ast.RenameConstraintClause{
				OldName: yyDollar[3].anything.(*element.Identifier),
				NewName: yyDollar[5].anything.(*element.Identifier),
			}}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.AlterTableClause{yyDollar[1].anything.(ast.AlterTableClause)}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.AlterTableClause), yyDollar[2].anything.(ast.AlterTableClause))
		}
	case 318:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypePK
			yyVAL.anything = &ast.DropConstraintClause{
				Constraint: constraint,
			}
		}
	case 319:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeUnique
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			yyVAL.anything = &ast.DropConstraintClause{
				Constraint: constraint,
			}
		}
	case 320:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Name = yyDollar[3].anything.(*element.Identifier)
			yyVAL.anything = &ast.DropConstraintClause{
				Constraint: constraint,
			}
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 329:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.node = &ast.CreateTableStmt{
				TableName: yyDollar[4].anything.(*ast.TableName),
				RelTable:  yyDollar[6].anything.(*ast.RelTableDef),
			}
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 346:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			rd := &ast.RelTableDef{}
			if yyDollar[1].anything != nil {
				rd.TableStructs = yyDollar[1].anything.([]ast.TableStructDef)
			}
			yyVAL.anything = rd
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].anything
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.anything = nil
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].anything
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.TableStructDef{yyDollar[1].anything.(ast.TableStructDef)}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.TableStructDef), yyDollar[3].anything.(ast.TableStructDef))
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 463:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.node = &ast.CreateIndexStmt{
				Type:      yyDollar[2].str,
				IndexName: yyDollar[4].anything.(*ast.IndexName),
				Index:     yyDollar[7].anything.(*ast.TableIndexClause),
			}
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 498:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			alias, _ := yyDollar[2].anything.(*element.Identifier)
			yyVAL.anything = &ast.TableIndexClause{
				TableName:  yyDollar[1].anything.(*ast.TableName),
				Alias:      alias,
				IndexExprs: yyDollar[4].anything.([]ast.IndexExpr),
			}
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = []ast.IndexExpr{yyDollar[1].anything.(ast.IndexExpr)}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.anything = append(yyDollar[1].anything.([]ast.IndexExpr), yyDollar[3].anything.(ast.IndexExpr))
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = ast.IndexExpr{
				Column:    yyDollar[1].anything.(*element.Identifier),
				Direction: yyDollar[2].str,
			}
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 515:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.DropIndexStmt{
				IndexName: yyDollar[2].anything.(*ast.IndexName),
			}
		}
	case 516:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.DropTableStmt{
				TableName: yyDollar[3].anything.(*ast.TableName),
			}
		}
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			// empty
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			// empty
		}
	case 534:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			// empty
		}
	case 535:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &ast.CommentStmt{
				Type:      yyDollar[3].str,
				TableName: yyDollar[4].anything.(*ast.TableName),
			}
		}
	case 536:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.node = &ast.CommentStmt{
				Type: yyDollar[3].str,
				TableName: &ast.TableName{
					Table: yyDollar[4].anything.(*element.Identifier),
				},
				ColumnName: yyDollar[6].anything.(*element.Identifier),
			}
		}
	case 537:
		yyDollar = yyS[yypt-10 : yypt+1]
		{
			yyVAL.node = &ast.CommentStmt{
				Type: yyDollar[3].str,
				TableName: &ast.TableName{
					Schema: yyDollar[4].anything.(*element.Identifier),
					Table:  yyDollar[6].anything.(*element.Identifier),
				},
				ColumnName: yyDollar[8].anything.(*element.Identifier),
			}
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			// empty
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.NumberOrAsterisk{Number: yyDollar[1].i}
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &element.NumberOrAsterisk{IsAsterisk: true}
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Char{}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 562:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Char{Size: &size}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 563:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Char{Size: &size, IsByteSize: true}
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 564:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Char{Size: &size, IsCharSize: true}
			d.SetDataDef(element.DataDefChar)
			d.SetDataDef(element.DataDefChar)
			yyVAL.anything = d
		}
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 566:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Varchar2{}
			d.Size = &size
			d.IsByteSize = true
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 567:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Varchar2{}
			d.Size = &size
			d.IsCharSize = true
			d.SetDataDef(element.DataDefVarchar2)
			yyVAL.anything = d
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.NChar{}
			d.SetDataDef(element.DataDefNChar)
			yyVAL.anything = d
		}
	case 569:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNChar)
			yyVAL.anything = d
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNVarChar2)
			yyVAL.anything = d
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 573:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			scale := yyDollar[5].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefNumber)
			yyVAL.anything = d
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Float{}
			d.SetDataDef(element.DataDefFloat)
			yyVAL.anything = d
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefFloat)
			yyVAL.anything = d
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.BinaryFloat{}
			d.SetDataDef(element.DataDefBinaryFloat)
			yyVAL.anything = d
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.BinaryDouble{}
			d.SetDataDef(element.DataDefBinaryDouble)
			yyVAL.anything = d
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Long{}
			d.SetDataDef(element.DataDefLong)
			yyVAL.anything = d
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			d := &element.LongRaw{}
			d.SetDataDef(element.DataDefLongRaw)
			yyVAL.anything = d
		}
	case 580:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Raw{Size: &size}
			d.SetDataDef(element.DataDefRaw)
			yyVAL.anything = d
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Date{}
			d.SetDataDef(element.DataDefDate)
			yyVAL.anything = d
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			d := yyDollar[1].anything.(*element.Timestamp)
			d.WithTimeZone = true
			yyVAL.anything = d
		}
	case 584:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			d := yyDollar[1].anything.(*element.Timestamp)
			d.WithLocalTimeZone = true
			yyVAL.anything = d
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			d := &element.IntervalYear{}
			d.SetDataDef(element.DataDefIntervalYear)
			yyVAL.anything = d
		}
	case 586:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			precision := yyDollar[4].i
			d := &element.IntervalYear{Precision: &precision}
			d.SetDataDef(element.DataDefIntervalYear)
			yyVAL.anything = d
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			d := &element.IntervalDay{}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 588:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			precision := yyDollar[4].i
			d := &element.IntervalDay{Precision: &precision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 589:
		yyDollar = yyS[yypt-10 : yypt+1]
		{
			precision := yyDollar[4].i
			sPrecision := yyDollar[9].i
			d := &element.IntervalDay{Precision: &precision, FractionalSecondsPrecision: &sPrecision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 590:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			sPrecision := yyDollar[6].i
			d := &element.IntervalDay{FractionalSecondsPrecision: &sPrecision}
			d.SetDataDef(element.DataDefIntervalDay)
			yyVAL.anything = d
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Timestamp{}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].i
			d := &element.Timestamp{FractionalSecondsPrecision: &precision}
			d.SetDataDef(element.DataDefTimestamp)
			yyVAL.anything = d
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Blob{}
			d.SetDataDef(element.DataDefBlob)
			yyVAL.anything = d
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Clob{}
			d.SetDataDef(element.DataDefClob)
			yyVAL.anything = d
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.NClob{}
			d.SetDataDef(element.DataDefNClob)
			yyVAL.anything = d
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.BFile{}
			d.SetDataDef(element.DataDefBFile)
			yyVAL.anything = d
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.RowId{}
			d.SetDataDef(element.DataDefRowId)
			yyVAL.anything = d
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.URowId{}
			d.SetDataDef(element.DataDefURowId)
			yyVAL.anything = d
		}
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.URowId{Size: &size}
			d.SetDataDef(element.DataDefURowId)
			yyVAL.anything = d
		}
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Char{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharacter)
			yyVAL.anything = d
		}
	case 601:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharacterVarying)
			yyVAL.anything = d
		}
	case 602:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefCharVarying)
			yyVAL.anything = d
		}
	case 603:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNCharVarying)
			yyVAL.anything = d
		}
	case 604:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			size := yyDollar[3].i
			d := &element.Varchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefVarchar)
			yyVAL.anything = d
		}
	case 605:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNationalCharacter)
			yyVAL.anything = d
		}
	case 606:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			size := yyDollar[5].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNationalCharacterVarying)
			yyVAL.anything = d
		}
	case 607:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			size := yyDollar[4].i
			d := &element.NChar{Size: &size}
			d.SetDataDef(element.DataDefNationalChar)
			yyVAL.anything = d
		}
	case 608:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			size := yyDollar[5].i
			d := &element.NVarchar2{}
			d.Size = &size
			d.SetDataDef(element.DataDefNationalCharVarying)
			yyVAL.anything = d
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 610:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 611:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			scale := yyDollar[5].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefNumeric)
			yyVAL.anything = d
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 613:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 614:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			scale := yyDollar[5].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefDecimal)
			yyVAL.anything = d
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.Number{}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 617:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			precision := yyDollar[3].anything.(*element.NumberOrAsterisk)
			scale := yyDollar[5].i
			d := &element.Number{Precision: precision, Scale: &scale}
			d.SetDataDef(element.DataDefDec)
			yyVAL.anything = d
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefInteger)
			yyVAL.anything = d
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefInt)
			yyVAL.anything = d
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 38}
			d := &element.Number{Precision: precision}
			d.SetDataDef(element.DataDefSmallInt)
			yyVAL.anything = d
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 126}
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefDoublePrecision)
			yyVAL.anything = d
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			precision := &element.NumberOrAsterisk{Number: 63}
			d := &element.Float{Precision: precision}
			d.SetDataDef(element.DataDefReal)
			yyVAL.anything = d
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			d := &element.XMLType{}
			d.SetDataDef(element.DataDefXMLType)
			yyVAL.anything = d
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = yyDollar[2].anything
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			constraint := yyDollar[2].anything.(*ast.InlineConstraint)
			constraint.Name = yyDollar[1].anything.(*element.Identifier)
			yyVAL.anything = constraint
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypeNull,
			}
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypeNotNull,
			}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypeUnique,
			}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypePK,
			}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = &ast.InlineConstraint{
				Type: ast.ConstraintTypeReferences,
			}
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 642:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 645:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 649:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 652:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 655:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 657:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			clause := &ast.ReferenceClause{}
			clause.Columns = yyDollar[4].anything.([]*element.Identifier)
			clause.Table = yyDollar[2].anything.(*ast.TableName)
			yyVAL.anything = clause
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.ReferenceOption{
				Type: yyDollar[2].anything.(ast.ReferenceAction),
			}
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = &ast.ReferenceOption{
				Type: yyDollar[2].anything.(ast.ReferenceAction),
			}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = ast.RefOptRestrict
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = ast.RefOptCascade
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = ast.RefOptSetNull
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = ast.RefOptNoAction
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.anything = ast.RefOptSetDefault
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			constraint := yyDollar[2].anything.(*ast.OutOfLineConstraint)
			constraint.Name = yyDollar[1].anything.(*element.Identifier)
			yyVAL.anything = constraint
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.anything = yyDollar[1].anything
		}
	case 667:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeUnique
			constraint.Columns = yyDollar[3].anything.([]*element.Identifier)
			yyVAL.anything = constraint
		}
	case 668:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypePK
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			yyVAL.anything = constraint
		}
	case 669:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeReferences
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			constraint.Reference = yyDollar[6].anything.(*ast.ReferenceClause)
			yyVAL.anything = constraint
		}
	case 670:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeReferences
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			constraint.Reference = yyDollar[6].anything.(*ast.ReferenceClause)
			constraint.UpdateAction = yyDollar[9].anything.(*ast.ReferenceOption)
			yyVAL.anything = constraint
		}
	case 671:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeReferences
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			constraint.Reference = yyDollar[6].anything.(*ast.ReferenceClause)
			constraint.DeleteAction = yyDollar[9].anything.(*ast.ReferenceOption)
			yyVAL.anything = constraint
		}
	case 672:
		yyDollar = yyS[yypt-11 : yypt+1]
		{
			constraint := &ast.OutOfLineConstraint{}
			constraint.Type = ast.ConstraintTypeReferences
			constraint.Columns = yyDollar[4].anything.([]*element.Identifier)
			constraint.Reference = yyDollar[6].anything.(*ast.ReferenceClause)
			constraint.UpdateAction = yyDollar[9].anything.(*ast.ReferenceOption)
			constraint.DeleteAction = yyDollar[11].anything.(*ast.ReferenceOption)
			yyVAL.anything = constraint
		}
	case 673:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.anything = &ast.OutOfLineConstraint{}
		}
	case 701:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 708:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	case 716:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			// empty
		}
	}
	goto yystack /* stack new state and value */
}
